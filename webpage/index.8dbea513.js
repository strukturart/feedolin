(function () {

      var $parcel$global =
        typeof globalThis !== 'undefined'
          ? globalThis
          : typeof self !== 'undefined'
          ? self
          : typeof window !== 'undefined'
          ? window
          : typeof global !== 'undefined'
          ? global
          : {};
  
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire5393"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire5393"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("ahPL4", function(module, exports) {
"use strict";
function $77d3a4009e38b328$var$Vnode(tag, key, attrs, children, text, dom) {
    return {
        tag: tag,
        key: key,
        attrs: attrs,
        children: children,
        text: text,
        dom: dom,
        domSize: undefined,
        state: undefined,
        events: undefined,
        instance: undefined
    };
}
$77d3a4009e38b328$var$Vnode.normalize = function(node) {
    if (Array.isArray(node)) return $77d3a4009e38b328$var$Vnode("[", undefined, undefined, $77d3a4009e38b328$var$Vnode.normalizeChildren(node), undefined, undefined);
    if (node == null || typeof node === "boolean") return null;
    if (typeof node === "object") return node;
    return $77d3a4009e38b328$var$Vnode("#", undefined, undefined, String(node), undefined, undefined);
};
$77d3a4009e38b328$var$Vnode.normalizeChildren = function(input) {
    var children = [];
    if (input.length) {
        var isKeyed = input[0] != null && input[0].key != null;
        // Note: this is a *very* perf-sensitive check.
        // Fun fact: merging the loop like this is somehow faster than splitting
        // it, noticeably so.
        for(var i = 1; i < input.length; i++){
            if ((input[i] != null && input[i].key != null) !== isKeyed) throw new TypeError(isKeyed && (input[i] != null || typeof input[i] === "boolean") ? "In fragments, vnodes must either all have keys or none have keys. You may wish to consider using an explicit keyed empty fragment, m.fragment({key: ...}), instead of a hole." : "In fragments, vnodes must either all have keys or none have keys.");
        }
        for(var i = 0; i < input.length; i++)children[i] = $77d3a4009e38b328$var$Vnode.normalize(input[i]);
    }
    return children;
};
module.exports = $77d3a4009e38b328$var$Vnode;

});

parcelRegister("hc09f", function(module, exports) {
"use strict";

var $ahPL4 = parcelRequire("ahPL4");
module.exports = function(html) {
    if (html == null) html = "";
    return $ahPL4("<", undefined, undefined, html, undefined, undefined);
};

});

parcelRegister("uUr9B", function(module, exports) {
"use strict";

var $ahPL4 = parcelRequire("ahPL4");

var $lNZGj = parcelRequire("lNZGj");
module.exports = function() {
    var vnode = $lNZGj.apply(0, arguments);
    vnode.tag = "[";
    vnode.children = $ahPL4.normalizeChildren(vnode.children);
    return vnode;
};

});
parcelRegister("lNZGj", function(module, exports) {
"use strict";

var $ahPL4 = parcelRequire("ahPL4");
// Call via `hyperscriptVnode.apply(startOffset, arguments)`
//
// The reason I do it this way, forwarding the arguments and passing the start
// offset in `this`, is so I don't have to create a temporary array in a
// performance-critical path.
//
// In native ES6, I'd instead add a final `...args` parameter to the
// `hyperscript` and `fragment` factories and define this as
// `hyperscriptVnode(...args)`, since modern engines do optimize that away. But
// ES5 (what Mithril.js requires thanks to IE support) doesn't give me that luxury,
// and engines aren't nearly intelligent enough to do either of these:
//
// 1. Elide the allocation for `[].slice.call(arguments, 1)` when it's passed to
//    another function only to be indexed.
// 2. Elide an `arguments` allocation when it's passed to any function other
//    than `Function.prototype.apply` or `Reflect.apply`.
//
// In ES6, it'd probably look closer to this (I'd need to profile it, though):
// module.exports = function(attrs, ...children) {
//     if (attrs == null || typeof attrs === "object" && attrs.tag == null && !Array.isArray(attrs)) {
//         if (children.length === 1 && Array.isArray(children[0])) children = children[0]
//     } else {
//         children = children.length === 0 && Array.isArray(attrs) ? attrs : [attrs, ...children]
//         attrs = undefined
//     }
//
//     if (attrs == null) attrs = {}
//     return Vnode("", attrs.key, attrs, children)
// }
module.exports = function() {
    var attrs = arguments[this], start = this + 1, children;
    if (attrs == null) attrs = {};
    else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {
        attrs = {};
        start = this;
    }
    if (arguments.length === start + 1) {
        children = arguments[start];
        if (!Array.isArray(children)) children = [
            children
        ];
    } else {
        children = [];
        while(start < arguments.length)children.push(arguments[start++]);
    }
    return $ahPL4("", attrs.key, attrs, children);
};

});


parcelRegister("4kqT7", function(module, exports) {
"use strict";
/** @constructor */ var $326de31341d20e95$var$PromisePolyfill = function PromisePolyfill1(executor) {
    if (!(this instanceof $326de31341d20e95$var$PromisePolyfill)) throw new Error("Promise must be called with 'new'.");
    if (typeof executor !== "function") throw new TypeError("executor must be a function.");
    var self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false);
    var instance = self._instance = {
        resolvers: resolvers,
        rejectors: rejectors
    };
    var callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout;
    function handler(list, shouldAbsorb) {
        return function execute(value) {
            var then;
            try {
                if (shouldAbsorb && value != null && (typeof value === "object" || typeof value === "function") && typeof (then = value.then) === "function") {
                    if (value === self) throw new TypeError("Promise can't be resolved with itself.");
                    executeOnce(then.bind(value));
                } else callAsync(function() {
                    if (!shouldAbsorb && list.length === 0) console.error("Possible unhandled promise rejection:", value);
                    for(var i = 0; i < list.length; i++)list[i](value);
                    resolvers.length = 0, rejectors.length = 0;
                    instance.state = shouldAbsorb;
                    instance.retry = function() {
                        execute(value);
                    };
                });
            } catch (e) {
                rejectCurrent(e);
            }
        };
    }
    function executeOnce(then) {
        var runs = 0;
        function run(fn) {
            return function(value) {
                if (runs++ > 0) return;
                fn(value);
            };
        }
        var onerror = run(rejectCurrent);
        try {
            then(run(resolveCurrent), onerror);
        } catch (e) {
            onerror(e);
        }
    }
    executeOnce(executor);
};
$326de31341d20e95$var$PromisePolyfill.prototype.then = function(onFulfilled, onRejection) {
    var self = this, instance = self._instance;
    function handle(callback, list, next, state) {
        list.push(function(value) {
            if (typeof callback !== "function") next(value);
            else try {
                resolveNext(callback(value));
            } catch (e) {
                if (rejectNext) rejectNext(e);
            }
        });
        if (typeof instance.retry === "function" && state === instance.state) instance.retry();
    }
    var resolveNext, rejectNext;
    var promise = new $326de31341d20e95$var$PromisePolyfill(function(resolve, reject) {
        resolveNext = resolve, rejectNext = reject;
    });
    handle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false);
    return promise;
};
$326de31341d20e95$var$PromisePolyfill.prototype.catch = function(onRejection) {
    return this.then(null, onRejection);
};
$326de31341d20e95$var$PromisePolyfill.prototype.finally = function(callback) {
    return this.then(function(value) {
        return $326de31341d20e95$var$PromisePolyfill.resolve(callback()).then(function() {
            return value;
        });
    }, function(reason) {
        return $326de31341d20e95$var$PromisePolyfill.resolve(callback()).then(function() {
            return $326de31341d20e95$var$PromisePolyfill.reject(reason);
        });
    });
};
$326de31341d20e95$var$PromisePolyfill.resolve = function(value) {
    if (value instanceof $326de31341d20e95$var$PromisePolyfill) return value;
    return new $326de31341d20e95$var$PromisePolyfill(function(resolve) {
        resolve(value);
    });
};
$326de31341d20e95$var$PromisePolyfill.reject = function(value) {
    return new $326de31341d20e95$var$PromisePolyfill(function(resolve, reject) {
        reject(value);
    });
};
$326de31341d20e95$var$PromisePolyfill.all = function(list) {
    return new $326de31341d20e95$var$PromisePolyfill(function(resolve, reject) {
        var total = list.length, count = 0, values = [];
        if (list.length === 0) resolve([]);
        else for(var i = 0; i < list.length; i++)(function(i) {
            function consume(value) {
                count++;
                values[i] = value;
                if (count === total) resolve(values);
            }
            if (list[i] != null && (typeof list[i] === "object" || typeof list[i] === "function") && typeof list[i].then === "function") list[i].then(consume, reject);
            else consume(list[i]);
        })(i);
    });
};
$326de31341d20e95$var$PromisePolyfill.race = function(list) {
    return new $326de31341d20e95$var$PromisePolyfill(function(resolve, reject) {
        for(var i = 0; i < list.length; i++)list[i].then(resolve, reject);
    });
};
module.exports = $326de31341d20e95$var$PromisePolyfill;

});

parcelRegister("iHb4t", function(module, exports) {
"use strict";

module.exports = (parcelRequire("lNBAB"))(typeof window !== "undefined" ? window : null);

});
parcelRegister("lNBAB", function(module, exports) {
"use strict";

var $ahPL4 = parcelRequire("ahPL4");
module.exports = function($window) {
    var $doc = $window && $window.document;
    var currentRedraw;
    var nameSpace = {
        svg: "http://www.w3.org/2000/svg",
        math: "http://www.w3.org/1998/Math/MathML"
    };
    function getNameSpace(vnode) {
        return vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag];
    }
    //sanity check to discourage people from doing `vnode.state = ...`
    function checkState(vnode, original) {
        if (vnode.state !== original) throw new Error("'vnode.state' must not be modified.");
    }
    //Note: the hook is passed as the `this` argument to allow proxying the
    //arguments without requiring a full array allocation to do so. It also
    //takes advantage of the fact the current `vnode` is the first argument in
    //all lifecycle methods.
    function callHook(vnode) {
        var original = vnode.state;
        try {
            return this.apply(original, arguments);
        } finally{
            checkState(vnode, original);
        }
    }
    // IE11 (at least) throws an UnspecifiedError when accessing document.activeElement when
    // inside an iframe. Catch and swallow this error, and heavy-handidly return null.
    function activeElement() {
        try {
            return $doc.activeElement;
        } catch (e) {
            return null;
        }
    }
    //create
    function createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {
        for(var i = start; i < end; i++){
            var vnode = vnodes[i];
            if (vnode != null) createNode(parent, vnode, hooks, ns, nextSibling);
        }
    }
    function createNode(parent, vnode, hooks, ns, nextSibling) {
        var tag = vnode.tag;
        if (typeof tag === "string") {
            vnode.state = {};
            if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks);
            switch(tag){
                case "#":
                    createText(parent, vnode, nextSibling);
                    break;
                case "<":
                    createHTML(parent, vnode, ns, nextSibling);
                    break;
                case "[":
                    createFragment(parent, vnode, hooks, ns, nextSibling);
                    break;
                default:
                    createElement(parent, vnode, hooks, ns, nextSibling);
            }
        } else createComponent(parent, vnode, hooks, ns, nextSibling);
    }
    function createText(parent, vnode, nextSibling) {
        vnode.dom = $doc.createTextNode(vnode.children);
        insertNode(parent, vnode.dom, nextSibling);
    }
    var possibleParents = {
        caption: "table",
        thead: "table",
        tbody: "table",
        tfoot: "table",
        tr: "tbody",
        th: "tr",
        td: "tr",
        colgroup: "table",
        col: "colgroup"
    };
    function createHTML(parent, vnode, ns, nextSibling) {
        var match = vnode.children.match(/^\s*?<(\w+)/im) || [];
        // not using the proper parent makes the child element(s) vanish.
        //     var div = document.createElement("div")
        //     div.innerHTML = "<td>i</td><td>j</td>"
        //     console.log(div.innerHTML)
        // --> "ij", no <td> in sight.
        var temp = $doc.createElement(possibleParents[match[1]] || "div");
        if (ns === "http://www.w3.org/2000/svg") {
            temp.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg">' + vnode.children + "</svg>";
            temp = temp.firstChild;
        } else temp.innerHTML = vnode.children;
        vnode.dom = temp.firstChild;
        vnode.domSize = temp.childNodes.length;
        // Capture nodes to remove, so we don't confuse them.
        vnode.instance = [];
        var fragment = $doc.createDocumentFragment();
        var child;
        while(child = temp.firstChild){
            vnode.instance.push(child);
            fragment.appendChild(child);
        }
        insertNode(parent, fragment, nextSibling);
    }
    function createFragment(parent, vnode, hooks, ns, nextSibling) {
        var fragment = $doc.createDocumentFragment();
        if (vnode.children != null) {
            var children = vnode.children;
            createNodes(fragment, children, 0, children.length, hooks, null, ns);
        }
        vnode.dom = fragment.firstChild;
        vnode.domSize = fragment.childNodes.length;
        insertNode(parent, fragment, nextSibling);
    }
    function createElement(parent, vnode, hooks, ns, nextSibling) {
        var tag = vnode.tag;
        var attrs = vnode.attrs;
        var is = attrs && attrs.is;
        ns = getNameSpace(vnode) || ns;
        var element = ns ? is ? $doc.createElementNS(ns, tag, {
            is: is
        }) : $doc.createElementNS(ns, tag) : is ? $doc.createElement(tag, {
            is: is
        }) : $doc.createElement(tag);
        vnode.dom = element;
        if (attrs != null) setAttrs(vnode, attrs, ns);
        insertNode(parent, element, nextSibling);
        if (!maybeSetContentEditable(vnode)) {
            if (vnode.children != null) {
                var children = vnode.children;
                createNodes(element, children, 0, children.length, hooks, null, ns);
                if (vnode.tag === "select" && attrs != null) setLateSelectAttrs(vnode, attrs);
            }
        }
    }
    function initComponent(vnode, hooks) {
        var sentinel;
        if (typeof vnode.tag.view === "function") {
            vnode.state = Object.create(vnode.tag);
            sentinel = vnode.state.view;
            if (sentinel.$$reentrantLock$$ != null) return;
            sentinel.$$reentrantLock$$ = true;
        } else {
            vnode.state = void 0;
            sentinel = vnode.tag;
            if (sentinel.$$reentrantLock$$ != null) return;
            sentinel.$$reentrantLock$$ = true;
            vnode.state = vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function" ? new vnode.tag(vnode) : vnode.tag(vnode);
        }
        initLifecycle(vnode.state, vnode, hooks);
        if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks);
        vnode.instance = $ahPL4.normalize(callHook.call(vnode.state.view, vnode));
        if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument");
        sentinel.$$reentrantLock$$ = null;
    }
    function createComponent(parent, vnode, hooks, ns, nextSibling) {
        initComponent(vnode, hooks);
        if (vnode.instance != null) {
            createNode(parent, vnode.instance, hooks, ns, nextSibling);
            vnode.dom = vnode.instance.dom;
            vnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0;
        } else vnode.domSize = 0;
    }
    //update
    /**
	 * @param {Element|Fragment} parent - the parent element
	 * @param {Vnode[] | null} old - the list of vnodes of the last `render()` call for
	 *                               this part of the tree
	 * @param {Vnode[] | null} vnodes - as above, but for the current `render()` call.
	 * @param {Function[]} hooks - an accumulator of post-render hooks (oncreate/onupdate)
	 * @param {Element | null} nextSibling - the next DOM node if we're dealing with a
	 *                                       fragment that is not the last item in its
	 *                                       parent
	 * @param {'svg' | 'math' | String | null} ns) - the current XML namespace, if any
	 * @returns void
	 */ // This function diffs and patches lists of vnodes, both keyed and unkeyed.
    //
    // We will:
    //
    // 1. describe its general structure
    // 2. focus on the diff algorithm optimizations
    // 3. discuss DOM node operations.
    // ## Overview:
    //
    // The updateNodes() function:
    // - deals with trivial cases
    // - determines whether the lists are keyed or unkeyed based on the first non-null node
    //   of each list.
    // - diffs them and patches the DOM if needed (that's the brunt of the code)
    // - manages the leftovers: after diffing, are there:
    //   - old nodes left to remove?
    // 	 - new nodes to insert?
    // 	 deal with them!
    //
    // The lists are only iterated over once, with an exception for the nodes in `old` that
    // are visited in the fourth part of the diff and in the `removeNodes` loop.
    // ## Diffing
    //
    // Reading https://github.com/localvoid/ivi/blob/ddc09d06abaef45248e6133f7040d00d3c6be853/packages/ivi/src/vdom/implementation.ts#L617-L837
    // may be good for context on longest increasing subsequence-based logic for moving nodes.
    //
    // In order to diff keyed lists, one has to
    //
    // 1) match nodes in both lists, per key, and update them accordingly
    // 2) create the nodes present in the new list, but absent in the old one
    // 3) remove the nodes present in the old list, but absent in the new one
    // 4) figure out what nodes in 1) to move in order to minimize the DOM operations.
    //
    // To achieve 1) one can create a dictionary of keys => index (for the old list), then iterate
    // over the new list and for each new vnode, find the corresponding vnode in the old list using
    // the map.
    // 2) is achieved in the same step: if a new node has no corresponding entry in the map, it is new
    // and must be created.
    // For the removals, we actually remove the nodes that have been updated from the old list.
    // The nodes that remain in that list after 1) and 2) have been performed can be safely removed.
    // The fourth step is a bit more complex and relies on the longest increasing subsequence (LIS)
    // algorithm.
    //
    // the longest increasing subsequence is the list of nodes that can remain in place. Imagine going
    // from `1,2,3,4,5` to `4,5,1,2,3` where the numbers are not necessarily the keys, but the indices
    // corresponding to the keyed nodes in the old list (keyed nodes `e,d,c,b,a` => `b,a,e,d,c` would
    //  match the above lists, for example).
    //
    // In there are two increasing subsequences: `4,5` and `1,2,3`, the latter being the longest. We
    // can update those nodes without moving them, and only call `insertNode` on `4` and `5`.
    //
    // @localvoid adapted the algo to also support node deletions and insertions (the `lis` is actually
    // the longest increasing subsequence *of old nodes still present in the new list*).
    //
    // It is a general algorithm that is fireproof in all circumstances, but it requires the allocation
    // and the construction of a `key => oldIndex` map, and three arrays (one with `newIndex => oldIndex`,
    // the `LIS` and a temporary one to create the LIS).
    //
    // So we cheat where we can: if the tails of the lists are identical, they are guaranteed to be part of
    // the LIS and can be updated without moving them.
    //
    // If two nodes are swapped, they are guaranteed not to be part of the LIS, and must be moved (with
    // the exception of the last node if the list is fully reversed).
    //
    // ## Finding the next sibling.
    //
    // `updateNode()` and `createNode()` expect a nextSibling parameter to perform DOM operations.
    // When the list is being traversed top-down, at any index, the DOM nodes up to the previous
    // vnode reflect the content of the new list, whereas the rest of the DOM nodes reflect the old
    // list. The next sibling must be looked for in the old list using `getNextSibling(... oldStart + 1 ...)`.
    //
    // In the other scenarios (swaps, upwards traversal, map-based diff),
    // the new vnodes list is traversed upwards. The DOM nodes at the bottom of the list reflect the
    // bottom part of the new vnodes list, and we can use the `v.dom`  value of the previous node
    // as the next sibling (cached in the `nextSibling` variable).
    // ## DOM node moves
    //
    // In most scenarios `updateNode()` and `createNode()` perform the DOM operations. However,
    // this is not the case if the node moved (second and fourth part of the diff algo). We move
    // the old DOM nodes before updateNode runs because it enables us to use the cached `nextSibling`
    // variable rather than fetching it using `getNextSibling()`.
    //
    // The fourth part of the diff currently inserts nodes unconditionally, leading to issues
    // like #1791 and #1999. We need to be smarter about those situations where adjascent old
    // nodes remain together in the new list in a way that isn't covered by parts one and
    // three of the diff algo.
    function updateNodes(parent, old, vnodes, hooks, nextSibling, ns) {
        if (old === vnodes || old == null && vnodes == null) return;
        else if (old == null || old.length === 0) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns);
        else if (vnodes == null || vnodes.length === 0) removeNodes(parent, old, 0, old.length);
        else {
            var isOldKeyed = old[0] != null && old[0].key != null;
            var isKeyed = vnodes[0] != null && vnodes[0].key != null;
            var start = 0, oldStart = 0;
            if (!isOldKeyed) while(oldStart < old.length && old[oldStart] == null)oldStart++;
            if (!isKeyed) while(start < vnodes.length && vnodes[start] == null)start++;
            if (isOldKeyed !== isKeyed) {
                removeNodes(parent, old, oldStart, old.length);
                createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns);
            } else if (!isKeyed) {
                // Don't index past the end of either list (causes deopts).
                var commonLength = old.length < vnodes.length ? old.length : vnodes.length;
                // Rewind if necessary to the first non-null index on either side.
                // We could alternatively either explicitly create or remove nodes when `start !== oldStart`
                // but that would be optimizing for sparse lists which are more rare than dense ones.
                start = start < oldStart ? start : oldStart;
                for(; start < commonLength; start++){
                    o = old[start];
                    v = vnodes[start];
                    if (o === v || o == null && v == null) continue;
                    else if (o == null) createNode(parent, v, hooks, ns, getNextSibling(old, start + 1, nextSibling));
                    else if (v == null) removeNode(parent, o);
                    else updateNode(parent, o, v, hooks, getNextSibling(old, start + 1, nextSibling), ns);
                }
                if (old.length > commonLength) removeNodes(parent, old, start, old.length);
                if (vnodes.length > commonLength) createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns);
            } else {
                // keyed diff
                var oldEnd = old.length - 1, end = vnodes.length - 1, map, o, v, oe, ve, topSibling;
                // bottom-up
                while(oldEnd >= oldStart && end >= start){
                    oe = old[oldEnd];
                    ve = vnodes[end];
                    if (oe.key !== ve.key) break;
                    if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);
                    if (ve.dom != null) nextSibling = ve.dom;
                    oldEnd--, end--;
                }
                // top-down
                while(oldEnd >= oldStart && end >= start){
                    o = old[oldStart];
                    v = vnodes[start];
                    if (o.key !== v.key) break;
                    oldStart++, start++;
                    if (o !== v) updateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), ns);
                }
                // swaps and list reversals
                while(oldEnd >= oldStart && end >= start){
                    if (start === end) break;
                    if (o.key !== ve.key || oe.key !== v.key) break;
                    topSibling = getNextSibling(old, oldStart, nextSibling);
                    moveNodes(parent, oe, topSibling);
                    if (oe !== v) updateNode(parent, oe, v, hooks, topSibling, ns);
                    if (++start <= --end) moveNodes(parent, o, nextSibling);
                    if (o !== ve) updateNode(parent, o, ve, hooks, nextSibling, ns);
                    if (ve.dom != null) nextSibling = ve.dom;
                    oldStart++;
                    oldEnd--;
                    oe = old[oldEnd];
                    ve = vnodes[end];
                    o = old[oldStart];
                    v = vnodes[start];
                }
                // bottom up once again
                while(oldEnd >= oldStart && end >= start){
                    if (oe.key !== ve.key) break;
                    if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);
                    if (ve.dom != null) nextSibling = ve.dom;
                    oldEnd--, end--;
                    oe = old[oldEnd];
                    ve = vnodes[end];
                }
                if (start > end) removeNodes(parent, old, oldStart, oldEnd + 1);
                else if (oldStart > oldEnd) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns);
                else {
                    // inspired by ivi https://github.com/ivijs/ivi/ by Boris Kaul
                    var originalNextSibling = nextSibling, vnodesLength = end - start + 1, oldIndices = new Array(vnodesLength), li = 0, i = 0, pos = 2147483647, matched = 0, map, lisIndices;
                    for(i = 0; i < vnodesLength; i++)oldIndices[i] = -1;
                    for(i = end; i >= start; i--){
                        if (map == null) map = getKeyMap(old, oldStart, oldEnd + 1);
                        ve = vnodes[i];
                        var oldIndex = map[ve.key];
                        if (oldIndex != null) {
                            pos = oldIndex < pos ? oldIndex : -1 // becomes -1 if nodes were re-ordered
                            ;
                            oldIndices[i - start] = oldIndex;
                            oe = old[oldIndex];
                            old[oldIndex] = null;
                            if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);
                            if (ve.dom != null) nextSibling = ve.dom;
                            matched++;
                        }
                    }
                    nextSibling = originalNextSibling;
                    if (matched !== oldEnd - oldStart + 1) removeNodes(parent, old, oldStart, oldEnd + 1);
                    if (matched === 0) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns);
                    else {
                        if (pos === -1) {
                            // the indices of the indices of the items that are part of the
                            // longest increasing subsequence in the oldIndices list
                            lisIndices = makeLisIndices(oldIndices);
                            li = lisIndices.length - 1;
                            for(i = end; i >= start; i--){
                                v = vnodes[i];
                                if (oldIndices[i - start] === -1) createNode(parent, v, hooks, ns, nextSibling);
                                else if (lisIndices[li] === i - start) li--;
                                else moveNodes(parent, v, nextSibling);
                                if (v.dom != null) nextSibling = vnodes[i].dom;
                            }
                        } else for(i = end; i >= start; i--){
                            v = vnodes[i];
                            if (oldIndices[i - start] === -1) createNode(parent, v, hooks, ns, nextSibling);
                            if (v.dom != null) nextSibling = vnodes[i].dom;
                        }
                    }
                }
            }
        }
    }
    function updateNode(parent, old, vnode, hooks, nextSibling, ns) {
        var oldTag = old.tag, tag = vnode.tag;
        if (oldTag === tag) {
            vnode.state = old.state;
            vnode.events = old.events;
            if (shouldNotUpdate(vnode, old)) return;
            if (typeof oldTag === "string") {
                if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks);
                switch(oldTag){
                    case "#":
                        updateText(old, vnode);
                        break;
                    case "<":
                        updateHTML(parent, old, vnode, ns, nextSibling);
                        break;
                    case "[":
                        updateFragment(parent, old, vnode, hooks, nextSibling, ns);
                        break;
                    default:
                        updateElement(old, vnode, hooks, ns);
                }
            } else updateComponent(parent, old, vnode, hooks, nextSibling, ns);
        } else {
            removeNode(parent, old);
            createNode(parent, vnode, hooks, ns, nextSibling);
        }
    }
    function updateText(old, vnode) {
        if (old.children.toString() !== vnode.children.toString()) old.dom.nodeValue = vnode.children;
        vnode.dom = old.dom;
    }
    function updateHTML(parent, old, vnode, ns, nextSibling) {
        if (old.children !== vnode.children) {
            removeHTML(parent, old);
            createHTML(parent, vnode, ns, nextSibling);
        } else {
            vnode.dom = old.dom;
            vnode.domSize = old.domSize;
            vnode.instance = old.instance;
        }
    }
    function updateFragment(parent, old, vnode, hooks, nextSibling, ns) {
        updateNodes(parent, old.children, vnode.children, hooks, nextSibling, ns);
        var domSize = 0, children = vnode.children;
        vnode.dom = null;
        if (children != null) {
            for(var i = 0; i < children.length; i++){
                var child = children[i];
                if (child != null && child.dom != null) {
                    if (vnode.dom == null) vnode.dom = child.dom;
                    domSize += child.domSize || 1;
                }
            }
            if (domSize !== 1) vnode.domSize = domSize;
        }
    }
    function updateElement(old, vnode, hooks, ns) {
        var element = vnode.dom = old.dom;
        ns = getNameSpace(vnode) || ns;
        if (vnode.tag === "textarea") {
            if (vnode.attrs == null) vnode.attrs = {};
        }
        updateAttrs(vnode, old.attrs, vnode.attrs, ns);
        if (!maybeSetContentEditable(vnode)) updateNodes(element, old.children, vnode.children, hooks, null, ns);
    }
    function updateComponent(parent, old, vnode, hooks, nextSibling, ns) {
        vnode.instance = $ahPL4.normalize(callHook.call(vnode.state.view, vnode));
        if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument");
        updateLifecycle(vnode.state, vnode, hooks);
        if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks);
        if (vnode.instance != null) {
            if (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling);
            else updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, ns);
            vnode.dom = vnode.instance.dom;
            vnode.domSize = vnode.instance.domSize;
        } else if (old.instance != null) {
            removeNode(parent, old.instance);
            vnode.dom = undefined;
            vnode.domSize = 0;
        } else {
            vnode.dom = old.dom;
            vnode.domSize = old.domSize;
        }
    }
    function getKeyMap(vnodes, start, end) {
        var map = Object.create(null);
        for(; start < end; start++){
            var vnode = vnodes[start];
            if (vnode != null) {
                var key = vnode.key;
                if (key != null) map[key] = start;
            }
        }
        return map;
    }
    // Lifted from ivi https://github.com/ivijs/ivi/
    // takes a list of unique numbers (-1 is special and can
    // occur multiple times) and returns an array with the indices
    // of the items that are part of the longest increasing
    // subsequence
    var lisTemp = [];
    function makeLisIndices(a) {
        var result = [
            0
        ];
        var u = 0, v = 0, i = 0;
        var il = lisTemp.length = a.length;
        for(var i = 0; i < il; i++)lisTemp[i] = a[i];
        for(var i = 0; i < il; ++i){
            if (a[i] === -1) continue;
            var j = result[result.length - 1];
            if (a[j] < a[i]) {
                lisTemp[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v = result.length - 1;
            while(u < v){
                // Fast integer average without overflow.
                // eslint-disable-next-line no-bitwise
                var c = (u >>> 1) + (v >>> 1) + (u & v & 1);
                if (a[result[c]] < a[i]) u = c + 1;
                else v = c;
            }
            if (a[i] < a[result[u]]) {
                if (u > 0) lisTemp[i] = result[u - 1];
                result[u] = i;
            }
        }
        u = result.length;
        v = result[u - 1];
        while(u-- > 0){
            result[u] = v;
            v = lisTemp[v];
        }
        lisTemp.length = 0;
        return result;
    }
    function getNextSibling(vnodes, i, nextSibling) {
        for(; i < vnodes.length; i++){
            if (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom;
        }
        return nextSibling;
    }
    // This covers a really specific edge case:
    // - Parent node is keyed and contains child
    // - Child is removed, returns unresolved promise in `onbeforeremove`
    // - Parent node is moved in keyed diff
    // - Remaining children still need moved appropriately
    //
    // Ideally, I'd track removed nodes as well, but that introduces a lot more
    // complexity and I'm not exactly interested in doing that.
    function moveNodes(parent, vnode, nextSibling) {
        var frag = $doc.createDocumentFragment();
        moveChildToFrag(parent, frag, vnode);
        insertNode(parent, frag, nextSibling);
    }
    function moveChildToFrag(parent, frag, vnode) {
        // Dodge the recursion overhead in a few of the most common cases.
        while(vnode.dom != null && vnode.dom.parentNode === parent){
            if (typeof vnode.tag !== "string") {
                vnode = vnode.instance;
                if (vnode != null) continue;
            } else if (vnode.tag === "<") for(var i = 0; i < vnode.instance.length; i++)frag.appendChild(vnode.instance[i]);
            else if (vnode.tag !== "[") // Don't recurse for text nodes *or* elements, just fragments
            frag.appendChild(vnode.dom);
            else if (vnode.children.length === 1) {
                vnode = vnode.children[0];
                if (vnode != null) continue;
            } else for(var i = 0; i < vnode.children.length; i++){
                var child = vnode.children[i];
                if (child != null) moveChildToFrag(parent, frag, child);
            }
            break;
        }
    }
    function insertNode(parent, dom, nextSibling) {
        if (nextSibling != null) parent.insertBefore(dom, nextSibling);
        else parent.appendChild(dom);
    }
    function maybeSetContentEditable(vnode) {
        if (vnode.attrs == null || vnode.attrs.contenteditable == null && // attribute
        vnode.attrs.contentEditable == null // property
        ) return false;
        var children = vnode.children;
        if (children != null && children.length === 1 && children[0].tag === "<") {
            var content = children[0].children;
            if (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content;
        } else if (children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted.");
        return true;
    }
    //remove
    function removeNodes(parent, vnodes, start, end) {
        for(var i = start; i < end; i++){
            var vnode = vnodes[i];
            if (vnode != null) removeNode(parent, vnode);
        }
    }
    function removeNode(parent, vnode) {
        var mask = 0;
        var original = vnode.state;
        var stateResult, attrsResult;
        if (typeof vnode.tag !== "string" && typeof vnode.state.onbeforeremove === "function") {
            var result = callHook.call(vnode.state.onbeforeremove, vnode);
            if (result != null && typeof result.then === "function") {
                mask = 1;
                stateResult = result;
            }
        }
        if (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {
            var result = callHook.call(vnode.attrs.onbeforeremove, vnode);
            if (result != null && typeof result.then === "function") {
                // eslint-disable-next-line no-bitwise
                mask |= 2;
                attrsResult = result;
            }
        }
        checkState(vnode, original);
        // If we can, try to fast-path it and avoid all the overhead of awaiting
        if (!mask) {
            onremove(vnode);
            removeChild(parent, vnode);
        } else {
            if (stateResult != null) {
                var next = function next() {
                    // eslint-disable-next-line no-bitwise
                    if (mask & 1) {
                        mask &= 2;
                        if (!mask) reallyRemove();
                    }
                };
                stateResult.then(next, next);
            }
            if (attrsResult != null) {
                var next = function next() {
                    // eslint-disable-next-line no-bitwise
                    if (mask & 2) {
                        mask &= 1;
                        if (!mask) reallyRemove();
                    }
                };
                attrsResult.then(next, next);
            }
        }
        function reallyRemove() {
            checkState(vnode, original);
            onremove(vnode);
            removeChild(parent, vnode);
        }
    }
    function removeHTML(parent, vnode) {
        for(var i = 0; i < vnode.instance.length; i++)parent.removeChild(vnode.instance[i]);
    }
    function removeChild(parent, vnode) {
        // Dodge the recursion overhead in a few of the most common cases.
        while(vnode.dom != null && vnode.dom.parentNode === parent){
            if (typeof vnode.tag !== "string") {
                vnode = vnode.instance;
                if (vnode != null) continue;
            } else if (vnode.tag === "<") removeHTML(parent, vnode);
            else {
                if (vnode.tag !== "[") {
                    parent.removeChild(vnode.dom);
                    if (!Array.isArray(vnode.children)) break;
                }
                if (vnode.children.length === 1) {
                    vnode = vnode.children[0];
                    if (vnode != null) continue;
                } else for(var i = 0; i < vnode.children.length; i++){
                    var child = vnode.children[i];
                    if (child != null) removeChild(parent, child);
                }
            }
            break;
        }
    }
    function onremove(vnode) {
        if (typeof vnode.tag !== "string" && typeof vnode.state.onremove === "function") callHook.call(vnode.state.onremove, vnode);
        if (vnode.attrs && typeof vnode.attrs.onremove === "function") callHook.call(vnode.attrs.onremove, vnode);
        if (typeof vnode.tag !== "string") {
            if (vnode.instance != null) onremove(vnode.instance);
        } else {
            var children = vnode.children;
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                var child = children[i];
                if (child != null) onremove(child);
            }
        }
    }
    //attrs
    function setAttrs(vnode, attrs, ns) {
        // If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.
        //
        // Also, the DOM does things to inputs based on the value, so it needs set first.
        // See: https://github.com/MithrilJS/mithril.js/issues/2622
        if (vnode.tag === "input" && attrs.type != null) vnode.dom.setAttribute("type", attrs.type);
        var isFileInput = attrs != null && vnode.tag === "input" && attrs.type === "file";
        for(var key in attrs)setAttr(vnode, key, null, attrs[key], ns, isFileInput);
    }
    function setAttr(vnode, key, old, value, ns, isFileInput) {
        if (key === "key" || key === "is" || value == null || isLifecycleMethod(key) || old === value && !isFormAttribute(vnode, key) && typeof value !== "object" || key === "type" && vnode.tag === "input") return;
        if (key[0] === "o" && key[1] === "n") return updateEvent(vnode, key, value);
        if (key.slice(0, 6) === "xlink:") vnode.dom.setAttributeNS("http://www.w3.org/1999/xlink", key.slice(6), value);
        else if (key === "style") updateStyle(vnode.dom, old, value);
        else if (hasPropertyKey(vnode, key, ns)) {
            if (key === "value") {
                // Only do the coercion if we're actually going to check the value.
                /* eslint-disable no-implicit-coercion */ //setting input[value] to same value by typing on focused element moves cursor to end in Chrome
                //setting input[type=file][value] to same value causes an error to be generated if it's non-empty
                if ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === "" + value && (isFileInput || vnode.dom === activeElement())) return;
                //setting select[value] to same value while having select open blinks select dropdown in Chrome
                if (vnode.tag === "select" && old !== null && vnode.dom.value === "" + value) return;
                //setting option[value] to same value while having select open blinks select dropdown in Chrome
                if (vnode.tag === "option" && old !== null && vnode.dom.value === "" + value) return;
                //setting input[type=file][value] to different value is an error if it's non-empty
                // Not ideal, but it at least works around the most common source of uncaught exceptions for now.
                if (isFileInput && "" + value !== "") {
                    console.error("`value` is read-only on file inputs!");
                    return;
                }
            /* eslint-enable no-implicit-coercion */ }
            vnode.dom[key] = value;
        } else if (typeof value === "boolean") {
            if (value) vnode.dom.setAttribute(key, "");
            else vnode.dom.removeAttribute(key);
        } else vnode.dom.setAttribute(key === "className" ? "class" : key, value);
    }
    function removeAttr(vnode, key, old, ns) {
        if (key === "key" || key === "is" || old == null || isLifecycleMethod(key)) return;
        if (key[0] === "o" && key[1] === "n") updateEvent(vnode, key, undefined);
        else if (key === "style") updateStyle(vnode.dom, old, null);
        else if (hasPropertyKey(vnode, key, ns) && key !== "className" && key !== "title" // creates "null" as title
         && !(key === "value" && (vnode.tag === "option" || vnode.tag === "select" && vnode.dom.selectedIndex === -1 && vnode.dom === activeElement())) && !(vnode.tag === "input" && key === "type")) vnode.dom[key] = null;
        else {
            var nsLastIndex = key.indexOf(":");
            if (nsLastIndex !== -1) key = key.slice(nsLastIndex + 1);
            if (old !== false) vnode.dom.removeAttribute(key === "className" ? "class" : key);
        }
    }
    function setLateSelectAttrs(vnode, attrs) {
        if ("value" in attrs) {
            if (attrs.value === null) {
                if (vnode.dom.selectedIndex !== -1) vnode.dom.value = null;
            } else {
                var normalized = "" + attrs.value // eslint-disable-line no-implicit-coercion
                ;
                if (vnode.dom.value !== normalized || vnode.dom.selectedIndex === -1) vnode.dom.value = normalized;
            }
        }
        if ("selectedIndex" in attrs) setAttr(vnode, "selectedIndex", null, attrs.selectedIndex, undefined);
    }
    function updateAttrs(vnode, old, attrs, ns) {
        if (old && old === attrs) console.warn("Don't reuse attrs object, use new object for every redraw, this will throw in next major");
        if (attrs != null) {
            // If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.
            //
            // Also, the DOM does things to inputs based on the value, so it needs set first.
            // See: https://github.com/MithrilJS/mithril.js/issues/2622
            if (vnode.tag === "input" && attrs.type != null) vnode.dom.setAttribute("type", attrs.type);
            var isFileInput = vnode.tag === "input" && attrs.type === "file";
            for(var key in attrs)setAttr(vnode, key, old && old[key], attrs[key], ns, isFileInput);
        }
        var val;
        if (old != null) {
            for(var key in old)if ((val = old[key]) != null && (attrs == null || attrs[key] == null)) removeAttr(vnode, key, val, ns);
        }
    }
    function isFormAttribute(vnode, attr) {
        return attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === activeElement() || vnode.tag === "option" && vnode.dom.parentNode === $doc.activeElement;
    }
    function isLifecycleMethod(attr) {
        return attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate";
    }
    function hasPropertyKey(vnode, key, ns) {
        // Filter out namespaced keys
        return ns === undefined && // If it's a custom element, just keep it.
        (vnode.tag.indexOf("-") > -1 || vnode.attrs != null && vnode.attrs.is || // If it's a normal element, let's try to avoid a few browser bugs.
        key !== "href" && key !== "list" && key !== "form" && key !== "width" && key !== "height" // && key !== "type"
        ) && key in vnode.dom;
    }
    //style
    var uppercaseRegex = /[A-Z]/g;
    function toLowerCase(capital) {
        return "-" + capital.toLowerCase();
    }
    function normalizeKey(key) {
        return key[0] === "-" && key[1] === "-" ? key : key === "cssFloat" ? "float" : key.replace(uppercaseRegex, toLowerCase);
    }
    function updateStyle(element, old, style) {
        if (old === style) ;
        else if (style == null) // New style is missing, just clear it.
        element.style.cssText = "";
        else if (typeof style !== "object") // New style is a string, let engine deal with patching.
        element.style.cssText = style;
        else if (old == null || typeof old !== "object") {
            // `old` is missing or a string, `style` is an object.
            element.style.cssText = "";
            // Add new style properties
            for(var key in style){
                var value = style[key];
                if (value != null) element.style.setProperty(normalizeKey(key), String(value));
            }
        } else {
            // Both old & new are (different) objects.
            // Update style properties that have changed
            for(var key in style){
                var value = style[key];
                if (value != null && (value = String(value)) !== String(old[key])) element.style.setProperty(normalizeKey(key), value);
            }
            // Remove style properties that no longer exist
            for(var key in old)if (old[key] != null && style[key] == null) element.style.removeProperty(normalizeKey(key));
        }
    }
    // Here's an explanation of how this works:
    // 1. The event names are always (by design) prefixed by `on`.
    // 2. The EventListener interface accepts either a function or an object
    //    with a `handleEvent` method.
    // 3. The object does not inherit from `Object.prototype`, to avoid
    //    any potential interference with that (e.g. setters).
    // 4. The event name is remapped to the handler before calling it.
    // 5. In function-based event handlers, `ev.target === this`. We replicate
    //    that below.
    // 6. In function-based event handlers, `return false` prevents the default
    //    action and stops event propagation. We replicate that below.
    function EventDict() {
        // Save this, so the current redraw is correctly tracked.
        this._ = currentRedraw;
    }
    EventDict.prototype = Object.create(null);
    EventDict.prototype.handleEvent = function(ev) {
        var handler = this["on" + ev.type];
        var result;
        if (typeof handler === "function") result = handler.call(ev.currentTarget, ev);
        else if (typeof handler.handleEvent === "function") handler.handleEvent(ev);
        if (this._ && ev.redraw !== false) (0, this._)();
        if (result === false) {
            ev.preventDefault();
            ev.stopPropagation();
        }
    };
    //event
    function updateEvent(vnode, key, value) {
        if (vnode.events != null) {
            vnode.events._ = currentRedraw;
            if (vnode.events[key] === value) return;
            if (value != null && (typeof value === "function" || typeof value === "object")) {
                if (vnode.events[key] == null) vnode.dom.addEventListener(key.slice(2), vnode.events, false);
                vnode.events[key] = value;
            } else {
                if (vnode.events[key] != null) vnode.dom.removeEventListener(key.slice(2), vnode.events, false);
                vnode.events[key] = undefined;
            }
        } else if (value != null && (typeof value === "function" || typeof value === "object")) {
            vnode.events = new EventDict();
            vnode.dom.addEventListener(key.slice(2), vnode.events, false);
            vnode.events[key] = value;
        }
    }
    //lifecycle
    function initLifecycle(source, vnode, hooks) {
        if (typeof source.oninit === "function") callHook.call(source.oninit, vnode);
        if (typeof source.oncreate === "function") hooks.push(callHook.bind(source.oncreate, vnode));
    }
    function updateLifecycle(source, vnode, hooks) {
        if (typeof source.onupdate === "function") hooks.push(callHook.bind(source.onupdate, vnode));
    }
    function shouldNotUpdate(vnode, old) {
        do {
            if (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") {
                var force = callHook.call(vnode.attrs.onbeforeupdate, vnode, old);
                if (force !== undefined && !force) break;
            }
            if (typeof vnode.tag !== "string" && typeof vnode.state.onbeforeupdate === "function") {
                var force = callHook.call(vnode.state.onbeforeupdate, vnode, old);
                if (force !== undefined && !force) break;
            }
            return false;
        }while (false); // eslint-disable-line no-constant-condition
        vnode.dom = old.dom;
        vnode.domSize = old.domSize;
        vnode.instance = old.instance;
        // One would think having the actual latest attributes would be ideal,
        // but it doesn't let us properly diff based on our current internal
        // representation. We have to save not only the old DOM info, but also
        // the attributes used to create it, as we diff *that*, not against the
        // DOM directly (with a few exceptions in `setAttr`). And, of course, we
        // need to save the children and text as they are conceptually not
        // unlike special "attributes" internally.
        vnode.attrs = old.attrs;
        vnode.children = old.children;
        vnode.text = old.text;
        return true;
    }
    var currentDOM;
    return function(dom, vnodes, redraw) {
        if (!dom) throw new TypeError("DOM element being rendered to does not exist.");
        if (currentDOM != null && dom.contains(currentDOM)) throw new TypeError("Node is currently being rendered to and thus is locked.");
        var prevRedraw = currentRedraw;
        var prevDOM = currentDOM;
        var hooks = [];
        var active = activeElement();
        var namespace = dom.namespaceURI;
        currentDOM = dom;
        currentRedraw = typeof redraw === "function" ? redraw : undefined;
        try {
            // First time rendering into a node clears it out
            if (dom.vnodes == null) dom.textContent = "";
            vnodes = $ahPL4.normalizeChildren(Array.isArray(vnodes) ? vnodes : [
                vnodes
            ]);
            updateNodes(dom, dom.vnodes, vnodes, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace);
            dom.vnodes = vnodes;
            // `document.activeElement` can return null: https://html.spec.whatwg.org/multipage/interaction.html#dom-document-activeelement
            if (active != null && activeElement() !== active && typeof active.focus === "function") active.focus();
            for(var i = 0; i < hooks.length; i++)hooks[i]();
        } finally{
            currentRedraw = prevRedraw;
            currentDOM = prevDOM;
        }
    };
};

});


parcelRegister("UfRe2", function(module, exports) {
"use strict";

var $ahPL4 = parcelRequire("ahPL4");
module.exports = function(render, schedule, console) {
    var subscriptions = [];
    var pending = false;
    var offset = -1;
    function sync() {
        for(offset = 0; offset < subscriptions.length; offset += 2)try {
            render(subscriptions[offset], $ahPL4(subscriptions[offset + 1]), redraw);
        } catch (e) {
            console.error(e);
        }
        offset = -1;
    }
    function redraw() {
        if (!pending) {
            pending = true;
            schedule(function() {
                pending = false;
                sync();
            });
        }
    }
    redraw.sync = sync;
    function mount(root, component) {
        if (component != null && component.view == null && typeof component !== "function") throw new TypeError("m.mount expects a component, not a vnode.");
        var index = subscriptions.indexOf(root);
        if (index >= 0) {
            subscriptions.splice(index, 2);
            if (index <= offset) offset -= 2;
            render(root, []);
        }
        if (component != null) {
            subscriptions.push(root, component);
            render(root, $ahPL4(component), redraw);
        }
    }
    return {
        mount: mount,
        redraw: redraw
    };
};

});

parcelRegister("8ohAQ", function(module, exports) {
"use strict";

var $bGJ5a = parcelRequire("bGJ5a");

var $9MCRO = parcelRequire("9MCRO");
module.exports = function($window, Promise, oncompletion) {
    var callbackCount = 0;
    function PromiseProxy(executor) {
        return new Promise(executor);
    }
    // In case the global Promise is some userland library's where they rely on
    // `foo instanceof this.constructor`, `this.constructor.resolve(value)`, or
    // similar. Let's *not* break them.
    PromiseProxy.prototype = Promise.prototype;
    PromiseProxy.__proto__ = Promise // eslint-disable-line no-proto
    ;
    function makeRequest(factory) {
        return function(url, args) {
            if (typeof url !== "string") {
                args = url;
                url = url.url;
            } else if (args == null) args = {};
            var promise = new Promise(function(resolve, reject) {
                factory($bGJ5a(url, args.params), args, function(data) {
                    if (typeof args.type === "function") {
                        if (Array.isArray(data)) for(var i = 0; i < data.length; i++)data[i] = new args.type(data[i]);
                        else data = new args.type(data);
                    }
                    resolve(data);
                }, reject);
            });
            if (args.background === true) return promise;
            var count = 0;
            function complete() {
                if (--count === 0 && typeof oncompletion === "function") oncompletion();
            }
            return wrap(promise);
            function wrap(promise) {
                var then = promise.then;
                // Set the constructor, so engines know to not await or resolve
                // this as a native promise. At the time of writing, this is
                // only necessary for V8, but their behavior is the correct
                // behavior per spec. See this spec issue for more details:
                // https://github.com/tc39/ecma262/issues/1577. Also, see the
                // corresponding comment in `request/tests/test-request.js` for
                // a bit more background on the issue at hand.
                promise.constructor = PromiseProxy;
                promise.then = function() {
                    count++;
                    var next = then.apply(promise, arguments);
                    next.then(complete, function(e) {
                        complete();
                        if (count === 0) throw e;
                    });
                    return wrap(next);
                };
                return promise;
            }
        };
    }
    function hasHeader(args, name) {
        for(var key in args.headers){
            if ($9MCRO.call(args.headers, key) && key.toLowerCase() === name) return true;
        }
        return false;
    }
    return {
        request: makeRequest(function(url, args, resolve, reject) {
            var method = args.method != null ? args.method.toUpperCase() : "GET";
            var body = args.body;
            var assumeJSON = (args.serialize == null || args.serialize === JSON.serialize) && !(body instanceof $window.FormData || body instanceof $window.URLSearchParams);
            var responseType = args.responseType || (typeof args.extract === "function" ? "" : "json");
            var xhr = new $window.XMLHttpRequest(), aborted = false, isTimeout = false;
            var original = xhr, replacedAbort;
            var abort = xhr.abort;
            xhr.abort = function() {
                aborted = true;
                abort.call(this);
            };
            xhr.open(method, url, args.async !== false, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined);
            if (assumeJSON && body != null && !hasHeader(args, "content-type")) xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            if (typeof args.deserialize !== "function" && !hasHeader(args, "accept")) xhr.setRequestHeader("Accept", "application/json, text/*");
            if (args.withCredentials) xhr.withCredentials = args.withCredentials;
            if (args.timeout) xhr.timeout = args.timeout;
            xhr.responseType = responseType;
            for(var key in args.headers)if ($9MCRO.call(args.headers, key)) xhr.setRequestHeader(key, args.headers[key]);
            xhr.onreadystatechange = function(ev) {
                // Don't throw errors on xhr.abort().
                if (aborted) return;
                if (ev.target.readyState === 4) try {
                    var success = ev.target.status >= 200 && ev.target.status < 300 || ev.target.status === 304 || /^file:\/\//i.test(url);
                    // When the response type isn't "" or "text",
                    // `xhr.responseText` is the wrong thing to use.
                    // Browsers do the right thing and throw here, and we
                    // should honor that and do the right thing by
                    // preferring `xhr.response` where possible/practical.
                    var response = ev.target.response, message;
                    if (responseType === "json") {
                        // For IE and Edge, which don't implement
                        // `responseType: "json"`.
                        if (!ev.target.responseType && typeof args.extract !== "function") // Handle no-content which will not parse.
                        try {
                            response = JSON.parse(ev.target.responseText);
                        } catch (e) {
                            response = null;
                        }
                    } else if (!responseType || responseType === "text") // Only use this default if it's text. If a parsed
                    // document is needed on old IE and friends (all
                    // unsupported), the user should use a custom
                    // `config` instead. They're already using this at
                    // their own risk.
                    {
                        if (response == null) response = ev.target.responseText;
                    }
                    if (typeof args.extract === "function") {
                        response = args.extract(ev.target, args);
                        success = true;
                    } else if (typeof args.deserialize === "function") response = args.deserialize(response);
                    if (success) resolve(response);
                    else {
                        var completeErrorResponse = function completeErrorResponse() {
                            try {
                                message = ev.target.responseText;
                            } catch (e) {
                                message = response;
                            }
                            var error = new Error(message);
                            error.code = ev.target.status;
                            error.response = response;
                            reject(error);
                        };
                        if (xhr.status === 0) // Use setTimeout to push this code block onto the event queue
                        // This allows `xhr.ontimeout` to run in the case that there is a timeout
                        // Without this setTimeout, `xhr.ontimeout` doesn't have a chance to reject
                        // as `xhr.onreadystatechange` will run before it
                        setTimeout(function() {
                            if (isTimeout) return;
                            completeErrorResponse();
                        });
                        else completeErrorResponse();
                    }
                } catch (e) {
                    reject(e);
                }
            };
            xhr.ontimeout = function(ev) {
                isTimeout = true;
                var error = new Error("Request timed out");
                error.code = ev.target.status;
                reject(error);
            };
            if (typeof args.config === "function") {
                xhr = args.config(xhr, args, url) || xhr;
                // Propagate the `abort` to any replacement XHR as well.
                if (xhr !== original) {
                    replacedAbort = xhr.abort;
                    xhr.abort = function() {
                        aborted = true;
                        replacedAbort.call(this);
                    };
                }
            }
            if (body == null) xhr.send();
            else if (typeof args.serialize === "function") xhr.send(args.serialize(body));
            else if (body instanceof $window.FormData || body instanceof $window.URLSearchParams) xhr.send(body);
            else xhr.send(JSON.stringify(body));
        }),
        jsonp: makeRequest(function(url, args, resolve, reject) {
            var callbackName = args.callbackName || "_mithril_" + Math.round(Math.random() * 1e16) + "_" + callbackCount++;
            var script = $window.document.createElement("script");
            $window[callbackName] = function(data) {
                delete $window[callbackName];
                script.parentNode.removeChild(script);
                resolve(data);
            };
            script.onerror = function() {
                delete $window[callbackName];
                script.parentNode.removeChild(script);
                reject(new Error("JSONP request failed"));
            };
            script.src = url + (url.indexOf("?") < 0 ? "?" : "&") + encodeURIComponent(args.callbackKey || "callback") + "=" + encodeURIComponent(callbackName);
            $window.document.documentElement.appendChild(script);
        })
    };
};

});
parcelRegister("bGJ5a", function(module, exports) {
"use strict";

var $6KLd1 = parcelRequire("6KLd1");

var $bVkaq = parcelRequire("bVkaq");
// Returns `path` from `template` + `params`
module.exports = function(template, params) {
    if (/:([^\/\.-]+)(\.{3})?:/.test(template)) throw new SyntaxError("Template parameter names must be separated by either a '/', '-', or '.'.");
    if (params == null) return template;
    var queryIndex = template.indexOf("?");
    var hashIndex = template.indexOf("#");
    var queryEnd = hashIndex < 0 ? template.length : hashIndex;
    var pathEnd = queryIndex < 0 ? queryEnd : queryIndex;
    var path = template.slice(0, pathEnd);
    var query = {};
    $bVkaq(query, params);
    var resolved = path.replace(/:([^\/\.-]+)(\.{3})?/g, function(m, key, variadic) {
        delete query[key];
        // If no such parameter exists, don't interpolate it.
        if (params[key] == null) return m;
        // Escape normal parameters, but not variadic ones.
        return variadic ? params[key] : encodeURIComponent(String(params[key]));
    });
    // In case the template substitution adds new query/hash parameters.
    var newQueryIndex = resolved.indexOf("?");
    var newHashIndex = resolved.indexOf("#");
    var newQueryEnd = newHashIndex < 0 ? resolved.length : newHashIndex;
    var newPathEnd = newQueryIndex < 0 ? newQueryEnd : newQueryIndex;
    var result = resolved.slice(0, newPathEnd);
    if (queryIndex >= 0) result += template.slice(queryIndex, queryEnd);
    if (newQueryIndex >= 0) result += (queryIndex < 0 ? "?" : "&") + resolved.slice(newQueryIndex, newQueryEnd);
    var querystring = $6KLd1(query);
    if (querystring) result += (queryIndex < 0 && newQueryIndex < 0 ? "?" : "&") + querystring;
    if (hashIndex >= 0) result += template.slice(hashIndex);
    if (newHashIndex >= 0) result += (hashIndex < 0 ? "" : "&") + resolved.slice(newHashIndex);
    return result;
};

});
parcelRegister("6KLd1", function(module, exports) {
"use strict";
module.exports = function(object) {
    if (Object.prototype.toString.call(object) !== "[object Object]") return "";
    var args = [];
    for(var key in object)destructure(key, object[key]);
    return args.join("&");
    function destructure(key, value) {
        if (Array.isArray(value)) for(var i = 0; i < value.length; i++)destructure(key + "[" + i + "]", value[i]);
        else if (Object.prototype.toString.call(value) === "[object Object]") for(var i in value)destructure(key + "[" + i + "]", value[i]);
        else args.push(encodeURIComponent(key) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""));
    }
};

});

parcelRegister("bVkaq", function(module, exports) {
// This exists so I'm only saving it once.
"use strict";

var $9MCRO = parcelRequire("9MCRO");
module.exports = Object.assign || function(target, source) {
    for(var key in source)if ($9MCRO.call(source, key)) target[key] = source[key];
};

});
parcelRegister("9MCRO", function(module, exports) {
// This exists so I'm only saving it once.
"use strict";
module.exports = ({}).hasOwnProperty;

});




parcelRegister("jFffZ", function(module, exports) {
"use strict";

var $fBKqb = parcelRequire("fBKqb");

module.exports = (parcelRequire("bO6oz"))(typeof window !== "undefined" ? window : null, $fBKqb);

});
parcelRegister("fBKqb", function(module, exports) {
"use strict";

var $iHb4t = parcelRequire("iHb4t");

module.exports = (parcelRequire("UfRe2"))($iHb4t, typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : null, typeof console !== "undefined" ? console : null);

});

parcelRegister("bO6oz", function(module, exports) {
"use strict";

var $ahPL4 = parcelRequire("ahPL4");

var $hPUTp = parcelRequire("hPUTp");

var $dXPdz = parcelRequire("dXPdz");

var $bGJ5a = parcelRequire("bGJ5a");

var $1bhZB = parcelRequire("1bhZB");

var $427bo = parcelRequire("427bo");

var $bVkaq = parcelRequire("bVkaq");

var $1Zud9 = parcelRequire("1Zud9");
var $8989532d49d4b2cf$var$sentinel = {};
function $8989532d49d4b2cf$var$decodeURIComponentSave(component) {
    try {
        return decodeURIComponent(component);
    } catch (e) {
        return component;
    }
}
module.exports = function($window, mountRedraw) {
    var callAsync = $window == null ? null : typeof $window.setImmediate === "function" ? $window.setImmediate : $window.setTimeout;
    var p = $dXPdz.resolve();
    var scheduled = false;
    // state === 0: init
    // state === 1: scheduled
    // state === 2: done
    var ready = false;
    var state = 0;
    var compiled, fallbackRoute;
    var currentResolver = $8989532d49d4b2cf$var$sentinel, component, attrs, currentPath, lastUpdate;
    var RouterRoot = {
        onbeforeupdate: function onbeforeupdate() {
            state = state ? 2 : 1;
            return !(!state || $8989532d49d4b2cf$var$sentinel === currentResolver);
        },
        onremove: function onremove() {
            $window.removeEventListener("popstate", fireAsync, false);
            $window.removeEventListener("hashchange", resolveRoute, false);
        },
        view: function view() {
            if (!state || $8989532d49d4b2cf$var$sentinel === currentResolver) return;
            // Wrap in a fragment to preserve existing key semantics
            var vnode = [
                $ahPL4(component, attrs.key, attrs)
            ];
            if (currentResolver) vnode = currentResolver.render(vnode[0]);
            return vnode;
        }
    };
    var SKIP = route.SKIP = {};
    function resolveRoute() {
        scheduled = false;
        // Consider the pathname holistically. The prefix might even be invalid,
        // but that's not our problem.
        var prefix = $window.location.hash;
        if (route.prefix[0] !== "#") {
            prefix = $window.location.search + prefix;
            if (route.prefix[0] !== "?") {
                prefix = $window.location.pathname + prefix;
                if (prefix[0] !== "/") prefix = "/" + prefix;
            }
        }
        // This seemingly useless `.concat()` speeds up the tests quite a bit,
        // since the representation is consistently a relatively poorly
        // optimized cons string.
        var path = prefix.concat().replace(/(?:%[a-f89][a-f0-9])+/gim, $8989532d49d4b2cf$var$decodeURIComponentSave).slice(route.prefix.length);
        var data = $1bhZB(path);
        $bVkaq(data.params, $window.history.state);
        function reject(e) {
            console.error(e);
            setPath(fallbackRoute, null, {
                replace: true
            });
        }
        loop(0);
        function loop(i) {
            // state === 0: init
            // state === 1: scheduled
            // state === 2: done
            for(; i < compiled.length; i++)if (compiled[i].check(data)) {
                var payload = compiled[i].component;
                var matchedRoute = compiled[i].route;
                var localComp = payload;
                var update = lastUpdate = function update1(comp) {
                    if (update !== lastUpdate) return;
                    if (comp === SKIP) return loop(i + 1);
                    component = comp != null && (typeof comp.view === "function" || typeof comp === "function") ? comp : "div";
                    attrs = data.params, currentPath = path, lastUpdate = null;
                    currentResolver = payload.render ? payload : null;
                    if (state === 2) mountRedraw.redraw();
                    else {
                        state = 2;
                        mountRedraw.redraw.sync();
                    }
                };
                // There's no understating how much I *wish* I could
                // use `async`/`await` here...
                if (payload.view || typeof payload === "function") {
                    payload = {};
                    update(localComp);
                } else if (payload.onmatch) p.then(function() {
                    return payload.onmatch(data.params, path, matchedRoute);
                }).then(update, path === fallbackRoute ? null : reject);
                else update("div");
                return;
            }
            if (path === fallbackRoute) throw new Error("Could not resolve default route " + fallbackRoute + ".");
            setPath(fallbackRoute, null, {
                replace: true
            });
        }
    }
    // Set it unconditionally so `m.route.set` and `m.route.Link` both work,
    // even if neither `pushState` nor `hashchange` are supported. It's
    // cleared if `hashchange` is used, since that makes it automatically
    // async.
    function fireAsync() {
        if (!scheduled) {
            scheduled = true;
            // TODO: just do `mountRedraw.redraw()` here and elide the timer
            // dependency. Note that this will muck with tests a *lot*, so it's
            // not as easy of a change as it sounds.
            callAsync(resolveRoute);
        }
    }
    function setPath(path, data, options) {
        path = $bGJ5a(path, data);
        if (ready) {
            fireAsync();
            var state = options ? options.state : null;
            var title = options ? options.title : null;
            if (options && options.replace) $window.history.replaceState(state, title, route.prefix + path);
            else $window.history.pushState(state, title, route.prefix + path);
        } else $window.location.href = route.prefix + path;
    }
    function route(root, defaultRoute, routes) {
        if (!root) throw new TypeError("DOM element being rendered to does not exist.");
        compiled = Object.keys(routes).map(function(route) {
            if (route[0] !== "/") throw new SyntaxError("Routes must start with a '/'.");
            if (/:([^\/\.-]+)(\.{3})?:/.test(route)) throw new SyntaxError("Route parameter names must be separated with either '/', '.', or '-'.");
            return {
                route: route,
                component: routes[route],
                check: $427bo(route)
            };
        });
        fallbackRoute = defaultRoute;
        if (defaultRoute != null) {
            var defaultData = $1bhZB(defaultRoute);
            if (!compiled.some(function(i) {
                return i.check(defaultData);
            })) throw new ReferenceError("Default route doesn't match any known routes.");
        }
        if (typeof $window.history.pushState === "function") $window.addEventListener("popstate", fireAsync, false);
        else if (route.prefix[0] === "#") $window.addEventListener("hashchange", resolveRoute, false);
        ready = true;
        mountRedraw.mount(root, RouterRoot);
        resolveRoute();
    }
    route.set = function(path, data, options) {
        if (lastUpdate != null) {
            options = options || {};
            options.replace = true;
        }
        lastUpdate = null;
        setPath(path, data, options);
    };
    route.get = function() {
        return currentPath;
    };
    route.prefix = "#!";
    route.Link = {
        view: function view(vnode) {
            // Omit the used parameters from the rendered element - they are
            // internal. Also, censor the various lifecycle methods.
            //
            // We don't strip the other parameters because for convenience we
            // let them be specified in the selector as well.
            var child = $hPUTp(vnode.attrs.selector || "a", $1Zud9(vnode.attrs, [
                "options",
                "params",
                "selector",
                "onclick"
            ]), vnode.children);
            var options, onclick, href;
            // Let's provide a *right* way to disable a route link, rather than
            // letting people screw up accessibility on accident.
            //
            // The attribute is coerced so users don't get surprised over
            // `disabled: 0` resulting in a button that's somehow routable
            // despite being visibly disabled.
            if (child.attrs.disabled = Boolean(child.attrs.disabled)) {
                child.attrs.href = null;
                child.attrs["aria-disabled"] = "true";
            // If you *really* do want add `onclick` on a disabled link, use
            // an `oncreate` hook to add it.
            } else {
                options = vnode.attrs.options;
                onclick = vnode.attrs.onclick;
                // Easier to build it now to keep it isomorphic.
                href = $bGJ5a(child.attrs.href, vnode.attrs.params);
                child.attrs.href = route.prefix + href;
                child.attrs.onclick = function(e) {
                    var result;
                    if (typeof onclick === "function") result = onclick.call(e.currentTarget, e);
                    else if (onclick == null || typeof onclick !== "object") ;
                    else if (typeof onclick.handleEvent === "function") onclick.handleEvent(e);
                    // Adapted from React Router's implementation:
                    // https://github.com/ReactTraining/react-router/blob/520a0acd48ae1b066eb0b07d6d4d1790a1d02482/packages/react-router-dom/modules/Link.js
                    //
                    // Try to be flexible and intuitive in how we handle links.
                    // Fun fact: links aren't as obvious to get right as you
                    // would expect. There's a lot more valid ways to click a
                    // link than this, and one might want to not simply click a
                    // link, but right click or command-click it to copy the
                    // link target, etc. Nope, this isn't just for blind people.
                    if (// Skip if `onclick` prevented default
                    result !== false && !e.defaultPrevented && // Ignore everything but left clicks
                    (e.button === 0 || e.which === 0 || e.which === 1) && // Let the browser handle `target=_blank`, etc.
                    (!e.currentTarget.target || e.currentTarget.target === "_self") && // No modifier keys
                    !e.ctrlKey && !e.metaKey && !e.shiftKey && !e.altKey) {
                        e.preventDefault();
                        e.redraw = false;
                        route.set(href, null, options);
                    }
                };
            }
            return child;
        }
    };
    route.param = function(key) {
        return attrs && key != null ? attrs[key] : attrs;
    };
    return route;
};

});
parcelRegister("hPUTp", function(module, exports) {
"use strict";

var $ahPL4 = parcelRequire("ahPL4");

var $lNZGj = parcelRequire("lNZGj");

var $9MCRO = parcelRequire("9MCRO");
var $cfc354cae4080493$var$selectorParser = /(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g;
var $cfc354cae4080493$var$selectorCache = {};
function $cfc354cae4080493$var$isEmpty(object) {
    for(var key in object)if ($9MCRO.call(object, key)) return false;
    return true;
}
function $cfc354cae4080493$var$compileSelector(selector) {
    var match, tag = "div", classes = [], attrs = {};
    while(match = $cfc354cae4080493$var$selectorParser.exec(selector)){
        var type = match[1], value = match[2];
        if (type === "" && value !== "") tag = value;
        else if (type === "#") attrs.id = value;
        else if (type === ".") classes.push(value);
        else if (match[3][0] === "[") {
            var attrValue = match[6];
            if (attrValue) attrValue = attrValue.replace(/\\(["'])/g, "$1").replace(/\\\\/g, "\\");
            if (match[4] === "class") classes.push(attrValue);
            else attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true;
        }
    }
    if (classes.length > 0) attrs.className = classes.join(" ");
    return $cfc354cae4080493$var$selectorCache[selector] = {
        tag: tag,
        attrs: attrs
    };
}
function $cfc354cae4080493$var$execSelector(state, vnode) {
    var attrs = vnode.attrs;
    var hasClass = $9MCRO.call(attrs, "class");
    var className = hasClass ? attrs.class : attrs.className;
    vnode.tag = state.tag;
    vnode.attrs = {};
    if (!$cfc354cae4080493$var$isEmpty(state.attrs) && !$cfc354cae4080493$var$isEmpty(attrs)) {
        var newAttrs = {};
        for(var key in attrs)if ($9MCRO.call(attrs, key)) newAttrs[key] = attrs[key];
        attrs = newAttrs;
    }
    for(var key in state.attrs)if ($9MCRO.call(state.attrs, key) && key !== "className" && !$9MCRO.call(attrs, key)) attrs[key] = state.attrs[key];
    if (className != null || state.attrs.className != null) attrs.className = className != null ? state.attrs.className != null ? String(state.attrs.className) + " " + String(className) : className : state.attrs.className != null ? state.attrs.className : null;
    if (hasClass) attrs.class = null;
    for(var key in attrs)if ($9MCRO.call(attrs, key) && key !== "key") {
        vnode.attrs = attrs;
        break;
    }
    return vnode;
}
function $cfc354cae4080493$var$hyperscript(selector) {
    if (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") throw Error("The selector must be either a string or a component.");
    var vnode = $lNZGj.apply(1, arguments);
    if (typeof selector === "string") {
        vnode.children = $ahPL4.normalizeChildren(vnode.children);
        if (selector !== "[") return $cfc354cae4080493$var$execSelector($cfc354cae4080493$var$selectorCache[selector] || $cfc354cae4080493$var$compileSelector(selector), vnode);
    }
    vnode.tag = selector;
    return vnode;
}
module.exports = $cfc354cae4080493$var$hyperscript;

});

parcelRegister("dXPdz", function(module, exports) {
/* global window */ "use strict";

var $4kqT7 = parcelRequire("4kqT7");
if (typeof window !== "undefined") {
    if (typeof window.Promise === "undefined") window.Promise = $4kqT7;
    else if (!window.Promise.prototype.finally) window.Promise.prototype.finally = $4kqT7.prototype.finally;
    module.exports = window.Promise;
} else if (typeof $parcel$global !== "undefined") {
    if (typeof $parcel$global.Promise === "undefined") $parcel$global.Promise = $4kqT7;
    else if (!$parcel$global.Promise.prototype.finally) $parcel$global.Promise.prototype.finally = $4kqT7.prototype.finally;
    module.exports = $parcel$global.Promise;
} else module.exports = $4kqT7;

});

parcelRegister("1bhZB", function(module, exports) {
"use strict";

var $iahK6 = parcelRequire("iahK6");
// Returns `{path, params}` from `url`
module.exports = function(url) {
    var queryIndex = url.indexOf("?");
    var hashIndex = url.indexOf("#");
    var queryEnd = hashIndex < 0 ? url.length : hashIndex;
    var pathEnd = queryIndex < 0 ? queryEnd : queryIndex;
    var path = url.slice(0, pathEnd).replace(/\/{2,}/g, "/");
    if (!path) path = "/";
    else {
        if (path[0] !== "/") path = "/" + path;
        if (path.length > 1 && path[path.length - 1] === "/") path = path.slice(0, -1);
    }
    return {
        path: path,
        params: queryIndex < 0 ? {} : $iahK6(url.slice(queryIndex + 1, queryEnd))
    };
};

});
parcelRegister("iahK6", function(module, exports) {
"use strict";
function $d396ec7404febe23$var$decodeURIComponentSave(str) {
    try {
        return decodeURIComponent(str);
    } catch (err) {
        return str;
    }
}
module.exports = function(string) {
    if (string === "" || string == null) return {};
    if (string.charAt(0) === "?") string = string.slice(1);
    var entries = string.split("&"), counters = {}, data = {};
    for(var i = 0; i < entries.length; i++){
        var entry = entries[i].split("=");
        var key = $d396ec7404febe23$var$decodeURIComponentSave(entry[0]);
        var value = entry.length === 2 ? $d396ec7404febe23$var$decodeURIComponentSave(entry[1]) : "";
        if (value === "true") value = true;
        else if (value === "false") value = false;
        var levels = key.split(/\]\[?|\[/);
        var cursor = data;
        if (key.indexOf("[") > -1) levels.pop();
        for(var j = 0; j < levels.length; j++){
            var level = levels[j], nextLevel = levels[j + 1];
            var isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10));
            if (level === "") {
                var key = levels.slice(0, j).join();
                if (counters[key] == null) counters[key] = Array.isArray(cursor) ? cursor.length : 0;
                level = counters[key]++;
            } else if (level === "__proto__") break;
            if (j === levels.length - 1) cursor[level] = value;
            else {
                // Read own properties exclusively to disallow indirect
                // prototype pollution
                var desc = Object.getOwnPropertyDescriptor(cursor, level);
                if (desc != null) desc = desc.value;
                if (desc == null) cursor[level] = desc = isNumber ? [] : {};
                cursor = desc;
            }
        }
    }
    return data;
};

});


parcelRegister("427bo", function(module, exports) {
"use strict";

var $1bhZB = parcelRequire("1bhZB");
// Compiles a template into a function that takes a resolved path (without query
// strings) and returns an object containing the template parameters with their
// parsed values. This expects the input of the compiled template to be the
// output of `parsePathname`. Note that it does *not* remove query parameters
// specified in the template.
module.exports = function(template) {
    var templateData = $1bhZB(template);
    var templateKeys = Object.keys(templateData.params);
    var keys = [];
    var regexp = new RegExp("^" + templateData.path.replace(// I escape literal text so people can use things like `:file.:ext` or
    // `:lang-:locale` in routes. This is all merged into one pass so I
    // don't also accidentally escape `-` and make it harder to detect it to
    // ban it from template parameters.
    /:([^\/.-]+)(\.{3}|\.(?!\.)|-)?|[\\^$*+.()|\[\]{}]/g, function(m, key, extra) {
        if (key == null) return "\\" + m;
        keys.push({
            k: key,
            r: extra === "..."
        });
        if (extra === "...") return "(.*)";
        if (extra === ".") return "([^/]+)\\.";
        return "([^/]+)" + (extra || "");
    }) + "$");
    return function(data) {
        // First, check the params. Usually, there isn't any, and it's just
        // checking a static set.
        for(var i = 0; i < templateKeys.length; i++){
            if (templateData.params[templateKeys[i]] !== data.params[templateKeys[i]]) return false;
        }
        // If no interpolations exist, let's skip all the ceremony
        if (!keys.length) return regexp.test(data.path);
        var values = regexp.exec(data.path);
        if (values == null) return false;
        for(var i = 0; i < keys.length; i++)data.params[keys[i].k] = keys[i].r ? values[i + 1] : decodeURIComponent(values[i + 1]);
        return true;
    };
};

});

parcelRegister("1Zud9", function(module, exports) {
"use strict";

var $9MCRO = parcelRequire("9MCRO");
// Words in RegExp literals are sometimes mangled incorrectly by the internal bundler, so use RegExp().
var $1732ec3cd5be4a3d$var$magic = new RegExp("^(?:key|oninit|oncreate|onbeforeupdate|onupdate|onbeforeremove|onremove)$");
module.exports = function(attrs, extras) {
    var result = {};
    if (extras != null) {
        for(var key in attrs)if ($9MCRO.call(attrs, key) && !$1732ec3cd5be4a3d$var$magic.test(key) && extras.indexOf(key) < 0) result[key] = attrs[key];
    } else {
        for(var key in attrs)if ($9MCRO.call(attrs, key) && !$1732ec3cd5be4a3d$var$magic.test(key)) result[key] = attrs[key];
    }
    return result;
};

});



parcelRegister("cp2gL", function(module, exports) {
"use strict";
// Generated using scripts/write-decode-map.ts
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.default = new Uint16Array(// prettier-ignore
'\u1D41<\xd5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig\u803B\xc6\u40C6P\u803B&\u4026cute\u803B\xc1\u40C1reve;\u4102\u0100iyx}rc\u803B\xc2\u40C2;\u4410r;\uC000\ud835\udd04rave\u803B\xc0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9d\xa1on;\u4104f;\uC000\ud835\udd38plyFunction;\u6061ing\u803B\xc5\u40C5\u0100cs\xbe\xc3r;\uC000\ud835\udc9cign;\u6254ilde\u803B\xc3\u40C3ml\u803B\xc4\u40C4\u0400aceforsu\xe5\xfb\xfe\u0117\u011C\u0122\u0127\u012A\u0100cr\xea\xf2kslash;\u6216\u0176\xf6\xf8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\ud835\udd05pf;\uC000\ud835\udd39eve;\u42D8c\xf2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xa9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xc7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xf2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\ud835\udc9ep\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\ud835\udd07\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\ud835\udd3b\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xec\u0239o\u0274\u0379\0\0\u037B\xbb\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xe5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\ud835\udc9frok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xd0\u40D0cute\u803B\xc9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xca\u40CA;\u442Dot;\u4116r;\uC000\ud835\udd08rave\u803B\xc8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\ud835\udd3csilon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xcb\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\ud835\udd09lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\ud835\udd3dAll;\u6200riertrf;\u6131c\xf2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\ud835\udd0a;\u62D9pf;\uC000\ud835\udd3eeater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\ud835\udca2;\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xf2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xf0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xcd\u40CD\u0100iy\u0713\u0718rc\u803B\xce\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xcc\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xf3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\ud835\udd40a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xcf\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\ud835\udd0dpf;\uC000\ud835\udd41\u01E3\u07C7\0\u07CCr;\uC000\ud835\udca5rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\ud835\udd0epf;\uC000\ud835\udd42cr;\uC000\ud835\udca6\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xe1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\ud835\udd0f\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xe1\u03BFight\xe1\u03CAf;\uC000\ud835\udd43er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xf2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\ud835\udd10nusPlus;\u6213pf;\uC000\ud835\udd44c\xf2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xeb\u0AD9eryThi\xee\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xf2\u0673essLes\xf3\u0A48Line;\u400Ar;\uC000\ud835\udd11\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\ud835\udca9ilde\u803B\xd1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xd3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xd4\u40D4;\u441Eblac;\u4150r;\uC000\ud835\udd12rave\u803B\xd2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\ud835\udd46enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\ud835\udcaaash\u803B\xd8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xd5\u40D5es;\u6A37ml\u803B\xd6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\ud835\udd13i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xe5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\ud835\udcab;\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\ud835\udd14pf;\u611Acr;\uC000\ud835\udcac\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xae\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xbb\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\ud835\udd16ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xbb\u041EeftArrow\xbb\u089AightArrow\xbb\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\ud835\udd4a\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\ud835\udcaear;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xe1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xbb\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xde\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\ud835\udd17\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\ud835\udd4bipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\ud835\udcafrok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xda\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xdb\u40DB;\u4423blac;\u4170r;\uC000\ud835\udd18rave\u803B\xd9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\ud835\udd4c\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xe1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\ud835\udcb0ilde;\u4168ml\u803B\xdc\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\ud835\udd19pf;\uC000\ud835\udd4dcr;\uC000\ud835\udcb1dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\ud835\udd1apf;\uC000\ud835\udd4ecr;\uC000\ud835\udcb2\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\ud835\udd1b;\u439Epf;\uC000\ud835\udd4fcr;\uC000\ud835\udcb3\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xdd\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\ud835\udd1cpf;\uC000\ud835\udd50cr;\uC000\ud835\udcb4ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xe8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\ud835\udcb5\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xe1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xe2\u40E2te\u80BB\xb4\u0306;\u4430lig\u803B\xe6\u40E6\u0100;r\xb2\u15BA;\uC000\ud835\udd1erave\u803B\xe0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xe8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xbb\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xbb\xb9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\ud835\udd52\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xf1\u1683ing\u803B\xe5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\ud835\udcb6;\u402Amp\u0100;e\u12C1\u16AF\xf1\u0288ilde\u803B\xe3\u40E3ml\u803B\xe4\u40E4\u0100ci\u16C2\u16C8onin\xf4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xbb\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xe9\u170Cno\xf5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\ud835\udd1fg\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xf0\u0760rc;\u65EFp\xbb\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xe5\u1444\xe5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\ud835\udd53\u0100;t\u13CB\u1863om\xbb\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xa6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\ud835\udcb7mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xbb\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xee\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xe7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xb8\u01ADptyv;\u69B2t\u8100\xa2;e\u1A2D\u1A2E\u40A2r\xe4\u01B2r;\uC000\ud835\udd20\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xbb\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xbb\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xbb\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xc7\xc6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xee\u1160e\u0100mx\u1AF1\u1AF6ent\xbb\u1AE9e\xf3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xf4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\ud835\udd54o\xe4\u0254\u8100\xa9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\ud835\udcb8\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xe3\u1B73u\xe3\u1B75ee;\u62CEedge;\u62CFen\u803B\xa4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xbb\u1B80ight\xbb\u1BBDe\xe4\u1BDD\u0100ci\u1C01\u1C07onin\xf4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xf2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xf2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xbb\u090A\u016B\u1C61\u1C67arow;\u690Fa\xe3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xb0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\ud835\udd21ar\u0100lr\u1CB3\u1CB5\xbb\u08DC\xbb\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xf7;o\u1CE7\u1CF0ntimes;\u62C7n\xf8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\ud835\udd55\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xe5\xfan\u0180adh\u112E\u1D5D\u1D67ownarrow\xf3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xf4\u1CB4igh\xf4\u1CB6\u0162\u1D7F\u1D85karo\xf7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\ud835\udcb9;\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xf2\u0429a\xf2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xf4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xe9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xea\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\ud835\udd22\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xe8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xbb\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\ud835\udd56\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xbb\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xbb\u1E2E\u0269\u1EF9\0\0\u1EFB\xed\u0548ant\u0100gl\u1F02\u1F06tr\xbb\u1E5Dess\xbb\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xf4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xf0\u40F0\u0100mr\u1F53\u1F57l\u803B\xeb\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xf4\u056E\u0100eo\u1F6C\u1F74ctatio\xee\u0559nential\xe5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xf1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\ud835\udd23lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\ud835\udd57\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xbd\u40BD;\u6153\u803B\xbc\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xbe\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\ud835\udcbb\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xf4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\ud835\udd24\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xbb\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\ud835\udd58\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xf8\u209Er;\u6978q\u0100lq\u063F\u2196les\xf3\u2088i\xed\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xc5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xf2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xf0\u1484f\xbb\u2024il\xf4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xbb\u220Alip;\u6026con;\u62B9r;\uC000\ud835\udd25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\ud835\udd59bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\ud835\udcbdas\xe8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xbb\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xed\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xee\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xa1\u40A1\u0100fr\u039F\u22C9;\uC000\ud835\udd26rave\u803B\xec\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xe5\u078Ear\xf4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xf4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xf3\u1563\xe3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\ud835\udd5aa;\u43B9uest\u803B\xbf\u40BF\u0100ci\u238A\u238Fr;\uC000\ud835\udcben\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xef\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\ud835\udd27ath;\u4237pf;\uC000\ud835\udd5b\u01E3\u23EC\0\u23F1r;\uC000\ud835\udcbfrcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\ud835\udd28reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\ud835\udd5ccr;\uC000\ud835\udcc0\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xf2\u09C6\xf2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xee\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xe5\u088E;\u6A85uo\u803B\xab\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xeb\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xec\u08B0\xe2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xe9\u24F6arpoon\u0100du\u25AF\u25B4own\xbb\u045Ap\xbb\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xf3\u0F98quigarro\xf7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xf4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xf8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xf4\u0989gt\xf2\u248C\xf4\u099Bi\xed\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\ud835\udd29\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xf2\u25C1orne\xf2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xbb\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xbb\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xeb\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xe1\u09F2apsto;\u67FCight\xe1\u09FDparrow\u0100lr\u2725\u2729ef\xf4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\ud835\udd5dus;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xe1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xbb\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xf2\u08A8orne\xf2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\ud835\udcc1m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xe5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xc5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xaf\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xbb\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xee\u048Cef\xf4\u090F\xf0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xbb\u1626r;\uC000\ud835\udd2ao;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xb5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xf4\u16A7ir;\u6AF0ot\u80BB\xb7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xf2\u2212\xf0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\ud835\udd5e\u0100ct\u28F8\u28FDr;\uC000\ud835\udcc2pos\xbb\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xbb\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xf8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xa0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xf6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xed\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\ud835\udd2b\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xf4\u0BE2i\xed\u0BEA\u0100;r\u0BB6\u2A81\xbb\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xf2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xf2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xf7\u2AC1ightarro\xf7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xf4\u0C55\u0100;s\u0C55\u2AF4\xbb\u0C36i\xed\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xe4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\ud835\udd5f\u8180\xac;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xec\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xe5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xf1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xf2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xbb\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xe5\u0D45;\uC000\ud835\udcc3ort\u026D\u2B05\0\0\u2BD6ar\xe1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xe5\u0CF8\xe5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xf1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xec\u0BD7lde\u803B\xf1\u40F1\xe7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xf1\u0C26ight\u0100;e\u0CCB\u2C65\xf1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xf3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xf4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\ud835\udd2c\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xf2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xf2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xe5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\ud835\udd60\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xf2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xbb\u2DFF\u803B\xaa\u40AA\u803B\xba\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xf2\u2E01ash\u803B\xf8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xf5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xf6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xb6;l\u2E6D\u2E6E\u40B6le\xec\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\ud835\udd2d\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xf4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xbb\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xf6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xb1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\ud835\udd61nd\u803B\xa3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xe5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xf8\u2F43urlye\xf1\u0ED9\xf1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xed\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xf0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xef\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\ud835\udcc5;\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\ud835\udd2epf;\uC000\ud835\udd62rime;\u6057cr;\uC000\ud835\udcc6\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xf3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xf1\u1F19\xf4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xf2\u10B3\xf2\u03DDail;\u691Car\xf2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xe3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xe5\u0FD1uo\u803B\xbb\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xeb\u225D\xf0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xf3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xf2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xec\u0FF2\xe2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xe5\u10BBar\xf4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\ud835\udd2f\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xbb\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xe9\u30C8arpoon\u0100du\u31BB\u31BFow\xee\u317Ep\xbb\u1092eft\u0100ah\u31CA\u31D0rrow\xf3\u0FEAarpoon\xf3\u0551ightarrows;\u61C9quigarro\xf7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xf1\u1F32\u0180ahm\u320D\u3210\u3213r\xf2\u0FEAa\xf2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xbb\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xeb\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\ud835\udd63us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xf2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\ud835\udcc7\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xe5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xef\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xe5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xed\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xeb\u2228\u0100;o\u0A36\u0A34t\u803B\xa7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xf0nu\xf3\xf1t;\u6736r\u0100;o\u3376\u2055\uC000\ud835\udd30\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xe4\u1464ara\xec\u2E6F\u803B\xad\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xf2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xe9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\ud835\udd64a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xbb\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xf1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xf1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xbb\u117Car\xf2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\ud835\udcc8tm\xee\xf1i\xec\u3415ar\xe6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xee\u1EE0h\xe9\u2EAFs\xbb\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xf8\u32FAurlye\xf1\u11FE\xf1\u11F3\u0180aes\u3582\u3588\u331Bppro\xf8\u331Aq\xf1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xb9\u40B9\u803B\xb2\u40B2\u803B\xb3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xeb\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xdf\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xeb\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\ud835\udd31\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xf8\u12C1im\xbb\u12ACs\xf0\u129E\u0100as\u36BA\u36AE\xf0\u12C1rn\u803B\xfe\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xd7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xe1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\ud835\udd65rk;\u6ADA\xe1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xe5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xbb\u1DBBeft\u0100;e\u2800\u373E\xf1\u092E;\u625Cight\u0100;e\u32AA\u374B\xf1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\ud835\udcc9;\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xf4\u1777head\u0100lr\u3797\u37A0eftarro\xf7\u084Fightarrow\xbb\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xf2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xfa\u40FA\xf2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xfb\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xf2\u13ADlac;\u4171a\xf2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\ud835\udd32rave\u803B\xf9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xbb\u0957\xbb\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xbb\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xa8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\ud835\udd66\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xe1\u13B3arpoon\u0100lr\u3888\u388Cef\xf4\u382Digh\xf4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xbb\u13FAon\xbb\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xbb\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\ud835\udcca\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xbb\u1813\u0100am\u38EF\u38F2r\xf2\u38A8l\u803B\xfc\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xf2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xe8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xe1\u2415othin\xe7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xf4\u2FB5\u0100;h\u13B7\u3962\xef\u318D\u0100iu\u3969\u396Dgm\xe1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xe1\u369Ciangle\u0100lr\u39AA\u39AFeft\xbb\u0925ight\xbb\u1051y;\u4432ash\xbb\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xf2\u1469r;\uC000\ud835\udd33tr\xe9\u39AEsu\u0100bp\u39EF\u39F1\xbb\u0D1C\xbb\u0D59pf;\uC000\ud835\udd67ro\xf0\u0EFBtr\xe9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\ud835\udccb\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xbb\u397En\u0100Ee\u3992\u3A1E\xbb\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\ud835\udd34pf;\uC000\ud835\udd68\u0100;e\u1479\u3A66at\xe8\u1479cr;\uC000\ud835\udccc\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xe9\u17D1r;\uC000\ud835\udd35\u0100Aa\u3A94\u3A97r\xf2\u03C3r\xf2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xf2\u03B8r\xf2\u09EBa\xf0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\ud835\udd69im\xe5\u17B2\u0100Aa\u3AC7\u3ACAr\xf2\u03CEr\xf2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\ud835\udccd\u0100pt\u17D6\u3ADCr\xe9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xfd\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xa5\u40A5r;\uC000\ud835\udd36cy;\u4457pf;\uC000\ud835\udd6acr;\uC000\ud835\udcce\u0100cm\u3B26\u3B29y;\u444El\u803B\xff\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xe6\u155Fa;\u43B6r;\uC000\ud835\udd37cy;\u4436grarr;\u61DDpf;\uC000\ud835\udd6bcr;\uC000\ud835\udccf\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map(function(c) {
    return c.charCodeAt(0);
}));

});

parcelRegister("jDyhq", function(module, exports) {
"use strict";
// Generated using scripts/write-decode-map.ts
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.default = new Uint16Array(// prettier-ignore
"\u0200aglq	\x15\x18\x1b\u026D\x0f\0\0\x12p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map(function(c) {
    return c.charCodeAt(0);
}));

});

parcelRegister("eliVh", function(module, exports) {
"use strict";
// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
var $a711b48927e8aad7$var$_a;
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.replaceCodePoint = module.exports.fromCodePoint = void 0;
var $a711b48927e8aad7$var$decodeMap = new Map([
    [
        0,
        65533
    ],
    // C1 Unicode control character reference replacements
    [
        128,
        8364
    ],
    [
        130,
        8218
    ],
    [
        131,
        402
    ],
    [
        132,
        8222
    ],
    [
        133,
        8230
    ],
    [
        134,
        8224
    ],
    [
        135,
        8225
    ],
    [
        136,
        710
    ],
    [
        137,
        8240
    ],
    [
        138,
        352
    ],
    [
        139,
        8249
    ],
    [
        140,
        338
    ],
    [
        142,
        381
    ],
    [
        145,
        8216
    ],
    [
        146,
        8217
    ],
    [
        147,
        8220
    ],
    [
        148,
        8221
    ],
    [
        149,
        8226
    ],
    [
        150,
        8211
    ],
    [
        151,
        8212
    ],
    [
        152,
        732
    ],
    [
        153,
        8482
    ],
    [
        154,
        353
    ],
    [
        155,
        8250
    ],
    [
        156,
        339
    ],
    [
        158,
        382
    ],
    [
        159,
        376
    ]
]);
/**
 * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.
 */ module.exports.fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
($a711b48927e8aad7$var$_a = String.fromCodePoint) !== null && $a711b48927e8aad7$var$_a !== void 0 ? $a711b48927e8aad7$var$_a : function(codePoint) {
    var output = "";
    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
        codePoint = 0xdc00 | codePoint & 0x3ff;
    }
    output += String.fromCharCode(codePoint);
    return output;
};
/**
 * Replace the given code point with a replacement character if it is a
 * surrogate or is outside the valid range. Otherwise return the code
 * point unchanged.
 */ function $a711b48927e8aad7$var$replaceCodePoint(codePoint) {
    var _a;
    if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) return 0xfffd;
    return (_a = $a711b48927e8aad7$var$decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
}
module.exports.replaceCodePoint = $a711b48927e8aad7$var$replaceCodePoint;
/**
 * Replace the code point if relevant, then convert it to a string.
 *
 * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.
 * @param codePoint The code point to decode.
 * @returns The decoded code point.
 */ function $a711b48927e8aad7$var$decodeCodePoint(codePoint) {
    return (0, module.exports.fromCodePoint)($a711b48927e8aad7$var$replaceCodePoint(codePoint));
}
module.exports.default = $a711b48927e8aad7$var$decodeCodePoint;

});

parcelRegister("bbppa", function(module, exports) {

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");
"use strict";

var $eduiQ = parcelRequire("eduiQ");

var $2IAAM = parcelRequire("2IAAM");

var $fAUxG = parcelRequire("fAUxG");

var $9Gorm = parcelRequire("9Gorm");

var $bCWd1 = parcelRequire("bCWd1");

var $a58J2 = parcelRequire("a58J2");
var $82446db217294455$var$DEFAULT_HEADERS = {
    "User-Agent": "rss-parser",
    "Accept": "application/rss+xml"
};
var $82446db217294455$var$DEFAULT_MAX_REDIRECTS = 5;
var $82446db217294455$var$DEFAULT_TIMEOUT = 60000;
var $82446db217294455$var$Parser = /*#__PURE__*/ function() {
    function Parser() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        (0, $hrxTm._)(this, Parser);
        options.headers = options.headers || {};
        options.xml2js = options.xml2js || {};
        options.customFields = options.customFields || {};
        options.customFields.item = options.customFields.item || [];
        options.customFields.feed = options.customFields.feed || [];
        options.requestOptions = options.requestOptions || {};
        if (!options.maxRedirects) options.maxRedirects = $82446db217294455$var$DEFAULT_MAX_REDIRECTS;
        if (!options.timeout) options.timeout = $82446db217294455$var$DEFAULT_TIMEOUT;
        this.options = options;
        this.xmlParser = new $fAUxG.Parser(this.options.xml2js);
    }
    (0, $ggnt0._)(Parser, [
        {
            key: "parseString",
            value: function parseString(xml, callback) {
                var _this = this;
                var prom = new Promise(function(resolve, reject) {
                    _this.xmlParser.parseString(xml, function(err, result) {
                        if (err) return reject(err);
                        if (!result) return reject(new Error("Unable to parse XML."));
                        var feed = null;
                        if (result.feed) feed = _this.buildAtomFeed(result);
                        else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/^2/)) feed = _this.buildRSS2(result);
                        else if (result["rdf:RDF"]) feed = _this.buildRSS1(result);
                        else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/0\.9/)) feed = _this.buildRSS0_9(result);
                        else if (result.rss && _this.options.defaultRSS) switch(_this.options.defaultRSS){
                            case 0.9:
                                feed = _this.buildRSS0_9(result);
                                break;
                            case 1:
                                feed = _this.buildRSS1(result);
                                break;
                            case 2:
                                feed = _this.buildRSS2(result);
                                break;
                            default:
                                return reject(new Error("default RSS version not recognized."));
                        }
                        else return reject(new Error("Feed not recognized as RSS 1 or 2."));
                        resolve(feed);
                    });
                });
                prom = $a58J2.maybePromisify(callback, prom);
                return prom;
            }
        },
        {
            key: "parseURL",
            value: function parseURL(feedUrl, callback) {
                var _this = this;
                var redirectCount = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
                var xml = "";
                var get = feedUrl.indexOf("https") === 0 ? $2IAAM.get : $eduiQ.get;
                var urlParts = $9Gorm.parse(feedUrl);
                var headers = Object.assign({}, $82446db217294455$var$DEFAULT_HEADERS, this.options.headers);
                var timeout = null;
                var prom = new Promise(function(resolve, reject) {
                    var requestOpts = Object.assign({
                        headers: headers
                    }, urlParts, _this.options.requestOptions);
                    var req = get(requestOpts, function(res) {
                        if (_this.options.maxRedirects && res.statusCode >= 300 && res.statusCode < 400 && res.headers["location"]) {
                            if (redirectCount === _this.options.maxRedirects) return reject(new Error("Too many redirects"));
                            else {
                                var newLocation = $9Gorm.resolve(feedUrl, res.headers["location"]);
                                return _this.parseURL(newLocation, null, redirectCount + 1).then(resolve, reject);
                            }
                        } else if (res.statusCode >= 300) return reject(new Error("Status code " + res.statusCode));
                        var encoding = $a58J2.getEncodingFromContentType(res.headers["content-type"]);
                        res.setEncoding(encoding);
                        res.on("data", function(chunk) {
                            xml += chunk;
                        });
                        res.on("end", function() {
                            return _this.parseString(xml).then(resolve, reject);
                        });
                    });
                    req.on("error", reject);
                    timeout = setTimeout(function() {
                        return reject(new Error("Request timed out after " + _this.options.timeout + "ms"));
                    }, _this.options.timeout);
                }).then(function(data) {
                    clearTimeout(timeout);
                    return Promise.resolve(data);
                }, function(e) {
                    clearTimeout(timeout);
                    return Promise.reject(e);
                });
                prom = $a58J2.maybePromisify(callback, prom);
                return prom;
            }
        },
        {
            key: "buildAtomFeed",
            value: function buildAtomFeed(xmlObj) {
                var _this = this;
                var feed = {
                    items: []
                };
                $a58J2.copyFromXML(xmlObj.feed, feed, this.options.customFields.feed);
                if (xmlObj.feed.link) {
                    feed.link = $a58J2.getLink(xmlObj.feed.link, "alternate", 0);
                    feed.feedUrl = $a58J2.getLink(xmlObj.feed.link, "self", 1);
                }
                if (xmlObj.feed.title) {
                    var title = xmlObj.feed.title[0] || "";
                    if (title._) title = title._;
                    if (title) feed.title = title;
                }
                if (xmlObj.feed.updated) feed.lastBuildDate = xmlObj.feed.updated[0];
                feed.items = (xmlObj.feed.entry || []).map(function(entry) {
                    return _this.parseItemAtom(entry);
                });
                return feed;
            }
        },
        {
            key: "parseItemAtom",
            value: function parseItemAtom(entry) {
                var item = {};
                $a58J2.copyFromXML(entry, item, this.options.customFields.item);
                if (entry.title) {
                    var title = entry.title[0] || "";
                    if (title._) title = title._;
                    if (title) item.title = title;
                }
                if (entry.link && entry.link.length) item.link = $a58J2.getLink(entry.link, "alternate", 0);
                if (entry.published && entry.published.length && entry.published[0].length) item.pubDate = new Date(entry.published[0]).toISOString();
                if (!item.pubDate && entry.updated && entry.updated.length && entry.updated[0].length) item.pubDate = new Date(entry.updated[0]).toISOString();
                if (entry.author && entry.author.length && entry.author[0].name && entry.author[0].name.length) item.author = entry.author[0].name[0];
                if (entry.content && entry.content.length) {
                    item.content = $a58J2.getContent(entry.content[0]);
                    item.contentSnippet = $a58J2.getSnippet(item.content);
                }
                if (entry.summary && entry.summary.length) item.summary = $a58J2.getContent(entry.summary[0]);
                if (entry.id) item.id = entry.id[0];
                this.setISODate(item);
                return item;
            }
        },
        {
            key: "buildRSS0_9",
            value: function buildRSS0_9(xmlObj) {
                var channel = xmlObj.rss.channel[0];
                var items = channel.item;
                return this.buildRSS(channel, items);
            }
        },
        {
            key: "buildRSS1",
            value: function buildRSS1(xmlObj) {
                xmlObj = xmlObj["rdf:RDF"];
                var channel = xmlObj.channel[0];
                var items = xmlObj.item;
                return this.buildRSS(channel, items);
            }
        },
        {
            key: "buildRSS2",
            value: function buildRSS2(xmlObj) {
                var channel = xmlObj.rss.channel[0];
                var items = channel.item;
                var feed = this.buildRSS(channel, items);
                if (xmlObj.rss.$ && xmlObj.rss.$["xmlns:itunes"]) this.decorateItunes(feed, channel);
                return feed;
            }
        },
        {
            key: "buildRSS",
            value: function buildRSS(channel, items) {
                var _this = this;
                items = items || [];
                var feed = {
                    items: []
                };
                var feedFields = $bCWd1.feed.concat(this.options.customFields.feed);
                var itemFields = $bCWd1.item.concat(this.options.customFields.item);
                if (channel["atom:link"] && channel["atom:link"][0] && channel["atom:link"][0].$) feed.feedUrl = channel["atom:link"][0].$.href;
                if (channel.image && channel.image[0] && channel.image[0].url) {
                    feed.image = {};
                    var image = channel.image[0];
                    if (image.link) feed.image.link = image.link[0];
                    if (image.url) feed.image.url = image.url[0];
                    if (image.title) feed.image.title = image.title[0];
                    if (image.width) feed.image.width = image.width[0];
                    if (image.height) feed.image.height = image.height[0];
                }
                var paginationLinks = this.generatePaginationLinks(channel);
                if (Object.keys(paginationLinks).length) feed.paginationLinks = paginationLinks;
                $a58J2.copyFromXML(channel, feed, feedFields);
                feed.items = items.map(function(xmlItem) {
                    return _this.parseItemRss(xmlItem, itemFields);
                });
                return feed;
            }
        },
        {
            key: "parseItemRss",
            value: function parseItemRss(xmlItem, itemFields) {
                var item = {};
                $a58J2.copyFromXML(xmlItem, item, itemFields);
                if (xmlItem.enclosure) item.enclosure = xmlItem.enclosure[0].$;
                if (xmlItem.description) {
                    item.content = $a58J2.getContent(xmlItem.description[0]);
                    item.contentSnippet = $a58J2.getSnippet(item.content);
                }
                if (xmlItem.guid) {
                    item.guid = xmlItem.guid[0];
                    if (item.guid._) item.guid = item.guid._;
                }
                if (xmlItem.$ && xmlItem.$["rdf:about"]) item["rdf:about"] = xmlItem.$["rdf:about"];
                if (xmlItem.category) item.categories = xmlItem.category;
                this.setISODate(item);
                return item;
            }
        },
        {
            /**
   * Add iTunes specific fields from XML to extracted JSON
   *
   * @access public
   * @param {object} feed extracted
   * @param {object} channel parsed XML
   */ key: "decorateItunes",
            value: function decorateItunes(feed, channel) {
                var items = channel.item || [];
                var categories = [];
                feed.itunes = {};
                if (channel["itunes:owner"]) {
                    var owner = {};
                    if (channel["itunes:owner"][0]["itunes:name"]) owner.name = channel["itunes:owner"][0]["itunes:name"][0];
                    if (channel["itunes:owner"][0]["itunes:email"]) owner.email = channel["itunes:owner"][0]["itunes:email"][0];
                    feed.itunes.owner = owner;
                }
                if (channel["itunes:image"]) {
                    var image;
                    var hasImageHref = channel["itunes:image"][0] && channel["itunes:image"][0].$ && channel["itunes:image"][0].$.href;
                    image = hasImageHref ? channel["itunes:image"][0].$.href : null;
                    if (image) feed.itunes.image = image;
                }
                if (channel["itunes:category"]) {
                    var categoriesWithSubs = channel["itunes:category"].map(function(category) {
                        return {
                            name: category && category.$ && category.$.text,
                            subs: category["itunes:category"] ? category["itunes:category"].map(function(subcategory) {
                                return {
                                    name: subcategory && subcategory.$ && subcategory.$.text
                                };
                            }) : null
                        };
                    });
                    feed.itunes.categories = categoriesWithSubs.map(function(category) {
                        return category.name;
                    });
                    feed.itunes.categoriesWithSubs = categoriesWithSubs;
                }
                if (channel["itunes:keywords"]) {
                    if (channel["itunes:keywords"].length > 1) feed.itunes.keywords = channel["itunes:keywords"].map(function(keyword) {
                        return keyword && keyword.$ && keyword.$.text;
                    });
                    else {
                        var keywords = channel["itunes:keywords"][0];
                        if (keywords && typeof keywords._ === "string") keywords = keywords._;
                        if (keywords && keywords.$ && keywords.$.text) feed.itunes.keywords = keywords.$.text.split(",");
                        else if (typeof keywords === "string") feed.itunes.keywords = keywords.split(",");
                    }
                }
                $a58J2.copyFromXML(channel, feed.itunes, $bCWd1.podcastFeed);
                items.forEach(function(item, index) {
                    var entry = feed.items[index];
                    entry.itunes = {};
                    $a58J2.copyFromXML(item, entry.itunes, $bCWd1.podcastItem);
                    var image = item["itunes:image"];
                    if (image && image[0] && image[0].$ && image[0].$.href) entry.itunes.image = image[0].$.href;
                });
            }
        },
        {
            key: "setISODate",
            value: function setISODate(item) {
                var date = item.pubDate || item.date;
                if (date) try {
                    item.isoDate = new Date(date.trim()).toISOString();
                } catch (e) {
                // Ignore bad date format
                }
            }
        },
        {
            /**
   * Generates a pagination object where the rel attribute is the key and href attribute is the value
   *  { self: 'self-url', first: 'first-url', ...  }
   *
   * @access private
   * @param {Object} channel parsed XML
   * @returns {Object}
   */ key: "generatePaginationLinks",
            value: function generatePaginationLinks(channel) {
                if (!channel["atom:link"]) return {};
                var paginationRelAttributes = [
                    "self",
                    "first",
                    "next",
                    "prev",
                    "last"
                ];
                return channel["atom:link"].reduce(function(paginationLinks, link) {
                    if (!link.$ || !paginationRelAttributes.includes(link.$.rel)) return paginationLinks;
                    paginationLinks[link.$.rel] = link.$.href;
                    return paginationLinks;
                }, {});
            }
        }
    ]);
    return Parser;
}();
module.exports = $82446db217294455$var$Parser;

});
parcelRegister("hrxTm", function(module, exports) {

$parcel$export(module.exports, "_", function () { return $cb2f3f88719e522a$export$71511d61b312f219; });
function $cb2f3f88719e522a$export$71511d61b312f219(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

});

parcelRegister("ggnt0", function(module, exports) {

$parcel$export(module.exports, "_", function () { return $bd705801bf2c4ea8$export$71511d61b312f219; });
function $bd705801bf2c4ea8$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $bd705801bf2c4ea8$export$71511d61b312f219(Constructor, protoProps, staticProps) {
    if (protoProps) $bd705801bf2c4ea8$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $bd705801bf2c4ea8$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

});

parcelRegister("eduiQ", function(module, exports) {

var $1AdTq = parcelRequire("1AdTq");

var $jdfBJ = parcelRequire("jdfBJ");

var $fDpwR = parcelRequire("fDpwR");

var $gyalw = parcelRequire("gyalw");

var $9Gorm = parcelRequire("9Gorm");
var $a599c91d6e6457cc$var$http = module.exports;
$a599c91d6e6457cc$var$http.request = function(opts, cb) {
    if (typeof opts === "string") opts = $9Gorm.parse(opts);
    else opts = $fDpwR(opts);
    // Normally, the page is loaded from http or https, so not specifying a protocol
    // will result in a (valid) protocol-relative url. However, this won't work if
    // the protocol is something else, like 'file:'
    var defaultProtocol = $parcel$global.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
    var protocol = opts.protocol || defaultProtocol;
    var host = opts.hostname || opts.host;
    var port = opts.port;
    var path = opts.path || "/";
    // Necessary for IPv6 addresses
    if (host && host.indexOf(":") !== -1) host = "[" + host + "]";
    // This may be a relative url. The browser should always be able to interpret it correctly.
    opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path;
    opts.method = (opts.method || "GET").toUpperCase();
    opts.headers = opts.headers || {};
    // Also valid opts.auth, opts.mode
    var req = new $1AdTq(opts);
    if (cb) req.on("response", cb);
    return req;
};
$a599c91d6e6457cc$var$http.get = function get(opts, cb) {
    var req = $a599c91d6e6457cc$var$http.request(opts, cb);
    req.end();
    return req;
};
$a599c91d6e6457cc$var$http.ClientRequest = $1AdTq;
$a599c91d6e6457cc$var$http.IncomingMessage = $jdfBJ.IncomingMessage;
$a599c91d6e6457cc$var$http.Agent = function() {};
$a599c91d6e6457cc$var$http.Agent.defaultMaxSockets = 4;
$a599c91d6e6457cc$var$http.globalAgent = new $a599c91d6e6457cc$var$http.Agent();
$a599c91d6e6457cc$var$http.STATUS_CODES = $gyalw;
$a599c91d6e6457cc$var$http.METHODS = [
    "CHECKOUT",
    "CONNECT",
    "COPY",
    "DELETE",
    "GET",
    "HEAD",
    "LOCK",
    "M-SEARCH",
    "MERGE",
    "MKACTIVITY",
    "MKCOL",
    "MOVE",
    "NOTIFY",
    "OPTIONS",
    "PATCH",
    "POST",
    "PROPFIND",
    "PROPPATCH",
    "PURGE",
    "PUT",
    "REPORT",
    "SEARCH",
    "SUBSCRIBE",
    "TRACE",
    "UNLOCK",
    "UNSUBSCRIBE"
];

});
parcelRegister("1AdTq", function(module, exports) {

var $d6N7B = parcelRequire("d6N7B");
var $1273ee1555924605$require$Buffer = $d6N7B.Buffer;

var $1s5sD = parcelRequire("1s5sD");

var $1gqMK = parcelRequire("1gqMK");

var $4oIhJ = parcelRequire("4oIhJ");

var $jdfBJ = parcelRequire("jdfBJ");

var $gVD4N = parcelRequire("gVD4N");
var $1273ee1555924605$var$IncomingMessage = $jdfBJ.IncomingMessage;
var $1273ee1555924605$var$rStates = $jdfBJ.readyStates;
function $1273ee1555924605$var$decideMode(preferBinary, useFetch) {
    if ($1gqMK.fetch && useFetch) return "fetch";
    else if ($1gqMK.mozchunkedarraybuffer) return "moz-chunked-arraybuffer";
    else if ($1gqMK.msstream) return "ms-stream";
    else if ($1gqMK.arraybuffer && preferBinary) return "arraybuffer";
    else return "text";
}
var $1273ee1555924605$var$ClientRequest = module.exports = function ClientRequest(opts) {
    var self = this;
    $gVD4N.Writable.call(self);
    self._opts = opts;
    self._body = [];
    self._headers = {};
    if (opts.auth) self.setHeader("Authorization", "Basic " + $1273ee1555924605$require$Buffer.from(opts.auth).toString("base64"));
    Object.keys(opts.headers).forEach(function(name) {
        self.setHeader(name, opts.headers[name]);
    });
    var preferBinary;
    var useFetch = true;
    if (opts.mode === "disable-fetch" || "requestTimeout" in opts && !$1gqMK.abortController) {
        // If the use of XHR should be preferred. Not typically needed.
        useFetch = false;
        preferBinary = true;
    } else if (opts.mode === "prefer-streaming") // If streaming is a high priority but binary compatibility and
    // the accuracy of the 'content-type' header aren't
    preferBinary = false;
    else if (opts.mode === "allow-wrong-content-type") // If streaming is more important than preserving the 'content-type' header
    preferBinary = !$1gqMK.overrideMimeType;
    else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") // Use binary if text streaming may corrupt data or the content-type header, or for speed
    preferBinary = true;
    else throw new Error("Invalid value for opts.mode");
    self._mode = $1273ee1555924605$var$decideMode(preferBinary, useFetch);
    self._fetchTimer = null;
    self._socketTimeout = null;
    self._socketTimer = null;
    self.on("finish", function() {
        self._onFinish();
    });
};
$4oIhJ($1273ee1555924605$var$ClientRequest, $gVD4N.Writable);
$1273ee1555924605$var$ClientRequest.prototype.setHeader = function(name, value) {
    var self = this;
    var lowerName = name.toLowerCase();
    // This check is not necessary, but it prevents warnings from browsers about setting unsafe
    // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
    // http-browserify did it, so I will too.
    if ($1273ee1555924605$var$unsafeHeaders.indexOf(lowerName) !== -1) return;
    self._headers[lowerName] = {
        name: name,
        value: value
    };
};
$1273ee1555924605$var$ClientRequest.prototype.getHeader = function(name) {
    var header = this._headers[name.toLowerCase()];
    if (header) return header.value;
    return null;
};
$1273ee1555924605$var$ClientRequest.prototype.removeHeader = function(name) {
    var self = this;
    delete self._headers[name.toLowerCase()];
};
$1273ee1555924605$var$ClientRequest.prototype._onFinish = function() {
    var self = this;
    if (self._destroyed) return;
    var opts = self._opts;
    if ("timeout" in opts && opts.timeout !== 0) self.setTimeout(opts.timeout);
    var headersObj = self._headers;
    var body = null;
    if (opts.method !== "GET" && opts.method !== "HEAD") body = new Blob(self._body, {
        type: (headersObj["content-type"] || {}).value || ""
    });
    // create flattened list of headers
    var headersList = [];
    Object.keys(headersObj).forEach(function(keyName) {
        var name = headersObj[keyName].name;
        var value = headersObj[keyName].value;
        if (Array.isArray(value)) value.forEach(function(v) {
            headersList.push([
                name,
                v
            ]);
        });
        else headersList.push([
            name,
            value
        ]);
    });
    if (self._mode === "fetch") {
        var signal = null;
        if ($1gqMK.abortController) {
            var controller = new AbortController();
            signal = controller.signal;
            self._fetchAbortController = controller;
            if ("requestTimeout" in opts && opts.requestTimeout !== 0) self._fetchTimer = $parcel$global.setTimeout(function() {
                self.emit("requestTimeout");
                if (self._fetchAbortController) self._fetchAbortController.abort();
            }, opts.requestTimeout);
        }
        $parcel$global.fetch(self._opts.url, {
            method: self._opts.method,
            headers: headersList,
            body: body || undefined,
            mode: "cors",
            credentials: opts.withCredentials ? "include" : "same-origin",
            signal: signal
        }).then(function(response) {
            self._fetchResponse = response;
            self._resetTimers(false);
            self._connect();
        }, function(reason) {
            self._resetTimers(true);
            if (!self._destroyed) self.emit("error", reason);
        });
    } else {
        var xhr = self._xhr = new $parcel$global.XMLHttpRequest();
        try {
            xhr.open(self._opts.method, self._opts.url, true);
        } catch (err) {
            $1s5sD.nextTick(function() {
                self.emit("error", err);
            });
            return;
        }
        // Can't set responseType on really old browsers
        if ("responseType" in xhr) xhr.responseType = self._mode;
        if ("withCredentials" in xhr) xhr.withCredentials = !!opts.withCredentials;
        if (self._mode === "text" && "overrideMimeType" in xhr) xhr.overrideMimeType("text/plain; charset=x-user-defined");
        if ("requestTimeout" in opts) {
            xhr.timeout = opts.requestTimeout;
            xhr.ontimeout = function() {
                self.emit("requestTimeout");
            };
        }
        headersList.forEach(function(header) {
            xhr.setRequestHeader(header[0], header[1]);
        });
        self._response = null;
        xhr.onreadystatechange = function() {
            switch(xhr.readyState){
                case $1273ee1555924605$var$rStates.LOADING:
                case $1273ee1555924605$var$rStates.DONE:
                    self._onXHRProgress();
                    break;
            }
        };
        // Necessary for streaming in Firefox, since xhr.response is ONLY defined
        // in onprogress, not in onreadystatechange with xhr.readyState = 3
        if (self._mode === "moz-chunked-arraybuffer") xhr.onprogress = function() {
            self._onXHRProgress();
        };
        xhr.onerror = function() {
            if (self._destroyed) return;
            self._resetTimers(true);
            self.emit("error", new Error("XHR error"));
        };
        try {
            xhr.send(body);
        } catch (err) {
            $1s5sD.nextTick(function() {
                self.emit("error", err);
            });
            return;
        }
    }
};
/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */ function $1273ee1555924605$var$statusValid(xhr) {
    try {
        var status = xhr.status;
        return status !== null && status !== 0;
    } catch (e) {
        return false;
    }
}
$1273ee1555924605$var$ClientRequest.prototype._onXHRProgress = function() {
    var self = this;
    self._resetTimers(false);
    if (!$1273ee1555924605$var$statusValid(self._xhr) || self._destroyed) return;
    if (!self._response) self._connect();
    self._response._onXHRProgress(self._resetTimers.bind(self));
};
$1273ee1555924605$var$ClientRequest.prototype._connect = function() {
    var self = this;
    if (self._destroyed) return;
    self._response = new $1273ee1555924605$var$IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self));
    self._response.on("error", function(err) {
        self.emit("error", err);
    });
    self.emit("response", self._response);
};
$1273ee1555924605$var$ClientRequest.prototype._write = function(chunk, encoding, cb) {
    var self = this;
    self._body.push(chunk);
    cb();
};
$1273ee1555924605$var$ClientRequest.prototype._resetTimers = function(done) {
    var self = this;
    $parcel$global.clearTimeout(self._socketTimer);
    self._socketTimer = null;
    if (done) {
        $parcel$global.clearTimeout(self._fetchTimer);
        self._fetchTimer = null;
    } else if (self._socketTimeout) self._socketTimer = $parcel$global.setTimeout(function() {
        self.emit("timeout");
    }, self._socketTimeout);
};
$1273ee1555924605$var$ClientRequest.prototype.abort = $1273ee1555924605$var$ClientRequest.prototype.destroy = function(err) {
    var self = this;
    self._destroyed = true;
    self._resetTimers(true);
    if (self._response) self._response._destroyed = true;
    if (self._xhr) self._xhr.abort();
    else if (self._fetchAbortController) self._fetchAbortController.abort();
    if (err) self.emit("error", err);
};
$1273ee1555924605$var$ClientRequest.prototype.end = function(data, encoding, cb) {
    var self = this;
    if (typeof data === "function") {
        cb = data;
        data = undefined;
    }
    $gVD4N.Writable.prototype.end.call(self, data, encoding, cb);
};
$1273ee1555924605$var$ClientRequest.prototype.setTimeout = function(timeout, cb) {
    var self = this;
    if (cb) self.once("timeout", cb);
    self._socketTimeout = timeout;
    self._resetTimers(false);
};
$1273ee1555924605$var$ClientRequest.prototype.flushHeaders = function() {};
$1273ee1555924605$var$ClientRequest.prototype.setNoDelay = function() {};
$1273ee1555924605$var$ClientRequest.prototype.setSocketKeepAlive = function() {};
// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var $1273ee1555924605$var$unsafeHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "cookie",
    "cookie2",
    "date",
    "dnt",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "via"
];

});
parcelRegister("d6N7B", function(module, exports) {

$parcel$export(module.exports, "Buffer", function () { return $98b1f06e72c0ec36$export$a143d493d941bafc; }, function (v) { return $98b1f06e72c0ec36$export$a143d493d941bafc = v; });
$parcel$export(module.exports, "SlowBuffer", function () { return $98b1f06e72c0ec36$export$e4cf37d7f6fb9e0a; }, function (v) { return $98b1f06e72c0ec36$export$e4cf37d7f6fb9e0a = v; });
$parcel$export(module.exports, "INSPECT_MAX_BYTES", function () { return $98b1f06e72c0ec36$export$f99ded8fe4b79145; }, function (v) { return $98b1f06e72c0ec36$export$f99ded8fe4b79145 = v; });
$parcel$export(module.exports, "kMaxLength", function () { return $98b1f06e72c0ec36$export$599f31c3813fae4d; }, function (v) { return $98b1f06e72c0ec36$export$599f31c3813fae4d = v; });
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 
var $lXs3c = parcelRequire("lXs3c");

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

var $03TNp = parcelRequire("03TNp");

var $aDbZK = parcelRequire("aDbZK");

var $13zzr = parcelRequire("13zzr");
var $98b1f06e72c0ec36$export$a143d493d941bafc;
var $98b1f06e72c0ec36$export$e4cf37d7f6fb9e0a;
var $98b1f06e72c0ec36$export$f99ded8fe4b79145;
var $98b1f06e72c0ec36$export$599f31c3813fae4d;
"use strict";

var $aFWB4 = parcelRequire("aFWB4");

var $2zFeX = parcelRequire("2zFeX");
var $98b1f06e72c0ec36$var$customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
$98b1f06e72c0ec36$export$a143d493d941bafc = $98b1f06e72c0ec36$var$Buffer;
$98b1f06e72c0ec36$export$e4cf37d7f6fb9e0a = $98b1f06e72c0ec36$var$SlowBuffer;
$98b1f06e72c0ec36$export$f99ded8fe4b79145 = 50;
var $98b1f06e72c0ec36$var$K_MAX_LENGTH = 0x7fffffff;
$98b1f06e72c0ec36$export$599f31c3813fae4d = $98b1f06e72c0ec36$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $98b1f06e72c0ec36$var$Buffer.TYPED_ARRAY_SUPPORT = $98b1f06e72c0ec36$var$typedArraySupport();
if (!$98b1f06e72c0ec36$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $98b1f06e72c0ec36$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function foo() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($98b1f06e72c0ec36$var$Buffer.prototype, "parent", {
    enumerable: true,
    get: function get() {
        if (!$98b1f06e72c0ec36$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($98b1f06e72c0ec36$var$Buffer.prototype, "offset", {
    enumerable: true,
    get: function get() {
        if (!$98b1f06e72c0ec36$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $98b1f06e72c0ec36$var$createBuffer(length) {
    if (length > $98b1f06e72c0ec36$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $98b1f06e72c0ec36$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $98b1f06e72c0ec36$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return $98b1f06e72c0ec36$var$allocUnsafe(arg);
    }
    return $98b1f06e72c0ec36$var$from(arg, encodingOrOffset, length);
}
$98b1f06e72c0ec36$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $98b1f06e72c0ec36$var$from(value, encodingOrOffset, length) {
    if (typeof value === "string") return $98b1f06e72c0ec36$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $98b1f06e72c0ec36$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + (typeof value === "undefined" ? "undefined" : (0, $aDbZK._)(value)));
    if ($98b1f06e72c0ec36$var$isInstance(value, ArrayBuffer) || value && $98b1f06e72c0ec36$var$isInstance(value.buffer, ArrayBuffer)) return $98b1f06e72c0ec36$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && ($98b1f06e72c0ec36$var$isInstance(value, SharedArrayBuffer) || value && $98b1f06e72c0ec36$var$isInstance(value.buffer, SharedArrayBuffer))) return $98b1f06e72c0ec36$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $98b1f06e72c0ec36$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $98b1f06e72c0ec36$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return $98b1f06e72c0ec36$var$Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + (typeof value === "undefined" ? "undefined" : (0, $aDbZK._)(value)));
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $98b1f06e72c0ec36$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $98b1f06e72c0ec36$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($98b1f06e72c0ec36$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($98b1f06e72c0ec36$var$Buffer, Uint8Array);
function $98b1f06e72c0ec36$var$assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $98b1f06e72c0ec36$var$alloc(size, fill, encoding) {
    $98b1f06e72c0ec36$var$assertSize(size);
    if (size <= 0) return $98b1f06e72c0ec36$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? $98b1f06e72c0ec36$var$createBuffer(size).fill(fill, encoding) : $98b1f06e72c0ec36$var$createBuffer(size).fill(fill);
    return $98b1f06e72c0ec36$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $98b1f06e72c0ec36$var$Buffer.alloc = function(size, fill, encoding) {
    return $98b1f06e72c0ec36$var$alloc(size, fill, encoding);
};
function $98b1f06e72c0ec36$var$allocUnsafe(size) {
    $98b1f06e72c0ec36$var$assertSize(size);
    return $98b1f06e72c0ec36$var$createBuffer(size < 0 ? 0 : $98b1f06e72c0ec36$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $98b1f06e72c0ec36$var$Buffer.allocUnsafe = function(size) {
    return $98b1f06e72c0ec36$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $98b1f06e72c0ec36$var$Buffer.allocUnsafeSlow = function(size) {
    return $98b1f06e72c0ec36$var$allocUnsafe(size);
};
function $98b1f06e72c0ec36$var$fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!$98b1f06e72c0ec36$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = $98b1f06e72c0ec36$var$byteLength(string, encoding) | 0;
    var buf = $98b1f06e72c0ec36$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $98b1f06e72c0ec36$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $98b1f06e72c0ec36$var$checked(array.length) | 0;
    var buf = $98b1f06e72c0ec36$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $98b1f06e72c0ec36$var$fromArrayView(arrayView) {
    if ($98b1f06e72c0ec36$var$isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return $98b1f06e72c0ec36$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $98b1f06e72c0ec36$var$fromArrayLike(arrayView);
}
function $98b1f06e72c0ec36$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $98b1f06e72c0ec36$var$Buffer.prototype);
    return buf;
}
function $98b1f06e72c0ec36$var$fromObject(obj) {
    if ($98b1f06e72c0ec36$var$Buffer.isBuffer(obj)) {
        var len = $98b1f06e72c0ec36$var$checked(obj.length) | 0;
        var buf = $98b1f06e72c0ec36$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || $98b1f06e72c0ec36$var$numberIsNaN(obj.length)) return $98b1f06e72c0ec36$var$createBuffer(0);
        return $98b1f06e72c0ec36$var$fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return $98b1f06e72c0ec36$var$fromArrayLike(obj.data);
}
function $98b1f06e72c0ec36$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $98b1f06e72c0ec36$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $98b1f06e72c0ec36$var$K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function $98b1f06e72c0ec36$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $98b1f06e72c0ec36$var$Buffer.alloc(+length);
}
$98b1f06e72c0ec36$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $98b1f06e72c0ec36$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$98b1f06e72c0ec36$var$Buffer.compare = function compare(a, b) {
    if ($98b1f06e72c0ec36$var$isInstance(a, Uint8Array)) a = $98b1f06e72c0ec36$var$Buffer.from(a, a.offset, a.byteLength);
    if ($98b1f06e72c0ec36$var$isInstance(b, Uint8Array)) b = $98b1f06e72c0ec36$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$98b1f06e72c0ec36$var$Buffer.isBuffer(a) || !$98b1f06e72c0ec36$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$98b1f06e72c0ec36$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
$98b1f06e72c0ec36$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $98b1f06e72c0ec36$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $98b1f06e72c0ec36$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($98b1f06e72c0ec36$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!$98b1f06e72c0ec36$var$Buffer.isBuffer(buf)) buf = $98b1f06e72c0ec36$var$Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$98b1f06e72c0ec36$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $98b1f06e72c0ec36$var$byteLength(string, encoding) {
    if ($98b1f06e72c0ec36$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $98b1f06e72c0ec36$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + (typeof string === "undefined" ? "undefined" : (0, $aDbZK._)(string)));
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return $98b1f06e72c0ec36$var$utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return $98b1f06e72c0ec36$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $98b1f06e72c0ec36$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
$98b1f06e72c0ec36$var$Buffer.byteLength = $98b1f06e72c0ec36$var$byteLength;
function $98b1f06e72c0ec36$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return $98b1f06e72c0ec36$var$hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return $98b1f06e72c0ec36$var$utf8Slice(this, start, end);
        case "ascii":
            return $98b1f06e72c0ec36$var$asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return $98b1f06e72c0ec36$var$latin1Slice(this, start, end);
        case "base64":
            return $98b1f06e72c0ec36$var$base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $98b1f06e72c0ec36$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$98b1f06e72c0ec36$var$Buffer.prototype._isBuffer = true;
function $98b1f06e72c0ec36$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$98b1f06e72c0ec36$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)$98b1f06e72c0ec36$var$swap(this, i, i + 1);
    return this;
};
$98b1f06e72c0ec36$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        $98b1f06e72c0ec36$var$swap(this, i, i + 3);
        $98b1f06e72c0ec36$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$98b1f06e72c0ec36$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        $98b1f06e72c0ec36$var$swap(this, i, i + 7);
        $98b1f06e72c0ec36$var$swap(this, i + 1, i + 6);
        $98b1f06e72c0ec36$var$swap(this, i + 2, i + 5);
        $98b1f06e72c0ec36$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$98b1f06e72c0ec36$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return $98b1f06e72c0ec36$var$utf8Slice(this, 0, length);
    return $98b1f06e72c0ec36$var$slowToString.apply(this, arguments);
};
$98b1f06e72c0ec36$var$Buffer.prototype.toLocaleString = $98b1f06e72c0ec36$var$Buffer.prototype.toString;
$98b1f06e72c0ec36$var$Buffer.prototype.equals = function equals(b) {
    if (!$98b1f06e72c0ec36$var$Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return $98b1f06e72c0ec36$var$Buffer.compare(this, b) === 0;
};
$98b1f06e72c0ec36$var$Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = $98b1f06e72c0ec36$export$f99ded8fe4b79145;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if ($98b1f06e72c0ec36$var$customInspectSymbol) $98b1f06e72c0ec36$var$Buffer.prototype[$98b1f06e72c0ec36$var$customInspectSymbol] = $98b1f06e72c0ec36$var$Buffer.prototype.inspect;
$98b1f06e72c0ec36$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($98b1f06e72c0ec36$var$isInstance(target, Uint8Array)) target = $98b1f06e72c0ec36$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$98b1f06e72c0ec36$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + (typeof target === "undefined" ? "undefined" : (0, $aDbZK._)(target)));
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $98b1f06e72c0ec36$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($98b1f06e72c0ec36$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = $98b1f06e72c0ec36$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($98b1f06e72c0ec36$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $98b1f06e72c0ec36$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $98b1f06e72c0ec36$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function $98b1f06e72c0ec36$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
$98b1f06e72c0ec36$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$98b1f06e72c0ec36$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $98b1f06e72c0ec36$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$98b1f06e72c0ec36$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $98b1f06e72c0ec36$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $98b1f06e72c0ec36$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    var i;
    for(i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($98b1f06e72c0ec36$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $98b1f06e72c0ec36$var$utf8Write(buf, string, offset, length) {
    return $98b1f06e72c0ec36$var$blitBuffer($98b1f06e72c0ec36$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $98b1f06e72c0ec36$var$asciiWrite(buf, string, offset, length) {
    return $98b1f06e72c0ec36$var$blitBuffer($98b1f06e72c0ec36$var$asciiToBytes(string), buf, offset, length);
}
function $98b1f06e72c0ec36$var$base64Write(buf, string, offset, length) {
    return $98b1f06e72c0ec36$var$blitBuffer($98b1f06e72c0ec36$var$base64ToBytes(string), buf, offset, length);
}
function $98b1f06e72c0ec36$var$ucs2Write(buf, string, offset, length) {
    return $98b1f06e72c0ec36$var$blitBuffer($98b1f06e72c0ec36$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$98b1f06e72c0ec36$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return $98b1f06e72c0ec36$var$hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return $98b1f06e72c0ec36$var$utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return $98b1f06e72c0ec36$var$asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return $98b1f06e72c0ec36$var$base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $98b1f06e72c0ec36$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
$98b1f06e72c0ec36$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $98b1f06e72c0ec36$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $aFWB4.fromByteArray(buf);
    else return $aFWB4.fromByteArray(buf.slice(start, end));
}
function $98b1f06e72c0ec36$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte = void 0, thirdByte = void 0, fourthByte = void 0, tempCodePoint = void 0;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $98b1f06e72c0ec36$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $98b1f06e72c0ec36$var$MAX_ARGUMENTS_LENGTH = 0x1000;
function $98b1f06e72c0ec36$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $98b1f06e72c0ec36$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $98b1f06e72c0ec36$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $98b1f06e72c0ec36$var$asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function $98b1f06e72c0ec36$var$latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $98b1f06e72c0ec36$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += $98b1f06e72c0ec36$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $98b1f06e72c0ec36$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$98b1f06e72c0ec36$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $98b1f06e72c0ec36$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $98b1f06e72c0ec36$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
$98b1f06e72c0ec36$var$Buffer.prototype.readUintLE = $98b1f06e72c0ec36$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
$98b1f06e72c0ec36$var$Buffer.prototype.readUintBE = $98b1f06e72c0ec36$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
$98b1f06e72c0ec36$var$Buffer.prototype.readUint8 = $98b1f06e72c0ec36$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$98b1f06e72c0ec36$var$Buffer.prototype.readUint16LE = $98b1f06e72c0ec36$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$98b1f06e72c0ec36$var$Buffer.prototype.readUint16BE = $98b1f06e72c0ec36$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$98b1f06e72c0ec36$var$Buffer.prototype.readUint32LE = $98b1f06e72c0ec36$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
$98b1f06e72c0ec36$var$Buffer.prototype.readUint32BE = $98b1f06e72c0ec36$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$98b1f06e72c0ec36$var$Buffer.prototype.readBigUInt64LE = $98b1f06e72c0ec36$var$defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    $98b1f06e72c0ec36$var$validateNumber(offset, "offset");
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) $98b1f06e72c0ec36$var$boundsError(offset, this.length - 8);
    var lo = first + this[++offset] * 256 + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24);
    var hi = this[++offset] + this[++offset] * 256 + this[++offset] * Math.pow(2, 16) + last * Math.pow(2, 24);
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
$98b1f06e72c0ec36$var$Buffer.prototype.readBigUInt64BE = $98b1f06e72c0ec36$var$defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    $98b1f06e72c0ec36$var$validateNumber(offset, "offset");
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) $98b1f06e72c0ec36$var$boundsError(offset, this.length - 8);
    var hi = first * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + this[++offset];
    var lo = this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
$98b1f06e72c0ec36$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$98b1f06e72c0ec36$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$98b1f06e72c0ec36$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
$98b1f06e72c0ec36$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$98b1f06e72c0ec36$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$98b1f06e72c0ec36$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$98b1f06e72c0ec36$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$98b1f06e72c0ec36$var$Buffer.prototype.readBigInt64LE = $98b1f06e72c0ec36$var$defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    $98b1f06e72c0ec36$var$validateNumber(offset, "offset");
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) $98b1f06e72c0ec36$var$boundsError(offset, this.length - 8);
    var val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * Math.pow(2, 16) + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24));
});
$98b1f06e72c0ec36$var$Buffer.prototype.readBigInt64BE = $98b1f06e72c0ec36$var$defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    $98b1f06e72c0ec36$var$validateNumber(offset, "offset");
    var first = this[offset];
    var last = this[offset + 7];
    if (first === undefined || last === undefined) $98b1f06e72c0ec36$var$boundsError(offset, this.length - 8);
    var val = (first << 24) + // Overflow
    this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * 256 + last);
});
$98b1f06e72c0ec36$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 4, this.length);
    return $2zFeX.read(this, offset, true, 23, 4);
};
$98b1f06e72c0ec36$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 4, this.length);
    return $2zFeX.read(this, offset, false, 23, 4);
};
$98b1f06e72c0ec36$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 8, this.length);
    return $2zFeX.read(this, offset, true, 52, 8);
};
$98b1f06e72c0ec36$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkOffset(offset, 8, this.length);
    return $2zFeX.read(this, offset, false, 52, 8);
};
function $98b1f06e72c0ec36$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$98b1f06e72c0ec36$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
$98b1f06e72c0ec36$var$Buffer.prototype.writeUintLE = $98b1f06e72c0ec36$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $98b1f06e72c0ec36$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeUintBE = $98b1f06e72c0ec36$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $98b1f06e72c0ec36$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeUint8 = $98b1f06e72c0ec36$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeUint16LE = $98b1f06e72c0ec36$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeUint16BE = $98b1f06e72c0ec36$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeUint32LE = $98b1f06e72c0ec36$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeUint32BE = $98b1f06e72c0ec36$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function $98b1f06e72c0ec36$var$wrtBigUInt64LE(buf, value, offset, min, max) {
    $98b1f06e72c0ec36$var$checkIntBI(value, min, max, buf, offset, 7);
    var lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function $98b1f06e72c0ec36$var$wrtBigUInt64BE(buf, value, offset, min, max) {
    $98b1f06e72c0ec36$var$checkIntBI(value, min, max, buf, offset, 7);
    var lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
$98b1f06e72c0ec36$var$Buffer.prototype.writeBigUInt64LE = $98b1f06e72c0ec36$var$defineBigIntMethod(function writeBigUInt64LE(value) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return $98b1f06e72c0ec36$var$wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
$98b1f06e72c0ec36$var$Buffer.prototype.writeBigUInt64BE = $98b1f06e72c0ec36$var$defineBigIntMethod(function writeBigUInt64BE(value) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return $98b1f06e72c0ec36$var$wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
$98b1f06e72c0ec36$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $98b1f06e72c0ec36$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $98b1f06e72c0ec36$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeBigInt64LE = $98b1f06e72c0ec36$var$defineBigIntMethod(function writeBigInt64LE(value) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return $98b1f06e72c0ec36$var$wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
$98b1f06e72c0ec36$var$Buffer.prototype.writeBigInt64BE = $98b1f06e72c0ec36$var$defineBigIntMethod(function writeBigInt64BE(value) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return $98b1f06e72c0ec36$var$wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function $98b1f06e72c0ec36$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function $98b1f06e72c0ec36$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    $2zFeX.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$98b1f06e72c0ec36$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $98b1f06e72c0ec36$var$writeFloat(this, value, offset, true, noAssert);
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $98b1f06e72c0ec36$var$writeFloat(this, value, offset, false, noAssert);
};
function $98b1f06e72c0ec36$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $98b1f06e72c0ec36$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    $2zFeX.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$98b1f06e72c0ec36$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $98b1f06e72c0ec36$var$writeDouble(this, value, offset, true, noAssert);
};
$98b1f06e72c0ec36$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $98b1f06e72c0ec36$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$98b1f06e72c0ec36$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$98b1f06e72c0ec36$var$Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$98b1f06e72c0ec36$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !$98b1f06e72c0ec36$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $98b1f06e72c0ec36$var$Buffer.isBuffer(val) ? val : $98b1f06e72c0ec36$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
var $98b1f06e72c0ec36$var$errors = {};
function $98b1f06e72c0ec36$var$E(sym, getMessage, Base) {
    $98b1f06e72c0ec36$var$errors[sym] = /*#__PURE__*/ function(Base) {
        (0, $03TNp._)(NodeError, Base);
        var _super = (0, $13zzr._)(NodeError);
        function NodeError() {
            (0, $hrxTm._)(this, NodeError);
            var _this;
            _this = _super.call(this);
            Object.defineProperty((0, $lXs3c._)(_this), "message", {
                value: getMessage.apply((0, $lXs3c._)(_this), arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            _this.name = "".concat(_this.name, " [").concat(sym, "]");
            // Access the stack to generate the error message including the error code
            // from the name.
            _this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete _this.name;
            return _this;
        }
        (0, $ggnt0._)(NodeError, [
            {
                key: "code",
                get: function get() {
                    return sym;
                },
                set: function set(value) {
                    Object.defineProperty(this, "code", {
                        configurable: true,
                        enumerable: true,
                        value: value,
                        writable: true
                    });
                }
            },
            {
                key: "toString",
                value: function toString() {
                    return "".concat(this.name, " [").concat(sym, "]: ").concat(this.message);
                }
            }
        ]);
        return NodeError;
    }(Base);
}
$98b1f06e72c0ec36$var$E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return "".concat(name, " is outside of buffer bounds");
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
$98b1f06e72c0ec36$var$E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return 'The "'.concat(name, '" argument must be of type number. Received type ').concat(typeof actual === "undefined" ? "undefined" : (0, $aDbZK._)(actual));
}, TypeError);
$98b1f06e72c0ec36$var$E("ERR_OUT_OF_RANGE", function(str, range, input) {
    var msg = 'The value of "'.concat(str, '" is out of range.');
    var received = input;
    if (Number.isInteger(input) && Math.abs(input) > Math.pow(2, 32)) received = $98b1f06e72c0ec36$var$addNumericalSeparator(String(input));
    else if ((typeof input === "undefined" ? "undefined" : (0, $aDbZK._)(input)) === "bigint") {
        received = String(input);
        if (input > Math.pow(BigInt(2), BigInt(32)) || input < -Math.pow(BigInt(2), BigInt(32))) received = $98b1f06e72c0ec36$var$addNumericalSeparator(received);
        received += "n";
    }
    msg += " It must be ".concat(range, ". Received ").concat(received);
    return msg;
}, RangeError);
function $98b1f06e72c0ec36$var$addNumericalSeparator(val) {
    var res = "";
    var i = val.length;
    var start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = "_".concat(val.slice(i - 3, i)).concat(res);
    return "".concat(val.slice(0, i)).concat(res);
}
// CHECK FUNCTIONS
// ===============
function $98b1f06e72c0ec36$var$checkBounds(buf, offset, byteLength) {
    $98b1f06e72c0ec36$var$validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) $98b1f06e72c0ec36$var$boundsError(offset, buf.length - (byteLength + 1));
}
function $98b1f06e72c0ec36$var$checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        var n = (typeof min === "undefined" ? "undefined" : (0, $aDbZK._)(min)) === "bigint" ? "n" : "";
        var range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = ">= 0".concat(n, " and < 2").concat(n, " ** ").concat((byteLength + 1) * 8).concat(n);
            else range = ">= -(2".concat(n, " ** ").concat((byteLength + 1) * 8 - 1).concat(n, ") and < 2 ** ") + "".concat((byteLength + 1) * 8 - 1).concat(n);
        } else range = ">= ".concat(min).concat(n, " and <= ").concat(max).concat(n);
        throw new $98b1f06e72c0ec36$var$errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    $98b1f06e72c0ec36$var$checkBounds(buf, offset, byteLength);
}
function $98b1f06e72c0ec36$var$validateNumber(value, name) {
    if (typeof value !== "number") throw new $98b1f06e72c0ec36$var$errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function $98b1f06e72c0ec36$var$boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        $98b1f06e72c0ec36$var$validateNumber(value, type);
        throw new $98b1f06e72c0ec36$var$errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new $98b1f06e72c0ec36$var$errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new $98b1f06e72c0ec36$var$errors.ERR_OUT_OF_RANGE(type || "offset", ">= ".concat(type ? 1 : 0, " and <= ").concat(length), value);
}
// HELPER FUNCTIONS
// ================
var $98b1f06e72c0ec36$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $98b1f06e72c0ec36$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($98b1f06e72c0ec36$var$INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function $98b1f06e72c0ec36$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function $98b1f06e72c0ec36$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function $98b1f06e72c0ec36$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $98b1f06e72c0ec36$var$base64ToBytes(str) {
    return $aFWB4.toByteArray($98b1f06e72c0ec36$var$base64clean(str));
}
function $98b1f06e72c0ec36$var$blitBuffer(src, dst, offset, length) {
    var i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $98b1f06e72c0ec36$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $98b1f06e72c0ec36$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $98b1f06e72c0ec36$var$hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function $98b1f06e72c0ec36$var$defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? $98b1f06e72c0ec36$var$BufferBigIntNotDefined : fn;
}
function $98b1f06e72c0ec36$var$BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

});
parcelRegister("lXs3c", function(module, exports) {

$parcel$export(module.exports, "_", function () { return $ffc4ddee49929403$export$71511d61b312f219; });
function $ffc4ddee49929403$export$71511d61b312f219(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}

});

parcelRegister("03TNp", function(module, exports) {

$parcel$export(module.exports, "_", function () { return $00bb8fd715f7585b$export$71511d61b312f219; });

var $1KZ30 = parcelRequire("1KZ30");
function $00bb8fd715f7585b$export$71511d61b312f219(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) (0, $1KZ30._)(subClass, superClass);
}

});
parcelRegister("1KZ30", function(module, exports) {

$parcel$export(module.exports, "_", function () { return $147971121f1eb4c7$export$71511d61b312f219; });
function $147971121f1eb4c7$export$71511d61b312f219(o, p) {
    $147971121f1eb4c7$export$71511d61b312f219 = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return $147971121f1eb4c7$export$71511d61b312f219(o, p);
}

});


parcelRegister("aDbZK", function(module, exports) {

$parcel$export(module.exports, "_", function () { return $7bd6d9ddf4a378c5$export$71511d61b312f219; });
function $7bd6d9ddf4a378c5$export$71511d61b312f219(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}

});

parcelRegister("13zzr", function(module, exports) {

$parcel$export(module.exports, "_", function () { return $0c51a9dc5563b2e4$export$71511d61b312f219; });

var $hRvs7 = parcelRequire("hRvs7");

var $jPvPr = parcelRequire("jPvPr");

var $aXiGz = parcelRequire("aXiGz");
function $0c51a9dc5563b2e4$export$71511d61b312f219(Derived) {
    var hasNativeReflectConstruct = (0, $jPvPr._)();
    return function _createSuperInternal() {
        var Super = (0, $hRvs7._)(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = (0, $hRvs7._)(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return (0, $aXiGz._)(this, result);
    };
}

});
parcelRegister("hRvs7", function(module, exports) {

$parcel$export(module.exports, "_", function () { return $d00fc8bdb6a80652$export$71511d61b312f219; });
function $d00fc8bdb6a80652$export$71511d61b312f219(o) {
    $d00fc8bdb6a80652$export$71511d61b312f219 = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return $d00fc8bdb6a80652$export$71511d61b312f219(o);
}

});

parcelRegister("jPvPr", function(module, exports) {

$parcel$export(module.exports, "_", function () { return $e6fb7842b027a47a$export$71511d61b312f219; });
function $e6fb7842b027a47a$export$71511d61b312f219() {
    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
        // If the internal slots aren't set, this throws an error similar to
        //   TypeError: this is not a Boolean object.
        var result = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
    } catch (_) {}
    return ($e6fb7842b027a47a$export$71511d61b312f219 = function() {
        return !!result;
    })();
}

});

parcelRegister("aXiGz", function(module, exports) {

$parcel$export(module.exports, "_", function () { return $7f9de8a66b83d1a7$export$71511d61b312f219; });

var $lXs3c = parcelRequire("lXs3c");

var $aDbZK = parcelRequire("aDbZK");
function $7f9de8a66b83d1a7$export$71511d61b312f219(self, call) {
    if (call && ((0, $aDbZK._)(call) === "object" || typeof call === "function")) return call;
    return (0, $lXs3c._)(self);
}

});


parcelRegister("aFWB4", function(module, exports) {

$parcel$export(module.exports, "toByteArray", function () { return $7c5b2fd7152adf2b$export$d622b2ad8d90c771; }, function (v) { return $7c5b2fd7152adf2b$export$d622b2ad8d90c771 = v; });
$parcel$export(module.exports, "fromByteArray", function () { return $7c5b2fd7152adf2b$export$6100ba28696e12de; }, function (v) { return $7c5b2fd7152adf2b$export$6100ba28696e12de = v; });
var $7c5b2fd7152adf2b$export$a48f0734ac7c2329;
var $7c5b2fd7152adf2b$export$d622b2ad8d90c771;
var $7c5b2fd7152adf2b$export$6100ba28696e12de;
"use strict";
$7c5b2fd7152adf2b$export$a48f0734ac7c2329 = $7c5b2fd7152adf2b$var$byteLength;
$7c5b2fd7152adf2b$export$d622b2ad8d90c771 = $7c5b2fd7152adf2b$var$toByteArray;
$7c5b2fd7152adf2b$export$6100ba28696e12de = $7c5b2fd7152adf2b$var$fromByteArray;
var $7c5b2fd7152adf2b$var$lookup = [];
var $7c5b2fd7152adf2b$var$revLookup = [];
var $7c5b2fd7152adf2b$var$Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var $7c5b2fd7152adf2b$var$code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var $7c5b2fd7152adf2b$var$i = 0, $7c5b2fd7152adf2b$var$len = $7c5b2fd7152adf2b$var$code.length; $7c5b2fd7152adf2b$var$i < $7c5b2fd7152adf2b$var$len; ++$7c5b2fd7152adf2b$var$i){
    $7c5b2fd7152adf2b$var$lookup[$7c5b2fd7152adf2b$var$i] = $7c5b2fd7152adf2b$var$code[$7c5b2fd7152adf2b$var$i];
    $7c5b2fd7152adf2b$var$revLookup[$7c5b2fd7152adf2b$var$code.charCodeAt($7c5b2fd7152adf2b$var$i)] = $7c5b2fd7152adf2b$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$7c5b2fd7152adf2b$var$revLookup["-".charCodeAt(0)] = 62;
$7c5b2fd7152adf2b$var$revLookup["_".charCodeAt(0)] = 63;
function $7c5b2fd7152adf2b$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $7c5b2fd7152adf2b$var$byteLength(b64) {
    var lens = $7c5b2fd7152adf2b$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $7c5b2fd7152adf2b$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $7c5b2fd7152adf2b$var$toByteArray(b64) {
    var tmp;
    var lens = $7c5b2fd7152adf2b$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $7c5b2fd7152adf2b$var$Arr($7c5b2fd7152adf2b$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $7c5b2fd7152adf2b$var$revLookup[b64.charCodeAt(i)] << 18 | $7c5b2fd7152adf2b$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $7c5b2fd7152adf2b$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $7c5b2fd7152adf2b$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = $7c5b2fd7152adf2b$var$revLookup[b64.charCodeAt(i)] << 2 | $7c5b2fd7152adf2b$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = $7c5b2fd7152adf2b$var$revLookup[b64.charCodeAt(i)] << 10 | $7c5b2fd7152adf2b$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $7c5b2fd7152adf2b$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function $7c5b2fd7152adf2b$var$tripletToBase64(num) {
    return $7c5b2fd7152adf2b$var$lookup[num >> 18 & 0x3F] + $7c5b2fd7152adf2b$var$lookup[num >> 12 & 0x3F] + $7c5b2fd7152adf2b$var$lookup[num >> 6 & 0x3F] + $7c5b2fd7152adf2b$var$lookup[num & 0x3F];
}
function $7c5b2fd7152adf2b$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push($7c5b2fd7152adf2b$var$tripletToBase64(tmp));
    }
    return output.join("");
}
function $7c5b2fd7152adf2b$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($7c5b2fd7152adf2b$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($7c5b2fd7152adf2b$var$lookup[tmp >> 2] + $7c5b2fd7152adf2b$var$lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($7c5b2fd7152adf2b$var$lookup[tmp >> 10] + $7c5b2fd7152adf2b$var$lookup[tmp >> 4 & 0x3F] + $7c5b2fd7152adf2b$var$lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

});

parcelRegister("2zFeX", function(module, exports) {

$parcel$export(module.exports, "read", function () { return $1dfed71ec32df6b9$export$aafa59e2e03f2942; }, function (v) { return $1dfed71ec32df6b9$export$aafa59e2e03f2942 = v; });
$parcel$export(module.exports, "write", function () { return $1dfed71ec32df6b9$export$68d8715fc104d294; }, function (v) { return $1dfed71ec32df6b9$export$68d8715fc104d294 = v; });
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $1dfed71ec32df6b9$export$aafa59e2e03f2942;
var $1dfed71ec32df6b9$export$68d8715fc104d294;
$1dfed71ec32df6b9$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$1dfed71ec32df6b9$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

});


parcelRegister("1s5sD", function(module, exports) {
// shim for using process in browser
var $10eca464f140b331$var$process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $10eca464f140b331$var$cachedSetTimeout;
var $10eca464f140b331$var$cachedClearTimeout;
function $10eca464f140b331$var$defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function $10eca464f140b331$var$defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") $10eca464f140b331$var$cachedSetTimeout = setTimeout;
        else $10eca464f140b331$var$cachedSetTimeout = $10eca464f140b331$var$defaultSetTimout;
    } catch (e) {
        $10eca464f140b331$var$cachedSetTimeout = $10eca464f140b331$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") $10eca464f140b331$var$cachedClearTimeout = clearTimeout;
        else $10eca464f140b331$var$cachedClearTimeout = $10eca464f140b331$var$defaultClearTimeout;
    } catch (e) {
        $10eca464f140b331$var$cachedClearTimeout = $10eca464f140b331$var$defaultClearTimeout;
    }
})();
function $10eca464f140b331$var$runTimeout(fun) {
    if ($10eca464f140b331$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($10eca464f140b331$var$cachedSetTimeout === $10eca464f140b331$var$defaultSetTimout || !$10eca464f140b331$var$cachedSetTimeout) && setTimeout) {
        $10eca464f140b331$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $10eca464f140b331$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $10eca464f140b331$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $10eca464f140b331$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $10eca464f140b331$var$runClearTimeout(marker) {
    if ($10eca464f140b331$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($10eca464f140b331$var$cachedClearTimeout === $10eca464f140b331$var$defaultClearTimeout || !$10eca464f140b331$var$cachedClearTimeout) && clearTimeout) {
        $10eca464f140b331$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $10eca464f140b331$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $10eca464f140b331$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $10eca464f140b331$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $10eca464f140b331$var$queue = [];
var $10eca464f140b331$var$draining = false;
var $10eca464f140b331$var$currentQueue;
var $10eca464f140b331$var$queueIndex = -1;
function $10eca464f140b331$var$cleanUpNextTick() {
    if (!$10eca464f140b331$var$draining || !$10eca464f140b331$var$currentQueue) return;
    $10eca464f140b331$var$draining = false;
    if ($10eca464f140b331$var$currentQueue.length) $10eca464f140b331$var$queue = $10eca464f140b331$var$currentQueue.concat($10eca464f140b331$var$queue);
    else $10eca464f140b331$var$queueIndex = -1;
    if ($10eca464f140b331$var$queue.length) $10eca464f140b331$var$drainQueue();
}
function $10eca464f140b331$var$drainQueue() {
    if ($10eca464f140b331$var$draining) return;
    var timeout = $10eca464f140b331$var$runTimeout($10eca464f140b331$var$cleanUpNextTick);
    $10eca464f140b331$var$draining = true;
    var len = $10eca464f140b331$var$queue.length;
    while(len){
        $10eca464f140b331$var$currentQueue = $10eca464f140b331$var$queue;
        $10eca464f140b331$var$queue = [];
        while(++$10eca464f140b331$var$queueIndex < len)if ($10eca464f140b331$var$currentQueue) $10eca464f140b331$var$currentQueue[$10eca464f140b331$var$queueIndex].run();
        $10eca464f140b331$var$queueIndex = -1;
        len = $10eca464f140b331$var$queue.length;
    }
    $10eca464f140b331$var$currentQueue = null;
    $10eca464f140b331$var$draining = false;
    $10eca464f140b331$var$runClearTimeout(timeout);
}
$10eca464f140b331$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $10eca464f140b331$var$queue.push(new $10eca464f140b331$var$Item(fun, args));
    if ($10eca464f140b331$var$queue.length === 1 && !$10eca464f140b331$var$draining) $10eca464f140b331$var$runTimeout($10eca464f140b331$var$drainQueue);
};
// v8 likes predictible objects
function $10eca464f140b331$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$10eca464f140b331$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$10eca464f140b331$var$process.title = "browser";
$10eca464f140b331$var$process.browser = true;
$10eca464f140b331$var$process.env = {};
$10eca464f140b331$var$process.argv = [];
$10eca464f140b331$var$process.version = ""; // empty string to avoid regexp issues
$10eca464f140b331$var$process.versions = {};
function $10eca464f140b331$var$noop() {}
$10eca464f140b331$var$process.on = $10eca464f140b331$var$noop;
$10eca464f140b331$var$process.addListener = $10eca464f140b331$var$noop;
$10eca464f140b331$var$process.once = $10eca464f140b331$var$noop;
$10eca464f140b331$var$process.off = $10eca464f140b331$var$noop;
$10eca464f140b331$var$process.removeListener = $10eca464f140b331$var$noop;
$10eca464f140b331$var$process.removeAllListeners = $10eca464f140b331$var$noop;
$10eca464f140b331$var$process.emit = $10eca464f140b331$var$noop;
$10eca464f140b331$var$process.prependListener = $10eca464f140b331$var$noop;
$10eca464f140b331$var$process.prependOnceListener = $10eca464f140b331$var$noop;
$10eca464f140b331$var$process.listeners = function(name) {
    return [];
};
$10eca464f140b331$var$process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
$10eca464f140b331$var$process.cwd = function() {
    return "/";
};
$10eca464f140b331$var$process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
$10eca464f140b331$var$process.umask = function() {
    return 0;
};

});

parcelRegister("1gqMK", function(module, exports) {

$parcel$export(module.exports, "fetch", function () { return $0ebc100f7cd9322b$export$e7aa7bc5c1b3cfb3; }, function (v) { return $0ebc100f7cd9322b$export$e7aa7bc5c1b3cfb3 = v; });
$parcel$export(module.exports, "writableStream", function () { return $0ebc100f7cd9322b$export$37489d82087dc5d1; }, function (v) { return $0ebc100f7cd9322b$export$37489d82087dc5d1 = v; });
$parcel$export(module.exports, "abortController", function () { return $0ebc100f7cd9322b$export$f137bf8a46425a6f; }, function (v) { return $0ebc100f7cd9322b$export$f137bf8a46425a6f = v; });
$parcel$export(module.exports, "arraybuffer", function () { return $0ebc100f7cd9322b$export$724c4efdc2b90612; }, function (v) { return $0ebc100f7cd9322b$export$724c4efdc2b90612 = v; });
$parcel$export(module.exports, "msstream", function () { return $0ebc100f7cd9322b$export$a9aa1e45c4448986; }, function (v) { return $0ebc100f7cd9322b$export$a9aa1e45c4448986 = v; });
$parcel$export(module.exports, "mozchunkedarraybuffer", function () { return $0ebc100f7cd9322b$export$4c3c163e941f6ba3; }, function (v) { return $0ebc100f7cd9322b$export$4c3c163e941f6ba3 = v; });
$parcel$export(module.exports, "overrideMimeType", function () { return $0ebc100f7cd9322b$export$8f1269d6d73f87ef; }, function (v) { return $0ebc100f7cd9322b$export$8f1269d6d73f87ef = v; });
var $0ebc100f7cd9322b$export$e7aa7bc5c1b3cfb3;
var $0ebc100f7cd9322b$export$37489d82087dc5d1;
var $0ebc100f7cd9322b$export$f137bf8a46425a6f;
// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
var $0ebc100f7cd9322b$export$724c4efdc2b90612;
// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
var $0ebc100f7cd9322b$export$a9aa1e45c4448986;
var $0ebc100f7cd9322b$export$4c3c163e941f6ba3;
// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
var $0ebc100f7cd9322b$export$8f1269d6d73f87ef;
$0ebc100f7cd9322b$export$e7aa7bc5c1b3cfb3 = $0ebc100f7cd9322b$var$isFunction($parcel$global.fetch) && $0ebc100f7cd9322b$var$isFunction($parcel$global.ReadableStream);
$0ebc100f7cd9322b$export$37489d82087dc5d1 = $0ebc100f7cd9322b$var$isFunction($parcel$global.WritableStream);
$0ebc100f7cd9322b$export$f137bf8a46425a6f = $0ebc100f7cd9322b$var$isFunction($parcel$global.AbortController);
// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var $0ebc100f7cd9322b$var$xhr;
function $0ebc100f7cd9322b$var$getXHR() {
    // Cache the xhr value
    if ($0ebc100f7cd9322b$var$xhr !== undefined) return $0ebc100f7cd9322b$var$xhr;
    if ($parcel$global.XMLHttpRequest) {
        $0ebc100f7cd9322b$var$xhr = new $parcel$global.XMLHttpRequest();
        // If XDomainRequest is available (ie only, where xhr might not work
        // cross domain), use the page location. Otherwise use example.com
        // Note: this doesn't actually make an http request.
        try {
            $0ebc100f7cd9322b$var$xhr.open("GET", $parcel$global.XDomainRequest ? "/" : "https://example.com");
        } catch (e) {
            $0ebc100f7cd9322b$var$xhr = null;
        }
    } else // Service workers don't have XHR
    $0ebc100f7cd9322b$var$xhr = null;
    return $0ebc100f7cd9322b$var$xhr;
}
function $0ebc100f7cd9322b$var$checkTypeSupport(type) {
    var xhr = $0ebc100f7cd9322b$var$getXHR();
    if (!xhr) return false;
    try {
        xhr.responseType = type;
        return xhr.responseType === type;
    } catch (e) {}
    return false;
}
$0ebc100f7cd9322b$export$724c4efdc2b90612 = $0ebc100f7cd9322b$export$e7aa7bc5c1b3cfb3 || $0ebc100f7cd9322b$var$checkTypeSupport("arraybuffer");
$0ebc100f7cd9322b$export$a9aa1e45c4448986 = !$0ebc100f7cd9322b$export$e7aa7bc5c1b3cfb3 && $0ebc100f7cd9322b$var$checkTypeSupport("ms-stream");
$0ebc100f7cd9322b$export$4c3c163e941f6ba3 = !$0ebc100f7cd9322b$export$e7aa7bc5c1b3cfb3 && $0ebc100f7cd9322b$var$checkTypeSupport("moz-chunked-arraybuffer");
$0ebc100f7cd9322b$export$8f1269d6d73f87ef = $0ebc100f7cd9322b$export$e7aa7bc5c1b3cfb3 || ($0ebc100f7cd9322b$var$getXHR() ? $0ebc100f7cd9322b$var$isFunction($0ebc100f7cd9322b$var$getXHR().overrideMimeType) : false);
function $0ebc100f7cd9322b$var$isFunction(value) {
    return typeof value === "function";
}
$0ebc100f7cd9322b$var$xhr = null // Help gc
;

});

parcelRegister("4oIhJ", function(module, exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function TempCtor() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

});

parcelRegister("jdfBJ", function(module, exports) {

$parcel$export(module.exports, "readyStates", function () { return $dfcb5691b4b2f90d$export$8e4da25483e314e6; }, function (v) { return $dfcb5691b4b2f90d$export$8e4da25483e314e6 = v; });
$parcel$export(module.exports, "IncomingMessage", function () { return $dfcb5691b4b2f90d$export$9d4333345ffa4fd6; }, function (v) { return $dfcb5691b4b2f90d$export$9d4333345ffa4fd6 = v; });
var $dfcb5691b4b2f90d$export$8e4da25483e314e6;
var $dfcb5691b4b2f90d$export$9d4333345ffa4fd6;

var $1s5sD = parcelRequire("1s5sD");

var $d6N7B = parcelRequire("d6N7B");
var $dfcb5691b4b2f90d$require$Buffer = $d6N7B.Buffer;

var $1gqMK = parcelRequire("1gqMK");

var $4oIhJ = parcelRequire("4oIhJ");

var $gVD4N = parcelRequire("gVD4N");
var $dfcb5691b4b2f90d$var$rStates = $dfcb5691b4b2f90d$export$8e4da25483e314e6 = {
    UNSENT: 0,
    OPENED: 1,
    HEADERS_RECEIVED: 2,
    LOADING: 3,
    DONE: 4
};
var $dfcb5691b4b2f90d$var$IncomingMessage = $dfcb5691b4b2f90d$export$9d4333345ffa4fd6 = function IncomingMessage(xhr, response, mode, resetTimers) {
    var self = this;
    $gVD4N.Readable.call(self);
    self._mode = mode;
    self.headers = {};
    self.rawHeaders = [];
    self.trailers = {};
    self.rawTrailers = [];
    // Fake the 'close' event, but only once 'end' fires
    self.on("end", function() {
        // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
        $1s5sD.nextTick(function() {
            self.emit("close");
        });
    });
    if (mode === "fetch") {
        self._fetchResponse = response;
        self.url = response.url;
        self.statusCode = response.status;
        self.statusMessage = response.statusText;
        response.headers.forEach(function(header, key) {
            self.headers[key.toLowerCase()] = header;
            self.rawHeaders.push(key, header);
        });
        if ($1gqMK.writableStream) {
            var writable = new WritableStream({
                write: function write(chunk) {
                    resetTimers(false);
                    return new Promise(function(resolve, reject) {
                        if (self._destroyed) reject();
                        else if (self.push($dfcb5691b4b2f90d$require$Buffer.from(chunk))) resolve();
                        else self._resumeFetch = resolve;
                    });
                },
                close: function close() {
                    resetTimers(true);
                    if (!self._destroyed) self.push(null);
                },
                abort: function abort(err) {
                    resetTimers(true);
                    if (!self._destroyed) self.emit("error", err);
                }
            });
            try {
                response.body.pipeTo(writable).catch(function(err) {
                    resetTimers(true);
                    if (!self._destroyed) self.emit("error", err);
                });
                return;
            } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
        }
        // fallback for when writableStream or pipeTo aren't available
        var reader = response.body.getReader();
        function read() {
            reader.read().then(function(result) {
                if (self._destroyed) return;
                resetTimers(result.done);
                if (result.done) {
                    self.push(null);
                    return;
                }
                self.push($dfcb5691b4b2f90d$require$Buffer.from(result.value));
                read();
            }).catch(function(err) {
                resetTimers(true);
                if (!self._destroyed) self.emit("error", err);
            });
        }
        read();
    } else {
        self._xhr = xhr;
        self._pos = 0;
        self.url = xhr.responseURL;
        self.statusCode = xhr.status;
        self.statusMessage = xhr.statusText;
        var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
        headers.forEach(function(header) {
            var matches = header.match(/^([^:]+):\s*(.*)/);
            if (matches) {
                var key = matches[1].toLowerCase();
                if (key === "set-cookie") {
                    if (self.headers[key] === undefined) self.headers[key] = [];
                    self.headers[key].push(matches[2]);
                } else if (self.headers[key] !== undefined) self.headers[key] += ", " + matches[2];
                else self.headers[key] = matches[2];
                self.rawHeaders.push(matches[1], matches[2]);
            }
        });
        self._charset = "x-user-defined";
        if (!$1gqMK.overrideMimeType) {
            var mimeType = self.rawHeaders["mime-type"];
            if (mimeType) {
                var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
                if (charsetMatch) self._charset = charsetMatch[1].toLowerCase();
            }
            if (!self._charset) self._charset = "utf-8" // best guess
            ;
        }
    }
};
$4oIhJ($dfcb5691b4b2f90d$var$IncomingMessage, $gVD4N.Readable);
$dfcb5691b4b2f90d$var$IncomingMessage.prototype._read = function() {
    var self = this;
    var resolve = self._resumeFetch;
    if (resolve) {
        self._resumeFetch = null;
        resolve();
    }
};
$dfcb5691b4b2f90d$var$IncomingMessage.prototype._onXHRProgress = function(resetTimers) {
    var self = this;
    var xhr = self._xhr;
    var response = null;
    switch(self._mode){
        case "text":
            response = xhr.responseText;
            if (response.length > self._pos) {
                var newData = response.substr(self._pos);
                if (self._charset === "x-user-defined") {
                    var buffer = $dfcb5691b4b2f90d$require$Buffer.alloc(newData.length);
                    for(var i = 0; i < newData.length; i++)buffer[i] = newData.charCodeAt(i) & 0xff;
                    self.push(buffer);
                } else self.push(newData, self._charset);
                self._pos = response.length;
            }
            break;
        case "arraybuffer":
            if (xhr.readyState !== $dfcb5691b4b2f90d$var$rStates.DONE || !xhr.response) break;
            response = xhr.response;
            self.push($dfcb5691b4b2f90d$require$Buffer.from(new Uint8Array(response)));
            break;
        case "moz-chunked-arraybuffer":
            response = xhr.response;
            if (xhr.readyState !== $dfcb5691b4b2f90d$var$rStates.LOADING || !response) break;
            self.push($dfcb5691b4b2f90d$require$Buffer.from(new Uint8Array(response)));
            break;
        case "ms-stream":
            response = xhr.response;
            if (xhr.readyState !== $dfcb5691b4b2f90d$var$rStates.LOADING) break;
            var reader = new $parcel$global.MSStreamReader();
            reader.onprogress = function() {
                if (reader.result.byteLength > self._pos) {
                    self.push($dfcb5691b4b2f90d$require$Buffer.from(new Uint8Array(reader.result.slice(self._pos))));
                    self._pos = reader.result.byteLength;
                }
            };
            reader.onload = function() {
                resetTimers(true);
                self.push(null);
            };
            // reader.onerror = ??? // TODO: this
            reader.readAsArrayBuffer(response);
            break;
    }
    // The ms-stream case handles end separately in reader.onload()
    if (self._xhr.readyState === $dfcb5691b4b2f90d$var$rStates.DONE && self._mode !== "ms-stream") {
        resetTimers(true);
        self.push(null);
    }
};

});
parcelRegister("gVD4N", function(module, exports) {

exports = module.exports = (parcelRequire("bdC0t"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("it6B4"));

exports.Duplex = (parcelRequire("geAE0"));

exports.Transform = (parcelRequire("eqB9Z"));

exports.PassThrough = (parcelRequire("6iSpJ"));

exports.finished = (parcelRequire("1UEwY"));

exports.pipeline = (parcelRequire("cp5V1"));

});
parcelRegister("bdC0t", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $1s5sD = parcelRequire("1s5sD");
"use strict";
module.exports = $82ae63f00f5ecca6$var$Readable;
/*<replacement>*/ var $82ae63f00f5ecca6$var$Duplex;
/*</replacement>*/ $82ae63f00f5ecca6$var$Readable.ReadableState = $82ae63f00f5ecca6$var$ReadableState;

var $jnSzx = parcelRequire("jnSzx");
var $82ae63f00f5ecca6$require$EE = $jnSzx.EventEmitter;
var $82ae63f00f5ecca6$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $92Fjh = parcelRequire("92Fjh");

var $d6N7B = parcelRequire("d6N7B");
var $82ae63f00f5ecca6$require$Buffer = $d6N7B.Buffer;
var $82ae63f00f5ecca6$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $82ae63f00f5ecca6$var$_uint8ArrayToBuffer(chunk) {
    return $82ae63f00f5ecca6$require$Buffer.from(chunk);
}
function $82ae63f00f5ecca6$var$_isUint8Array(obj) {
    return $82ae63f00f5ecca6$require$Buffer.isBuffer(obj) || obj instanceof $82ae63f00f5ecca6$var$OurUint8Array;
}

var $69mun = parcelRequire("69mun");
var $82ae63f00f5ecca6$var$debug;
if ($69mun && $69mun.debuglog) $82ae63f00f5ecca6$var$debug = $69mun.debuglog("stream");
else $82ae63f00f5ecca6$var$debug = function debug() {};

var $5ipye = parcelRequire("5ipye");

var $36kZA = parcelRequire("36kZA");

var $ljZ7Q = parcelRequire("ljZ7Q");
var $82ae63f00f5ecca6$var$getHighWaterMark = $ljZ7Q.getHighWaterMark;

var $82iBW = parcelRequire("82iBW");
var $82ae63f00f5ecca6$require$_require$codes = $82iBW.codes;
var $82ae63f00f5ecca6$var$ERR_INVALID_ARG_TYPE = $82ae63f00f5ecca6$require$_require$codes.ERR_INVALID_ARG_TYPE, $82ae63f00f5ecca6$var$ERR_STREAM_PUSH_AFTER_EOF = $82ae63f00f5ecca6$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $82ae63f00f5ecca6$var$ERR_METHOD_NOT_IMPLEMENTED = $82ae63f00f5ecca6$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $82ae63f00f5ecca6$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $82ae63f00f5ecca6$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var $82ae63f00f5ecca6$var$StringDecoder;
var $82ae63f00f5ecca6$var$createReadableStreamAsyncIterator;
var $82ae63f00f5ecca6$var$from;

(parcelRequire("4oIhJ"))($82ae63f00f5ecca6$var$Readable, $92Fjh);
var $82ae63f00f5ecca6$var$errorOrDestroy = $36kZA.errorOrDestroy;
var $82ae63f00f5ecca6$var$kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function $82ae63f00f5ecca6$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $82ae63f00f5ecca6$var$ReadableState(options, stream, isDuplex) {
    $82ae63f00f5ecca6$var$Duplex = $82ae63f00f5ecca6$var$Duplex || (parcelRequire("geAE0"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $82ae63f00f5ecca6$var$Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $82ae63f00f5ecca6$var$getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $5ipye();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$82ae63f00f5ecca6$var$StringDecoder) $82ae63f00f5ecca6$var$StringDecoder = (parcelRequire("3LCl6")).StringDecoder;
        this.decoder = new $82ae63f00f5ecca6$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $82ae63f00f5ecca6$var$Readable(options) {
    $82ae63f00f5ecca6$var$Duplex = $82ae63f00f5ecca6$var$Duplex || (parcelRequire("geAE0"));
    if (!(this instanceof $82ae63f00f5ecca6$var$Readable)) return new $82ae63f00f5ecca6$var$Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $82ae63f00f5ecca6$var$Duplex;
    this._readableState = new $82ae63f00f5ecca6$var$ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    $92Fjh.call(this);
}
Object.defineProperty($82ae63f00f5ecca6$var$Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$82ae63f00f5ecca6$var$Readable.prototype.destroy = $36kZA.destroy;
$82ae63f00f5ecca6$var$Readable.prototype._undestroy = $36kZA.undestroy;
$82ae63f00f5ecca6$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$82ae63f00f5ecca6$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $82ae63f00f5ecca6$require$Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $82ae63f00f5ecca6$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
$82ae63f00f5ecca6$var$Readable.prototype.unshift = function(chunk) {
    return $82ae63f00f5ecca6$var$readableAddChunk(this, chunk, null, true, false);
};
function $82ae63f00f5ecca6$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $82ae63f00f5ecca6$var$debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $82ae63f00f5ecca6$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $82ae63f00f5ecca6$var$chunkInvalid(state, chunk);
        if (er) $82ae63f00f5ecca6$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== $82ae63f00f5ecca6$require$Buffer.prototype) chunk = $82ae63f00f5ecca6$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $82ae63f00f5ecca6$var$errorOrDestroy(stream, new $82ae63f00f5ecca6$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $82ae63f00f5ecca6$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $82ae63f00f5ecca6$var$errorOrDestroy(stream, new $82ae63f00f5ecca6$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $82ae63f00f5ecca6$var$addChunk(stream, state, chunk, false);
                    else $82ae63f00f5ecca6$var$maybeReadMore(stream, state);
                } else $82ae63f00f5ecca6$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $82ae63f00f5ecca6$var$maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $82ae63f00f5ecca6$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $82ae63f00f5ecca6$var$emitReadable(stream);
    }
    $82ae63f00f5ecca6$var$maybeReadMore(stream, state);
}
function $82ae63f00f5ecca6$var$chunkInvalid(state, chunk) {
    var er;
    if (!$82ae63f00f5ecca6$var$_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new $82ae63f00f5ecca6$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
$82ae63f00f5ecca6$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};

// backwards compatibility.
$82ae63f00f5ecca6$var$Readable.prototype.setEncoding = function(enc) {
    if (!$82ae63f00f5ecca6$var$StringDecoder) $82ae63f00f5ecca6$var$StringDecoder = (parcelRequire("3LCl6")).StringDecoder;
    var decoder = new $82ae63f00f5ecca6$var$StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var $82ae63f00f5ecca6$var$MAX_HWM = 0x40000000;
function $82ae63f00f5ecca6$var$computeNewHighWaterMark(n) {
    if (n >= $82ae63f00f5ecca6$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $82ae63f00f5ecca6$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $82ae63f00f5ecca6$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $82ae63f00f5ecca6$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
$82ae63f00f5ecca6$var$Readable.prototype.read = function(n) {
    $82ae63f00f5ecca6$var$debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $82ae63f00f5ecca6$var$debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) $82ae63f00f5ecca6$var$endReadable(this);
        else $82ae63f00f5ecca6$var$emitReadable(this);
        return null;
    }
    n = $82ae63f00f5ecca6$var$howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $82ae63f00f5ecca6$var$endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $82ae63f00f5ecca6$var$debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $82ae63f00f5ecca6$var$debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $82ae63f00f5ecca6$var$debug("reading or ended", doRead);
    } else if (doRead) {
        $82ae63f00f5ecca6$var$debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $82ae63f00f5ecca6$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $82ae63f00f5ecca6$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $82ae63f00f5ecca6$var$endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function $82ae63f00f5ecca6$var$onEofChunk(stream, state) {
    $82ae63f00f5ecca6$var$debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $82ae63f00f5ecca6$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $82ae63f00f5ecca6$var$emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $82ae63f00f5ecca6$var$emitReadable(stream) {
    var state = stream._readableState;
    $82ae63f00f5ecca6$var$debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $82ae63f00f5ecca6$var$debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        $1s5sD.nextTick($82ae63f00f5ecca6$var$emitReadable_, stream);
    }
}
function $82ae63f00f5ecca6$var$emitReadable_(stream) {
    var state = stream._readableState;
    $82ae63f00f5ecca6$var$debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $82ae63f00f5ecca6$var$flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $82ae63f00f5ecca6$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $1s5sD.nextTick($82ae63f00f5ecca6$var$maybeReadMore_, stream, state);
    }
}
function $82ae63f00f5ecca6$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $82ae63f00f5ecca6$var$debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$82ae63f00f5ecca6$var$Readable.prototype._read = function(n) {
    $82ae63f00f5ecca6$var$errorOrDestroy(this, new $82ae63f00f5ecca6$var$ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
$82ae63f00f5ecca6$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $82ae63f00f5ecca6$var$debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $1s5sD.stdout && dest !== $1s5sD.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $1s5sD.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $82ae63f00f5ecca6$var$debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $82ae63f00f5ecca6$var$debug("onend");
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $82ae63f00f5ecca6$var$pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        $82ae63f00f5ecca6$var$debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        $82ae63f00f5ecca6$var$debug("ondata");
        var ret = dest.write(chunk);
        $82ae63f00f5ecca6$var$debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $82ae63f00f5ecca6$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $82ae63f00f5ecca6$var$debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $82ae63f00f5ecca6$var$debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if ($82ae63f00f5ecca6$var$EElistenerCount(dest, "error") === 0) $82ae63f00f5ecca6$var$errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    $82ae63f00f5ecca6$var$prependListener(dest, "error", onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        $82ae63f00f5ecca6$var$debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        $82ae63f00f5ecca6$var$debug("unpipe");
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $82ae63f00f5ecca6$var$debug("pipe resume");
        src.resume();
    }
    return dest;
};
function $82ae63f00f5ecca6$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $82ae63f00f5ecca6$var$debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $82ae63f00f5ecca6$var$EElistenerCount(src, "data")) {
            state.flowing = true;
            $82ae63f00f5ecca6$var$flow(src);
        }
    };
}
$82ae63f00f5ecca6$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = $82ae63f00f5ecca6$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
$82ae63f00f5ecca6$var$Readable.prototype.on = function(ev, fn) {
    var res = $92Fjh.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $82ae63f00f5ecca6$var$debug("on readable", state.length, state.reading);
            if (state.length) $82ae63f00f5ecca6$var$emitReadable(this);
            else if (!state.reading) $1s5sD.nextTick($82ae63f00f5ecca6$var$nReadingNextTick, this);
        }
    }
    return res;
};
$82ae63f00f5ecca6$var$Readable.prototype.addListener = $82ae63f00f5ecca6$var$Readable.prototype.on;
$82ae63f00f5ecca6$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $92Fjh.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $1s5sD.nextTick($82ae63f00f5ecca6$var$updateReadableListening, this);
    return res;
};
$82ae63f00f5ecca6$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $92Fjh.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $1s5sD.nextTick($82ae63f00f5ecca6$var$updateReadableListening, this);
    return res;
};
function $82ae63f00f5ecca6$var$updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function $82ae63f00f5ecca6$var$nReadingNextTick(self1) {
    $82ae63f00f5ecca6$var$debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$82ae63f00f5ecca6$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $82ae63f00f5ecca6$var$debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $82ae63f00f5ecca6$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $82ae63f00f5ecca6$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $1s5sD.nextTick($82ae63f00f5ecca6$var$resume_, stream, state);
    }
}
function $82ae63f00f5ecca6$var$resume_(stream, state) {
    $82ae63f00f5ecca6$var$debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    $82ae63f00f5ecca6$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$82ae63f00f5ecca6$var$Readable.prototype.pause = function() {
    $82ae63f00f5ecca6$var$debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $82ae63f00f5ecca6$var$debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function $82ae63f00f5ecca6$var$flow(stream) {
    var state = stream._readableState;
    $82ae63f00f5ecca6$var$debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$82ae63f00f5ecca6$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        $82ae63f00f5ecca6$var$debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        $82ae63f00f5ecca6$var$debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < $82ae63f00f5ecca6$var$kProxyEvents.length; n++)stream.on($82ae63f00f5ecca6$var$kProxyEvents[n], this.emit.bind(this, $82ae63f00f5ecca6$var$kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $82ae63f00f5ecca6$var$debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === "function") $82ae63f00f5ecca6$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($82ae63f00f5ecca6$var$createReadableStreamAsyncIterator === undefined) $82ae63f00f5ecca6$var$createReadableStreamAsyncIterator = (parcelRequire("lNHp8"));
    return $82ae63f00f5ecca6$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($82ae63f00f5ecca6$var$Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($82ae63f00f5ecca6$var$Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($82ae63f00f5ecca6$var$Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
$82ae63f00f5ecca6$var$Readable._fromList = $82ae63f00f5ecca6$var$fromList;
Object.defineProperty($82ae63f00f5ecca6$var$Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $82ae63f00f5ecca6$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $82ae63f00f5ecca6$var$endReadable(stream) {
    var state = stream._readableState;
    $82ae63f00f5ecca6$var$debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $1s5sD.nextTick($82ae63f00f5ecca6$var$endReadableNT, state, stream);
    }
}
function $82ae63f00f5ecca6$var$endReadableNT(state, stream) {
    $82ae63f00f5ecca6$var$debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === "function") $82ae63f00f5ecca6$var$Readable.from = function(iterable, opts) {
    if ($82ae63f00f5ecca6$var$from === undefined) $82ae63f00f5ecca6$var$from = (parcelRequire("3WOP2"));
    return $82ae63f00f5ecca6$var$from($82ae63f00f5ecca6$var$Readable, iterable, opts);
};
function $82ae63f00f5ecca6$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRegister("jnSzx", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $aDbZK = parcelRequire("aDbZK");
"use strict";
var $e1ca7f3236d05a9a$var$R = typeof Reflect === "object" ? Reflect : null;
var $e1ca7f3236d05a9a$var$ReflectApply = $e1ca7f3236d05a9a$var$R && typeof $e1ca7f3236d05a9a$var$R.apply === "function" ? $e1ca7f3236d05a9a$var$R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var $e1ca7f3236d05a9a$var$ReflectOwnKeys;
if ($e1ca7f3236d05a9a$var$R && typeof $e1ca7f3236d05a9a$var$R.ownKeys === "function") $e1ca7f3236d05a9a$var$ReflectOwnKeys = $e1ca7f3236d05a9a$var$R.ownKeys;
else if (Object.getOwnPropertySymbols) $e1ca7f3236d05a9a$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else $e1ca7f3236d05a9a$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function $e1ca7f3236d05a9a$var$ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var $e1ca7f3236d05a9a$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function $e1ca7f3236d05a9a$var$EventEmitter() {
    $e1ca7f3236d05a9a$var$EventEmitter.init.call(this);
}
module.exports = $e1ca7f3236d05a9a$var$EventEmitter;
module.exports.once = $e1ca7f3236d05a9a$var$once;
// Backwards-compat with node 0.10.x
$e1ca7f3236d05a9a$var$EventEmitter.EventEmitter = $e1ca7f3236d05a9a$var$EventEmitter;
$e1ca7f3236d05a9a$var$EventEmitter.prototype._events = undefined;
$e1ca7f3236d05a9a$var$EventEmitter.prototype._eventsCount = 0;
$e1ca7f3236d05a9a$var$EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var $e1ca7f3236d05a9a$var$defaultMaxListeners = 10;
function $e1ca7f3236d05a9a$var$checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + (typeof listener === "undefined" ? "undefined" : (0, $aDbZK._)(listener)));
}
Object.defineProperty($e1ca7f3236d05a9a$var$EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function get() {
        return $e1ca7f3236d05a9a$var$defaultMaxListeners;
    },
    set: function set(arg) {
        if (typeof arg !== "number" || arg < 0 || $e1ca7f3236d05a9a$var$NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        $e1ca7f3236d05a9a$var$defaultMaxListeners = arg;
    }
});
$e1ca7f3236d05a9a$var$EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
$e1ca7f3236d05a9a$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || $e1ca7f3236d05a9a$var$NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function $e1ca7f3236d05a9a$var$_getMaxListeners(that) {
    if (that._maxListeners === undefined) return $e1ca7f3236d05a9a$var$EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
$e1ca7f3236d05a9a$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $e1ca7f3236d05a9a$var$_getMaxListeners(this);
};
$e1ca7f3236d05a9a$var$EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") $e1ca7f3236d05a9a$var$ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = $e1ca7f3236d05a9a$var$arrayClone(handler, len);
        for(var i = 0; i < len; ++i)$e1ca7f3236d05a9a$var$ReflectApply(listeners[i], this, args);
    }
    return true;
};
function $e1ca7f3236d05a9a$var$_addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    $e1ca7f3236d05a9a$var$checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = $e1ca7f3236d05a9a$var$_getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            $e1ca7f3236d05a9a$var$ProcessEmitWarning(w);
        }
    }
    return target;
}
$e1ca7f3236d05a9a$var$EventEmitter.prototype.addListener = function addListener(type, listener) {
    return $e1ca7f3236d05a9a$var$_addListener(this, type, listener, false);
};
$e1ca7f3236d05a9a$var$EventEmitter.prototype.on = $e1ca7f3236d05a9a$var$EventEmitter.prototype.addListener;
$e1ca7f3236d05a9a$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return $e1ca7f3236d05a9a$var$_addListener(this, type, listener, true);
};
function $e1ca7f3236d05a9a$var$onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function $e1ca7f3236d05a9a$var$_onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = $e1ca7f3236d05a9a$var$onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
$e1ca7f3236d05a9a$var$EventEmitter.prototype.once = function once(type, listener) {
    $e1ca7f3236d05a9a$var$checkListener(listener);
    this.on(type, $e1ca7f3236d05a9a$var$_onceWrap(this, type, listener));
    return this;
};
$e1ca7f3236d05a9a$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    $e1ca7f3236d05a9a$var$checkListener(listener);
    this.prependListener(type, $e1ca7f3236d05a9a$var$_onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
$e1ca7f3236d05a9a$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    $e1ca7f3236d05a9a$var$checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else $e1ca7f3236d05a9a$var$spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
$e1ca7f3236d05a9a$var$EventEmitter.prototype.off = $e1ca7f3236d05a9a$var$EventEmitter.prototype.removeListener;
$e1ca7f3236d05a9a$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function $e1ca7f3236d05a9a$var$_listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? $e1ca7f3236d05a9a$var$unwrapListeners(evlistener) : $e1ca7f3236d05a9a$var$arrayClone(evlistener, evlistener.length);
}
$e1ca7f3236d05a9a$var$EventEmitter.prototype.listeners = function listeners(type) {
    return $e1ca7f3236d05a9a$var$_listeners(this, type, true);
};
$e1ca7f3236d05a9a$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return $e1ca7f3236d05a9a$var$_listeners(this, type, false);
};
$e1ca7f3236d05a9a$var$EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return $e1ca7f3236d05a9a$var$listenerCount.call(emitter, type);
};
$e1ca7f3236d05a9a$var$EventEmitter.prototype.listenerCount = $e1ca7f3236d05a9a$var$listenerCount;
function $e1ca7f3236d05a9a$var$listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
$e1ca7f3236d05a9a$var$EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? $e1ca7f3236d05a9a$var$ReflectOwnKeys(this._events) : [];
};
function $e1ca7f3236d05a9a$var$arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function $e1ca7f3236d05a9a$var$spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function $e1ca7f3236d05a9a$var$unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function $e1ca7f3236d05a9a$var$once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        $e1ca7f3236d05a9a$var$eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") $e1ca7f3236d05a9a$var$addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function $e1ca7f3236d05a9a$var$addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") $e1ca7f3236d05a9a$var$eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function $e1ca7f3236d05a9a$var$eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + (typeof emitter === "undefined" ? "undefined" : (0, $aDbZK._)(emitter)));
}

});

parcelRegister("92Fjh", function(module, exports) {

module.exports = (parcelRequire("jnSzx")).EventEmitter;

});

parcelRegister("69mun", function(module, exports) {
"use strict";

});

parcelRegister("5ipye", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");
"use strict";
function $3db274166835bba5$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function $3db274166835bba5$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? $3db274166835bba5$var$ownKeys(Object(source), !0).forEach(function(key) {
            $3db274166835bba5$var$_defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : $3db274166835bba5$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $3db274166835bba5$var$_defineProperty(obj, key, value) {
    key = $3db274166835bba5$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $3db274166835bba5$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $3db274166835bba5$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, $3db274166835bba5$var$_toPropertyKey(descriptor.key), descriptor);
    }
}
function $3db274166835bba5$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $3db274166835bba5$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $3db274166835bba5$var$_defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function $3db274166835bba5$var$_toPropertyKey(arg) {
    var key = $3db274166835bba5$var$_toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : (0, $aDbZK._)(key)) === "symbol" ? key : String(key);
}
function $3db274166835bba5$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $d6N7B = parcelRequire("d6N7B");
var $3db274166835bba5$var$Buffer = $d6N7B.Buffer;

var $69mun = parcelRequire("69mun");
var $3db274166835bba5$var$inspect = $69mun.inspect;
var $3db274166835bba5$var$custom = $3db274166835bba5$var$inspect && $3db274166835bba5$var$inspect.custom || "inspect";
function $3db274166835bba5$var$copyBuffer(src, target, offset) {
    $3db274166835bba5$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $3db274166835bba5$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $3db274166835bba5$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $3db274166835bba5$var$Buffer.alloc(0);
                var ret = $3db274166835bba5$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $3db274166835bba5$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $3db274166835bba5$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: $3db274166835bba5$var$custom,
            value: function value(_, options) {
                return $3db274166835bba5$var$inspect(this, $3db274166835bba5$var$_objectSpread($3db274166835bba5$var$_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRegister("36kZA", function(module, exports) {

var $1s5sD = parcelRequire("1s5sD");
"use strict";
// undocumented cb() API, needed for core, not for public API
function $242237483648d045$var$destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) $1s5sD.nextTick($242237483648d045$var$emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $1s5sD.nextTick($242237483648d045$var$emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $1s5sD.nextTick($242237483648d045$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $1s5sD.nextTick($242237483648d045$var$emitErrorAndCloseNT, _this, err);
            } else $1s5sD.nextTick($242237483648d045$var$emitCloseNT, _this);
        } else if (cb) {
            $1s5sD.nextTick($242237483648d045$var$emitCloseNT, _this);
            cb(err);
        } else $1s5sD.nextTick($242237483648d045$var$emitCloseNT, _this);
    });
    return this;
}
function $242237483648d045$var$emitErrorAndCloseNT(self, err) {
    $242237483648d045$var$emitErrorNT(self, err);
    $242237483648d045$var$emitCloseNT(self);
}
function $242237483648d045$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function $242237483648d045$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $242237483648d045$var$emitErrorNT(self, err) {
    self.emit("error", err);
}
function $242237483648d045$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: $242237483648d045$var$destroy,
    undestroy: $242237483648d045$var$undestroy,
    errorOrDestroy: $242237483648d045$var$errorOrDestroy
};

});

parcelRegister("ljZ7Q", function(module, exports) {
"use strict";

var $f85ac99480b8e975$var$ERR_INVALID_OPT_VALUE = (parcelRequire("82iBW")).codes.ERR_INVALID_OPT_VALUE;
function $f85ac99480b8e975$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $f85ac99480b8e975$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $f85ac99480b8e975$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new $f85ac99480b8e975$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $f85ac99480b8e975$var$getHighWaterMark
};

});
parcelRegister("82iBW", function(module, exports) {

$parcel$export(module.exports, "codes", function () { return $5d9cf2671fb4954d$export$e45cb6485273080e; }, function (v) { return $5d9cf2671fb4954d$export$e45cb6485273080e = v; });

var $aDbZK = parcelRequire("aDbZK");
var $5d9cf2671fb4954d$export$e45cb6485273080e;
"use strict";
function $5d9cf2671fb4954d$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $5d9cf2671fb4954d$var$codes = {};
function $5d9cf2671fb4954d$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        $5d9cf2671fb4954d$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    $5d9cf2671fb4954d$var$codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $5d9cf2671fb4954d$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $5d9cf2671fb4954d$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $5d9cf2671fb4954d$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $5d9cf2671fb4954d$var$includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$5d9cf2671fb4954d$var$createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$5d9cf2671fb4954d$var$createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && $5d9cf2671fb4954d$var$startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if ($5d9cf2671fb4954d$var$endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($5d9cf2671fb4954d$var$oneOf(expected, "type"));
    else {
        var type = $5d9cf2671fb4954d$var$includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat($5d9cf2671fb4954d$var$oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual === "undefined" ? "undefined" : (0, $aDbZK._)(actual));
    return msg;
}, TypeError);
$5d9cf2671fb4954d$var$createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
$5d9cf2671fb4954d$var$createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
$5d9cf2671fb4954d$var$createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
$5d9cf2671fb4954d$var$createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
$5d9cf2671fb4954d$var$createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
$5d9cf2671fb4954d$var$createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
$5d9cf2671fb4954d$var$createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
$5d9cf2671fb4954d$var$createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
$5d9cf2671fb4954d$var$createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
$5d9cf2671fb4954d$var$createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
$5d9cf2671fb4954d$export$e45cb6485273080e = $5d9cf2671fb4954d$var$codes;

});


parcelRegister("geAE0", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

var $1s5sD = parcelRequire("1s5sD");
"use strict";
/*<replacement>*/ var $bd1a60f24a9eecdf$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $bd1a60f24a9eecdf$var$Duplex;

var $bdC0t = parcelRequire("bdC0t");

var $it6B4 = parcelRequire("it6B4");

(parcelRequire("4oIhJ"))($bd1a60f24a9eecdf$var$Duplex, $bdC0t);
// Allow the keys array to be GC'ed.
var $bd1a60f24a9eecdf$var$keys = $bd1a60f24a9eecdf$var$objectKeys($it6B4.prototype);
for(var $bd1a60f24a9eecdf$var$v = 0; $bd1a60f24a9eecdf$var$v < $bd1a60f24a9eecdf$var$keys.length; $bd1a60f24a9eecdf$var$v++){
    var $bd1a60f24a9eecdf$var$method = $bd1a60f24a9eecdf$var$keys[$bd1a60f24a9eecdf$var$v];
    if (!$bd1a60f24a9eecdf$var$Duplex.prototype[$bd1a60f24a9eecdf$var$method]) $bd1a60f24a9eecdf$var$Duplex.prototype[$bd1a60f24a9eecdf$var$method] = $it6B4.prototype[$bd1a60f24a9eecdf$var$method];
}
function $bd1a60f24a9eecdf$var$Duplex(options) {
    if (!(this instanceof $bd1a60f24a9eecdf$var$Duplex)) return new $bd1a60f24a9eecdf$var$Duplex(options);
    $bdC0t.call(this, options);
    $it6B4.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", $bd1a60f24a9eecdf$var$onend);
        }
    }
}
Object.defineProperty($bd1a60f24a9eecdf$var$Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($bd1a60f24a9eecdf$var$Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($bd1a60f24a9eecdf$var$Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function $bd1a60f24a9eecdf$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    $1s5sD.nextTick($bd1a60f24a9eecdf$var$onEndNT, this);
}
function $bd1a60f24a9eecdf$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($bd1a60f24a9eecdf$var$Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRegister("it6B4", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

var $1s5sD = parcelRequire("1s5sD");
"use strict";
module.exports = $d7200d714bd76cce$var$Writable;
/* <replacement> */ function $d7200d714bd76cce$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function $d7200d714bd76cce$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $d7200d714bd76cce$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $d7200d714bd76cce$var$Duplex;
/*</replacement>*/ $d7200d714bd76cce$var$Writable.WritableState = $d7200d714bd76cce$var$WritableState;

/*<replacement>*/ var $d7200d714bd76cce$var$internalUtil = {
    deprecate: (parcelRequire("dgJS1"))
};

var $92Fjh = parcelRequire("92Fjh");

var $d6N7B = parcelRequire("d6N7B");
var $d7200d714bd76cce$require$Buffer = $d6N7B.Buffer;
var $d7200d714bd76cce$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $d7200d714bd76cce$var$_uint8ArrayToBuffer(chunk) {
    return $d7200d714bd76cce$require$Buffer.from(chunk);
}
function $d7200d714bd76cce$var$_isUint8Array(obj) {
    return $d7200d714bd76cce$require$Buffer.isBuffer(obj) || obj instanceof $d7200d714bd76cce$var$OurUint8Array;
}

var $36kZA = parcelRequire("36kZA");

var $ljZ7Q = parcelRequire("ljZ7Q");
var $d7200d714bd76cce$var$getHighWaterMark = $ljZ7Q.getHighWaterMark;

var $82iBW = parcelRequire("82iBW");
var $d7200d714bd76cce$require$_require$codes = $82iBW.codes;
var $d7200d714bd76cce$var$ERR_INVALID_ARG_TYPE = $d7200d714bd76cce$require$_require$codes.ERR_INVALID_ARG_TYPE, $d7200d714bd76cce$var$ERR_METHOD_NOT_IMPLEMENTED = $d7200d714bd76cce$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $d7200d714bd76cce$var$ERR_MULTIPLE_CALLBACK = $d7200d714bd76cce$require$_require$codes.ERR_MULTIPLE_CALLBACK, $d7200d714bd76cce$var$ERR_STREAM_CANNOT_PIPE = $d7200d714bd76cce$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $d7200d714bd76cce$var$ERR_STREAM_DESTROYED = $d7200d714bd76cce$require$_require$codes.ERR_STREAM_DESTROYED, $d7200d714bd76cce$var$ERR_STREAM_NULL_VALUES = $d7200d714bd76cce$require$_require$codes.ERR_STREAM_NULL_VALUES, $d7200d714bd76cce$var$ERR_STREAM_WRITE_AFTER_END = $d7200d714bd76cce$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $d7200d714bd76cce$var$ERR_UNKNOWN_ENCODING = $d7200d714bd76cce$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $d7200d714bd76cce$var$errorOrDestroy = $36kZA.errorOrDestroy;

(parcelRequire("4oIhJ"))($d7200d714bd76cce$var$Writable, $92Fjh);
function $d7200d714bd76cce$var$nop() {}

function $d7200d714bd76cce$var$WritableState(options, stream, isDuplex) {
    $d7200d714bd76cce$var$Duplex = $d7200d714bd76cce$var$Duplex || (parcelRequire("geAE0"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $d7200d714bd76cce$var$Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $d7200d714bd76cce$var$getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $d7200d714bd76cce$var$onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $d7200d714bd76cce$var$CorkedRequest(this);
}
$d7200d714bd76cce$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($d7200d714bd76cce$var$WritableState.prototype, "buffer", {
            get: $d7200d714bd76cce$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $d7200d714bd76cce$var$realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    $d7200d714bd76cce$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($d7200d714bd76cce$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($d7200d714bd76cce$var$realHasInstance.call(this, object)) return true;
            if (this !== $d7200d714bd76cce$var$Writable) return false;
            return object && object._writableState instanceof $d7200d714bd76cce$var$WritableState;
        }
    });
} else $d7200d714bd76cce$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $d7200d714bd76cce$var$Writable(options) {
    $d7200d714bd76cce$var$Duplex = $d7200d714bd76cce$var$Duplex || (parcelRequire("geAE0"));
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $d7200d714bd76cce$var$Duplex;
    if (!isDuplex && !$d7200d714bd76cce$var$realHasInstance.call($d7200d714bd76cce$var$Writable, this)) return new $d7200d714bd76cce$var$Writable(options);
    this._writableState = new $d7200d714bd76cce$var$WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    $92Fjh.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
$d7200d714bd76cce$var$Writable.prototype.pipe = function() {
    $d7200d714bd76cce$var$errorOrDestroy(this, new $d7200d714bd76cce$var$ERR_STREAM_CANNOT_PIPE());
};
function $d7200d714bd76cce$var$writeAfterEnd(stream, cb) {
    var er = new $d7200d714bd76cce$var$ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    $d7200d714bd76cce$var$errorOrDestroy(stream, er);
    $1s5sD.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $d7200d714bd76cce$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $d7200d714bd76cce$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new $d7200d714bd76cce$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        $d7200d714bd76cce$var$errorOrDestroy(stream, er);
        $1s5sD.nextTick(cb, er);
        return false;
    }
    return true;
}
$d7200d714bd76cce$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $d7200d714bd76cce$var$_isUint8Array(chunk);
    if (isBuf && !$d7200d714bd76cce$require$Buffer.isBuffer(chunk)) chunk = $d7200d714bd76cce$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = $d7200d714bd76cce$var$nop;
    if (state.ending) $d7200d714bd76cce$var$writeAfterEnd(this, cb);
    else if (isBuf || $d7200d714bd76cce$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $d7200d714bd76cce$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$d7200d714bd76cce$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$d7200d714bd76cce$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $d7200d714bd76cce$var$clearBuffer(this, state);
    }
};
$d7200d714bd76cce$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new $d7200d714bd76cce$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($d7200d714bd76cce$var$Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $d7200d714bd76cce$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = $d7200d714bd76cce$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($d7200d714bd76cce$var$Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $d7200d714bd76cce$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $d7200d714bd76cce$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $d7200d714bd76cce$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $d7200d714bd76cce$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $d7200d714bd76cce$var$ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $d7200d714bd76cce$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $1s5sD.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        $1s5sD.nextTick($d7200d714bd76cce$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $d7200d714bd76cce$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $d7200d714bd76cce$var$errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        $d7200d714bd76cce$var$finishMaybe(stream, state);
    }
}
function $d7200d714bd76cce$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $d7200d714bd76cce$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new $d7200d714bd76cce$var$ERR_MULTIPLE_CALLBACK();
    $d7200d714bd76cce$var$onwriteStateUpdate(state);
    if (er) $d7200d714bd76cce$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $d7200d714bd76cce$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $d7200d714bd76cce$var$clearBuffer(stream, state);
        if (sync) $1s5sD.nextTick($d7200d714bd76cce$var$afterWrite, stream, state, finished, cb);
        else $d7200d714bd76cce$var$afterWrite(stream, state, finished, cb);
    }
}
function $d7200d714bd76cce$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $d7200d714bd76cce$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $d7200d714bd76cce$var$finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $d7200d714bd76cce$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function $d7200d714bd76cce$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $d7200d714bd76cce$var$doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $d7200d714bd76cce$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $d7200d714bd76cce$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$d7200d714bd76cce$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $d7200d714bd76cce$var$ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
$d7200d714bd76cce$var$Writable.prototype._writev = null;
$d7200d714bd76cce$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) $d7200d714bd76cce$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($d7200d714bd76cce$var$Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $d7200d714bd76cce$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $d7200d714bd76cce$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $d7200d714bd76cce$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        $d7200d714bd76cce$var$finishMaybe(stream, state);
    });
}
function $d7200d714bd76cce$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $1s5sD.nextTick($d7200d714bd76cce$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function $d7200d714bd76cce$var$finishMaybe(stream, state) {
    var need = $d7200d714bd76cce$var$needFinish(state);
    if (need) {
        $d7200d714bd76cce$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $d7200d714bd76cce$var$endWritable(stream, state, cb) {
    state.ending = true;
    $d7200d714bd76cce$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $1s5sD.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $d7200d714bd76cce$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($d7200d714bd76cce$var$Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$d7200d714bd76cce$var$Writable.prototype.destroy = $36kZA.destroy;
$d7200d714bd76cce$var$Writable.prototype._undestroy = $36kZA.undestroy;
$d7200d714bd76cce$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});
parcelRegister("dgJS1", function(module, exports) {
/**
 * Module exports.
 */ module.exports = $9a9059e550d88407$var$deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function $9a9059e550d88407$var$deprecate(fn, msg) {
    if ($9a9059e550d88407$var$config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($9a9059e550d88407$var$config("throwDeprecation")) throw new Error(msg);
            else if ($9a9059e550d88407$var$config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function $9a9059e550d88407$var$config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!$parcel$global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = $parcel$global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

});



parcelRegister("3LCl6", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", function () { return $2be38045f9a8a6c6$export$63a7aa211a91ed69; }, function (v) { return $2be38045f9a8a6c6$export$63a7aa211a91ed69 = v; });
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $2be38045f9a8a6c6$export$63a7aa211a91ed69;
"use strict";

var $i1HNA = parcelRequire("i1HNA");
var $2be38045f9a8a6c6$require$Buffer = $i1HNA.Buffer;
/*</replacement>*/ var $2be38045f9a8a6c6$var$isEncoding = $2be38045f9a8a6c6$require$Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function $2be38045f9a8a6c6$var$_normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $2be38045f9a8a6c6$var$normalizeEncoding(enc) {
    var nenc = $2be38045f9a8a6c6$var$_normalizeEncoding(enc);
    if (typeof nenc !== "string" && ($2be38045f9a8a6c6$require$Buffer.isEncoding === $2be38045f9a8a6c6$var$isEncoding || !$2be38045f9a8a6c6$var$isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
$2be38045f9a8a6c6$export$63a7aa211a91ed69 = $2be38045f9a8a6c6$var$StringDecoder;
function $2be38045f9a8a6c6$var$StringDecoder(encoding) {
    this.encoding = $2be38045f9a8a6c6$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = $2be38045f9a8a6c6$var$utf16Text;
            this.end = $2be38045f9a8a6c6$var$utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = $2be38045f9a8a6c6$var$utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = $2be38045f9a8a6c6$var$base64Text;
            this.end = $2be38045f9a8a6c6$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $2be38045f9a8a6c6$var$simpleWrite;
            this.end = $2be38045f9a8a6c6$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $2be38045f9a8a6c6$require$Buffer.allocUnsafe(nb);
}
$2be38045f9a8a6c6$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
$2be38045f9a8a6c6$var$StringDecoder.prototype.end = $2be38045f9a8a6c6$var$utf8End;
// Returns only complete characters in a Buffer
$2be38045f9a8a6c6$var$StringDecoder.prototype.text = $2be38045f9a8a6c6$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$2be38045f9a8a6c6$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $2be38045f9a8a6c6$var$utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $2be38045f9a8a6c6$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $2be38045f9a8a6c6$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $2be38045f9a8a6c6$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $2be38045f9a8a6c6$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $2be38045f9a8a6c6$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "\uFFFD";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "\uFFFD";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "\uFFFD";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $2be38045f9a8a6c6$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $2be38045f9a8a6c6$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $2be38045f9a8a6c6$var$utf8Text(buf, i) {
    var total = $2be38045f9a8a6c6$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $2be38045f9a8a6c6$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "\uFFFD";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $2be38045f9a8a6c6$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $2be38045f9a8a6c6$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function $2be38045f9a8a6c6$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function $2be38045f9a8a6c6$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $2be38045f9a8a6c6$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $2be38045f9a8a6c6$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

});
parcelRegister("i1HNA", function(module, exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ 
var $d6N7B = parcelRequire("d6N7B");
var $d1fa4b85f2f150db$var$Buffer = $d6N7B.Buffer;
// alternative to using Object.keys for old browsers
function $d1fa4b85f2f150db$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($d1fa4b85f2f150db$var$Buffer.from && $d1fa4b85f2f150db$var$Buffer.alloc && $d1fa4b85f2f150db$var$Buffer.allocUnsafe && $d1fa4b85f2f150db$var$Buffer.allocUnsafeSlow) module.exports = $d6N7B;
else {
    // Copy properties from require('buffer')
    $d1fa4b85f2f150db$var$copyProps($d6N7B, module.exports);
    module.exports.Buffer = $d1fa4b85f2f150db$var$SafeBuffer;
}
function $d1fa4b85f2f150db$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $d1fa4b85f2f150db$var$Buffer(arg, encodingOrOffset, length);
}
$d1fa4b85f2f150db$var$SafeBuffer.prototype = Object.create($d1fa4b85f2f150db$var$Buffer.prototype);
// Copy static methods from Buffer
$d1fa4b85f2f150db$var$copyProps($d1fa4b85f2f150db$var$Buffer, $d1fa4b85f2f150db$var$SafeBuffer);
$d1fa4b85f2f150db$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return $d1fa4b85f2f150db$var$Buffer(arg, encodingOrOffset, length);
};
$d1fa4b85f2f150db$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = $d1fa4b85f2f150db$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$d1fa4b85f2f150db$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $d1fa4b85f2f150db$var$Buffer(size);
};
$d1fa4b85f2f150db$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $d6N7B.SlowBuffer(size);
};

});


parcelRegister("lNHp8", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");

var $1s5sD = parcelRequire("1s5sD");
"use strict";
var $fdefd7c351317cfa$var$_Object$setPrototypeO;
function $fdefd7c351317cfa$var$_defineProperty(obj, key, value) {
    key = $fdefd7c351317cfa$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $fdefd7c351317cfa$var$_toPropertyKey(arg) {
    var key = $fdefd7c351317cfa$var$_toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : (0, $aDbZK._)(key)) === "symbol" ? key : String(key);
}
function $fdefd7c351317cfa$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $1UEwY = parcelRequire("1UEwY");
var $fdefd7c351317cfa$var$kLastResolve = Symbol("lastResolve");
var $fdefd7c351317cfa$var$kLastReject = Symbol("lastReject");
var $fdefd7c351317cfa$var$kError = Symbol("error");
var $fdefd7c351317cfa$var$kEnded = Symbol("ended");
var $fdefd7c351317cfa$var$kLastPromise = Symbol("lastPromise");
var $fdefd7c351317cfa$var$kHandlePromise = Symbol("handlePromise");
var $fdefd7c351317cfa$var$kStream = Symbol("stream");
function $fdefd7c351317cfa$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $fdefd7c351317cfa$var$readAndResolve(iter) {
    var resolve = iter[$fdefd7c351317cfa$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$fdefd7c351317cfa$var$kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$fdefd7c351317cfa$var$kLastPromise] = null;
            iter[$fdefd7c351317cfa$var$kLastResolve] = null;
            iter[$fdefd7c351317cfa$var$kLastReject] = null;
            resolve($fdefd7c351317cfa$var$createIterResult(data, false));
        }
    }
}
function $fdefd7c351317cfa$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $1s5sD.nextTick($fdefd7c351317cfa$var$readAndResolve, iter);
}
function $fdefd7c351317cfa$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$fdefd7c351317cfa$var$kEnded]) {
                resolve($fdefd7c351317cfa$var$createIterResult(undefined, true));
                return;
            }
            iter[$fdefd7c351317cfa$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $fdefd7c351317cfa$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $fdefd7c351317cfa$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($fdefd7c351317cfa$var$_Object$setPrototypeO = {
    get stream () {
        return this[$fdefd7c351317cfa$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$fdefd7c351317cfa$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$fdefd7c351317cfa$var$kEnded]) return Promise.resolve($fdefd7c351317cfa$var$createIterResult(undefined, true));
        if (this[$fdefd7c351317cfa$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $1s5sD.nextTick(function() {
                if (_this[$fdefd7c351317cfa$var$kError]) reject(_this[$fdefd7c351317cfa$var$kError]);
                else resolve($fdefd7c351317cfa$var$createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$fdefd7c351317cfa$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($fdefd7c351317cfa$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$fdefd7c351317cfa$var$kStream].read();
            if (data !== null) return Promise.resolve($fdefd7c351317cfa$var$createIterResult(data, false));
            promise = new Promise(this[$fdefd7c351317cfa$var$kHandlePromise]);
        }
        this[$fdefd7c351317cfa$var$kLastPromise] = promise;
        return promise;
    }
}, $fdefd7c351317cfa$var$_defineProperty($fdefd7c351317cfa$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $fdefd7c351317cfa$var$_defineProperty($fdefd7c351317cfa$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$fdefd7c351317cfa$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($fdefd7c351317cfa$var$createIterResult(undefined, true));
        });
    });
}), $fdefd7c351317cfa$var$_Object$setPrototypeO), $fdefd7c351317cfa$var$AsyncIteratorPrototype);
var $fdefd7c351317cfa$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($fdefd7c351317cfa$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $fdefd7c351317cfa$var$_defineProperty(_Object$create, $fdefd7c351317cfa$var$kStream, {
        value: stream,
        writable: true
    }), $fdefd7c351317cfa$var$_defineProperty(_Object$create, $fdefd7c351317cfa$var$kLastResolve, {
        value: null,
        writable: true
    }), $fdefd7c351317cfa$var$_defineProperty(_Object$create, $fdefd7c351317cfa$var$kLastReject, {
        value: null,
        writable: true
    }), $fdefd7c351317cfa$var$_defineProperty(_Object$create, $fdefd7c351317cfa$var$kError, {
        value: null,
        writable: true
    }), $fdefd7c351317cfa$var$_defineProperty(_Object$create, $fdefd7c351317cfa$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $fdefd7c351317cfa$var$_defineProperty(_Object$create, $fdefd7c351317cfa$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$fdefd7c351317cfa$var$kStream].read();
            if (data) {
                iterator[$fdefd7c351317cfa$var$kLastPromise] = null;
                iterator[$fdefd7c351317cfa$var$kLastResolve] = null;
                iterator[$fdefd7c351317cfa$var$kLastReject] = null;
                resolve($fdefd7c351317cfa$var$createIterResult(data, false));
            } else {
                iterator[$fdefd7c351317cfa$var$kLastResolve] = resolve;
                iterator[$fdefd7c351317cfa$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$fdefd7c351317cfa$var$kLastPromise] = null;
    $1UEwY(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[$fdefd7c351317cfa$var$kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$fdefd7c351317cfa$var$kLastPromise] = null;
                iterator[$fdefd7c351317cfa$var$kLastResolve] = null;
                iterator[$fdefd7c351317cfa$var$kLastReject] = null;
                reject(err);
            }
            iterator[$fdefd7c351317cfa$var$kError] = err;
            return;
        }
        var resolve = iterator[$fdefd7c351317cfa$var$kLastResolve];
        if (resolve !== null) {
            iterator[$fdefd7c351317cfa$var$kLastPromise] = null;
            iterator[$fdefd7c351317cfa$var$kLastResolve] = null;
            iterator[$fdefd7c351317cfa$var$kLastReject] = null;
            resolve($fdefd7c351317cfa$var$createIterResult(undefined, true));
        }
        iterator[$fdefd7c351317cfa$var$kEnded] = true;
    });
    stream.on("readable", $fdefd7c351317cfa$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $fdefd7c351317cfa$var$createReadableStreamAsyncIterator;

});
parcelRegister("1UEwY", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";

var $164a75fcd034125c$var$ERR_STREAM_PREMATURE_CLOSE = (parcelRequire("82iBW")).codes.ERR_STREAM_PREMATURE_CLOSE;
function $164a75fcd034125c$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $164a75fcd034125c$var$noop() {}
function $164a75fcd034125c$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function $164a75fcd034125c$var$eos(stream, opts, callback) {
    if (typeof opts === "function") return $164a75fcd034125c$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $164a75fcd034125c$var$once(callback || $164a75fcd034125c$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $164a75fcd034125c$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $164a75fcd034125c$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if ($164a75fcd034125c$var$isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = $164a75fcd034125c$var$eos;

});


parcelRegister("3WOP2", function(module, exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

});


parcelRegister("eqB9Z", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = $a81051a1939239e9$var$Transform;

var $82iBW = parcelRequire("82iBW");
var $a81051a1939239e9$require$_require$codes = $82iBW.codes;
var $a81051a1939239e9$var$ERR_METHOD_NOT_IMPLEMENTED = $a81051a1939239e9$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $a81051a1939239e9$var$ERR_MULTIPLE_CALLBACK = $a81051a1939239e9$require$_require$codes.ERR_MULTIPLE_CALLBACK, $a81051a1939239e9$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $a81051a1939239e9$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $a81051a1939239e9$var$ERR_TRANSFORM_WITH_LENGTH_0 = $a81051a1939239e9$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $geAE0 = parcelRequire("geAE0");

(parcelRequire("4oIhJ"))($a81051a1939239e9$var$Transform, $geAE0);
function $a81051a1939239e9$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new $a81051a1939239e9$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $a81051a1939239e9$var$Transform(options) {
    if (!(this instanceof $a81051a1939239e9$var$Transform)) return new $a81051a1939239e9$var$Transform(options);
    $geAE0.call(this, options);
    this._transformState = {
        afterTransform: $a81051a1939239e9$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", $a81051a1939239e9$var$prefinish);
}
function $a81051a1939239e9$var$prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        $a81051a1939239e9$var$done(_this, er, data);
    });
    else $a81051a1939239e9$var$done(this, null, null);
}
$a81051a1939239e9$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $geAE0.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$a81051a1939239e9$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $a81051a1939239e9$var$ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
$a81051a1939239e9$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$a81051a1939239e9$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$a81051a1939239e9$var$Transform.prototype._destroy = function(err, cb) {
    $geAE0.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $a81051a1939239e9$var$done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $a81051a1939239e9$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $a81051a1939239e9$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRegister("6iSpJ", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = $496ea2046dc2adc2$var$PassThrough;

var $eqB9Z = parcelRequire("eqB9Z");

(parcelRequire("4oIhJ"))($496ea2046dc2adc2$var$PassThrough, $eqB9Z);
function $496ea2046dc2adc2$var$PassThrough(options) {
    if (!(this instanceof $496ea2046dc2adc2$var$PassThrough)) return new $496ea2046dc2adc2$var$PassThrough(options);
    $eqB9Z.call(this, options);
}
$496ea2046dc2adc2$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRegister("cp5V1", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var $907c69296aeb164b$var$eos;
function $907c69296aeb164b$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $82iBW = parcelRequire("82iBW");
var $907c69296aeb164b$require$_require$codes = $82iBW.codes;
var $907c69296aeb164b$var$ERR_MISSING_ARGS = $907c69296aeb164b$require$_require$codes.ERR_MISSING_ARGS, $907c69296aeb164b$var$ERR_STREAM_DESTROYED = $907c69296aeb164b$require$_require$codes.ERR_STREAM_DESTROYED;
function $907c69296aeb164b$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $907c69296aeb164b$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}

function $907c69296aeb164b$var$destroyer(stream, reading, writing, callback) {
    callback = $907c69296aeb164b$var$once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if ($907c69296aeb164b$var$eos === undefined) $907c69296aeb164b$var$eos = (parcelRequire("1UEwY"));
    $907c69296aeb164b$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if ($907c69296aeb164b$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new $907c69296aeb164b$var$ERR_STREAM_DESTROYED("pipe"));
    };
}
function $907c69296aeb164b$var$call(fn) {
    fn();
}
function $907c69296aeb164b$var$pipe(from, to) {
    return from.pipe(to);
}
function $907c69296aeb164b$var$popCallback(streams) {
    if (!streams.length) return $907c69296aeb164b$var$noop;
    if (typeof streams[streams.length - 1] !== "function") return $907c69296aeb164b$var$noop;
    return streams.pop();
}
function $907c69296aeb164b$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $907c69296aeb164b$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $907c69296aeb164b$var$ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $907c69296aeb164b$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($907c69296aeb164b$var$call);
            if (reading) return;
            destroys.forEach($907c69296aeb164b$var$call);
            callback(error);
        });
    });
    return streams.reduce($907c69296aeb164b$var$pipe);
}
module.exports = $907c69296aeb164b$var$pipeline;

});




parcelRegister("fDpwR", function(module, exports) {
module.exports = $b61e4d0ff523b60d$var$extend;
var $b61e4d0ff523b60d$var$hasOwnProperty = Object.prototype.hasOwnProperty;
function $b61e4d0ff523b60d$var$extend() {
    var target = {};
    for(var i = 0; i < arguments.length; i++){
        var source = arguments[i];
        for(var key in source)if ($b61e4d0ff523b60d$var$hasOwnProperty.call(source, key)) target[key] = source[key];
    }
    return target;
}

});

parcelRegister("gyalw", function(module, exports) {
module.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Unordered Collection",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
};

});

parcelRegister("9Gorm", function(module, exports) {
/*
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ 
var $aDbZK = parcelRequire("aDbZK");
"use strict";

var $lzgwP = parcelRequire("lzgwP");
function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
}
// Reference: RFC 3986, RFC 1808, RFC 2396
/*
 * define these here so at least they only have to be
 * compiled once on the first module load.
 */ var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/, /*
   * RFC 2396: characters reserved for delimiting URLs.
   * We actually just auto-escape these.
   */ delims = [
    "<",
    ">",
    '"',
    "`",
    " ",
    "\r",
    "\n",
    "	"
], // RFC 2396: characters not allowed for various reasons.
unwise = [
    "{",
    "}",
    "|",
    "\\",
    "^",
    "`"
].concat(delims), // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = [
    "'"
].concat(unwise), /*
   * Characters that are never ever allowed in a hostname.
   * Note that any invalid chars are also handled, but these
   * are the ones that are *expected* to be seen, so we fast-path
   * them.
   */ nonHostChars = [
    "%",
    "/",
    "?",
    ";",
    "#"
].concat(autoEscape), hostEndingChars = [
    "/",
    "?",
    "#"
], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
    javascript: true,
    "javascript:": true
}, // protocols that never have a hostname.
hostlessProtocol = {
    javascript: true,
    "javascript:": true
}, // protocols that always contain a // bit.
slashedProtocol = {
    http: true,
    https: true,
    ftp: true,
    gopher: true,
    file: true,
    "http:": true,
    "https:": true,
    "ftp:": true,
    "gopher:": true,
    "file:": true
};

var $jdAKv = parcelRequire("jdAKv");
function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && typeof url === "object" && url instanceof Url) return url;
    var u = new Url();
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
}
Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (typeof url !== "string") throw new TypeError("Parameter 'url' must be a string, not " + (typeof url === "undefined" ? "undefined" : (0, $aDbZK._)(url)));
    /*
   * Copy chrome, IE, opera backslash-handling behavior.
   * Back slashes before the query string get converted to forward slashes
   * See: https://code.google.com/p/chromium/issues/detail?id=25916
   */ var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, "/");
    url = uSplit.join(splitter);
    var rest = url;
    /*
   * trim before proceeding.
   * This is to support parse stuff like "  http://foo.com  \n"
   */ rest = rest.trim();
    if (!slashesDenoteHost && url.split("#").length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) this.query = $jdAKv.parse(this.search.substr(1));
                else this.query = this.search.substr(1);
            } else if (parseQueryString) {
                this.search = "";
                this.query = {};
            }
            return this;
        }
    }
    var proto = protocolPattern.exec(rest);
    if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
    }
    /*
   * figure out if it's got a host
   * user@server is *always* interpreted as a hostname, and url
   * resolution will treat //foo/bar as host=foo,path=bar because that's
   * how the browser resolves relative URLs.
   */ if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
        }
    }
    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        /*
     * there's a hostname.
     * the first instance of /, ?, ;, or # ends the host.
     *
     * If there is an @ in the hostname, then non-host chars *are* allowed
     * to the left of the last @ sign, unless some host-ending character
     * comes *before* the @-sign.
     * URLs are obnoxious.
     *
     * ex:
     * http://a@b@c/ => user:a@b host:c
     * http://a@b?@c => user:a host:c path:/?@c
     */ /*
     * v0.12 TODO(isaacs): This is not quite how Chrome does things.
     * Review our test case against browsers more comprehensively.
     */ // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for(var i = 0; i < hostEndingChars.length; i++){
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        /*
     * at this point, either we have an explicit point where the
     * auth portion cannot go past, or the last @ char is the decider.
     */ var auth, atSign;
        if (hostEnd === -1) // atSign can be anywhere.
        atSign = rest.lastIndexOf("@");
        else /*
       * atSign must be in auth portion.
       * http://a@b/c@d => host:b auth:a path:/c@d
       */ atSign = rest.lastIndexOf("@", hostEnd);
        /*
     * Now we have a portion which is definitely the auth.
     * Pull that off.
     */ if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
        }
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for(var i = 0; i < nonHostChars.length; i++){
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        // pull out port.
        this.parseHost();
        /*
     * we've indicated that there is a hostname,
     * so even if it's empty, it has to be present.
     */ this.hostname = this.hostname || "";
        /*
     * if hostname begins with [ and ends with ]
     * assume that it's an IPv6 address.
     */ var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        // validate a little.
        if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for(var i = 0, l = hostparts.length; i < l; i++){
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match(hostnamePartPattern)) {
                    var newpart = "";
                    for(var j = 0, k = part.length; j < k; j++)if (part.charCodeAt(j) > 127) /*
               * we replace non-ASCII char with a temporary placeholder
               * we need this to make sure size of hostname is not
               * broken by replacing non-ASCII by nothing
               */ newpart += "x";
                    else newpart += part[j];
                    // we test again with ASCII char only
                    if (!newpart.match(hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match(hostnamePartStart);
                        if (bit) {
                            validParts.push(bit[1]);
                            notHost.unshift(bit[2]);
                        }
                        if (notHost.length) rest = "/" + notHost.join(".") + rest;
                        this.hostname = validParts.join(".");
                        break;
                    }
                }
            }
        }
        if (this.hostname.length > hostnameMaxLen) this.hostname = "";
        else // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
        if (!ipv6Hostname) /*
       * IDNA Support: Returns a punycoded representation of "domain".
       * It only converts parts of the domain name that
       * have non-ASCII characters, i.e. it doesn't matter if
       * you call it with a domain that already is ASCII-only.
       */ this.hostname = $lzgwP.toASCII(this.hostname);
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        /*
     * strip [ and ] from the hostname
     * the host field still retains them, though
     */ if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== "/") rest = "/" + rest;
        }
    }
    /*
   * now rest is set to the post-host stuff.
   * chop off any delim chars.
   */ if (!unsafeProtocol[lowerProto]) /*
     * First, make 100% sure that any "autoEscape" chars get
     * escaped, even if encodeURIComponent doesn't think they
     * need to be.
     */ for(var i = 0, l = autoEscape.length; i < l; i++){
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1) continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) esc = escape(ae);
        rest = rest.split(ae).join(esc);
    }
    // chop off from the tail first.
    var hash = rest.indexOf("#");
    if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf("?");
    if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) this.query = $jdAKv.parse(this.query);
        rest = rest.slice(0, qm);
    } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = "";
        this.query = {};
    }
    if (rest) this.pathname = rest;
    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = "/";
    // to support http.request
    if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
    }
    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
};
// format a parsed object into a url string
function urlFormat(obj) {
    /*
   * ensure it's an object, and not a string url.
   * If it's an obj, this is a no-op.
   * this way, you can call url_format() on strings
   * to clean up potentially wonky urls.
   */ if (typeof obj === "string") obj = urlParse(obj);
    if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
    return obj.format();
}
Url.prototype.format = function() {
    var auth = this.auth || "";
    if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
    }
    var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
    if (this.host) host = auth + this.host;
    else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) host += ":" + this.port;
    }
    if (this.query && typeof this.query === "object" && Object.keys(this.query).length) query = $jdAKv.stringify(this.query, {
        arrayFormat: "repeat",
        addQueryPrefix: false
    });
    var search = this.search || query && "?" + query || "";
    if (protocol && protocol.substr(-1) !== ":") protocol += ":";
    /*
   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
   * unless they had them to begin with.
   */ if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
    } else if (!host) host = "";
    if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
    if (search && search.charAt(0) !== "?") search = "?" + search;
    pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
    });
    search = search.replace("#", "%23");
    return protocol + host + pathname + search + hash;
};
function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
}
Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function(relative) {
    if (typeof relative === "string") {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
    }
    var result = new Url();
    var tkeys = Object.keys(this);
    for(var tk = 0; tk < tkeys.length; tk++){
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
    }
    /*
   * hash is always overridden, no matter what.
   * even href="" will remove it.
   */ result.hash = relative.hash;
    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === "") {
        result.href = result.format();
        return result;
    }
    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for(var rk = 0; rk < rkeys.length; rk++){
            var rkey = rkeys[rk];
            if (rkey !== "protocol") result[rkey] = relative[rkey];
        }
        // urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
            result.pathname = "/";
            result.path = result.pathname;
        }
        result.href = result.format();
        return result;
    }
    if (relative.protocol && relative.protocol !== result.protocol) {
        /*
     * if it's a known url protocol, then changing
     * the protocol does weird things
     * first, if it's not file:, then we MUST have a host,
     * and if there was a path
     * to begin with, then we MUST have a path.
     * if it is file:, then the host is dropped,
     * because that's known to be hostless.
     * anything else is assumed to be absolute.
     */ if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for(var v = 0; v < keys.length; v++){
                var k = keys[v];
                result[k] = relative[k];
            }
            result.href = result.format();
            return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || "").split("/");
            while(relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = "";
            if (!relative.hostname) relative.hostname = "";
            if (relPath[0] !== "") relPath.unshift("");
            if (relPath.length < 2) relPath.unshift("");
            result.pathname = relPath.join("/");
        } else result.pathname = relative.pathname;
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
    }
    var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
    /*
   * if the url is a non-slashed url, then relative
   * links like ../.. should be able
   * to crawl up to the hostname, as well.  This is strange.
   * result.protocol has already been set by now.
   * Later on, put the first path part into the host field.
   */ if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
            if (srcPath[0] === "") srcPath[0] = result.host;
            else srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
                if (relPath[0] === "") relPath[0] = relative.host;
                else relPath.unshift(relative.host);
            }
            relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
    }
    if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
    // fall through to the dot-handling below.
    } else if (relPath.length) {
        /*
     * it's relative
     * throw away the existing file, and take the new path instead.
     */ if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
    } else if (relative.search != null) {
        /*
     * just pull out the search.
     * like href='?foo'.
     * Put this after the other two cases because it simplifies the booleans
     */ if (psychotic) {
            result.host = srcPath.shift();
            result.hostname = result.host;
            /*
       * occationaly the auth can get stuck only in host
       * this especially happens in cases like
       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
       */ var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
                result.auth = authInHost.shift();
                result.hostname = authInHost.shift();
                result.host = result.hostname;
            }
        }
        result.search = relative.search;
        result.query = relative.query;
        // to support http.request
        if (result.pathname !== null || result.search !== null) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        result.href = result.format();
        return result;
    }
    if (!srcPath.length) {
        /*
     * no path at all.  easy.
     * we've already handled the other stuff above.
     */ result.pathname = null;
        // to support http.request
        if (result.search) result.path = "/" + result.search;
        else result.path = null;
        result.href = result.format();
        return result;
    }
    /*
   * if a url ENDs in . or .., then it must get a trailing slash.
   * however, if it ends in anything else non-slashy,
   * then it must NOT get a trailing slash.
   */ var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
    /*
   * strip single dots, resolve double dots to parent dir
   * if the path tries to go above the root, `up` ends up > 0
   */ var up = 0;
    for(var i = srcPath.length; i >= 0; i--){
        last = srcPath[i];
        if (last === ".") srcPath.splice(i, 1);
        else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
        } else if (up) {
            srcPath.splice(i, 1);
            up--;
        }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) for(; up--; up)srcPath.unshift("..");
    if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) srcPath.unshift("");
    if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") srcPath.push("");
    var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
    // put the host back
    if (psychotic) {
        result.hostname = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        result.host = result.hostname;
        /*
     * occationaly the auth can get stuck only in host
     * this especially happens in cases like
     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
     */ var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
            result.auth = authInHost.shift();
            result.hostname = authInHost.shift();
            result.host = result.hostname;
        }
    }
    mustEndAbs = mustEndAbs || result.host && srcPath.length;
    if (mustEndAbs && !isAbsolute) srcPath.unshift("");
    if (srcPath.length > 0) result.pathname = srcPath.join("/");
    else {
        result.pathname = null;
        result.path = null;
    }
    // to support request.http
    if (result.pathname !== null || result.search !== null) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
};
Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
        port = port[0];
        if (port !== ":") this.port = port.substr(1);
        host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
};
exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;

});
parcelRegister("lzgwP", function(module, exports) {
(function(root) {
    /** Detect free variables */ var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof $parcel$global == "object" && $parcel$global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) root = freeGlobal;
    /**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */ var punycode, /** Highest positive signed 32-bit float value */ maxInt = 2147483647, /** Bootstring parameters */ base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", /** Regular expressions */ regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, /** Error messages */ errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
    }, /** Convenience shortcuts */ baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, /** Temporary variable */ key;
    /*--------------------------------------------------------------------------*/ /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */ function error(type) {
        throw new RangeError(errors[type]);
    }
    /**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */ function map(array, fn) {
        var length = array.length;
        var result = [];
        while(length--)result[length] = fn(array[length]);
        return result;
    }
    /**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */ function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + "@";
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
    }
    /**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */ function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while(counter < length){
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                }
            } else output.push(value);
        }
        return output;
    }
    /**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */ function ucs2encode(array) {
        return map(array, function(value) {
            var output = "";
            if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
            return output;
        }).join("");
    }
    /**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */ function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) return codePoint - 22;
        if (codePoint - 65 < 26) return codePoint - 65;
        if (codePoint - 97 < 26) return codePoint - 97;
        return base;
    }
    /**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */ function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    /**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */ function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    /**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */ function decode(input) {
        // Don't use UCS-2
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, /** Cached calculation results */ baseMinusT;
        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) basic = 0;
        for(j = 0; j < basic; ++j){
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) error("not-basic");
            output.push(input.charCodeAt(j));
        }
        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.
        for(index = basic > 0 ? basic + 1 : 0; index < inputLength;){
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for(oldi = i, w = 1, k = base;; k += base){
                if (index >= inputLength) error("invalid-input");
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) error("overflow");
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) break;
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) error("overflow");
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) error("overflow");
            n += floor(i / out);
            i %= out;
            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    }
    /**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */ function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], /** `inputLength` will hold the number of code points in `input`. */ inputLength, /** Cached calculation results */ handledCPCountPlusOne, baseMinusT, qMinusT;
        // Convert the input in UCS-2 to Unicode
        input = ucs2decode(input);
        // Cache the length
        inputLength = input.length;
        // Initialize the state
        n = initialN;
        delta = 0;
        bias = initialBias;
        // Handle the basic code points
        for(j = 0; j < inputLength; ++j){
            currentValue = input[j];
            if (currentValue < 0x80) output.push(stringFromCharCode(currentValue));
        }
        handledCPCount = basicLength = output.length;
        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
        // Finish the basic string - if it is not empty - with a delimiter
        if (basicLength) output.push(delimiter);
        // Main encoding loop:
        while(handledCPCount < inputLength){
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for(m = maxInt, j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) m = currentValue;
            }
            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error("overflow");
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for(j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) error("overflow");
                if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for(q = delta, k = base;; k += base){
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) break;
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join("");
    }
    /**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */ function toUnicode(input) {
        return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    }
    /**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */ function toASCII(input) {
        return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
    }
    /*--------------------------------------------------------------------------*/ /** Define the public API */ punycode = {
        /**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */ "version": "1.4.1",
        /**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */ "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
    };
    /** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) define("punycode", function() {
        return punycode;
    });
    else if (freeExports && freeModule) {
        if (module.exports == freeExports) // in Node.js, io.js, or RingoJS v0.8.0+
        freeModule.exports = punycode;
        else // in Narwhal or RingoJS v0.7.0-
        for(key in punycode)punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    } else // in Rhino or a web browser
    root.punycode = punycode;
})(this);

});

parcelRegister("jdAKv", function(module, exports) {
"use strict";

var $kip1f = parcelRequire("kip1f");

var $6t5Sn = parcelRequire("6t5Sn");

var $79HT1 = parcelRequire("79HT1");
module.exports = {
    formats: $79HT1,
    parse: $6t5Sn,
    stringify: $kip1f
};

});
parcelRegister("kip1f", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");
"use strict";

var $43jvq = parcelRequire("43jvq");

var $242A0 = parcelRequire("242A0");

var $79HT1 = parcelRequire("79HT1");
var $ec68e561bd747ad6$var$has = Object.prototype.hasOwnProperty;
var $ec68e561bd747ad6$var$arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};
var $ec68e561bd747ad6$var$isArray = Array.isArray;
var $ec68e561bd747ad6$var$push = Array.prototype.push;
var $ec68e561bd747ad6$var$pushToArray = function pushToArray(arr, valueOrArray) {
    $ec68e561bd747ad6$var$push.apply(arr, $ec68e561bd747ad6$var$isArray(valueOrArray) ? valueOrArray : [
        valueOrArray
    ]);
};
var $ec68e561bd747ad6$var$toISO = Date.prototype.toISOString;
var $ec68e561bd747ad6$var$defaultFormat = $79HT1.default;
var $ec68e561bd747ad6$var$defaults = {
    addQueryPrefix: false,
    allowDots: false,
    allowEmptyArrays: false,
    arrayFormat: "indices",
    charset: "utf-8",
    charsetSentinel: false,
    delimiter: "&",
    encode: true,
    encodeDotInKeys: false,
    encoder: $242A0.encode,
    encodeValuesOnly: false,
    format: $ec68e561bd747ad6$var$defaultFormat,
    formatter: $79HT1.formatters[$ec68e561bd747ad6$var$defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
        return $ec68e561bd747ad6$var$toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};
var $ec68e561bd747ad6$var$isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || (typeof v === "undefined" ? "undefined" : (0, $aDbZK._)(v)) === "symbol" || (typeof v === "undefined" ? "undefined" : (0, $aDbZK._)(v)) === "bigint";
};
var $ec68e561bd747ad6$var$sentinel = {};
var $ec68e561bd747ad6$var$stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
    var obj = object;
    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while((tmpSc = tmpSc.get($ec68e561bd747ad6$var$sentinel)) !== void 0 && !findFlag){
        // Where object last appeared in the ref tree
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
            if (pos === step) throw new RangeError("Cyclic object value");
            else findFlag = true; // Break while
        }
        if (typeof tmpSc.get($ec68e561bd747ad6$var$sentinel) === "undefined") step = 0;
    }
    if (typeof filter === "function") obj = filter(prefix, obj);
    else if (obj instanceof Date) obj = serializeDate(obj);
    else if (generateArrayPrefix === "comma" && $ec68e561bd747ad6$var$isArray(obj)) obj = $242A0.maybeMap(obj, function(value) {
        if (value instanceof Date) return serializeDate(value);
        return value;
    });
    if (obj === null) {
        if (strictNullHandling) return encoder && !encodeValuesOnly ? encoder(prefix, $ec68e561bd747ad6$var$defaults.encoder, charset, "key", format) : prefix;
        obj = "";
    }
    if ($ec68e561bd747ad6$var$isNonNullishPrimitive(obj) || $242A0.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, $ec68e561bd747ad6$var$defaults.encoder, charset, "key", format);
            return [
                formatter(keyValue) + "=" + formatter(encoder(obj, $ec68e561bd747ad6$var$defaults.encoder, charset, "value", format))
            ];
        }
        return [
            formatter(prefix) + "=" + formatter(String(obj))
        ];
    }
    var values = [];
    if (typeof obj === "undefined") return values;
    var objKeys;
    if (generateArrayPrefix === "comma" && $ec68e561bd747ad6$var$isArray(obj)) {
        // we need to join elements in
        if (encodeValuesOnly && encoder) obj = $242A0.maybeMap(obj, encoder);
        objKeys = [
            {
                value: obj.length > 0 ? obj.join(",") || null : void 0
            }
        ];
    } else if ($ec68e561bd747ad6$var$isArray(filter)) objKeys = filter;
    else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }
    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, "%2E") : prefix;
    var adjustedPrefix = commaRoundTrip && $ec68e561bd747ad6$var$isArray(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
    if (allowEmptyArrays && $ec68e561bd747ad6$var$isArray(obj) && obj.length === 0) return adjustedPrefix + "[]";
    for(var j = 0; j < objKeys.length; ++j){
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) continue;
        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\./g, "%2E") : key;
        var keyPrefix = $ec68e561bd747ad6$var$isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
        sideChannel.set(object, step);
        var valueSideChannel = $43jvq();
        valueSideChannel.set($ec68e561bd747ad6$var$sentinel, sideChannel);
        $ec68e561bd747ad6$var$pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, generateArrayPrefix === "comma" && encodeValuesOnly && $ec68e561bd747ad6$var$isArray(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
    }
    return values;
};
var $ec68e561bd747ad6$var$normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) return $ec68e561bd747ad6$var$defaults;
    if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
    if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
    if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") throw new TypeError("Encoder has to be a function.");
    var charset = opts.charset || $ec68e561bd747ad6$var$defaults.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    var format = $79HT1.default;
    if (typeof opts.format !== "undefined") {
        if (!$ec68e561bd747ad6$var$has.call($79HT1.formatters, opts.format)) throw new TypeError("Unknown format option provided.");
        format = opts.format;
    }
    var formatter = $79HT1.formatters[format];
    var filter = $ec68e561bd747ad6$var$defaults.filter;
    if (typeof opts.filter === "function" || $ec68e561bd747ad6$var$isArray(opts.filter)) filter = opts.filter;
    var arrayFormat;
    if (opts.arrayFormat in $ec68e561bd747ad6$var$arrayPrefixGenerators) arrayFormat = opts.arrayFormat;
    else if ("indices" in opts) arrayFormat = opts.indices ? "indices" : "repeat";
    else arrayFormat = $ec68e561bd747ad6$var$defaults.arrayFormat;
    if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
    var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : $ec68e561bd747ad6$var$defaults.allowDots : !!opts.allowDots;
    return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : $ec68e561bd747ad6$var$defaults.addQueryPrefix,
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : $ec68e561bd747ad6$var$defaults.allowEmptyArrays,
        arrayFormat: arrayFormat,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : $ec68e561bd747ad6$var$defaults.charsetSentinel,
        commaRoundTrip: opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === "undefined" ? $ec68e561bd747ad6$var$defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : $ec68e561bd747ad6$var$defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : $ec68e561bd747ad6$var$defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === "function" ? opts.encoder : $ec68e561bd747ad6$var$defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : $ec68e561bd747ad6$var$defaults.encodeValuesOnly,
        filter: filter,
        format: format,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : $ec68e561bd747ad6$var$defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : $ec68e561bd747ad6$var$defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : $ec68e561bd747ad6$var$defaults.strictNullHandling
    };
};
module.exports = function(object, opts) {
    var obj = object;
    var options = $ec68e561bd747ad6$var$normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
    } else if ($ec68e561bd747ad6$var$isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }
    var keys = [];
    if (typeof obj !== "object" || obj === null) return "";
    var generateArrayPrefix = $ec68e561bd747ad6$var$arrayPrefixGenerators[options.arrayFormat];
    var commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
    if (!objKeys) objKeys = Object.keys(obj);
    if (options.sort) objKeys.sort(options.sort);
    var sideChannel = $43jvq();
    for(var i = 0; i < objKeys.length; ++i){
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) continue;
        $ec68e561bd747ad6$var$pushToArray(keys, $ec68e561bd747ad6$var$stringify(obj[key], key, generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
        prefix += "utf8=%26%2310003%3B&";
        else // encodeURIComponent('✓')
        prefix += "utf8=%E2%9C%93&";
    }
    return joined.length > 0 ? prefix + joined : "";
};

});
parcelRegister("43jvq", function(module, exports) {
"use strict";

var $lNU3a = parcelRequire("lNU3a");

var $8zBy8 = parcelRequire("8zBy8");

var $2QD9I = parcelRequire("2QD9I");

var $6AhWG = parcelRequire("6AhWG");
var $2f3692b70d3ae7fe$var$$WeakMap = $lNU3a("%WeakMap%", true);
var $2f3692b70d3ae7fe$var$$Map = $lNU3a("%Map%", true);
var $2f3692b70d3ae7fe$var$$weakMapGet = $8zBy8("WeakMap.prototype.get", true);
var $2f3692b70d3ae7fe$var$$weakMapSet = $8zBy8("WeakMap.prototype.set", true);
var $2f3692b70d3ae7fe$var$$weakMapHas = $8zBy8("WeakMap.prototype.has", true);
var $2f3692b70d3ae7fe$var$$mapGet = $8zBy8("Map.prototype.get", true);
var $2f3692b70d3ae7fe$var$$mapSet = $8zBy8("Map.prototype.set", true);
var $2f3692b70d3ae7fe$var$$mapHas = $8zBy8("Map.prototype.has", true);
/*
* This function traverses the list returning the node corresponding to the given key.
*
* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.
*/ /** @type {import('.').listGetNode} */ var $2f3692b70d3ae7fe$var$listGetNode = function listGetNode(list, key) {
    /** @type {typeof list | NonNullable<(typeof list)['next']>} */ var prev = list;
    /** @type {(typeof list)['next']} */ var curr;
    for(; (curr = prev.next) !== null; prev = curr)if (curr.key === key) {
        prev.next = curr.next;
        // eslint-disable-next-line no-extra-parens
        curr.next = /** @type {NonNullable<typeof list.next>} */ list.next;
        list.next = curr; // eslint-disable-line no-param-reassign
        return curr;
    }
};
/** @type {import('.').listGet} */ var $2f3692b70d3ae7fe$var$listGet = function listGet(objects, key) {
    var node = $2f3692b70d3ae7fe$var$listGetNode(objects, key);
    return node && node.value;
};
/** @type {import('.').listSet} */ var $2f3692b70d3ae7fe$var$listSet = function listSet(objects, key, value) {
    var node = $2f3692b70d3ae7fe$var$listGetNode(objects, key);
    if (node) node.value = value;
    else // Prepend the new node to the beginning of the list
    objects.next = /** @type {import('.').ListNode<typeof value>} */ {
        key: key,
        next: objects.next,
        value: value
    };
};
/** @type {import('.').listHas} */ var $2f3692b70d3ae7fe$var$listHas = function listHas(objects, key) {
    return !!$2f3692b70d3ae7fe$var$listGetNode(objects, key);
};
/** @type {import('.')} */ module.exports = function getSideChannel() {
    /** @type {WeakMap<object, unknown>} */ var $wm;
    /** @type {Map<object, unknown>} */ var $m;
    /** @type {import('.').RootNode<unknown>} */ var $o;
    /** @type {import('.').Channel} */ var channel = {
        assert: function assert(key) {
            if (!channel.has(key)) throw new $6AhWG("Side channel does not contain " + $2QD9I(key));
        },
        get: function get(key) {
            if ($2f3692b70d3ae7fe$var$$WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if ($wm) return $2f3692b70d3ae7fe$var$$weakMapGet($wm, key);
            } else if ($2f3692b70d3ae7fe$var$$Map) {
                if ($m) return $2f3692b70d3ae7fe$var$$mapGet($m, key);
            } else {
                if ($o) return $2f3692b70d3ae7fe$var$listGet($o, key);
            }
        },
        has: function has(key) {
            if ($2f3692b70d3ae7fe$var$$WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if ($wm) return $2f3692b70d3ae7fe$var$$weakMapHas($wm, key);
            } else if ($2f3692b70d3ae7fe$var$$Map) {
                if ($m) return $2f3692b70d3ae7fe$var$$mapHas($m, key);
            } else {
                if ($o) return $2f3692b70d3ae7fe$var$listHas($o, key);
            }
            return false;
        },
        set: function set(key, value) {
            if ($2f3692b70d3ae7fe$var$$WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if (!$wm) $wm = new $2f3692b70d3ae7fe$var$$WeakMap();
                $2f3692b70d3ae7fe$var$$weakMapSet($wm, key, value);
            } else if ($2f3692b70d3ae7fe$var$$Map) {
                if (!$m) $m = new $2f3692b70d3ae7fe$var$$Map();
                $2f3692b70d3ae7fe$var$$mapSet($m, key, value);
            } else {
                if (!$o) // Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head
                $o = {
                    key: {},
                    next: null
                };
                $2f3692b70d3ae7fe$var$listSet($o, key, value);
            }
        }
    };
    return channel;
};

});
parcelRegister("lNU3a", function(module, exports) {
"use strict";
var $fdf9a6f84e82a975$var$_$undefined;

var $aL1qD = parcelRequire("aL1qD");

var $2OApi = parcelRequire("2OApi");

var $esMSI = parcelRequire("esMSI");

var $k59tQ = parcelRequire("k59tQ");

var $gjNp4 = parcelRequire("gjNp4");

var $6AhWG = parcelRequire("6AhWG");

var $haZxO = parcelRequire("haZxO");
var $fdf9a6f84e82a975$var$$Function = Function;
// eslint-disable-next-line consistent-return
var $fdf9a6f84e82a975$var$getEvalledConstructor = function getEvalledConstructor(expressionSyntax) {
    try {
        return $fdf9a6f84e82a975$var$$Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {}
};
var $fdf9a6f84e82a975$var$$gOPD = Object.getOwnPropertyDescriptor;
if ($fdf9a6f84e82a975$var$$gOPD) try {
    $fdf9a6f84e82a975$var$$gOPD({}, "");
} catch (e) {
    $fdf9a6f84e82a975$var$$gOPD = null; // this is IE 8, which has a broken gOPD
}
var $fdf9a6f84e82a975$var$throwTypeError = function throwTypeError() {
    throw new $6AhWG();
};
var $fdf9a6f84e82a975$var$ThrowTypeError = $fdf9a6f84e82a975$var$$gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return $fdf9a6f84e82a975$var$throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $fdf9a6f84e82a975$var$$gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
            return $fdf9a6f84e82a975$var$throwTypeError;
        }
    }
}() : $fdf9a6f84e82a975$var$throwTypeError;

var $fdf9a6f84e82a975$var$hasSymbols = (parcelRequire("dFMAx"))();

var $fdf9a6f84e82a975$var$hasProto = (parcelRequire("7cAKX"))();
var $fdf9a6f84e82a975$var$getProto = Object.getPrototypeOf || ($fdf9a6f84e82a975$var$hasProto ? function(x) {
    return x.__proto__;
} // eslint-disable-line no-proto
 : null);
var $fdf9a6f84e82a975$var$needsEval = {};
var $fdf9a6f84e82a975$var$TypedArray = typeof Uint8Array === "undefined" || !$fdf9a6f84e82a975$var$getProto ? undefined : $fdf9a6f84e82a975$var$getProto(Uint8Array);
var $fdf9a6f84e82a975$var$INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined : ArrayBuffer,
    "%ArrayIteratorPrototype%": $fdf9a6f84e82a975$var$hasSymbols && $fdf9a6f84e82a975$var$getProto ? $fdf9a6f84e82a975$var$getProto([][Symbol.iterator]()) : undefined,
    "%AsyncFromSyncIteratorPrototype%": undefined,
    "%AsyncFunction%": $fdf9a6f84e82a975$var$needsEval,
    "%AsyncGenerator%": $fdf9a6f84e82a975$var$needsEval,
    "%AsyncGeneratorFunction%": $fdf9a6f84e82a975$var$needsEval,
    "%AsyncIteratorPrototype%": $fdf9a6f84e82a975$var$needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $aL1qD,
    "%eval%": eval,
    "%EvalError%": $2OApi,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry,
    "%Function%": $fdf9a6f84e82a975$var$$Function,
    "%GeneratorFunction%": $fdf9a6f84e82a975$var$needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": $fdf9a6f84e82a975$var$hasSymbols && $fdf9a6f84e82a975$var$getProto ? $fdf9a6f84e82a975$var$getProto($fdf9a6f84e82a975$var$getProto([][Symbol.iterator]())) : undefined,
    "%JSON%": typeof JSON === "object" ? JSON : undefined,
    "%Map%": typeof Map === "undefined" ? undefined : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !$fdf9a6f84e82a975$var$hasSymbols || !$fdf9a6f84e82a975$var$getProto ? undefined : $fdf9a6f84e82a975$var$getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined : Proxy,
    "%RangeError%": $esMSI,
    "%ReferenceError%": $k59tQ,
    "%Reflect%": typeof Reflect === "undefined" ? undefined : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !$fdf9a6f84e82a975$var$hasSymbols || !$fdf9a6f84e82a975$var$getProto ? undefined : $fdf9a6f84e82a975$var$getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": $fdf9a6f84e82a975$var$hasSymbols && $fdf9a6f84e82a975$var$getProto ? $fdf9a6f84e82a975$var$getProto(""[Symbol.iterator]()) : undefined,
    "%Symbol%": $fdf9a6f84e82a975$var$hasSymbols ? Symbol : undefined,
    "%SyntaxError%": $gjNp4,
    "%ThrowTypeError%": $fdf9a6f84e82a975$var$ThrowTypeError,
    "%TypedArray%": $fdf9a6f84e82a975$var$TypedArray,
    "%TypeError%": $6AhWG,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined : Uint32Array,
    "%URIError%": $haZxO,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined : WeakSet
};
if ($fdf9a6f84e82a975$var$getProto) try {
    null.error; // eslint-disable-line no-unused-expressions
} catch (e) {
    // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
    var $fdf9a6f84e82a975$var$errorProto = $fdf9a6f84e82a975$var$getProto($fdf9a6f84e82a975$var$getProto(e));
    $fdf9a6f84e82a975$var$INTRINSICS["%Error.prototype%"] = $fdf9a6f84e82a975$var$errorProto;
}
var $fdf9a6f84e82a975$var$doEval = function doEval(name) {
    var value;
    if (name === "%AsyncFunction%") value = $fdf9a6f84e82a975$var$getEvalledConstructor("async function () {}");
    else if (name === "%GeneratorFunction%") value = $fdf9a6f84e82a975$var$getEvalledConstructor("function* () {}");
    else if (name === "%AsyncGeneratorFunction%") value = $fdf9a6f84e82a975$var$getEvalledConstructor("async function* () {}");
    else if (name === "%AsyncGenerator%") {
        var fn = doEval("%AsyncGeneratorFunction%");
        if (fn) value = fn.prototype;
    } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval("%AsyncGenerator%");
        if (gen && $fdf9a6f84e82a975$var$getProto) value = $fdf9a6f84e82a975$var$getProto(gen.prototype);
    }
    $fdf9a6f84e82a975$var$INTRINSICS[name] = value;
    return value;
};
var $fdf9a6f84e82a975$var$LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": [
        "ArrayBuffer",
        "prototype"
    ],
    "%ArrayPrototype%": [
        "Array",
        "prototype"
    ],
    "%ArrayProto_entries%": [
        "Array",
        "prototype",
        "entries"
    ],
    "%ArrayProto_forEach%": [
        "Array",
        "prototype",
        "forEach"
    ],
    "%ArrayProto_keys%": [
        "Array",
        "prototype",
        "keys"
    ],
    "%ArrayProto_values%": [
        "Array",
        "prototype",
        "values"
    ],
    "%AsyncFunctionPrototype%": [
        "AsyncFunction",
        "prototype"
    ],
    "%AsyncGenerator%": [
        "AsyncGeneratorFunction",
        "prototype"
    ],
    "%AsyncGeneratorPrototype%": [
        "AsyncGeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%BooleanPrototype%": [
        "Boolean",
        "prototype"
    ],
    "%DataViewPrototype%": [
        "DataView",
        "prototype"
    ],
    "%DatePrototype%": [
        "Date",
        "prototype"
    ],
    "%ErrorPrototype%": [
        "Error",
        "prototype"
    ],
    "%EvalErrorPrototype%": [
        "EvalError",
        "prototype"
    ],
    "%Float32ArrayPrototype%": [
        "Float32Array",
        "prototype"
    ],
    "%Float64ArrayPrototype%": [
        "Float64Array",
        "prototype"
    ],
    "%FunctionPrototype%": [
        "Function",
        "prototype"
    ],
    "%Generator%": [
        "GeneratorFunction",
        "prototype"
    ],
    "%GeneratorPrototype%": [
        "GeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%Int8ArrayPrototype%": [
        "Int8Array",
        "prototype"
    ],
    "%Int16ArrayPrototype%": [
        "Int16Array",
        "prototype"
    ],
    "%Int32ArrayPrototype%": [
        "Int32Array",
        "prototype"
    ],
    "%JSONParse%": [
        "JSON",
        "parse"
    ],
    "%JSONStringify%": [
        "JSON",
        "stringify"
    ],
    "%MapPrototype%": [
        "Map",
        "prototype"
    ],
    "%NumberPrototype%": [
        "Number",
        "prototype"
    ],
    "%ObjectPrototype%": [
        "Object",
        "prototype"
    ],
    "%ObjProto_toString%": [
        "Object",
        "prototype",
        "toString"
    ],
    "%ObjProto_valueOf%": [
        "Object",
        "prototype",
        "valueOf"
    ],
    "%PromisePrototype%": [
        "Promise",
        "prototype"
    ],
    "%PromiseProto_then%": [
        "Promise",
        "prototype",
        "then"
    ],
    "%Promise_all%": [
        "Promise",
        "all"
    ],
    "%Promise_reject%": [
        "Promise",
        "reject"
    ],
    "%Promise_resolve%": [
        "Promise",
        "resolve"
    ],
    "%RangeErrorPrototype%": [
        "RangeError",
        "prototype"
    ],
    "%ReferenceErrorPrototype%": [
        "ReferenceError",
        "prototype"
    ],
    "%RegExpPrototype%": [
        "RegExp",
        "prototype"
    ],
    "%SetPrototype%": [
        "Set",
        "prototype"
    ],
    "%SharedArrayBufferPrototype%": [
        "SharedArrayBuffer",
        "prototype"
    ],
    "%StringPrototype%": [
        "String",
        "prototype"
    ],
    "%SymbolPrototype%": [
        "Symbol",
        "prototype"
    ],
    "%SyntaxErrorPrototype%": [
        "SyntaxError",
        "prototype"
    ],
    "%TypedArrayPrototype%": [
        "TypedArray",
        "prototype"
    ],
    "%TypeErrorPrototype%": [
        "TypeError",
        "prototype"
    ],
    "%Uint8ArrayPrototype%": [
        "Uint8Array",
        "prototype"
    ],
    "%Uint8ClampedArrayPrototype%": [
        "Uint8ClampedArray",
        "prototype"
    ],
    "%Uint16ArrayPrototype%": [
        "Uint16Array",
        "prototype"
    ],
    "%Uint32ArrayPrototype%": [
        "Uint32Array",
        "prototype"
    ],
    "%URIErrorPrototype%": [
        "URIError",
        "prototype"
    ],
    "%WeakMapPrototype%": [
        "WeakMap",
        "prototype"
    ],
    "%WeakSetPrototype%": [
        "WeakSet",
        "prototype"
    ]
};

var $5ZDZ2 = parcelRequire("5ZDZ2");

var $hPe7c = parcelRequire("hPe7c");
var $fdf9a6f84e82a975$var$$concat = $5ZDZ2.call(Function.call, Array.prototype.concat);
var $fdf9a6f84e82a975$var$$spliceApply = $5ZDZ2.call(Function.apply, Array.prototype.splice);
var $fdf9a6f84e82a975$var$$replace = $5ZDZ2.call(Function.call, String.prototype.replace);
var $fdf9a6f84e82a975$var$$strSlice = $5ZDZ2.call(Function.call, String.prototype.slice);
var $fdf9a6f84e82a975$var$$exec = $5ZDZ2.call(Function.call, RegExp.prototype.exec);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var $fdf9a6f84e82a975$var$rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var $fdf9a6f84e82a975$var$reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var $fdf9a6f84e82a975$var$stringToPath = function stringToPath(string) {
    var first = $fdf9a6f84e82a975$var$$strSlice(string, 0, 1);
    var last = $fdf9a6f84e82a975$var$$strSlice(string, -1);
    if (first === "%" && last !== "%") throw new $gjNp4("invalid intrinsic syntax, expected closing `%`");
    else if (last === "%" && first !== "%") throw new $gjNp4("invalid intrinsic syntax, expected opening `%`");
    var result = [];
    $fdf9a6f84e82a975$var$$replace(string, $fdf9a6f84e82a975$var$rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $fdf9a6f84e82a975$var$$replace(subString, $fdf9a6f84e82a975$var$reEscapeChar, "$1") : number || match;
    });
    return result;
};
/* end adaptation */ var $fdf9a6f84e82a975$var$getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if ($hPe7c($fdf9a6f84e82a975$var$LEGACY_ALIASES, intrinsicName)) {
        alias = $fdf9a6f84e82a975$var$LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
    }
    if ($hPe7c($fdf9a6f84e82a975$var$INTRINSICS, intrinsicName)) {
        var value = $fdf9a6f84e82a975$var$INTRINSICS[intrinsicName];
        if (value === $fdf9a6f84e82a975$var$needsEval) value = $fdf9a6f84e82a975$var$doEval(intrinsicName);
        if (typeof value === "undefined" && !allowMissing) throw new $6AhWG("intrinsic " + name + " exists, but is not available. Please file an issue!");
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $gjNp4("intrinsic " + name + " does not exist!");
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) throw new $6AhWG("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof allowMissing !== "boolean") throw new $6AhWG('"allowMissing" argument must be a boolean');
    if ($fdf9a6f84e82a975$var$$exec(/^%?[^%]*%?$/, name) === null) throw new $gjNp4("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var parts = $fdf9a6f84e82a975$var$stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = $fdf9a6f84e82a975$var$getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $fdf9a6f84e82a975$var$$spliceApply(parts, $fdf9a6f84e82a975$var$$concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $fdf9a6f84e82a975$var$$strSlice(part, 0, 1);
        var last = $fdf9a6f84e82a975$var$$strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) throw new $gjNp4("property names with quotes must have matching quotes");
        if (part === "constructor" || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if ($hPe7c($fdf9a6f84e82a975$var$INTRINSICS, intrinsicRealName)) value = $fdf9a6f84e82a975$var$INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $6AhWG("base intrinsic for " + name + " exists, but the property is not available.");
                return void 0;
            }
            if ($fdf9a6f84e82a975$var$$gOPD && i + 1 >= parts.length) {
                var desc = $fdf9a6f84e82a975$var$$gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && "get" in desc && !("originalValue" in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = $hPe7c(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) $fdf9a6f84e82a975$var$INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

});
parcelRegister("aL1qD", function(module, exports) {
"use strict";
/** @type {import('.')} */ module.exports = Error;

});

parcelRegister("2OApi", function(module, exports) {
"use strict";
/** @type {import('./eval')} */ module.exports = EvalError;

});

parcelRegister("esMSI", function(module, exports) {
"use strict";
/** @type {import('./range')} */ module.exports = RangeError;

});

parcelRegister("k59tQ", function(module, exports) {
"use strict";
/** @type {import('./ref')} */ module.exports = ReferenceError;

});

parcelRegister("gjNp4", function(module, exports) {
"use strict";
/** @type {import('./syntax')} */ module.exports = SyntaxError;

});

parcelRegister("6AhWG", function(module, exports) {
"use strict";
/** @type {import('./type')} */ module.exports = TypeError;

});

parcelRegister("haZxO", function(module, exports) {
"use strict";
/** @type {import('./uri')} */ module.exports = URIError;

});

parcelRegister("dFMAx", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");
"use strict";
var $9f44cb50b62666f3$var$origSymbol = typeof Symbol !== "undefined" && Symbol;

var $lftGr = parcelRequire("lftGr");
module.exports = function hasNativeSymbols() {
    if (typeof $9f44cb50b62666f3$var$origSymbol !== "function") return false;
    if (typeof Symbol !== "function") return false;
    if ((0, $aDbZK._)($9f44cb50b62666f3$var$origSymbol("foo")) !== "symbol") return false;
    if ((0, $aDbZK._)(Symbol("bar")) !== "symbol") return false;
    return $lftGr();
};

});
parcelRegister("lftGr", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");
"use strict";
/* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") return false;
    if ((0, $aDbZK._)(Symbol.iterator) === "symbol") return true;
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") return false;
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") return false;
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(sym in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

});


parcelRegister("7cAKX", function(module, exports) {
"use strict";
var $53e62a6d187343cd$var$test = {
    __proto__: null,
    foo: {}
};
var $53e62a6d187343cd$var$$Object = Object;
/** @type {import('.')} */ module.exports = function hasProto() {
    // @ts-expect-error: TS errors on an inherited property for some reason
    return ({
        __proto__: $53e62a6d187343cd$var$test
    }).foo === $53e62a6d187343cd$var$test.foo && !($53e62a6d187343cd$var$test instanceof $53e62a6d187343cd$var$$Object);
};

});

parcelRegister("5ZDZ2", function(module, exports) {
"use strict";

var $icmoP = parcelRequire("icmoP");
module.exports = Function.prototype.bind || $icmoP;

});
parcelRegister("icmoP", function(module, exports) {
"use strict";
/* eslint no-invalid-this: 1 */ var $d3fab90891cb430c$var$ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
var $d3fab90891cb430c$var$toStr = Object.prototype.toString;
var $d3fab90891cb430c$var$max = Math.max;
var $d3fab90891cb430c$var$funcType = "[object Function]";
var $d3fab90891cb430c$var$concatty = function concatty(a, b) {
    var arr = [];
    for(var i = 0; i < a.length; i += 1)arr[i] = a[i];
    for(var j = 0; j < b.length; j += 1)arr[j + a.length] = b[j];
    return arr;
};
var $d3fab90891cb430c$var$slicy = function slicy(arrLike, offset) {
    var arr = [];
    for(var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1)arr[j] = arrLike[i];
    return arr;
};
var $d3fab90891cb430c$var$joiny = function joiny(arr, joiner) {
    var str = "";
    for(var i = 0; i < arr.length; i += 1){
        str += arr[i];
        if (i + 1 < arr.length) str += joiner;
    }
    return str;
};
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || $d3fab90891cb430c$var$toStr.apply(target) !== $d3fab90891cb430c$var$funcType) throw new TypeError($d3fab90891cb430c$var$ERROR_MESSAGE + target);
    var args = $d3fab90891cb430c$var$slicy(arguments, 1);
    var bound;
    var binder = function binder() {
        if (this instanceof bound) {
            var result = target.apply(this, $d3fab90891cb430c$var$concatty(args, arguments));
            if (Object(result) === result) return result;
            return this;
        }
        return target.apply(that, $d3fab90891cb430c$var$concatty(args, arguments));
    };
    var boundLength = $d3fab90891cb430c$var$max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs[i] = "$" + i;
    bound = Function("binder", "return function (" + $d3fab90891cb430c$var$joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

});


parcelRegister("hPe7c", function(module, exports) {
"use strict";
var $cfa2260f9ed6c19f$var$call = Function.prototype.call;
var $cfa2260f9ed6c19f$var$$hasOwn = Object.prototype.hasOwnProperty;

var $5ZDZ2 = parcelRequire("5ZDZ2");
/** @type {import('.')} */ module.exports = $5ZDZ2.call($cfa2260f9ed6c19f$var$call, $cfa2260f9ed6c19f$var$$hasOwn);

});


parcelRegister("8zBy8", function(module, exports) {
"use strict";

var $lNU3a = parcelRequire("lNU3a");

var $cpBL8 = parcelRequire("cpBL8");
var $63deb82d965d41fe$var$$indexOf = $cpBL8($lNU3a("String.prototype.indexOf"));
module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = $lNU3a(name, !!allowMissing);
    if (typeof intrinsic === "function" && $63deb82d965d41fe$var$$indexOf(name, ".prototype.") > -1) return $cpBL8(intrinsic);
    return intrinsic;
};

});
parcelRegister("cpBL8", function(module, exports) {
"use strict";

var $5ZDZ2 = parcelRequire("5ZDZ2");

var $lNU3a = parcelRequire("lNU3a");

var $8ec6o = parcelRequire("8ec6o");

var $6AhWG = parcelRequire("6AhWG");
var $90951c09a998ef32$var$$apply = $lNU3a("%Function.prototype.apply%");
var $90951c09a998ef32$var$$call = $lNU3a("%Function.prototype.call%");
var $90951c09a998ef32$var$$reflectApply = $lNU3a("%Reflect.apply%", true) || $5ZDZ2.call($90951c09a998ef32$var$$call, $90951c09a998ef32$var$$apply);

var $7RPIt = parcelRequire("7RPIt");
var $90951c09a998ef32$var$$max = $lNU3a("%Math.max%");
module.exports = function callBind(originalFunction) {
    if (typeof originalFunction !== "function") throw new $6AhWG("a function is required");
    var func = $90951c09a998ef32$var$$reflectApply($5ZDZ2, $90951c09a998ef32$var$$call, arguments);
    return $8ec6o(func, 1 + $90951c09a998ef32$var$$max(0, originalFunction.length - (arguments.length - 1)), true);
};
var $90951c09a998ef32$var$applyBind = function applyBind() {
    return $90951c09a998ef32$var$$reflectApply($5ZDZ2, $90951c09a998ef32$var$$apply, arguments);
};
if ($7RPIt) $7RPIt(module.exports, "apply", {
    value: $90951c09a998ef32$var$applyBind
});
else module.exports.apply = $90951c09a998ef32$var$applyBind;

});
parcelRegister("8ec6o", function(module, exports) {
"use strict";

var $lNU3a = parcelRequire("lNU3a");

var $6bn3w = parcelRequire("6bn3w");

var $5fd904c91c509400$var$hasDescriptors = (parcelRequire("dfEhc"))();

var $5uSqA = parcelRequire("5uSqA");

var $6AhWG = parcelRequire("6AhWG");
var $5fd904c91c509400$var$$floor = $lNU3a("%Math.floor%");
/** @type {import('.')} */ module.exports = function setFunctionLength(fn, length) {
    if (typeof fn !== "function") throw new $6AhWG("`fn` is not a function");
    if (typeof length !== "number" || length < 0 || length > 0xFFFFFFFF || $5fd904c91c509400$var$$floor(length) !== length) throw new $6AhWG("`length` must be a positive 32-bit integer");
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn && $5uSqA) {
        var desc = $5uSqA(fn, "length");
        if (desc && !desc.configurable) functionLengthIsConfigurable = false;
        if (desc && !desc.writable) functionLengthIsWritable = false;
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if ($5fd904c91c509400$var$hasDescriptors) $6bn3w(/** @type {Parameters<define>[0]} */ fn, "length", length, true, true);
        else $6bn3w(/** @type {Parameters<define>[0]} */ fn, "length", length);
    }
    return fn;
};

});
parcelRegister("6bn3w", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");
"use strict";

var $7RPIt = parcelRequire("7RPIt");

var $gjNp4 = parcelRequire("gjNp4");

var $6AhWG = parcelRequire("6AhWG");

var $5uSqA = parcelRequire("5uSqA");
/** @type {import('.')} */ module.exports = function defineDataProperty(obj, property, value) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") throw new $6AhWG("`obj` must be an object or a function`");
    if (typeof property !== "string" && (typeof property === "undefined" ? "undefined" : (0, $aDbZK._)(property)) !== "symbol") throw new $6AhWG("`property` must be a string or a symbol`");
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) throw new $6AhWG("`nonEnumerable`, if provided, must be a boolean or null");
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) throw new $6AhWG("`nonWritable`, if provided, must be a boolean or null");
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) throw new $6AhWG("`nonConfigurable`, if provided, must be a boolean or null");
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") throw new $6AhWG("`loose`, if provided, must be a boolean");
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    /* @type {false | TypedPropertyDescriptor<unknown>} */ var desc = !!$5uSqA && $5uSqA(obj, property);
    if ($7RPIt) $7RPIt(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value: value,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
    });
    else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) // must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
    obj[property] = value; // eslint-disable-line no-param-reassign
    else throw new $gjNp4("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
};

});
parcelRegister("7RPIt", function(module, exports) {
"use strict";

var $lNU3a = parcelRequire("lNU3a");
/** @type {import('.')} */ var $5ba5996c9a418668$var$$defineProperty = $lNU3a("%Object.defineProperty%", true) || false;
if ($5ba5996c9a418668$var$$defineProperty) try {
    $5ba5996c9a418668$var$$defineProperty({}, "a", {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $5ba5996c9a418668$var$$defineProperty = false;
}
module.exports = $5ba5996c9a418668$var$$defineProperty;

});

parcelRegister("5uSqA", function(module, exports) {
"use strict";

var $lNU3a = parcelRequire("lNU3a");
var $4009f95164a55a21$var$$gOPD = $lNU3a("%Object.getOwnPropertyDescriptor%", true);
if ($4009f95164a55a21$var$$gOPD) try {
    $4009f95164a55a21$var$$gOPD([], "length");
} catch (e) {
    // IE 8 has a broken gOPD
    $4009f95164a55a21$var$$gOPD = null;
}
module.exports = $4009f95164a55a21$var$$gOPD;

});


parcelRegister("dfEhc", function(module, exports) {
"use strict";

var $7RPIt = parcelRequire("7RPIt");
var $9a5beb27386f24cb$var$hasPropertyDescriptors = function hasPropertyDescriptors() {
    return !!$7RPIt;
};
$9a5beb27386f24cb$var$hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    // node v0.6 has a bug where array lengths can be Set but not Defined
    if (!$7RPIt) return null;
    try {
        return $7RPIt([], "length", {
            value: 1
        }).length !== 1;
    } catch (e) {
        // In Firefox 4-22, defining length on an array throws an exception.
        return true;
    }
};
module.exports = $9a5beb27386f24cb$var$hasPropertyDescriptors;

});




parcelRegister("2QD9I", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");
var $212ecf98ee499423$var$hasMap = typeof Map === "function" && Map.prototype;
var $212ecf98ee499423$var$mapSizeDescriptor = Object.getOwnPropertyDescriptor && $212ecf98ee499423$var$hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
var $212ecf98ee499423$var$mapSize = $212ecf98ee499423$var$hasMap && $212ecf98ee499423$var$mapSizeDescriptor && typeof $212ecf98ee499423$var$mapSizeDescriptor.get === "function" ? $212ecf98ee499423$var$mapSizeDescriptor.get : null;
var $212ecf98ee499423$var$mapForEach = $212ecf98ee499423$var$hasMap && Map.prototype.forEach;
var $212ecf98ee499423$var$hasSet = typeof Set === "function" && Set.prototype;
var $212ecf98ee499423$var$setSizeDescriptor = Object.getOwnPropertyDescriptor && $212ecf98ee499423$var$hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
var $212ecf98ee499423$var$setSize = $212ecf98ee499423$var$hasSet && $212ecf98ee499423$var$setSizeDescriptor && typeof $212ecf98ee499423$var$setSizeDescriptor.get === "function" ? $212ecf98ee499423$var$setSizeDescriptor.get : null;
var $212ecf98ee499423$var$setForEach = $212ecf98ee499423$var$hasSet && Set.prototype.forEach;
var $212ecf98ee499423$var$hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
var $212ecf98ee499423$var$weakMapHas = $212ecf98ee499423$var$hasWeakMap ? WeakMap.prototype.has : null;
var $212ecf98ee499423$var$hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
var $212ecf98ee499423$var$weakSetHas = $212ecf98ee499423$var$hasWeakSet ? WeakSet.prototype.has : null;
var $212ecf98ee499423$var$hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
var $212ecf98ee499423$var$weakRefDeref = $212ecf98ee499423$var$hasWeakRef ? WeakRef.prototype.deref : null;
var $212ecf98ee499423$var$booleanValueOf = Boolean.prototype.valueOf;
var $212ecf98ee499423$var$objectToString = Object.prototype.toString;
var $212ecf98ee499423$var$functionToString = Function.prototype.toString;
var $212ecf98ee499423$var$$match = String.prototype.match;
var $212ecf98ee499423$var$$slice = String.prototype.slice;
var $212ecf98ee499423$var$$replace = String.prototype.replace;
var $212ecf98ee499423$var$$toUpperCase = String.prototype.toUpperCase;
var $212ecf98ee499423$var$$toLowerCase = String.prototype.toLowerCase;
var $212ecf98ee499423$var$$test = RegExp.prototype.test;
var $212ecf98ee499423$var$$concat = Array.prototype.concat;
var $212ecf98ee499423$var$$join = Array.prototype.join;
var $212ecf98ee499423$var$$arrSlice = Array.prototype.slice;
var $212ecf98ee499423$var$$floor = Math.floor;
var $212ecf98ee499423$var$bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
var $212ecf98ee499423$var$gOPS = Object.getOwnPropertySymbols;
var $212ecf98ee499423$var$symToString = typeof Symbol === "function" && (0, $aDbZK._)(Symbol.iterator) === "symbol" ? Symbol.prototype.toString : null;
var $212ecf98ee499423$var$hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
// ie, `has-tostringtag/shams
var $212ecf98ee499423$var$toStringTag = typeof Symbol === "function" && Symbol.toStringTag && ((0, $aDbZK._)(Symbol.toStringTag) === $212ecf98ee499423$var$hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
var $212ecf98ee499423$var$isEnumerable = Object.prototype.propertyIsEnumerable;
var $212ecf98ee499423$var$gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype // eslint-disable-line no-proto
 ? function(O) {
    return O.__proto__; // eslint-disable-line no-proto
} : null);
function $212ecf98ee499423$var$addNumericSeparator(num, str) {
    if (num === Infinity || num === -Infinity || num !== num || num && num > -1000 && num < 1000 || $212ecf98ee499423$var$$test.call(/e/, str)) return str;
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
        var int = num < 0 ? -$212ecf98ee499423$var$$floor(-num) : $212ecf98ee499423$var$$floor(num); // trunc(num)
        if (int !== num) {
            var intStr = String(int);
            var dec = $212ecf98ee499423$var$$slice.call(str, intStr.length + 1);
            return $212ecf98ee499423$var$$replace.call(intStr, sepRegex, "$&_") + "." + $212ecf98ee499423$var$$replace.call($212ecf98ee499423$var$$replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
    }
    return $212ecf98ee499423$var$$replace.call(str, sepRegex, "$&_");
}

var $69mun = parcelRequire("69mun");
var $212ecf98ee499423$var$inspectCustom = $69mun.custom;
var $212ecf98ee499423$var$inspectSymbol = $212ecf98ee499423$var$isSymbol($212ecf98ee499423$var$inspectCustom) ? $212ecf98ee499423$var$inspectCustom : null;
module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if ($212ecf98ee499423$var$has(opts, "quoteStyle") && opts.quoteStyle !== "single" && opts.quoteStyle !== "double") throw new TypeError('option "quoteStyle" must be "single" or "double"');
    if ($212ecf98ee499423$var$has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    var customInspect = $212ecf98ee499423$var$has(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
    if ($212ecf98ee499423$var$has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    if ($212ecf98ee499423$var$has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") return "undefined";
    if (obj === null) return "null";
    if (typeof obj === "boolean") return obj ? "true" : "false";
    if (typeof obj === "string") return $212ecf98ee499423$var$inspectString(obj, opts);
    if (typeof obj === "number") {
        if (obj === 0) return Infinity / obj > 0 ? "0" : "-0";
        var str = String(obj);
        return numericSeparator ? $212ecf98ee499423$var$addNumericSeparator(obj, str) : str;
    }
    if ((typeof obj === "undefined" ? "undefined" : (0, $aDbZK._)(obj)) === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? $212ecf98ee499423$var$addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") depth = 0;
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") return $212ecf98ee499423$var$isArray(obj) ? "[Array]" : "[Object]";
    var indent = $212ecf98ee499423$var$getIndent(opts, depth);
    if (typeof seen === "undefined") seen = [];
    else if ($212ecf98ee499423$var$indexOf(seen, obj) >= 0) return "[Circular]";
    function inspect(value, from, noIndent) {
        if (from) {
            seen = $212ecf98ee499423$var$$arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if ($212ecf98ee499423$var$has(opts, "quoteStyle")) newOpts.quoteStyle = opts.quoteStyle;
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !$212ecf98ee499423$var$isRegExp(obj)) {
        var name = $212ecf98ee499423$var$nameOf(obj);
        var keys = $212ecf98ee499423$var$arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $212ecf98ee499423$var$$join.call(keys, ", ") + " }" : "");
    }
    if ($212ecf98ee499423$var$isSymbol(obj)) {
        var symString = $212ecf98ee499423$var$hasShammedSymbols ? $212ecf98ee499423$var$$replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : $212ecf98ee499423$var$symToString.call(obj);
        return typeof obj === "object" && !$212ecf98ee499423$var$hasShammedSymbols ? $212ecf98ee499423$var$markBoxed(symString) : symString;
    }
    if ($212ecf98ee499423$var$isElement(obj)) {
        var s = "<" + $212ecf98ee499423$var$$toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for(var i = 0; i < attrs.length; i++)s += " " + attrs[i].name + "=" + $212ecf98ee499423$var$wrapQuotes($212ecf98ee499423$var$quote(attrs[i].value), "double", opts);
        s += ">";
        if (obj.childNodes && obj.childNodes.length) s += "...";
        s += "</" + $212ecf98ee499423$var$$toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
    }
    if ($212ecf98ee499423$var$isArray(obj)) {
        if (obj.length === 0) return "[]";
        var xs = $212ecf98ee499423$var$arrObjKeys(obj, inspect);
        if (indent && !$212ecf98ee499423$var$singleLineValues(xs)) return "[" + $212ecf98ee499423$var$indentedJoin(xs, indent) + "]";
        return "[ " + $212ecf98ee499423$var$$join.call(xs, ", ") + " ]";
    }
    if ($212ecf98ee499423$var$isError(obj)) {
        var parts = $212ecf98ee499423$var$arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !$212ecf98ee499423$var$isEnumerable.call(obj, "cause")) return "{ [" + String(obj) + "] " + $212ecf98ee499423$var$$join.call($212ecf98ee499423$var$$concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        if (parts.length === 0) return "[" + String(obj) + "]";
        return "{ [" + String(obj) + "] " + $212ecf98ee499423$var$$join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
        if ($212ecf98ee499423$var$inspectSymbol && typeof obj[$212ecf98ee499423$var$inspectSymbol] === "function" && $69mun) return $69mun(obj, {
            depth: maxDepth - depth
        });
        else if (customInspect !== "symbol" && typeof obj.inspect === "function") return obj.inspect();
    }
    if ($212ecf98ee499423$var$isMap(obj)) {
        var mapParts = [];
        if ($212ecf98ee499423$var$mapForEach) $212ecf98ee499423$var$mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
        });
        return $212ecf98ee499423$var$collectionOf("Map", $212ecf98ee499423$var$mapSize.call(obj), mapParts, indent);
    }
    if ($212ecf98ee499423$var$isSet(obj)) {
        var setParts = [];
        if ($212ecf98ee499423$var$setForEach) $212ecf98ee499423$var$setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
        });
        return $212ecf98ee499423$var$collectionOf("Set", $212ecf98ee499423$var$setSize.call(obj), setParts, indent);
    }
    if ($212ecf98ee499423$var$isWeakMap(obj)) return $212ecf98ee499423$var$weakCollectionOf("WeakMap");
    if ($212ecf98ee499423$var$isWeakSet(obj)) return $212ecf98ee499423$var$weakCollectionOf("WeakSet");
    if ($212ecf98ee499423$var$isWeakRef(obj)) return $212ecf98ee499423$var$weakCollectionOf("WeakRef");
    if ($212ecf98ee499423$var$isNumber(obj)) return $212ecf98ee499423$var$markBoxed(inspect(Number(obj)));
    if ($212ecf98ee499423$var$isBigInt(obj)) return $212ecf98ee499423$var$markBoxed(inspect($212ecf98ee499423$var$bigIntValueOf.call(obj)));
    if ($212ecf98ee499423$var$isBoolean(obj)) return $212ecf98ee499423$var$markBoxed($212ecf98ee499423$var$booleanValueOf.call(obj));
    if ($212ecf98ee499423$var$isString(obj)) return $212ecf98ee499423$var$markBoxed(inspect(String(obj)));
    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
    /* eslint-env browser */ if (typeof window !== "undefined" && obj === window) return "{ [object Window] }";
    if (typeof globalThis !== "undefined" && obj === globalThis || typeof $parcel$global !== "undefined" && obj === $parcel$global) return "{ [object globalThis] }";
    if (!$212ecf98ee499423$var$isDate(obj) && !$212ecf98ee499423$var$isRegExp(obj)) {
        var ys = $212ecf98ee499423$var$arrObjKeys(obj, inspect);
        var isPlainObject = $212ecf98ee499423$var$gPO ? $212ecf98ee499423$var$gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && $212ecf98ee499423$var$toStringTag && Object(obj) === obj && $212ecf98ee499423$var$toStringTag in obj ? $212ecf98ee499423$var$$slice.call($212ecf98ee499423$var$toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $212ecf98ee499423$var$$join.call($212ecf98ee499423$var$$concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) return tag + "{}";
        if (indent) return tag + "{" + $212ecf98ee499423$var$indentedJoin(ys, indent) + "}";
        return tag + "{ " + $212ecf98ee499423$var$$join.call(ys, ", ") + " }";
    }
    return String(obj);
};
function $212ecf98ee499423$var$wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s + quoteChar;
}
function $212ecf98ee499423$var$quote(s) {
    return $212ecf98ee499423$var$$replace.call(String(s), /"/g, "&quot;");
}
function $212ecf98ee499423$var$isArray(obj) {
    return $212ecf98ee499423$var$toStr(obj) === "[object Array]" && (!$212ecf98ee499423$var$toStringTag || !(typeof obj === "object" && $212ecf98ee499423$var$toStringTag in obj));
}
function $212ecf98ee499423$var$isDate(obj) {
    return $212ecf98ee499423$var$toStr(obj) === "[object Date]" && (!$212ecf98ee499423$var$toStringTag || !(typeof obj === "object" && $212ecf98ee499423$var$toStringTag in obj));
}
function $212ecf98ee499423$var$isRegExp(obj) {
    return $212ecf98ee499423$var$toStr(obj) === "[object RegExp]" && (!$212ecf98ee499423$var$toStringTag || !(typeof obj === "object" && $212ecf98ee499423$var$toStringTag in obj));
}
function $212ecf98ee499423$var$isError(obj) {
    return $212ecf98ee499423$var$toStr(obj) === "[object Error]" && (!$212ecf98ee499423$var$toStringTag || !(typeof obj === "object" && $212ecf98ee499423$var$toStringTag in obj));
}
function $212ecf98ee499423$var$isString(obj) {
    return $212ecf98ee499423$var$toStr(obj) === "[object String]" && (!$212ecf98ee499423$var$toStringTag || !(typeof obj === "object" && $212ecf98ee499423$var$toStringTag in obj));
}
function $212ecf98ee499423$var$isNumber(obj) {
    return $212ecf98ee499423$var$toStr(obj) === "[object Number]" && (!$212ecf98ee499423$var$toStringTag || !(typeof obj === "object" && $212ecf98ee499423$var$toStringTag in obj));
}
function $212ecf98ee499423$var$isBoolean(obj) {
    return $212ecf98ee499423$var$toStr(obj) === "[object Boolean]" && (!$212ecf98ee499423$var$toStringTag || !(typeof obj === "object" && $212ecf98ee499423$var$toStringTag in obj));
}
// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function $212ecf98ee499423$var$isSymbol(obj) {
    if ($212ecf98ee499423$var$hasShammedSymbols) return obj && typeof obj === "object" && obj instanceof Symbol;
    if ((typeof obj === "undefined" ? "undefined" : (0, $aDbZK._)(obj)) === "symbol") return true;
    if (!obj || typeof obj !== "object" || !$212ecf98ee499423$var$symToString) return false;
    try {
        $212ecf98ee499423$var$symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}
function $212ecf98ee499423$var$isBigInt(obj) {
    if (!obj || typeof obj !== "object" || !$212ecf98ee499423$var$bigIntValueOf) return false;
    try {
        $212ecf98ee499423$var$bigIntValueOf.call(obj);
        return true;
    } catch (e) {}
    return false;
}
var $212ecf98ee499423$var$hasOwn = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
};
function $212ecf98ee499423$var$has(obj, key) {
    return $212ecf98ee499423$var$hasOwn.call(obj, key);
}
function $212ecf98ee499423$var$toStr(obj) {
    return $212ecf98ee499423$var$objectToString.call(obj);
}
function $212ecf98ee499423$var$nameOf(f) {
    if (f.name) return f.name;
    var m = $212ecf98ee499423$var$$match.call($212ecf98ee499423$var$functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) return m[1];
    return null;
}
function $212ecf98ee499423$var$indexOf(xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}
function $212ecf98ee499423$var$isMap(x) {
    if (!$212ecf98ee499423$var$mapSize || !x || typeof x !== "object") return false;
    try {
        $212ecf98ee499423$var$mapSize.call(x);
        try {
            $212ecf98ee499423$var$setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function $212ecf98ee499423$var$isWeakMap(x) {
    if (!$212ecf98ee499423$var$weakMapHas || !x || typeof x !== "object") return false;
    try {
        $212ecf98ee499423$var$weakMapHas.call(x, $212ecf98ee499423$var$weakMapHas);
        try {
            $212ecf98ee499423$var$weakSetHas.call(x, $212ecf98ee499423$var$weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function $212ecf98ee499423$var$isWeakRef(x) {
    if (!$212ecf98ee499423$var$weakRefDeref || !x || typeof x !== "object") return false;
    try {
        $212ecf98ee499423$var$weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}
function $212ecf98ee499423$var$isSet(x) {
    if (!$212ecf98ee499423$var$setSize || !x || typeof x !== "object") return false;
    try {
        $212ecf98ee499423$var$setSize.call(x);
        try {
            $212ecf98ee499423$var$mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function $212ecf98ee499423$var$isWeakSet(x) {
    if (!$212ecf98ee499423$var$weakSetHas || !x || typeof x !== "object") return false;
    try {
        $212ecf98ee499423$var$weakSetHas.call(x, $212ecf98ee499423$var$weakSetHas);
        try {
            $212ecf98ee499423$var$weakMapHas.call(x, $212ecf98ee499423$var$weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function $212ecf98ee499423$var$isElement(x) {
    if (!x || typeof x !== "object") return false;
    if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) return true;
    return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
}
function $212ecf98ee499423$var$inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return $212ecf98ee499423$var$inspectString($212ecf98ee499423$var$$slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    // eslint-disable-next-line no-control-regex
    var s = $212ecf98ee499423$var$$replace.call($212ecf98ee499423$var$$replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, $212ecf98ee499423$var$lowbyte);
    return $212ecf98ee499423$var$wrapQuotes(s, "single", opts);
}
function $212ecf98ee499423$var$lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
    }[n];
    if (x) return "\\" + x;
    return "\\x" + (n < 0x10 ? "0" : "") + $212ecf98ee499423$var$$toUpperCase.call(n.toString(16));
}
function $212ecf98ee499423$var$markBoxed(str) {
    return "Object(" + str + ")";
}
function $212ecf98ee499423$var$weakCollectionOf(type) {
    return type + " { ? }";
}
function $212ecf98ee499423$var$collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? $212ecf98ee499423$var$indentedJoin(entries, indent) : $212ecf98ee499423$var$$join.call(entries, ", ");
    return type + " (" + size + ") {" + joinedEntries + "}";
}
function $212ecf98ee499423$var$singleLineValues(xs) {
    for(var i = 0; i < xs.length; i++){
        if ($212ecf98ee499423$var$indexOf(xs[i], "\n") >= 0) return false;
    }
    return true;
}
function $212ecf98ee499423$var$getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === "	") baseIndent = "	";
    else if (typeof opts.indent === "number" && opts.indent > 0) baseIndent = $212ecf98ee499423$var$$join.call(Array(opts.indent + 1), " ");
    else return null;
    return {
        base: baseIndent,
        prev: $212ecf98ee499423$var$$join.call(Array(depth + 1), baseIndent)
    };
}
function $212ecf98ee499423$var$indentedJoin(xs, indent) {
    if (xs.length === 0) return "";
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $212ecf98ee499423$var$$join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
}
function $212ecf98ee499423$var$arrObjKeys(obj, inspect) {
    var isArr = $212ecf98ee499423$var$isArray(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for(var i = 0; i < obj.length; i++)xs[i] = $212ecf98ee499423$var$has(obj, i) ? inspect(obj[i], obj) : "";
    }
    var syms = typeof $212ecf98ee499423$var$gOPS === "function" ? $212ecf98ee499423$var$gOPS(obj) : [];
    var symMap;
    if ($212ecf98ee499423$var$hasShammedSymbols) {
        symMap = {};
        for(var k = 0; k < syms.length; k++)symMap["$" + syms[k]] = syms[k];
    }
    for(var key in obj){
        if (!$212ecf98ee499423$var$has(obj, key)) continue;
         // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) continue;
         // eslint-disable-line no-restricted-syntax, no-continue
        if ($212ecf98ee499423$var$hasShammedSymbols && symMap["$" + key] instanceof Symbol) continue; // eslint-disable-line no-restricted-syntax, no-continue
        else if ($212ecf98ee499423$var$$test.call(/[^\w$]/, key)) xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        else xs.push(key + ": " + inspect(obj[key], obj));
    }
    if (typeof $212ecf98ee499423$var$gOPS === "function") {
        for(var j = 0; j < syms.length; j++)if ($212ecf98ee499423$var$isEnumerable.call(obj, syms[j])) xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
    }
    return xs;
}

});


parcelRegister("242A0", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");
"use strict";

var $79HT1 = parcelRequire("79HT1");
var $180df4c88893cf79$var$has = Object.prototype.hasOwnProperty;
var $180df4c88893cf79$var$isArray = Array.isArray;
var $180df4c88893cf79$var$hexTable = function() {
    var array = [];
    for(var i = 0; i < 256; ++i)array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
    return array;
}();
var $180df4c88893cf79$var$compactQueue = function compactQueue(queue) {
    while(queue.length > 1){
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if ($180df4c88893cf79$var$isArray(obj)) {
            var compacted = [];
            for(var j = 0; j < obj.length; ++j)if (typeof obj[j] !== "undefined") compacted.push(obj[j]);
            item.obj[item.prop] = compacted;
        }
    }
};
var $180df4c88893cf79$var$arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for(var i = 0; i < source.length; ++i)if (typeof source[i] !== "undefined") obj[i] = source[i];
    return obj;
};
var $180df4c88893cf79$var$merge = function merge(target, source, options) {
    /* eslint no-param-reassign: 0 */ if (!source) return target;
    if (typeof source !== "object") {
        if ($180df4c88893cf79$var$isArray(target)) target.push(source);
        else if (target && typeof target === "object") {
            if (options && (options.plainObjects || options.allowPrototypes) || !$180df4c88893cf79$var$has.call(Object.prototype, source)) target[source] = true;
        } else return [
            target,
            source
        ];
        return target;
    }
    if (!target || typeof target !== "object") return [
        target
    ].concat(source);
    var mergeTarget = target;
    if ($180df4c88893cf79$var$isArray(target) && !$180df4c88893cf79$var$isArray(source)) mergeTarget = $180df4c88893cf79$var$arrayToObject(target, options);
    if ($180df4c88893cf79$var$isArray(target) && $180df4c88893cf79$var$isArray(source)) {
        source.forEach(function(item, i) {
            if ($180df4c88893cf79$var$has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === "object" && item && typeof item === "object") target[i] = merge(targetItem, item, options);
                else target.push(item);
            } else target[i] = item;
        });
        return target;
    }
    return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if ($180df4c88893cf79$var$has.call(acc, key)) acc[key] = merge(acc[key], value, options);
        else acc[key] = value;
        return acc;
    }, mergeTarget);
};
var $180df4c88893cf79$var$assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};
var $180df4c88893cf79$var$decode = function decode(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") // unescape never throws, no try...catch needed:
    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    } catch (e) {
        return strWithoutPlus;
    }
};
var $180df4c88893cf79$var$limit = 1024;
/* eslint operator-linebreak: [2, "before"] */ var $180df4c88893cf79$var$encode = function encode(str, defaultEncoder, charset, kind, format) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) return str;
    var string = str;
    if ((typeof str === "undefined" ? "undefined" : (0, $aDbZK._)(str)) === "symbol") string = Symbol.prototype.toString.call(str);
    else if (typeof str !== "string") string = String(str);
    if (charset === "iso-8859-1") return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
    });
    var out = "";
    for(var j = 0; j < string.length; j += $180df4c88893cf79$var$limit){
        var segment = string.length >= $180df4c88893cf79$var$limit ? string.slice(j, j + $180df4c88893cf79$var$limit) : string;
        var arr = [];
        for(var i = 0; i < segment.length; ++i){
            var c = segment.charCodeAt(i);
            if (c === 0x2D // -
             || c === 0x2E // .
             || c === 0x5F // _
             || c === 0x7E // ~
             || c >= 0x30 && c <= 0x39 // 0-9
             || c >= 0x41 && c <= 0x5A // a-z
             || c >= 0x61 && c <= 0x7A // A-Z
             || format === $79HT1.RFC1738 && (c === 0x28 || c === 0x29) // ( )
            ) {
                arr[arr.length] = segment.charAt(i);
                continue;
            }
            if (c < 0x80) {
                arr[arr.length] = $180df4c88893cf79$var$hexTable[c];
                continue;
            }
            if (c < 0x800) {
                arr[arr.length] = $180df4c88893cf79$var$hexTable[0xC0 | c >> 6] + $180df4c88893cf79$var$hexTable[0x80 | c & 0x3F];
                continue;
            }
            if (c < 0xD800 || c >= 0xE000) {
                arr[arr.length] = $180df4c88893cf79$var$hexTable[0xE0 | c >> 12] + $180df4c88893cf79$var$hexTable[0x80 | c >> 6 & 0x3F] + $180df4c88893cf79$var$hexTable[0x80 | c & 0x3F];
                continue;
            }
            i += 1;
            c = 0x10000 + ((c & 0x3FF) << 10 | segment.charCodeAt(i) & 0x3FF);
            arr[arr.length] = $180df4c88893cf79$var$hexTable[0xF0 | c >> 18] + $180df4c88893cf79$var$hexTable[0x80 | c >> 12 & 0x3F] + $180df4c88893cf79$var$hexTable[0x80 | c >> 6 & 0x3F] + $180df4c88893cf79$var$hexTable[0x80 | c & 0x3F];
        }
        out += arr.join("");
    }
    return out;
};
var $180df4c88893cf79$var$compact = function compact(value) {
    var queue = [
        {
            obj: {
                o: value
            },
            prop: "o"
        }
    ];
    var refs = [];
    for(var i = 0; i < queue.length; ++i){
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for(var j = 0; j < keys.length; ++j){
            var key = keys[j];
            var val = obj[key];
            if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
                queue.push({
                    obj: obj,
                    prop: key
                });
                refs.push(val);
            }
        }
    }
    $180df4c88893cf79$var$compactQueue(queue);
    return value;
};
var $180df4c88893cf79$var$isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
};
var $180df4c88893cf79$var$isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== "object") return false;
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};
var $180df4c88893cf79$var$combine = function combine(a, b) {
    return [].concat(a, b);
};
var $180df4c88893cf79$var$maybeMap = function maybeMap(val, fn) {
    if ($180df4c88893cf79$var$isArray(val)) {
        var mapped = [];
        for(var i = 0; i < val.length; i += 1)mapped.push(fn(val[i]));
        return mapped;
    }
    return fn(val);
};
module.exports = {
    arrayToObject: $180df4c88893cf79$var$arrayToObject,
    assign: $180df4c88893cf79$var$assign,
    combine: $180df4c88893cf79$var$combine,
    compact: $180df4c88893cf79$var$compact,
    decode: $180df4c88893cf79$var$decode,
    encode: $180df4c88893cf79$var$encode,
    isBuffer: $180df4c88893cf79$var$isBuffer,
    isRegExp: $180df4c88893cf79$var$isRegExp,
    maybeMap: $180df4c88893cf79$var$maybeMap,
    merge: $180df4c88893cf79$var$merge
};

});
parcelRegister("79HT1", function(module, exports) {
"use strict";
var $535b6aa021df22d5$var$replace = String.prototype.replace;
var $535b6aa021df22d5$var$percentTwenties = /%20/g;
var $535b6aa021df22d5$var$Format = {
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
};
module.exports = {
    "default": $535b6aa021df22d5$var$Format.RFC3986,
    formatters: {
        RFC1738: function RFC1738(value) {
            return $535b6aa021df22d5$var$replace.call(value, $535b6aa021df22d5$var$percentTwenties, "+");
        },
        RFC3986: function RFC3986(value) {
            return String(value);
        }
    },
    RFC1738: $535b6aa021df22d5$var$Format.RFC1738,
    RFC3986: $535b6aa021df22d5$var$Format.RFC3986
};

});



parcelRegister("6t5Sn", function(module, exports) {
"use strict";

var $242A0 = parcelRequire("242A0");
var $4b5a025d1ed7451c$var$has = Object.prototype.hasOwnProperty;
var $4b5a025d1ed7451c$var$isArray = Array.isArray;
var $4b5a025d1ed7451c$var$defaults = {
    allowDots: false,
    allowEmptyArrays: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decodeDotInKeys: false,
    decoder: $242A0.decode,
    delimiter: "&",
    depth: 5,
    duplicates: "combine",
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictDepth: false,
    strictNullHandling: false
};
var $4b5a025d1ed7451c$var$interpretNumericEntities = function interpretNumericEntities(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};
var $4b5a025d1ed7451c$var$parseArrayValue = function parseArrayValue(val, options) {
    if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) return val.split(",");
    return val;
};
// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var $4b5a025d1ed7451c$var$isoSentinel = "utf8=%26%2310003%3B"; // encodeURIComponent('&#10003;')
// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var $4b5a025d1ed7451c$var$charsetSentinel = "utf8=%E2%9C%93"; // encodeURIComponent('✓')
var $4b5a025d1ed7451c$var$parseValues = function parseQueryStringValues(str, options) {
    var obj = {
        __proto__: null
    };
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    cleanStr = cleanStr.replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;
    var charset = options.charset;
    if (options.charsetSentinel) {
        for(i = 0; i < parts.length; ++i)if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === $4b5a025d1ed7451c$var$charsetSentinel) charset = "utf-8";
            else if (parts[i] === $4b5a025d1ed7451c$var$isoSentinel) charset = "iso-8859-1";
            skipIndex = i;
            i = parts.length; // The eslint settings do not allow break;
        }
    }
    for(i = 0; i < parts.length; ++i){
        if (i === skipIndex) continue;
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
            key = options.decoder(part, $4b5a025d1ed7451c$var$defaults.decoder, charset, "key");
            val = options.strictNullHandling ? null : "";
        } else {
            key = options.decoder(part.slice(0, pos), $4b5a025d1ed7451c$var$defaults.decoder, charset, "key");
            val = $242A0.maybeMap($4b5a025d1ed7451c$var$parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {
                return options.decoder(encodedVal, $4b5a025d1ed7451c$var$defaults.decoder, charset, "value");
            });
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") val = $4b5a025d1ed7451c$var$interpretNumericEntities(val);
        if (part.indexOf("[]=") > -1) val = $4b5a025d1ed7451c$var$isArray(val) ? [
            val
        ] : val;
        var existing = $4b5a025d1ed7451c$var$has.call(obj, key);
        if (existing && options.duplicates === "combine") obj[key] = $242A0.combine(obj[key], val);
        else if (!existing || options.duplicates === "last") obj[key] = val;
    }
    return obj;
};
var $4b5a025d1ed7451c$var$parseObject = function parseObject(chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : $4b5a025d1ed7451c$var$parseArrayValue(val, options);
    for(var i = chain.length - 1; i >= 0; --i){
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) obj = options.allowEmptyArrays && (leaf === "" || options.strictNullHandling && leaf === null) ? [] : [].concat(leaf);
        else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
            var index = parseInt(decodedRoot, 10);
            if (!options.parseArrays && decodedRoot === "") obj = {
                0: leaf
            };
            else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
                obj = [];
                obj[index] = leaf;
            } else if (decodedRoot !== "__proto__") obj[decodedRoot] = leaf;
        }
        leaf = obj;
    }
    return leaf;
};
var $4b5a025d1ed7451c$var$parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) return;
    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    // The regex chunks
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    // Get the parent
    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    // Stash the parent if it exists
    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && $4b5a025d1ed7451c$var$has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) return;
        }
        keys.push(parent);
    }
    // Loop through children appending to the array until we hit depth
    var i = 0;
    while(options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth){
        i += 1;
        if (!options.plainObjects && $4b5a025d1ed7451c$var$has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) return;
        }
        keys.push(segment[1]);
    }
    // If there's a remainder, check strictDepth option for throw, else just add whatever is left
    if (segment) {
        if (options.strictDepth === true) throw new RangeError("Input depth exceeded depth option of " + options.depth + " and strictDepth is true");
        keys.push("[" + key.slice(segment.index) + "]");
    }
    return $4b5a025d1ed7451c$var$parseObject(keys, val, options, valuesParsed);
};
var $4b5a025d1ed7451c$var$normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) return $4b5a025d1ed7451c$var$defaults;
    if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
    if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
    if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") throw new TypeError("Decoder has to be a function.");
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    var charset = typeof opts.charset === "undefined" ? $4b5a025d1ed7451c$var$defaults.charset : opts.charset;
    var duplicates = typeof opts.duplicates === "undefined" ? $4b5a025d1ed7451c$var$defaults.duplicates : opts.duplicates;
    if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") throw new TypeError("The duplicates option must be either combine, first, or last");
    var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : $4b5a025d1ed7451c$var$defaults.allowDots : !!opts.allowDots;
    return {
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : $4b5a025d1ed7451c$var$defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : $4b5a025d1ed7451c$var$defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : $4b5a025d1ed7451c$var$defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : $4b5a025d1ed7451c$var$defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : $4b5a025d1ed7451c$var$defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : $4b5a025d1ed7451c$var$defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : $4b5a025d1ed7451c$var$defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === "function" ? opts.decoder : $4b5a025d1ed7451c$var$defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || $242A0.isRegExp(opts.delimiter) ? opts.delimiter : $4b5a025d1ed7451c$var$defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : $4b5a025d1ed7451c$var$defaults.depth,
        duplicates: duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : $4b5a025d1ed7451c$var$defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : $4b5a025d1ed7451c$var$defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : $4b5a025d1ed7451c$var$defaults.plainObjects,
        strictDepth: typeof opts.strictDepth === "boolean" ? !!opts.strictDepth : $4b5a025d1ed7451c$var$defaults.strictDepth,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : $4b5a025d1ed7451c$var$defaults.strictNullHandling
    };
};
module.exports = function(str, opts) {
    var options = $4b5a025d1ed7451c$var$normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") return options.plainObjects ? Object.create(null) : {};
    var tempObj = typeof str === "string" ? $4b5a025d1ed7451c$var$parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    // Iterate over the keys and setup the new object
    var keys = Object.keys(tempObj);
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        var newObj = $4b5a025d1ed7451c$var$parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = $242A0.merge(obj, newObj, options);
    }
    if (options.allowSparse === true) return obj;
    return $242A0.compact(obj);
};

});




parcelRegister("2IAAM", function(module, exports) {

var $eduiQ = parcelRequire("eduiQ");

var $9Gorm = parcelRequire("9Gorm");
var $1fac134b11255349$var$https = module.exports;
for(var $1fac134b11255349$var$key in $eduiQ)if ($eduiQ.hasOwnProperty($1fac134b11255349$var$key)) $1fac134b11255349$var$https[$1fac134b11255349$var$key] = $eduiQ[$1fac134b11255349$var$key];
$1fac134b11255349$var$https.request = function(params, cb) {
    params = $1fac134b11255349$var$validateParams(params);
    return $eduiQ.request.call(this, params, cb);
};
$1fac134b11255349$var$https.get = function(params, cb) {
    params = $1fac134b11255349$var$validateParams(params);
    return $eduiQ.get.call(this, params, cb);
};
function $1fac134b11255349$var$validateParams(params) {
    if (typeof params === "string") params = $9Gorm.parse(params);
    if (!params.protocol) params.protocol = "https:";
    if (params.protocol !== "https:") throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
    return params;
}

});

parcelRegister("fAUxG", function(module, exports) {




// Generated by CoffeeScript 1.12.7
(function() {
    "use strict";
    var builder, defaults, parser, processors, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    defaults = (parcelRequire("c4Cco"));
    builder = (parcelRequire("8ASI4"));
    parser = (parcelRequire("7W0gJ"));
    processors = (parcelRequire("l1QkF"));
    module.exports.defaults = defaults.defaults;
    module.exports.processors = processors;
    module.exports.ValidationError = function(superClass) {
        extend(ValidationError, superClass);
        function ValidationError(message) {
            this.message = message;
        }
        return ValidationError;
    }(Error);
    module.exports.Builder = builder.Builder;
    module.exports.Parser = parser.Parser;
    module.exports.parseString = parser.parseString;
    module.exports.parseStringPromise = parser.parseStringPromise;
}).call(module.exports);

});
parcelRegister("c4Cco", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    module.exports.defaults = {
        "0.1": {
            explicitCharkey: false,
            trim: true,
            normalize: true,
            normalizeTags: false,
            attrkey: "@",
            charkey: "#",
            explicitArray: false,
            ignoreAttrs: false,
            mergeAttrs: false,
            explicitRoot: false,
            validator: null,
            xmlns: false,
            explicitChildren: false,
            childkey: "@@",
            charsAsChildren: false,
            includeWhiteChars: false,
            async: false,
            strict: true,
            attrNameProcessors: null,
            attrValueProcessors: null,
            tagNameProcessors: null,
            valueProcessors: null,
            emptyTag: ""
        },
        "0.2": {
            explicitCharkey: false,
            trim: false,
            normalize: false,
            normalizeTags: false,
            attrkey: "$",
            charkey: "_",
            explicitArray: true,
            ignoreAttrs: false,
            mergeAttrs: false,
            explicitRoot: true,
            validator: null,
            xmlns: false,
            explicitChildren: false,
            preserveChildrenOrder: false,
            childkey: "$$",
            charsAsChildren: false,
            includeWhiteChars: false,
            async: false,
            strict: true,
            attrNameProcessors: null,
            attrValueProcessors: null,
            tagNameProcessors: null,
            valueProcessors: null,
            rootName: "root",
            xmldec: {
                "version": "1.0",
                "encoding": "UTF-8",
                "standalone": true
            },
            doctype: null,
            renderOpts: {
                "pretty": true,
                "indent": "  ",
                "newline": "\n"
            },
            headless: false,
            chunkSize: 10000,
            emptyTag: "",
            cdata: false
        }
    };
}).call(module.exports);

});

parcelRegister("8ASI4", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    "use strict";
    var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA, hasProp = {}.hasOwnProperty;
    builder = (parcelRequire("fNPHK"));
    defaults = (parcelRequire("c4Cco")).defaults;
    requiresCDATA = function requiresCDATA(entry) {
        return typeof entry === "string" && (entry.indexOf("&") >= 0 || entry.indexOf(">") >= 0 || entry.indexOf("<") >= 0);
    };
    wrapCDATA = function wrapCDATA(entry) {
        return "<![CDATA[" + escapeCDATA(entry) + "]]>";
    };
    escapeCDATA = function escapeCDATA(entry) {
        return entry.replace("]]>", "]]]]><![CDATA[>");
    };
    module.exports.Builder = function() {
        function Builder(opts) {
            var key, ref, value;
            this.options = {};
            ref = defaults["0.2"];
            for(key in ref){
                if (!hasProp.call(ref, key)) continue;
                value = ref[key];
                this.options[key] = value;
            }
            for(key in opts){
                if (!hasProp.call(opts, key)) continue;
                value = opts[key];
                this.options[key] = value;
            }
        }
        Builder.prototype.buildObject = function(rootObj) {
            var attrkey, charkey, render, rootElement, rootName;
            attrkey = this.options.attrkey;
            charkey = this.options.charkey;
            if (Object.keys(rootObj).length === 1 && this.options.rootName === defaults["0.2"].rootName) {
                rootName = Object.keys(rootObj)[0];
                rootObj = rootObj[rootName];
            } else rootName = this.options.rootName;
            render = function(_this) {
                return function(element, obj) {
                    var attr, child, entry, index, key, value;
                    if (typeof obj !== "object") {
                        if (_this.options.cdata && requiresCDATA(obj)) element.raw(wrapCDATA(obj));
                        else element.txt(obj);
                    } else if (Array.isArray(obj)) for(index in obj){
                        if (!hasProp.call(obj, index)) continue;
                        child = obj[index];
                        for(key in child){
                            entry = child[key];
                            element = render(element.ele(key), entry).up();
                        }
                    }
                    else for(key in obj){
                        if (!hasProp.call(obj, key)) continue;
                        child = obj[key];
                        if (key === attrkey) {
                            if (typeof child === "object") for(attr in child){
                                value = child[attr];
                                element = element.att(attr, value);
                            }
                        } else if (key === charkey) {
                            if (_this.options.cdata && requiresCDATA(child)) element = element.raw(wrapCDATA(child));
                            else element = element.txt(child);
                        } else if (Array.isArray(child)) for(index in child){
                            if (!hasProp.call(child, index)) continue;
                            entry = child[index];
                            if (typeof entry === "string") {
                                if (_this.options.cdata && requiresCDATA(entry)) element = element.ele(key).raw(wrapCDATA(entry)).up();
                                else element = element.ele(key, entry).up();
                            } else element = render(element.ele(key), entry).up();
                        }
                        else if (typeof child === "object") element = render(element.ele(key), child).up();
                        else if (typeof child === "string" && _this.options.cdata && requiresCDATA(child)) element = element.ele(key).raw(wrapCDATA(child)).up();
                        else {
                            if (child == null) child = "";
                            element = element.ele(key, child.toString()).up();
                        }
                    }
                    return element;
                };
            }(this);
            rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
                headless: this.options.headless,
                allowSurrogateChars: this.options.allowSurrogateChars
            });
            return render(rootElement, rootObj).end(this.options.renderOpts);
        };
        return Builder;
    }();
}).call(module.exports);

});
parcelRegister("fNPHK", function(module, exports) {








// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;
    ref = (parcelRequire("a042u")), assign = ref.assign, isFunction = ref.isFunction;
    XMLDOMImplementation = (parcelRequire("iRduA"));
    XMLDocument = (parcelRequire("gzvfu"));
    XMLDocumentCB = (parcelRequire("lAumF"));
    XMLStringWriter = (parcelRequire("ezQDC"));
    XMLStreamWriter = (parcelRequire("6e89D"));
    NodeType = (parcelRequire("22Xcd"));
    WriterState = (parcelRequire("e1TXk"));
    module.exports.create = function(name, xmldec, doctype, options) {
        var doc, root;
        if (name == null) throw new Error("Root element needs a name.");
        options = assign({}, xmldec, doctype, options);
        doc = new XMLDocument(options);
        root = doc.element(name);
        if (!options.headless) {
            doc.declaration(options);
            if (options.pubID != null || options.sysID != null) doc.dtd(options);
        }
        return root;
    };
    module.exports.begin = function(options, onData, onEnd) {
        var ref1;
        if (isFunction(options)) {
            ref1 = [
                options,
                onData
            ], onData = ref1[0], onEnd = ref1[1];
            options = {};
        }
        if (onData) return new XMLDocumentCB(options, onData, onEnd);
        else return new XMLDocument(options);
    };
    module.exports.stringWriter = function(options) {
        return new XMLStringWriter(options);
    };
    module.exports.streamWriter = function(stream, options) {
        return new XMLStreamWriter(stream, options);
    };
    module.exports.implementation = new XMLDOMImplementation();
    module.exports.nodeType = NodeType;
    module.exports.writerState = WriterState;
}).call(module.exports);

});
parcelRegister("a042u", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");
// Generated by CoffeeScript 1.12.7
(function() {
    var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject, slice = [].slice, hasProp = {}.hasOwnProperty;
    assign = function assign() {
        var i, key, len, source, sources, target;
        target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (isFunction(Object.assign)) Object.assign.apply(null, arguments);
        else for(i = 0, len = sources.length; i < len; i++){
            source = sources[i];
            if (source != null) for(key in source){
                if (!hasProp.call(source, key)) continue;
                target[key] = source[key];
            }
        }
        return target;
    };
    isFunction = function isFunction(val) {
        return !!val && Object.prototype.toString.call(val) === "[object Function]";
    };
    isObject = function isObject(val) {
        var ref;
        return !!val && ((ref = typeof val === "undefined" ? "undefined" : (0, $aDbZK._)(val)) === "function" || ref === "object");
    };
    isArray = function isArray(val) {
        if (isFunction(Array.isArray)) return Array.isArray(val);
        else return Object.prototype.toString.call(val) === "[object Array]";
    };
    isEmpty = function isEmpty(val) {
        var key;
        if (isArray(val)) return !val.length;
        else {
            for(key in val){
                if (!hasProp.call(val, key)) continue;
                return false;
            }
            return true;
        }
    };
    isPlainObject = function isPlainObject(val) {
        var ctor, proto;
        return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === "function" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
    };
    getValue = function getValue(obj) {
        if (isFunction(obj.valueOf)) return obj.valueOf();
        else return obj;
    };
    module.exports.assign = assign;
    module.exports.isFunction = isFunction;
    module.exports.isObject = isObject;
    module.exports.isArray = isArray;
    module.exports.isEmpty = isEmpty;
    module.exports.isPlainObject = isPlainObject;
    module.exports.getValue = getValue;
}).call(undefined);

});

parcelRegister("iRduA", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    var XMLDOMImplementation;
    module.exports = XMLDOMImplementation = function() {
        function XMLDOMImplementation() {}
        XMLDOMImplementation.prototype.hasFeature = function(feature, version) {
            return true;
        };
        XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {
            throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {
            throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation.prototype.createHTMLDocument = function(title) {
            throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation.prototype.getFeature = function(feature, version) {
            throw new Error("This DOM method is not implemented.");
        };
        return XMLDOMImplementation;
    }();
}).call(module.exports);

});

parcelRegister("gzvfu", function(module, exports) {







// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    isPlainObject = (parcelRequire("a042u")).isPlainObject;
    XMLDOMImplementation = (parcelRequire("iRduA"));
    XMLDOMConfiguration = (parcelRequire("9TQTU"));
    XMLNode = (parcelRequire("br4Mo"));
    NodeType = (parcelRequire("22Xcd"));
    XMLStringifier = (parcelRequire("5HNJI"));
    XMLStringWriter = (parcelRequire("ezQDC"));
    module.exports = XMLDocument = function(superClass) {
        extend(XMLDocument, superClass);
        function XMLDocument(options) {
            XMLDocument.__super__.constructor.call(this, null);
            this.name = "#document";
            this.type = NodeType.Document;
            this.documentURI = null;
            this.domConfig = new XMLDOMConfiguration();
            options || (options = {});
            if (!options.writer) options.writer = new XMLStringWriter();
            this.options = options;
            this.stringify = new XMLStringifier(options);
        }
        Object.defineProperty(XMLDocument.prototype, "implementation", {
            value: new XMLDOMImplementation()
        });
        Object.defineProperty(XMLDocument.prototype, "doctype", {
            get: function get() {
                var child, i, len, ref;
                ref = this.children;
                for(i = 0, len = ref.length; i < len; i++){
                    child = ref[i];
                    if (child.type === NodeType.DocType) return child;
                }
                return null;
            }
        });
        Object.defineProperty(XMLDocument.prototype, "documentElement", {
            get: function get() {
                return this.rootObject || null;
            }
        });
        Object.defineProperty(XMLDocument.prototype, "inputEncoding", {
            get: function get() {
                return null;
            }
        });
        Object.defineProperty(XMLDocument.prototype, "strictErrorChecking", {
            get: function get() {
                return false;
            }
        });
        Object.defineProperty(XMLDocument.prototype, "xmlEncoding", {
            get: function get() {
                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) return this.children[0].encoding;
                else return null;
            }
        });
        Object.defineProperty(XMLDocument.prototype, "xmlStandalone", {
            get: function get() {
                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) return this.children[0].standalone === "yes";
                else return false;
            }
        });
        Object.defineProperty(XMLDocument.prototype, "xmlVersion", {
            get: function get() {
                if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) return this.children[0].version;
                else return "1.0";
            }
        });
        Object.defineProperty(XMLDocument.prototype, "URL", {
            get: function get() {
                return this.documentURI;
            }
        });
        Object.defineProperty(XMLDocument.prototype, "origin", {
            get: function get() {
                return null;
            }
        });
        Object.defineProperty(XMLDocument.prototype, "compatMode", {
            get: function get() {
                return null;
            }
        });
        Object.defineProperty(XMLDocument.prototype, "characterSet", {
            get: function get() {
                return null;
            }
        });
        Object.defineProperty(XMLDocument.prototype, "contentType", {
            get: function get() {
                return null;
            }
        });
        XMLDocument.prototype.end = function(writer) {
            var writerOptions;
            writerOptions = {};
            if (!writer) writer = this.options.writer;
            else if (isPlainObject(writer)) {
                writerOptions = writer;
                writer = this.options.writer;
            }
            return writer.document(this, writer.filterOptions(writerOptions));
        };
        XMLDocument.prototype.toString = function(options) {
            return this.options.writer.document(this, this.options.writer.filterOptions(options));
        };
        XMLDocument.prototype.createElement = function(tagName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createDocumentFragment = function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createTextNode = function(data) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createComment = function(data) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createCDATASection = function(data) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createProcessingInstruction = function(target, data) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createAttribute = function(name) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createEntityReference = function(name) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.getElementsByTagName = function(tagname) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.importNode = function(importedNode, deep) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.getElementById = function(elementId) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.adoptNode = function(source) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.normalizeDocument = function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.getElementsByClassName = function(classNames) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createEvent = function(eventInterface) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createRange = function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        return XMLDocument;
    }(XMLNode);
}).call(module.exports);

});
parcelRegister("9TQTU", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;
    XMLDOMErrorHandler = (parcelRequire("jaO8R"));
    XMLDOMStringList = (parcelRequire("jmU7p"));
    module.exports = XMLDOMConfiguration = function() {
        function XMLDOMConfiguration() {
            var clonedSelf;
            this.defaultParams = {
                "canonical-form": false,
                "cdata-sections": false,
                "comments": false,
                "datatype-normalization": false,
                "element-content-whitespace": true,
                "entities": true,
                "error-handler": new XMLDOMErrorHandler(),
                "infoset": true,
                "validate-if-schema": false,
                "namespaces": true,
                "namespace-declarations": true,
                "normalize-characters": false,
                "schema-location": "",
                "schema-type": "",
                "split-cdata-sections": true,
                "validate": false,
                "well-formed": true
            };
            this.params = clonedSelf = Object.create(this.defaultParams);
        }
        Object.defineProperty(XMLDOMConfiguration.prototype, "parameterNames", {
            get: function get() {
                return new XMLDOMStringList(Object.keys(this.defaultParams));
            }
        });
        XMLDOMConfiguration.prototype.getParameter = function(name) {
            if (this.params.hasOwnProperty(name)) return this.params[name];
            else return null;
        };
        XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {
            return true;
        };
        XMLDOMConfiguration.prototype.setParameter = function(name, value) {
            if (value != null) return this.params[name] = value;
            else return delete this.params[name];
        };
        return XMLDOMConfiguration;
    }();
}).call(module.exports);

});
parcelRegister("jaO8R", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    var XMLDOMErrorHandler;
    module.exports = XMLDOMErrorHandler = function() {
        function XMLDOMErrorHandler() {}
        XMLDOMErrorHandler.prototype.handleError = function(error) {
            throw new Error(error);
        };
        return XMLDOMErrorHandler;
    }();
}).call(module.exports);

});

parcelRegister("jmU7p", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    var XMLDOMStringList;
    module.exports = XMLDOMStringList = function() {
        function XMLDOMStringList(arr) {
            this.arr = arr || [];
        }
        Object.defineProperty(XMLDOMStringList.prototype, "length", {
            get: function get() {
                return this.arr.length;
            }
        });
        XMLDOMStringList.prototype.item = function(index) {
            return this.arr[index] || null;
        };
        XMLDOMStringList.prototype.contains = function(str) {
            return this.arr.indexOf(str) !== -1;
        };
        return XMLDOMStringList;
    }();
}).call(module.exports);

});


parcelRegister("br4Mo", function(module, exports) {














// Generated by CoffeeScript 1.12.7
(function() {
    var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1, hasProp = {}.hasOwnProperty;
    ref1 = (parcelRequire("a042u")), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;
    XMLElement = null;
    XMLCData = null;
    XMLComment = null;
    XMLDeclaration = null;
    XMLDocType = null;
    XMLRaw = null;
    XMLText = null;
    XMLProcessingInstruction = null;
    XMLDummy = null;
    NodeType = null;
    XMLNodeList = null;
    XMLNamedNodeMap = null;
    DocumentPosition = null;
    module.exports = XMLNode = function() {
        function XMLNode(parent1) {
            this.parent = parent1;
            if (this.parent) {
                this.options = this.parent.options;
                this.stringify = this.parent.stringify;
            }
            this.value = null;
            this.children = [];
            this.baseURI = null;
            if (!XMLElement) {
                XMLElement = (parcelRequire("4nCdl"));
                XMLCData = (parcelRequire("jPDKj"));
                XMLComment = (parcelRequire("1WZsV"));
                XMLDeclaration = (parcelRequire("bdnlP"));
                XMLDocType = (parcelRequire("dqsL6"));
                XMLRaw = (parcelRequire("yVpKT"));
                XMLText = (parcelRequire("jZ9EC"));
                XMLProcessingInstruction = (parcelRequire("dPkwR"));
                XMLDummy = (parcelRequire("hAuTB"));
                NodeType = (parcelRequire("22Xcd"));
                XMLNodeList = (parcelRequire("2UEOZ"));
                XMLNamedNodeMap = (parcelRequire("3YL0N"));
                DocumentPosition = (parcelRequire("bRYae"));
            }
        }
        Object.defineProperty(XMLNode.prototype, "nodeName", {
            get: function get() {
                return this.name;
            }
        });
        Object.defineProperty(XMLNode.prototype, "nodeType", {
            get: function get() {
                return this.type;
            }
        });
        Object.defineProperty(XMLNode.prototype, "nodeValue", {
            get: function get() {
                return this.value;
            }
        });
        Object.defineProperty(XMLNode.prototype, "parentNode", {
            get: function get() {
                return this.parent;
            }
        });
        Object.defineProperty(XMLNode.prototype, "childNodes", {
            get: function get() {
                if (!this.childNodeList || !this.childNodeList.nodes) this.childNodeList = new XMLNodeList(this.children);
                return this.childNodeList;
            }
        });
        Object.defineProperty(XMLNode.prototype, "firstChild", {
            get: function get() {
                return this.children[0] || null;
            }
        });
        Object.defineProperty(XMLNode.prototype, "lastChild", {
            get: function get() {
                return this.children[this.children.length - 1] || null;
            }
        });
        Object.defineProperty(XMLNode.prototype, "previousSibling", {
            get: function get() {
                var i;
                i = this.parent.children.indexOf(this);
                return this.parent.children[i - 1] || null;
            }
        });
        Object.defineProperty(XMLNode.prototype, "nextSibling", {
            get: function get() {
                var i;
                i = this.parent.children.indexOf(this);
                return this.parent.children[i + 1] || null;
            }
        });
        Object.defineProperty(XMLNode.prototype, "ownerDocument", {
            get: function get() {
                return this.document() || null;
            }
        });
        Object.defineProperty(XMLNode.prototype, "textContent", {
            get: function get() {
                var child, j, len, ref2, str;
                if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {
                    str = "";
                    ref2 = this.children;
                    for(j = 0, len = ref2.length; j < len; j++){
                        child = ref2[j];
                        if (child.textContent) str += child.textContent;
                    }
                    return str;
                } else return null;
            },
            set: function set(value) {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
            }
        });
        XMLNode.prototype.setParent = function(parent) {
            var child, j, len, ref2, results;
            this.parent = parent;
            if (parent) {
                this.options = parent.options;
                this.stringify = parent.stringify;
            }
            ref2 = this.children;
            results = [];
            for(j = 0, len = ref2.length; j < len; j++){
                child = ref2[j];
                results.push(child.setParent(this));
            }
            return results;
        };
        XMLNode.prototype.element = function(name, attributes, text) {
            var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;
            lastChild = null;
            if (attributes === null && text == null) ref2 = [
                {},
                null
            ], attributes = ref2[0], text = ref2[1];
            if (attributes == null) attributes = {};
            attributes = getValue(attributes);
            if (!isObject(attributes)) ref3 = [
                attributes,
                text
            ], text = ref3[0], attributes = ref3[1];
            if (name != null) name = getValue(name);
            if (Array.isArray(name)) for(j = 0, len = name.length; j < len; j++){
                item = name[j];
                lastChild = this.element(item);
            }
            else if (isFunction(name)) lastChild = this.element(name.apply());
            else if (isObject(name)) for(key in name){
                if (!hasProp.call(name, key)) continue;
                val = name[key];
                if (isFunction(val)) val = val.apply();
                if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
                else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) lastChild = this.dummy();
                else if (isObject(val) && isEmpty(val)) lastChild = this.element(key);
                else if (!this.options.keepNullNodes && val == null) lastChild = this.dummy();
                else if (!this.options.separateArrayItems && Array.isArray(val)) for(k = 0, len1 = val.length; k < len1; k++){
                    item = val[k];
                    childNode = {};
                    childNode[key] = item;
                    lastChild = this.element(childNode);
                }
                else if (isObject(val)) {
                    if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) lastChild = this.element(val);
                    else {
                        lastChild = this.element(key);
                        lastChild.element(val);
                    }
                } else lastChild = this.element(key, val);
            }
            else if (!this.options.keepNullNodes && text === null) lastChild = this.dummy();
            else {
                if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) lastChild = this.text(text);
                else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) lastChild = this.cdata(text);
                else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) lastChild = this.comment(text);
                else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) lastChild = this.raw(text);
                else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
                else lastChild = this.node(name, attributes, text);
            }
            if (lastChild == null) throw new Error("Could not create any elements with: " + name + ". " + this.debugInfo());
            return lastChild;
        };
        XMLNode.prototype.insertBefore = function(name, attributes, text) {
            var child, i, newChild, refChild, removed;
            if (name != null ? name.type : void 0) {
                newChild = name;
                refChild = attributes;
                newChild.setParent(this);
                if (refChild) {
                    i = children.indexOf(refChild);
                    removed = children.splice(i);
                    children.push(newChild);
                    Array.prototype.push.apply(children, removed);
                } else children.push(newChild);
                return newChild;
            } else {
                if (this.isRoot) throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
                i = this.parent.children.indexOf(this);
                removed = this.parent.children.splice(i);
                child = this.parent.element(name, attributes, text);
                Array.prototype.push.apply(this.parent.children, removed);
                return child;
            }
        };
        XMLNode.prototype.insertAfter = function(name, attributes, text) {
            var child, i, removed;
            if (this.isRoot) throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
            i = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i + 1);
            child = this.parent.element(name, attributes, text);
            Array.prototype.push.apply(this.parent.children, removed);
            return child;
        };
        XMLNode.prototype.remove = function() {
            var i, ref2;
            if (this.isRoot) throw new Error("Cannot remove the root element. " + this.debugInfo());
            i = this.parent.children.indexOf(this);
            [].splice.apply(this.parent.children, [
                i,
                i - i + 1
            ].concat(ref2 = [])), ref2;
            return this.parent;
        };
        XMLNode.prototype.node = function(name, attributes, text) {
            var child, ref2;
            if (name != null) name = getValue(name);
            attributes || (attributes = {});
            attributes = getValue(attributes);
            if (!isObject(attributes)) ref2 = [
                attributes,
                text
            ], text = ref2[0], attributes = ref2[1];
            child = new XMLElement(this, name, attributes);
            if (text != null) child.text(text);
            this.children.push(child);
            return child;
        };
        XMLNode.prototype.text = function(value) {
            var child;
            if (isObject(value)) this.element(value);
            child = new XMLText(this, value);
            this.children.push(child);
            return this;
        };
        XMLNode.prototype.cdata = function(value) {
            var child;
            child = new XMLCData(this, value);
            this.children.push(child);
            return this;
        };
        XMLNode.prototype.comment = function(value) {
            var child;
            child = new XMLComment(this, value);
            this.children.push(child);
            return this;
        };
        XMLNode.prototype.commentBefore = function(value) {
            var child, i, removed;
            i = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i);
            child = this.parent.comment(value);
            Array.prototype.push.apply(this.parent.children, removed);
            return this;
        };
        XMLNode.prototype.commentAfter = function(value) {
            var child, i, removed;
            i = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i + 1);
            child = this.parent.comment(value);
            Array.prototype.push.apply(this.parent.children, removed);
            return this;
        };
        XMLNode.prototype.raw = function(value) {
            var child;
            child = new XMLRaw(this, value);
            this.children.push(child);
            return this;
        };
        XMLNode.prototype.dummy = function() {
            var child;
            child = new XMLDummy(this);
            return child;
        };
        XMLNode.prototype.instruction = function(target, value) {
            var insTarget, insValue, instruction, j, len;
            if (target != null) target = getValue(target);
            if (value != null) value = getValue(value);
            if (Array.isArray(target)) for(j = 0, len = target.length; j < len; j++){
                insTarget = target[j];
                this.instruction(insTarget);
            }
            else if (isObject(target)) for(insTarget in target){
                if (!hasProp.call(target, insTarget)) continue;
                insValue = target[insTarget];
                this.instruction(insTarget, insValue);
            }
            else {
                if (isFunction(value)) value = value.apply();
                instruction = new XMLProcessingInstruction(this, target, value);
                this.children.push(instruction);
            }
            return this;
        };
        XMLNode.prototype.instructionBefore = function(target, value) {
            var child, i, removed;
            i = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i);
            child = this.parent.instruction(target, value);
            Array.prototype.push.apply(this.parent.children, removed);
            return this;
        };
        XMLNode.prototype.instructionAfter = function(target, value) {
            var child, i, removed;
            i = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i + 1);
            child = this.parent.instruction(target, value);
            Array.prototype.push.apply(this.parent.children, removed);
            return this;
        };
        XMLNode.prototype.declaration = function(version, encoding, standalone) {
            var doc, xmldec;
            doc = this.document();
            xmldec = new XMLDeclaration(doc, version, encoding, standalone);
            if (doc.children.length === 0) doc.children.unshift(xmldec);
            else if (doc.children[0].type === NodeType.Declaration) doc.children[0] = xmldec;
            else doc.children.unshift(xmldec);
            return doc.root() || doc;
        };
        XMLNode.prototype.dtd = function(pubID, sysID) {
            var child, doc, doctype, i, j, k, len, len1, ref2, ref3;
            doc = this.document();
            doctype = new XMLDocType(doc, pubID, sysID);
            ref2 = doc.children;
            for(i = j = 0, len = ref2.length; j < len; i = ++j){
                child = ref2[i];
                if (child.type === NodeType.DocType) {
                    doc.children[i] = doctype;
                    return doctype;
                }
            }
            ref3 = doc.children;
            for(i = k = 0, len1 = ref3.length; k < len1; i = ++k){
                child = ref3[i];
                if (child.isRoot) {
                    doc.children.splice(i, 0, doctype);
                    return doctype;
                }
            }
            doc.children.push(doctype);
            return doctype;
        };
        XMLNode.prototype.up = function() {
            if (this.isRoot) throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
            return this.parent;
        };
        XMLNode.prototype.root = function() {
            var node;
            node = this;
            while(node){
                if (node.type === NodeType.Document) return node.rootObject;
                else if (node.isRoot) return node;
                else node = node.parent;
            }
        };
        XMLNode.prototype.document = function() {
            var node;
            node = this;
            while(node){
                if (node.type === NodeType.Document) return node;
                else node = node.parent;
            }
        };
        XMLNode.prototype.end = function(options) {
            return this.document().end(options);
        };
        XMLNode.prototype.prev = function() {
            var i;
            i = this.parent.children.indexOf(this);
            if (i < 1) throw new Error("Already at the first node. " + this.debugInfo());
            return this.parent.children[i - 1];
        };
        XMLNode.prototype.next = function() {
            var i;
            i = this.parent.children.indexOf(this);
            if (i === -1 || i === this.parent.children.length - 1) throw new Error("Already at the last node. " + this.debugInfo());
            return this.parent.children[i + 1];
        };
        XMLNode.prototype.importDocument = function(doc) {
            var clonedRoot;
            clonedRoot = doc.root().clone();
            clonedRoot.parent = this;
            clonedRoot.isRoot = false;
            this.children.push(clonedRoot);
            return this;
        };
        XMLNode.prototype.debugInfo = function(name) {
            var ref2, ref3;
            name = name || this.name;
            if (name == null && !((ref2 = this.parent) != null ? ref2.name : void 0)) return "";
            else if (name == null) return "parent: <" + this.parent.name + ">";
            else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) return "node: <" + name + ">";
            else return "node: <" + name + ">, parent: <" + this.parent.name + ">";
        };
        XMLNode.prototype.ele = function(name, attributes, text) {
            return this.element(name, attributes, text);
        };
        XMLNode.prototype.nod = function(name, attributes, text) {
            return this.node(name, attributes, text);
        };
        XMLNode.prototype.txt = function(value) {
            return this.text(value);
        };
        XMLNode.prototype.dat = function(value) {
            return this.cdata(value);
        };
        XMLNode.prototype.com = function(value) {
            return this.comment(value);
        };
        XMLNode.prototype.ins = function(target, value) {
            return this.instruction(target, value);
        };
        XMLNode.prototype.doc = function() {
            return this.document();
        };
        XMLNode.prototype.dec = function(version, encoding, standalone) {
            return this.declaration(version, encoding, standalone);
        };
        XMLNode.prototype.e = function(name, attributes, text) {
            return this.element(name, attributes, text);
        };
        XMLNode.prototype.n = function(name, attributes, text) {
            return this.node(name, attributes, text);
        };
        XMLNode.prototype.t = function(value) {
            return this.text(value);
        };
        XMLNode.prototype.d = function(value) {
            return this.cdata(value);
        };
        XMLNode.prototype.c = function(value) {
            return this.comment(value);
        };
        XMLNode.prototype.r = function(value) {
            return this.raw(value);
        };
        XMLNode.prototype.i = function(target, value) {
            return this.instruction(target, value);
        };
        XMLNode.prototype.u = function() {
            return this.up();
        };
        XMLNode.prototype.importXMLBuilder = function(doc) {
            return this.importDocument(doc);
        };
        XMLNode.prototype.replaceChild = function(newChild, oldChild) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.removeChild = function(oldChild) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.appendChild = function(newChild) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.hasChildNodes = function() {
            return this.children.length !== 0;
        };
        XMLNode.prototype.cloneNode = function(deep) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.normalize = function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.isSupported = function(feature, version) {
            return true;
        };
        XMLNode.prototype.hasAttributes = function() {
            return this.attribs.length !== 0;
        };
        XMLNode.prototype.compareDocumentPosition = function(other) {
            var ref, res;
            ref = this;
            if (ref === other) return 0;
            else if (this.document() !== other.document()) {
                res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;
                if (Math.random() < 0.5) res |= DocumentPosition.Preceding;
                else res |= DocumentPosition.Following;
                return res;
            } else if (ref.isAncestor(other)) return DocumentPosition.Contains | DocumentPosition.Preceding;
            else if (ref.isDescendant(other)) return DocumentPosition.Contains | DocumentPosition.Following;
            else if (ref.isPreceding(other)) return DocumentPosition.Preceding;
            else return DocumentPosition.Following;
        };
        XMLNode.prototype.isSameNode = function(other) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.lookupPrefix = function(namespaceURI) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.lookupNamespaceURI = function(prefix) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.isEqualNode = function(node) {
            var i, j, ref2;
            if (node.nodeType !== this.nodeType) return false;
            if (node.children.length !== this.children.length) return false;
            for(i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j){
                if (!this.children[i].isEqualNode(node.children[i])) return false;
            }
            return true;
        };
        XMLNode.prototype.getFeature = function(feature, version) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.setUserData = function(key, data, handler) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.getUserData = function(key) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode.prototype.contains = function(other) {
            if (!other) return false;
            return other === this || this.isDescendant(other);
        };
        XMLNode.prototype.isDescendant = function(node) {
            var child, isDescendantChild, j, len, ref2;
            ref2 = this.children;
            for(j = 0, len = ref2.length; j < len; j++){
                child = ref2[j];
                if (node === child) return true;
                isDescendantChild = child.isDescendant(node);
                if (isDescendantChild) return true;
            }
            return false;
        };
        XMLNode.prototype.isAncestor = function(node) {
            return node.isDescendant(this);
        };
        XMLNode.prototype.isPreceding = function(node) {
            var nodePos, thisPos;
            nodePos = this.treePosition(node);
            thisPos = this.treePosition(this);
            if (nodePos === -1 || thisPos === -1) return false;
            else return nodePos < thisPos;
        };
        XMLNode.prototype.isFollowing = function(node) {
            var nodePos, thisPos;
            nodePos = this.treePosition(node);
            thisPos = this.treePosition(this);
            if (nodePos === -1 || thisPos === -1) return false;
            else return nodePos > thisPos;
        };
        XMLNode.prototype.treePosition = function(node) {
            var found, pos;
            pos = 0;
            found = false;
            this.foreachTreeNode(this.document(), function(childNode) {
                pos++;
                if (!found && childNode === node) return found = true;
            });
            if (found) return pos;
            else return -1;
        };
        XMLNode.prototype.foreachTreeNode = function(node, func) {
            var child, j, len, ref2, res;
            node || (node = this.document());
            ref2 = node.children;
            for(j = 0, len = ref2.length; j < len; j++){
                child = ref2[j];
                if (res = func(child)) return res;
                else {
                    res = this.foreachTreeNode(child, func);
                    if (res) return res;
                }
            }
        };
        return XMLNode;
    }();
}).call(module.exports);

});
parcelRegister("4nCdl", function(module, exports) {





// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    ref = (parcelRequire("a042u")), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;
    XMLNode = (parcelRequire("br4Mo"));
    NodeType = (parcelRequire("22Xcd"));
    XMLAttribute = (parcelRequire("5dcjl"));
    XMLNamedNodeMap = (parcelRequire("3YL0N"));
    module.exports = XMLElement = function(superClass) {
        extend(XMLElement, superClass);
        function XMLElement(parent, name, attributes) {
            var child, j, len, ref1;
            XMLElement.__super__.constructor.call(this, parent);
            if (name == null) throw new Error("Missing element name. " + this.debugInfo());
            this.name = this.stringify.name(name);
            this.type = NodeType.Element;
            this.attribs = {};
            this.schemaTypeInfo = null;
            if (attributes != null) this.attribute(attributes);
            if (parent.type === NodeType.Document) {
                this.isRoot = true;
                this.documentObject = parent;
                parent.rootObject = this;
                if (parent.children) {
                    ref1 = parent.children;
                    for(j = 0, len = ref1.length; j < len; j++){
                        child = ref1[j];
                        if (child.type === NodeType.DocType) {
                            child.name = this.name;
                            break;
                        }
                    }
                }
            }
        }
        Object.defineProperty(XMLElement.prototype, "tagName", {
            get: function get() {
                return this.name;
            }
        });
        Object.defineProperty(XMLElement.prototype, "namespaceURI", {
            get: function get() {
                return "";
            }
        });
        Object.defineProperty(XMLElement.prototype, "prefix", {
            get: function get() {
                return "";
            }
        });
        Object.defineProperty(XMLElement.prototype, "localName", {
            get: function get() {
                return this.name;
            }
        });
        Object.defineProperty(XMLElement.prototype, "id", {
            get: function get() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
            }
        });
        Object.defineProperty(XMLElement.prototype, "className", {
            get: function get() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
            }
        });
        Object.defineProperty(XMLElement.prototype, "classList", {
            get: function get() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
            }
        });
        Object.defineProperty(XMLElement.prototype, "attributes", {
            get: function get() {
                if (!this.attributeMap || !this.attributeMap.nodes) this.attributeMap = new XMLNamedNodeMap(this.attribs);
                return this.attributeMap;
            }
        });
        XMLElement.prototype.clone = function() {
            var att, attName, clonedSelf, ref1;
            clonedSelf = Object.create(this);
            if (clonedSelf.isRoot) clonedSelf.documentObject = null;
            clonedSelf.attribs = {};
            ref1 = this.attribs;
            for(attName in ref1){
                if (!hasProp.call(ref1, attName)) continue;
                att = ref1[attName];
                clonedSelf.attribs[attName] = att.clone();
            }
            clonedSelf.children = [];
            this.children.forEach(function(child) {
                var clonedChild;
                clonedChild = child.clone();
                clonedChild.parent = clonedSelf;
                return clonedSelf.children.push(clonedChild);
            });
            return clonedSelf;
        };
        XMLElement.prototype.attribute = function(name, value) {
            var attName, attValue;
            if (name != null) name = getValue(name);
            if (isObject(name)) for(attName in name){
                if (!hasProp.call(name, attName)) continue;
                attValue = name[attName];
                this.attribute(attName, attValue);
            }
            else {
                if (isFunction(value)) value = value.apply();
                if (this.options.keepNullAttributes && value == null) this.attribs[name] = new XMLAttribute(this, name, "");
                else if (value != null) this.attribs[name] = new XMLAttribute(this, name, value);
            }
            return this;
        };
        XMLElement.prototype.removeAttribute = function(name) {
            var attName, j, len;
            if (name == null) throw new Error("Missing attribute name. " + this.debugInfo());
            name = getValue(name);
            if (Array.isArray(name)) for(j = 0, len = name.length; j < len; j++){
                attName = name[j];
                delete this.attribs[attName];
            }
            else delete this.attribs[name];
            return this;
        };
        XMLElement.prototype.toString = function(options) {
            return this.options.writer.element(this, this.options.writer.filterOptions(options));
        };
        XMLElement.prototype.att = function(name, value) {
            return this.attribute(name, value);
        };
        XMLElement.prototype.a = function(name, value) {
            return this.attribute(name, value);
        };
        XMLElement.prototype.getAttribute = function(name) {
            if (this.attribs.hasOwnProperty(name)) return this.attribs[name].value;
            else return null;
        };
        XMLElement.prototype.setAttribute = function(name, value) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getAttributeNode = function(name) {
            if (this.attribs.hasOwnProperty(name)) return this.attribs[name];
            else return null;
        };
        XMLElement.prototype.setAttributeNode = function(newAttr) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.removeAttributeNode = function(oldAttr) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getElementsByTagName = function(name) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.setAttributeNodeNS = function(newAttr) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.hasAttribute = function(name) {
            return this.attribs.hasOwnProperty(name);
        };
        XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.setIdAttribute = function(name, isId) {
            if (this.attribs.hasOwnProperty(name)) return this.attribs[name].isId;
            else return isId;
        };
        XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getElementsByTagName = function(tagname) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.getElementsByClassName = function(classNames) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement.prototype.isEqualNode = function(node) {
            var i, j, ref1;
            if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) return false;
            if (node.namespaceURI !== this.namespaceURI) return false;
            if (node.prefix !== this.prefix) return false;
            if (node.localName !== this.localName) return false;
            if (node.attribs.length !== this.attribs.length) return false;
            for(i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j){
                if (!this.attribs[i].isEqualNode(node.attribs[i])) return false;
            }
            return true;
        };
        return XMLElement;
    }(XMLNode);
}).call(module.exports);

});
parcelRegister("22Xcd", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    module.exports = {
        Element: 1,
        Attribute: 2,
        Text: 3,
        CData: 4,
        EntityReference: 5,
        EntityDeclaration: 6,
        ProcessingInstruction: 7,
        Comment: 8,
        Document: 9,
        DocType: 10,
        DocumentFragment: 11,
        NotationDeclaration: 12,
        Declaration: 201,
        Raw: 202,
        AttributeDeclaration: 203,
        ElementDeclaration: 204,
        Dummy: 205
    };
}).call(module.exports);

});

parcelRegister("5dcjl", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLAttribute, XMLNode;
    NodeType = (parcelRequire("22Xcd"));
    XMLNode = (parcelRequire("br4Mo"));
    module.exports = XMLAttribute = function() {
        function XMLAttribute(parent, name, value) {
            this.parent = parent;
            if (this.parent) {
                this.options = this.parent.options;
                this.stringify = this.parent.stringify;
            }
            if (name == null) throw new Error("Missing attribute name. " + this.debugInfo(name));
            this.name = this.stringify.name(name);
            this.value = this.stringify.attValue(value);
            this.type = NodeType.Attribute;
            this.isId = false;
            this.schemaTypeInfo = null;
        }
        Object.defineProperty(XMLAttribute.prototype, "nodeType", {
            get: function get() {
                return this.type;
            }
        });
        Object.defineProperty(XMLAttribute.prototype, "ownerElement", {
            get: function get() {
                return this.parent;
            }
        });
        Object.defineProperty(XMLAttribute.prototype, "textContent", {
            get: function get() {
                return this.value;
            },
            set: function set(value) {
                return this.value = value || "";
            }
        });
        Object.defineProperty(XMLAttribute.prototype, "namespaceURI", {
            get: function get() {
                return "";
            }
        });
        Object.defineProperty(XMLAttribute.prototype, "prefix", {
            get: function get() {
                return "";
            }
        });
        Object.defineProperty(XMLAttribute.prototype, "localName", {
            get: function get() {
                return this.name;
            }
        });
        Object.defineProperty(XMLAttribute.prototype, "specified", {
            get: function get() {
                return true;
            }
        });
        XMLAttribute.prototype.clone = function() {
            return Object.create(this);
        };
        XMLAttribute.prototype.toString = function(options) {
            return this.options.writer.attribute(this, this.options.writer.filterOptions(options));
        };
        XMLAttribute.prototype.debugInfo = function(name) {
            name = name || this.name;
            if (name == null) return "parent: <" + this.parent.name + ">";
            else return "attribute: {" + name + "}, parent: <" + this.parent.name + ">";
        };
        XMLAttribute.prototype.isEqualNode = function(node) {
            if (node.namespaceURI !== this.namespaceURI) return false;
            if (node.prefix !== this.prefix) return false;
            if (node.localName !== this.localName) return false;
            if (node.value !== this.value) return false;
            return true;
        };
        return XMLAttribute;
    }();
}).call(module.exports);

});

parcelRegister("3YL0N", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    var XMLNamedNodeMap;
    module.exports = XMLNamedNodeMap = function() {
        function XMLNamedNodeMap(nodes) {
            this.nodes = nodes;
        }
        Object.defineProperty(XMLNamedNodeMap.prototype, "length", {
            get: function get() {
                return Object.keys(this.nodes).length || 0;
            }
        });
        XMLNamedNodeMap.prototype.clone = function() {
            return this.nodes = null;
        };
        XMLNamedNodeMap.prototype.getNamedItem = function(name) {
            return this.nodes[name];
        };
        XMLNamedNodeMap.prototype.setNamedItem = function(node) {
            var oldNode;
            oldNode = this.nodes[node.nodeName];
            this.nodes[node.nodeName] = node;
            return oldNode || null;
        };
        XMLNamedNodeMap.prototype.removeNamedItem = function(name) {
            var oldNode;
            oldNode = this.nodes[name];
            delete this.nodes[name];
            return oldNode || null;
        };
        XMLNamedNodeMap.prototype.item = function(index) {
            return this.nodes[Object.keys(this.nodes)[index]] || null;
        };
        XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {
            throw new Error("This DOM method is not implemented.");
        };
        XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {
            throw new Error("This DOM method is not implemented.");
        };
        XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {
            throw new Error("This DOM method is not implemented.");
        };
        return XMLNamedNodeMap;
    }();
}).call(module.exports);

});


parcelRegister("jPDKj", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLCData, XMLCharacterData, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    NodeType = (parcelRequire("22Xcd"));
    XMLCharacterData = (parcelRequire("8Muw9"));
    module.exports = XMLCData = function(superClass) {
        extend(XMLCData, superClass);
        function XMLCData(parent, text) {
            XMLCData.__super__.constructor.call(this, parent);
            if (text == null) throw new Error("Missing CDATA text. " + this.debugInfo());
            this.name = "#cdata-section";
            this.type = NodeType.CData;
            this.value = this.stringify.cdata(text);
        }
        XMLCData.prototype.clone = function() {
            return Object.create(this);
        };
        XMLCData.prototype.toString = function(options) {
            return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
        };
        return XMLCData;
    }(XMLCharacterData);
}).call(module.exports);

});
parcelRegister("8Muw9", function(module, exports) {

// Generated by CoffeeScript 1.12.7
(function() {
    var XMLCharacterData, XMLNode, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    XMLNode = (parcelRequire("br4Mo"));
    module.exports = XMLCharacterData = function(superClass) {
        extend(XMLCharacterData, superClass);
        function XMLCharacterData(parent) {
            XMLCharacterData.__super__.constructor.call(this, parent);
            this.value = "";
        }
        Object.defineProperty(XMLCharacterData.prototype, "data", {
            get: function get() {
                return this.value;
            },
            set: function set(value) {
                return this.value = value || "";
            }
        });
        Object.defineProperty(XMLCharacterData.prototype, "length", {
            get: function get() {
                return this.value.length;
            }
        });
        Object.defineProperty(XMLCharacterData.prototype, "textContent", {
            get: function get() {
                return this.value;
            },
            set: function set(value) {
                return this.value = value || "";
            }
        });
        XMLCharacterData.prototype.clone = function() {
            return Object.create(this);
        };
        XMLCharacterData.prototype.substringData = function(offset, count) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData.prototype.appendData = function(arg) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData.prototype.insertData = function(offset, arg) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData.prototype.deleteData = function(offset, count) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData.prototype.replaceData = function(offset, count, arg) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData.prototype.isEqualNode = function(node) {
            if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) return false;
            if (node.data !== this.data) return false;
            return true;
        };
        return XMLCharacterData;
    }(XMLNode);
}).call(module.exports);

});


parcelRegister("1WZsV", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLCharacterData, XMLComment, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    NodeType = (parcelRequire("22Xcd"));
    XMLCharacterData = (parcelRequire("8Muw9"));
    module.exports = XMLComment = function(superClass) {
        extend(XMLComment, superClass);
        function XMLComment(parent, text) {
            XMLComment.__super__.constructor.call(this, parent);
            if (text == null) throw new Error("Missing comment text. " + this.debugInfo());
            this.name = "#comment";
            this.type = NodeType.Comment;
            this.value = this.stringify.comment(text);
        }
        XMLComment.prototype.clone = function() {
            return Object.create(this);
        };
        XMLComment.prototype.toString = function(options) {
            return this.options.writer.comment(this, this.options.writer.filterOptions(options));
        };
        return XMLComment;
    }(XMLCharacterData);
}).call(module.exports);

});

parcelRegister("bdnlP", function(module, exports) {



// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLDeclaration, XMLNode, isObject, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    isObject = (parcelRequire("a042u")).isObject;
    XMLNode = (parcelRequire("br4Mo"));
    NodeType = (parcelRequire("22Xcd"));
    module.exports = XMLDeclaration = function(superClass) {
        extend(XMLDeclaration, superClass);
        function XMLDeclaration(parent, version, encoding, standalone) {
            var ref;
            XMLDeclaration.__super__.constructor.call(this, parent);
            if (isObject(version)) ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
            if (!version) version = "1.0";
            this.type = NodeType.Declaration;
            this.version = this.stringify.xmlVersion(version);
            if (encoding != null) this.encoding = this.stringify.xmlEncoding(encoding);
            if (standalone != null) this.standalone = this.stringify.xmlStandalone(standalone);
        }
        XMLDeclaration.prototype.toString = function(options) {
            return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
        };
        return XMLDeclaration;
    }(XMLNode);
}).call(module.exports);

});

parcelRegister("dqsL6", function(module, exports) {








// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    isObject = (parcelRequire("a042u")).isObject;
    XMLNode = (parcelRequire("br4Mo"));
    NodeType = (parcelRequire("22Xcd"));
    XMLDTDAttList = (parcelRequire("01MtN"));
    XMLDTDEntity = (parcelRequire("8Syk5"));
    XMLDTDElement = (parcelRequire("6Q1uD"));
    XMLDTDNotation = (parcelRequire("4CYU4"));
    XMLNamedNodeMap = (parcelRequire("3YL0N"));
    module.exports = XMLDocType = function(superClass) {
        extend(XMLDocType, superClass);
        function XMLDocType(parent, pubID, sysID) {
            var child, i, len, ref, ref1, ref2;
            XMLDocType.__super__.constructor.call(this, parent);
            this.type = NodeType.DocType;
            if (parent.children) {
                ref = parent.children;
                for(i = 0, len = ref.length; i < len; i++){
                    child = ref[i];
                    if (child.type === NodeType.Element) {
                        this.name = child.name;
                        break;
                    }
                }
            }
            this.documentObject = parent;
            if (isObject(pubID)) ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;
            if (sysID == null) ref2 = [
                pubID,
                sysID
            ], sysID = ref2[0], pubID = ref2[1];
            if (pubID != null) this.pubID = this.stringify.dtdPubID(pubID);
            if (sysID != null) this.sysID = this.stringify.dtdSysID(sysID);
        }
        Object.defineProperty(XMLDocType.prototype, "entities", {
            get: function get() {
                var child, i, len, nodes, ref;
                nodes = {};
                ref = this.children;
                for(i = 0, len = ref.length; i < len; i++){
                    child = ref[i];
                    if (child.type === NodeType.EntityDeclaration && !child.pe) nodes[child.name] = child;
                }
                return new XMLNamedNodeMap(nodes);
            }
        });
        Object.defineProperty(XMLDocType.prototype, "notations", {
            get: function get() {
                var child, i, len, nodes, ref;
                nodes = {};
                ref = this.children;
                for(i = 0, len = ref.length; i < len; i++){
                    child = ref[i];
                    if (child.type === NodeType.NotationDeclaration) nodes[child.name] = child;
                }
                return new XMLNamedNodeMap(nodes);
            }
        });
        Object.defineProperty(XMLDocType.prototype, "publicId", {
            get: function get() {
                return this.pubID;
            }
        });
        Object.defineProperty(XMLDocType.prototype, "systemId", {
            get: function get() {
                return this.sysID;
            }
        });
        Object.defineProperty(XMLDocType.prototype, "internalSubset", {
            get: function get() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
            }
        });
        XMLDocType.prototype.element = function(name, value) {
            var child;
            child = new XMLDTDElement(this, name, value);
            this.children.push(child);
            return this;
        };
        XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
            var child;
            child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
            this.children.push(child);
            return this;
        };
        XMLDocType.prototype.entity = function(name, value) {
            var child;
            child = new XMLDTDEntity(this, false, name, value);
            this.children.push(child);
            return this;
        };
        XMLDocType.prototype.pEntity = function(name, value) {
            var child;
            child = new XMLDTDEntity(this, true, name, value);
            this.children.push(child);
            return this;
        };
        XMLDocType.prototype.notation = function(name, value) {
            var child;
            child = new XMLDTDNotation(this, name, value);
            this.children.push(child);
            return this;
        };
        XMLDocType.prototype.toString = function(options) {
            return this.options.writer.docType(this, this.options.writer.filterOptions(options));
        };
        XMLDocType.prototype.ele = function(name, value) {
            return this.element(name, value);
        };
        XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
            return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
        };
        XMLDocType.prototype.ent = function(name, value) {
            return this.entity(name, value);
        };
        XMLDocType.prototype.pent = function(name, value) {
            return this.pEntity(name, value);
        };
        XMLDocType.prototype.not = function(name, value) {
            return this.notation(name, value);
        };
        XMLDocType.prototype.up = function() {
            return this.root() || this.documentObject;
        };
        XMLDocType.prototype.isEqualNode = function(node) {
            if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) return false;
            if (node.name !== this.name) return false;
            if (node.publicId !== this.publicId) return false;
            if (node.systemId !== this.systemId) return false;
            return true;
        };
        return XMLDocType;
    }(XMLNode);
}).call(module.exports);

});
parcelRegister("01MtN", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLDTDAttList, XMLNode, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    XMLNode = (parcelRequire("br4Mo"));
    NodeType = (parcelRequire("22Xcd"));
    module.exports = XMLDTDAttList = function(superClass) {
        extend(XMLDTDAttList, superClass);
        function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
            XMLDTDAttList.__super__.constructor.call(this, parent);
            if (elementName == null) throw new Error("Missing DTD element name. " + this.debugInfo());
            if (attributeName == null) throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
            if (!attributeType) throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
            if (!defaultValueType) throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
            if (defaultValueType.indexOf("#") !== 0) defaultValueType = "#" + defaultValueType;
            if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
            if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
            this.elementName = this.stringify.name(elementName);
            this.type = NodeType.AttributeDeclaration;
            this.attributeName = this.stringify.name(attributeName);
            this.attributeType = this.stringify.dtdAttType(attributeType);
            if (defaultValue) this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
            this.defaultValueType = defaultValueType;
        }
        XMLDTDAttList.prototype.toString = function(options) {
            return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDAttList;
    }(XMLNode);
}).call(module.exports);

});

parcelRegister("8Syk5", function(module, exports) {



// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLDTDEntity, XMLNode, isObject, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    isObject = (parcelRequire("a042u")).isObject;
    XMLNode = (parcelRequire("br4Mo"));
    NodeType = (parcelRequire("22Xcd"));
    module.exports = XMLDTDEntity = function(superClass) {
        extend(XMLDTDEntity, superClass);
        function XMLDTDEntity(parent, pe, name, value) {
            XMLDTDEntity.__super__.constructor.call(this, parent);
            if (name == null) throw new Error("Missing DTD entity name. " + this.debugInfo(name));
            if (value == null) throw new Error("Missing DTD entity value. " + this.debugInfo(name));
            this.pe = !!pe;
            this.name = this.stringify.name(name);
            this.type = NodeType.EntityDeclaration;
            if (!isObject(value)) {
                this.value = this.stringify.dtdEntityValue(value);
                this.internal = true;
            } else {
                if (!value.pubID && !value.sysID) throw new Error("Public and/or system identifiers are required for an external entity. " + this.debugInfo(name));
                if (value.pubID && !value.sysID) throw new Error("System identifier is required for a public external entity. " + this.debugInfo(name));
                this.internal = false;
                if (value.pubID != null) this.pubID = this.stringify.dtdPubID(value.pubID);
                if (value.sysID != null) this.sysID = this.stringify.dtdSysID(value.sysID);
                if (value.nData != null) this.nData = this.stringify.dtdNData(value.nData);
                if (this.pe && this.nData) throw new Error("Notation declaration is not allowed in a parameter entity. " + this.debugInfo(name));
            }
        }
        Object.defineProperty(XMLDTDEntity.prototype, "publicId", {
            get: function get() {
                return this.pubID;
            }
        });
        Object.defineProperty(XMLDTDEntity.prototype, "systemId", {
            get: function get() {
                return this.sysID;
            }
        });
        Object.defineProperty(XMLDTDEntity.prototype, "notationName", {
            get: function get() {
                return this.nData || null;
            }
        });
        Object.defineProperty(XMLDTDEntity.prototype, "inputEncoding", {
            get: function get() {
                return null;
            }
        });
        Object.defineProperty(XMLDTDEntity.prototype, "xmlEncoding", {
            get: function get() {
                return null;
            }
        });
        Object.defineProperty(XMLDTDEntity.prototype, "xmlVersion", {
            get: function get() {
                return null;
            }
        });
        XMLDTDEntity.prototype.toString = function(options) {
            return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDEntity;
    }(XMLNode);
}).call(module.exports);

});

parcelRegister("6Q1uD", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLDTDElement, XMLNode, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    XMLNode = (parcelRequire("br4Mo"));
    NodeType = (parcelRequire("22Xcd"));
    module.exports = XMLDTDElement = function(superClass) {
        extend(XMLDTDElement, superClass);
        function XMLDTDElement(parent, name, value) {
            XMLDTDElement.__super__.constructor.call(this, parent);
            if (name == null) throw new Error("Missing DTD element name. " + this.debugInfo());
            if (!value) value = "(#PCDATA)";
            if (Array.isArray(value)) value = "(" + value.join(",") + ")";
            this.name = this.stringify.name(name);
            this.type = NodeType.ElementDeclaration;
            this.value = this.stringify.dtdElementValue(value);
        }
        XMLDTDElement.prototype.toString = function(options) {
            return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDElement;
    }(XMLNode);
}).call(module.exports);

});

parcelRegister("4CYU4", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLDTDNotation, XMLNode, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    XMLNode = (parcelRequire("br4Mo"));
    NodeType = (parcelRequire("22Xcd"));
    module.exports = XMLDTDNotation = function(superClass) {
        extend(XMLDTDNotation, superClass);
        function XMLDTDNotation(parent, name, value) {
            XMLDTDNotation.__super__.constructor.call(this, parent);
            if (name == null) throw new Error("Missing DTD notation name. " + this.debugInfo(name));
            if (!value.pubID && !value.sysID) throw new Error("Public or system identifiers are required for an external entity. " + this.debugInfo(name));
            this.name = this.stringify.name(name);
            this.type = NodeType.NotationDeclaration;
            if (value.pubID != null) this.pubID = this.stringify.dtdPubID(value.pubID);
            if (value.sysID != null) this.sysID = this.stringify.dtdSysID(value.sysID);
        }
        Object.defineProperty(XMLDTDNotation.prototype, "publicId", {
            get: function get() {
                return this.pubID;
            }
        });
        Object.defineProperty(XMLDTDNotation.prototype, "systemId", {
            get: function get() {
                return this.sysID;
            }
        });
        XMLDTDNotation.prototype.toString = function(options) {
            return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDNotation;
    }(XMLNode);
}).call(module.exports);

});


parcelRegister("yVpKT", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLNode, XMLRaw, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    NodeType = (parcelRequire("22Xcd"));
    XMLNode = (parcelRequire("br4Mo"));
    module.exports = XMLRaw = function(superClass) {
        extend(XMLRaw, superClass);
        function XMLRaw(parent, text) {
            XMLRaw.__super__.constructor.call(this, parent);
            if (text == null) throw new Error("Missing raw text. " + this.debugInfo());
            this.type = NodeType.Raw;
            this.value = this.stringify.raw(text);
        }
        XMLRaw.prototype.clone = function() {
            return Object.create(this);
        };
        XMLRaw.prototype.toString = function(options) {
            return this.options.writer.raw(this, this.options.writer.filterOptions(options));
        };
        return XMLRaw;
    }(XMLNode);
}).call(module.exports);

});

parcelRegister("jZ9EC", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLCharacterData, XMLText, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    NodeType = (parcelRequire("22Xcd"));
    XMLCharacterData = (parcelRequire("8Muw9"));
    module.exports = XMLText = function(superClass) {
        extend(XMLText, superClass);
        function XMLText(parent, text) {
            XMLText.__super__.constructor.call(this, parent);
            if (text == null) throw new Error("Missing element text. " + this.debugInfo());
            this.name = "#text";
            this.type = NodeType.Text;
            this.value = this.stringify.text(text);
        }
        Object.defineProperty(XMLText.prototype, "isElementContentWhitespace", {
            get: function get() {
                throw new Error("This DOM method is not implemented." + this.debugInfo());
            }
        });
        Object.defineProperty(XMLText.prototype, "wholeText", {
            get: function get() {
                var next, prev, str;
                str = "";
                prev = this.previousSibling;
                while(prev){
                    str = prev.data + str;
                    prev = prev.previousSibling;
                }
                str += this.data;
                next = this.nextSibling;
                while(next){
                    str = str + next.data;
                    next = next.nextSibling;
                }
                return str;
            }
        });
        XMLText.prototype.clone = function() {
            return Object.create(this);
        };
        XMLText.prototype.toString = function(options) {
            return this.options.writer.text(this, this.options.writer.filterOptions(options));
        };
        XMLText.prototype.splitText = function(offset) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLText.prototype.replaceWholeText = function(content) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        return XMLText;
    }(XMLCharacterData);
}).call(module.exports);

});

parcelRegister("dPkwR", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLCharacterData, XMLProcessingInstruction, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    NodeType = (parcelRequire("22Xcd"));
    XMLCharacterData = (parcelRequire("8Muw9"));
    module.exports = XMLProcessingInstruction = function(superClass) {
        extend(XMLProcessingInstruction, superClass);
        function XMLProcessingInstruction(parent, target, value) {
            XMLProcessingInstruction.__super__.constructor.call(this, parent);
            if (target == null) throw new Error("Missing instruction target. " + this.debugInfo());
            this.type = NodeType.ProcessingInstruction;
            this.target = this.stringify.insTarget(target);
            this.name = this.target;
            if (value) this.value = this.stringify.insValue(value);
        }
        XMLProcessingInstruction.prototype.clone = function() {
            return Object.create(this);
        };
        XMLProcessingInstruction.prototype.toString = function(options) {
            return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));
        };
        XMLProcessingInstruction.prototype.isEqualNode = function(node) {
            if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) return false;
            if (node.target !== this.target) return false;
            return true;
        };
        return XMLProcessingInstruction;
    }(XMLCharacterData);
}).call(module.exports);

});

parcelRegister("hAuTB", function(module, exports) {


// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, XMLDummy, XMLNode, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    XMLNode = (parcelRequire("br4Mo"));
    NodeType = (parcelRequire("22Xcd"));
    module.exports = XMLDummy = function(superClass) {
        extend(XMLDummy, superClass);
        function XMLDummy(parent) {
            XMLDummy.__super__.constructor.call(this, parent);
            this.type = NodeType.Dummy;
        }
        XMLDummy.prototype.clone = function() {
            return Object.create(this);
        };
        XMLDummy.prototype.toString = function(options) {
            return "";
        };
        return XMLDummy;
    }(XMLNode);
}).call(module.exports);

});

parcelRegister("2UEOZ", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    var XMLNodeList;
    module.exports = XMLNodeList = function() {
        function XMLNodeList(nodes) {
            this.nodes = nodes;
        }
        Object.defineProperty(XMLNodeList.prototype, "length", {
            get: function get() {
                return this.nodes.length || 0;
            }
        });
        XMLNodeList.prototype.clone = function() {
            return this.nodes = null;
        };
        XMLNodeList.prototype.item = function(index) {
            return this.nodes[index] || null;
        };
        return XMLNodeList;
    }();
}).call(module.exports);

});

parcelRegister("bRYae", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    module.exports = {
        Disconnected: 1,
        Preceding: 2,
        Following: 4,
        Contains: 8,
        ContainedBy: 16,
        ImplementationSpecific: 32
    };
}).call(module.exports);

});


parcelRegister("5HNJI", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    var XMLStringifier, bind = function bind(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    }, hasProp = {}.hasOwnProperty;
    module.exports = XMLStringifier = function() {
        function XMLStringifier(options) {
            this.assertLegalName = bind(this.assertLegalName, this);
            this.assertLegalChar = bind(this.assertLegalChar, this);
            var key, ref, value;
            options || (options = {});
            this.options = options;
            if (!this.options.version) this.options.version = "1.0";
            ref = options.stringify || {};
            for(key in ref){
                if (!hasProp.call(ref, key)) continue;
                value = ref[key];
                this[key] = value;
            }
        }
        XMLStringifier.prototype.name = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalName("" + val || "");
        };
        XMLStringifier.prototype.text = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalChar(this.textEscape("" + val || ""));
        };
        XMLStringifier.prototype.cdata = function(val) {
            if (this.options.noValidation) return val;
            val = "" + val || "";
            val = val.replace("]]>", "]]]]><![CDATA[>");
            return this.assertLegalChar(val);
        };
        XMLStringifier.prototype.comment = function(val) {
            if (this.options.noValidation) return val;
            val = "" + val || "";
            if (val.match(/--/)) throw new Error("Comment text cannot contain double-hypen: " + val);
            return this.assertLegalChar(val);
        };
        XMLStringifier.prototype.raw = function(val) {
            if (this.options.noValidation) return val;
            return "" + val || "";
        };
        XMLStringifier.prototype.attValue = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalChar(this.attEscape(val = "" + val || ""));
        };
        XMLStringifier.prototype.insTarget = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalChar("" + val || "");
        };
        XMLStringifier.prototype.insValue = function(val) {
            if (this.options.noValidation) return val;
            val = "" + val || "";
            if (val.match(/\?>/)) throw new Error("Invalid processing instruction value: " + val);
            return this.assertLegalChar(val);
        };
        XMLStringifier.prototype.xmlVersion = function(val) {
            if (this.options.noValidation) return val;
            val = "" + val || "";
            if (!val.match(/1\.[0-9]+/)) throw new Error("Invalid version number: " + val);
            return val;
        };
        XMLStringifier.prototype.xmlEncoding = function(val) {
            if (this.options.noValidation) return val;
            val = "" + val || "";
            if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) throw new Error("Invalid encoding: " + val);
            return this.assertLegalChar(val);
        };
        XMLStringifier.prototype.xmlStandalone = function(val) {
            if (this.options.noValidation) return val;
            if (val) return "yes";
            else return "no";
        };
        XMLStringifier.prototype.dtdPubID = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalChar("" + val || "");
        };
        XMLStringifier.prototype.dtdSysID = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalChar("" + val || "");
        };
        XMLStringifier.prototype.dtdElementValue = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalChar("" + val || "");
        };
        XMLStringifier.prototype.dtdAttType = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalChar("" + val || "");
        };
        XMLStringifier.prototype.dtdAttDefault = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalChar("" + val || "");
        };
        XMLStringifier.prototype.dtdEntityValue = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalChar("" + val || "");
        };
        XMLStringifier.prototype.dtdNData = function(val) {
            if (this.options.noValidation) return val;
            return this.assertLegalChar("" + val || "");
        };
        XMLStringifier.prototype.convertAttKey = "@";
        XMLStringifier.prototype.convertPIKey = "?";
        XMLStringifier.prototype.convertTextKey = "#text";
        XMLStringifier.prototype.convertCDataKey = "#cdata";
        XMLStringifier.prototype.convertCommentKey = "#comment";
        XMLStringifier.prototype.convertRawKey = "#raw";
        XMLStringifier.prototype.assertLegalChar = function(str) {
            var regex, res;
            if (this.options.noValidation) return str;
            regex = "";
            if (this.options.version === "1.0") {
                regex = /[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
                if (res = str.match(regex)) throw new Error("Invalid character in string: " + str + " at index " + res.index);
            } else if (this.options.version === "1.1") {
                regex = /[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
                if (res = str.match(regex)) throw new Error("Invalid character in string: " + str + " at index " + res.index);
            }
            return str;
        };
        XMLStringifier.prototype.assertLegalName = function(str) {
            var regex;
            if (this.options.noValidation) return str;
            this.assertLegalChar(str);
            regex = /^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/;
            if (!str.match(regex)) throw new Error("Invalid character in name");
            return str;
        };
        XMLStringifier.prototype.textEscape = function(str) {
            var ampregex;
            if (this.options.noValidation) return str;
            ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
            return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#xD;");
        };
        XMLStringifier.prototype.attEscape = function(str) {
            var ampregex;
            if (this.options.noValidation) return str;
            ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
            return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
        };
        return XMLStringifier;
    }();
}).call(module.exports);

});

parcelRegister("ezQDC", function(module, exports) {

// Generated by CoffeeScript 1.12.7
(function() {
    var XMLStringWriter, XMLWriterBase, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    XMLWriterBase = (parcelRequire("lJplk"));
    module.exports = XMLStringWriter = function(superClass) {
        extend(XMLStringWriter, superClass);
        function XMLStringWriter(options) {
            XMLStringWriter.__super__.constructor.call(this, options);
        }
        XMLStringWriter.prototype.document = function(doc, options) {
            var child, i, len, r, ref;
            options = this.filterOptions(options);
            r = "";
            ref = doc.children;
            for(i = 0, len = ref.length; i < len; i++){
                child = ref[i];
                r += this.writeChildNode(child, options, 0);
            }
            if (options.pretty && r.slice(-options.newline.length) === options.newline) r = r.slice(0, -options.newline.length);
            return r;
        };
        return XMLStringWriter;
    }(XMLWriterBase);
}).call(module.exports);

});
parcelRegister("lJplk", function(module, exports) {
















// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign, hasProp = {}.hasOwnProperty;
    assign = (parcelRequire("a042u")).assign;
    NodeType = (parcelRequire("22Xcd"));
    XMLDeclaration = (parcelRequire("bdnlP"));
    XMLDocType = (parcelRequire("dqsL6"));
    XMLCData = (parcelRequire("jPDKj"));
    XMLComment = (parcelRequire("1WZsV"));
    XMLElement = (parcelRequire("4nCdl"));
    XMLRaw = (parcelRequire("yVpKT"));
    XMLText = (parcelRequire("jZ9EC"));
    XMLProcessingInstruction = (parcelRequire("dPkwR"));
    XMLDummy = (parcelRequire("hAuTB"));
    XMLDTDAttList = (parcelRequire("01MtN"));
    XMLDTDElement = (parcelRequire("6Q1uD"));
    XMLDTDEntity = (parcelRequire("8Syk5"));
    XMLDTDNotation = (parcelRequire("4CYU4"));
    WriterState = (parcelRequire("e1TXk"));
    module.exports = XMLWriterBase = function() {
        function XMLWriterBase(options) {
            var key, ref, value;
            options || (options = {});
            this.options = options;
            ref = options.writer || {};
            for(key in ref){
                if (!hasProp.call(ref, key)) continue;
                value = ref[key];
                this["_" + key] = this[key];
                this[key] = value;
            }
        }
        XMLWriterBase.prototype.filterOptions = function(options) {
            var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;
            options || (options = {});
            options = assign({}, this.options, options);
            filteredOptions = {
                writer: this
            };
            filteredOptions.pretty = options.pretty || false;
            filteredOptions.allowEmpty = options.allowEmpty || false;
            filteredOptions.indent = (ref = options.indent) != null ? ref : "  ";
            filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : "\n";
            filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;
            filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;
            filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : "";
            if (filteredOptions.spaceBeforeSlash === true) filteredOptions.spaceBeforeSlash = " ";
            filteredOptions.suppressPrettyCount = 0;
            filteredOptions.user = {};
            filteredOptions.state = WriterState.None;
            return filteredOptions;
        };
        XMLWriterBase.prototype.indent = function(node, options, level) {
            var indentLevel;
            if (!options.pretty || options.suppressPrettyCount) return "";
            else if (options.pretty) {
                indentLevel = (level || 0) + options.offset + 1;
                if (indentLevel > 0) return new Array(indentLevel).join(options.indent);
            }
            return "";
        };
        XMLWriterBase.prototype.endline = function(node, options, level) {
            if (!options.pretty || options.suppressPrettyCount) return "";
            else return options.newline;
        };
        XMLWriterBase.prototype.attribute = function(att, options, level) {
            var r;
            this.openAttribute(att, options, level);
            r = " " + att.name + '="' + att.value + '"';
            this.closeAttribute(att, options, level);
            return r;
        };
        XMLWriterBase.prototype.cdata = function(node, options, level) {
            var r;
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level) + "<![CDATA[";
            options.state = WriterState.InsideTag;
            r += node.value;
            options.state = WriterState.CloseTag;
            r += "]]>" + this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.comment = function(node, options, level) {
            var r;
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level) + "<!-- ";
            options.state = WriterState.InsideTag;
            r += node.value;
            options.state = WriterState.CloseTag;
            r += " -->" + this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.declaration = function(node, options, level) {
            var r;
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level) + "<?xml";
            options.state = WriterState.InsideTag;
            r += ' version="' + node.version + '"';
            if (node.encoding != null) r += ' encoding="' + node.encoding + '"';
            if (node.standalone != null) r += ' standalone="' + node.standalone + '"';
            options.state = WriterState.CloseTag;
            r += options.spaceBeforeSlash + "?>";
            r += this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.docType = function(node, options, level) {
            var child, i, len, r, ref;
            level || (level = 0);
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level);
            r += "<!DOCTYPE " + node.root().name;
            if (node.pubID && node.sysID) r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            else if (node.sysID) r += ' SYSTEM "' + node.sysID + '"';
            if (node.children.length > 0) {
                r += " [";
                r += this.endline(node, options, level);
                options.state = WriterState.InsideTag;
                ref = node.children;
                for(i = 0, len = ref.length; i < len; i++){
                    child = ref[i];
                    r += this.writeChildNode(child, options, level + 1);
                }
                options.state = WriterState.CloseTag;
                r += "]";
            }
            options.state = WriterState.CloseTag;
            r += options.spaceBeforeSlash + ">";
            r += this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.element = function(node, options, level) {
            var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;
            level || (level = 0);
            prettySuppressed = false;
            r = "";
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r += this.indent(node, options, level) + "<" + node.name;
            ref = node.attribs;
            for(name in ref){
                if (!hasProp.call(ref, name)) continue;
                att = ref[name];
                r += this.attribute(att, options, level);
            }
            childNodeCount = node.children.length;
            firstChildNode = childNodeCount === 0 ? null : node.children[0];
            if (childNodeCount === 0 || node.children.every(function(e) {
                return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === "";
            })) {
                if (options.allowEmpty) {
                    r += ">";
                    options.state = WriterState.CloseTag;
                    r += "</" + node.name + ">" + this.endline(node, options, level);
                } else {
                    options.state = WriterState.CloseTag;
                    r += options.spaceBeforeSlash + "/>" + this.endline(node, options, level);
                }
            } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
                r += ">";
                options.state = WriterState.InsideTag;
                options.suppressPrettyCount++;
                prettySuppressed = true;
                r += this.writeChildNode(firstChildNode, options, level + 1);
                options.suppressPrettyCount--;
                prettySuppressed = false;
                options.state = WriterState.CloseTag;
                r += "</" + node.name + ">" + this.endline(node, options, level);
            } else {
                if (options.dontPrettyTextNodes) {
                    ref1 = node.children;
                    for(i = 0, len = ref1.length; i < len; i++){
                        child = ref1[i];
                        if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {
                            options.suppressPrettyCount++;
                            prettySuppressed = true;
                            break;
                        }
                    }
                }
                r += ">" + this.endline(node, options, level);
                options.state = WriterState.InsideTag;
                ref2 = node.children;
                for(j = 0, len1 = ref2.length; j < len1; j++){
                    child = ref2[j];
                    r += this.writeChildNode(child, options, level + 1);
                }
                options.state = WriterState.CloseTag;
                r += this.indent(node, options, level) + "</" + node.name + ">";
                if (prettySuppressed) options.suppressPrettyCount--;
                r += this.endline(node, options, level);
                options.state = WriterState.None;
            }
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.writeChildNode = function(node, options, level) {
            switch(node.type){
                case NodeType.CData:
                    return this.cdata(node, options, level);
                case NodeType.Comment:
                    return this.comment(node, options, level);
                case NodeType.Element:
                    return this.element(node, options, level);
                case NodeType.Raw:
                    return this.raw(node, options, level);
                case NodeType.Text:
                    return this.text(node, options, level);
                case NodeType.ProcessingInstruction:
                    return this.processingInstruction(node, options, level);
                case NodeType.Dummy:
                    return "";
                case NodeType.Declaration:
                    return this.declaration(node, options, level);
                case NodeType.DocType:
                    return this.docType(node, options, level);
                case NodeType.AttributeDeclaration:
                    return this.dtdAttList(node, options, level);
                case NodeType.ElementDeclaration:
                    return this.dtdElement(node, options, level);
                case NodeType.EntityDeclaration:
                    return this.dtdEntity(node, options, level);
                case NodeType.NotationDeclaration:
                    return this.dtdNotation(node, options, level);
                default:
                    throw new Error("Unknown XML node type: " + node.constructor.name);
            }
        };
        XMLWriterBase.prototype.processingInstruction = function(node, options, level) {
            var r;
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level) + "<?";
            options.state = WriterState.InsideTag;
            r += node.target;
            if (node.value) r += " " + node.value;
            options.state = WriterState.CloseTag;
            r += options.spaceBeforeSlash + "?>";
            r += this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.raw = function(node, options, level) {
            var r;
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level);
            options.state = WriterState.InsideTag;
            r += node.value;
            options.state = WriterState.CloseTag;
            r += this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.text = function(node, options, level) {
            var r;
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level);
            options.state = WriterState.InsideTag;
            r += node.value;
            options.state = WriterState.CloseTag;
            r += this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.dtdAttList = function(node, options, level) {
            var r;
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level) + "<!ATTLIST";
            options.state = WriterState.InsideTag;
            r += " " + node.elementName + " " + node.attributeName + " " + node.attributeType;
            if (node.defaultValueType !== "#DEFAULT") r += " " + node.defaultValueType;
            if (node.defaultValue) r += ' "' + node.defaultValue + '"';
            options.state = WriterState.CloseTag;
            r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.dtdElement = function(node, options, level) {
            var r;
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level) + "<!ELEMENT";
            options.state = WriterState.InsideTag;
            r += " " + node.name + " " + node.value;
            options.state = WriterState.CloseTag;
            r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.dtdEntity = function(node, options, level) {
            var r;
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level) + "<!ENTITY";
            options.state = WriterState.InsideTag;
            if (node.pe) r += " %";
            r += " " + node.name;
            if (node.value) r += ' "' + node.value + '"';
            else {
                if (node.pubID && node.sysID) r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
                else if (node.sysID) r += ' SYSTEM "' + node.sysID + '"';
                if (node.nData) r += " NDATA " + node.nData;
            }
            options.state = WriterState.CloseTag;
            r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.dtdNotation = function(node, options, level) {
            var r;
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            r = this.indent(node, options, level) + "<!NOTATION";
            options.state = WriterState.InsideTag;
            r += " " + node.name;
            if (node.pubID && node.sysID) r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            else if (node.pubID) r += ' PUBLIC "' + node.pubID + '"';
            else if (node.sysID) r += ' SYSTEM "' + node.sysID + '"';
            options.state = WriterState.CloseTag;
            r += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
            options.state = WriterState.None;
            this.closeNode(node, options, level);
            return r;
        };
        XMLWriterBase.prototype.openNode = function(node, options, level) {};
        XMLWriterBase.prototype.closeNode = function(node, options, level) {};
        XMLWriterBase.prototype.openAttribute = function(att, options, level) {};
        XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};
        return XMLWriterBase;
    }();
}).call(module.exports);

});
parcelRegister("e1TXk", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    module.exports = {
        None: 0,
        OpenTag: 1,
        InsideTag: 2,
        CloseTag: 3
    };
}).call(module.exports);

});




parcelRegister("lAumF", function(module, exports) {



















// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref, hasProp = {}.hasOwnProperty;
    ref = (parcelRequire("a042u")), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;
    NodeType = (parcelRequire("22Xcd"));
    XMLDocument = (parcelRequire("gzvfu"));
    XMLElement = (parcelRequire("4nCdl"));
    XMLCData = (parcelRequire("jPDKj"));
    XMLComment = (parcelRequire("1WZsV"));
    XMLRaw = (parcelRequire("yVpKT"));
    XMLText = (parcelRequire("jZ9EC"));
    XMLProcessingInstruction = (parcelRequire("dPkwR"));
    XMLDeclaration = (parcelRequire("bdnlP"));
    XMLDocType = (parcelRequire("dqsL6"));
    XMLDTDAttList = (parcelRequire("01MtN"));
    XMLDTDEntity = (parcelRequire("8Syk5"));
    XMLDTDElement = (parcelRequire("6Q1uD"));
    XMLDTDNotation = (parcelRequire("4CYU4"));
    XMLAttribute = (parcelRequire("5dcjl"));
    XMLStringifier = (parcelRequire("5HNJI"));
    XMLStringWriter = (parcelRequire("ezQDC"));
    WriterState = (parcelRequire("e1TXk"));
    module.exports = XMLDocumentCB = function() {
        function XMLDocumentCB(options, onData, onEnd) {
            var writerOptions;
            this.name = "?xml";
            this.type = NodeType.Document;
            options || (options = {});
            writerOptions = {};
            if (!options.writer) options.writer = new XMLStringWriter();
            else if (isPlainObject(options.writer)) {
                writerOptions = options.writer;
                options.writer = new XMLStringWriter();
            }
            this.options = options;
            this.writer = options.writer;
            this.writerOptions = this.writer.filterOptions(writerOptions);
            this.stringify = new XMLStringifier(options);
            this.onDataCallback = onData || function() {};
            this.onEndCallback = onEnd || function() {};
            this.currentNode = null;
            this.currentLevel = -1;
            this.openTags = {};
            this.documentStarted = false;
            this.documentCompleted = false;
            this.root = null;
        }
        XMLDocumentCB.prototype.createChildNode = function(node) {
            var att, attName, attributes, child, i, len, ref1, ref2;
            switch(node.type){
                case NodeType.CData:
                    this.cdata(node.value);
                    break;
                case NodeType.Comment:
                    this.comment(node.value);
                    break;
                case NodeType.Element:
                    attributes = {};
                    ref1 = node.attribs;
                    for(attName in ref1){
                        if (!hasProp.call(ref1, attName)) continue;
                        att = ref1[attName];
                        attributes[attName] = att.value;
                    }
                    this.node(node.name, attributes);
                    break;
                case NodeType.Dummy:
                    this.dummy();
                    break;
                case NodeType.Raw:
                    this.raw(node.value);
                    break;
                case NodeType.Text:
                    this.text(node.value);
                    break;
                case NodeType.ProcessingInstruction:
                    this.instruction(node.target, node.value);
                    break;
                default:
                    throw new Error("This XML node type is not supported in a JS object: " + node.constructor.name);
            }
            ref2 = node.children;
            for(i = 0, len = ref2.length; i < len; i++){
                child = ref2[i];
                this.createChildNode(child);
                if (child.type === NodeType.Element) this.up();
            }
            return this;
        };
        XMLDocumentCB.prototype.dummy = function() {
            return this;
        };
        XMLDocumentCB.prototype.node = function(name, attributes, text) {
            var ref1;
            if (name == null) throw new Error("Missing node name.");
            if (this.root && this.currentLevel === -1) throw new Error("Document can only have one root node. " + this.debugInfo(name));
            this.openCurrent();
            name = getValue(name);
            if (attributes == null) attributes = {};
            attributes = getValue(attributes);
            if (!isObject(attributes)) ref1 = [
                attributes,
                text
            ], text = ref1[0], attributes = ref1[1];
            this.currentNode = new XMLElement(this, name, attributes);
            this.currentNode.children = false;
            this.currentLevel++;
            this.openTags[this.currentLevel] = this.currentNode;
            if (text != null) this.text(text);
            return this;
        };
        XMLDocumentCB.prototype.element = function(name, attributes, text) {
            var child, i, len, oldValidationFlag, ref1, root;
            if (this.currentNode && this.currentNode.type === NodeType.DocType) this.dtdElement.apply(this, arguments);
            else if (Array.isArray(name) || isObject(name) || isFunction(name)) {
                oldValidationFlag = this.options.noValidation;
                this.options.noValidation = true;
                root = new XMLDocument(this.options).element("TEMP_ROOT");
                root.element(name);
                this.options.noValidation = oldValidationFlag;
                ref1 = root.children;
                for(i = 0, len = ref1.length; i < len; i++){
                    child = ref1[i];
                    this.createChildNode(child);
                    if (child.type === NodeType.Element) this.up();
                }
            } else this.node(name, attributes, text);
            return this;
        };
        XMLDocumentCB.prototype.attribute = function(name, value) {
            var attName, attValue;
            if (!this.currentNode || this.currentNode.children) throw new Error("att() can only be used immediately after an ele() call in callback mode. " + this.debugInfo(name));
            if (name != null) name = getValue(name);
            if (isObject(name)) for(attName in name){
                if (!hasProp.call(name, attName)) continue;
                attValue = name[attName];
                this.attribute(attName, attValue);
            }
            else {
                if (isFunction(value)) value = value.apply();
                if (this.options.keepNullAttributes && value == null) this.currentNode.attribs[name] = new XMLAttribute(this, name, "");
                else if (value != null) this.currentNode.attribs[name] = new XMLAttribute(this, name, value);
            }
            return this;
        };
        XMLDocumentCB.prototype.text = function(value) {
            var node;
            this.openCurrent();
            node = new XMLText(this, value);
            this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            return this;
        };
        XMLDocumentCB.prototype.cdata = function(value) {
            var node;
            this.openCurrent();
            node = new XMLCData(this, value);
            this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            return this;
        };
        XMLDocumentCB.prototype.comment = function(value) {
            var node;
            this.openCurrent();
            node = new XMLComment(this, value);
            this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            return this;
        };
        XMLDocumentCB.prototype.raw = function(value) {
            var node;
            this.openCurrent();
            node = new XMLRaw(this, value);
            this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            return this;
        };
        XMLDocumentCB.prototype.instruction = function(target, value) {
            var i, insTarget, insValue, len, node;
            this.openCurrent();
            if (target != null) target = getValue(target);
            if (value != null) value = getValue(value);
            if (Array.isArray(target)) for(i = 0, len = target.length; i < len; i++){
                insTarget = target[i];
                this.instruction(insTarget);
            }
            else if (isObject(target)) for(insTarget in target){
                if (!hasProp.call(target, insTarget)) continue;
                insValue = target[insTarget];
                this.instruction(insTarget, insValue);
            }
            else {
                if (isFunction(value)) value = value.apply();
                node = new XMLProcessingInstruction(this, target, value);
                this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            }
            return this;
        };
        XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {
            var node;
            this.openCurrent();
            if (this.documentStarted) throw new Error("declaration() must be the first node.");
            node = new XMLDeclaration(this, version, encoding, standalone);
            this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            return this;
        };
        XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {
            this.openCurrent();
            if (root == null) throw new Error("Missing root node name.");
            if (this.root) throw new Error("dtd() must come before the root node.");
            this.currentNode = new XMLDocType(this, pubID, sysID);
            this.currentNode.rootNodeName = root;
            this.currentNode.children = false;
            this.currentLevel++;
            this.openTags[this.currentLevel] = this.currentNode;
            return this;
        };
        XMLDocumentCB.prototype.dtdElement = function(name, value) {
            var node;
            this.openCurrent();
            node = new XMLDTDElement(this, name, value);
            this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            return this;
        };
        XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
            var node;
            this.openCurrent();
            node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
            this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            return this;
        };
        XMLDocumentCB.prototype.entity = function(name, value) {
            var node;
            this.openCurrent();
            node = new XMLDTDEntity(this, false, name, value);
            this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            return this;
        };
        XMLDocumentCB.prototype.pEntity = function(name, value) {
            var node;
            this.openCurrent();
            node = new XMLDTDEntity(this, true, name, value);
            this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            return this;
        };
        XMLDocumentCB.prototype.notation = function(name, value) {
            var node;
            this.openCurrent();
            node = new XMLDTDNotation(this, name, value);
            this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
            return this;
        };
        XMLDocumentCB.prototype.up = function() {
            if (this.currentLevel < 0) throw new Error("The document node has no parent.");
            if (this.currentNode) {
                if (this.currentNode.children) this.closeNode(this.currentNode);
                else this.openNode(this.currentNode);
                this.currentNode = null;
            } else this.closeNode(this.openTags[this.currentLevel]);
            delete this.openTags[this.currentLevel];
            this.currentLevel--;
            return this;
        };
        XMLDocumentCB.prototype.end = function() {
            while(this.currentLevel >= 0)this.up();
            return this.onEnd();
        };
        XMLDocumentCB.prototype.openCurrent = function() {
            if (this.currentNode) {
                this.currentNode.children = true;
                return this.openNode(this.currentNode);
            }
        };
        XMLDocumentCB.prototype.openNode = function(node) {
            var att, chunk, name, ref1;
            if (!node.isOpen) {
                if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) this.root = node;
                chunk = "";
                if (node.type === NodeType.Element) {
                    this.writerOptions.state = WriterState.OpenTag;
                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "<" + node.name;
                    ref1 = node.attribs;
                    for(name in ref1){
                        if (!hasProp.call(ref1, name)) continue;
                        att = ref1[name];
                        chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);
                    }
                    chunk += (node.children ? ">" : "/>") + this.writer.endline(node, this.writerOptions, this.currentLevel);
                    this.writerOptions.state = WriterState.InsideTag;
                } else {
                    this.writerOptions.state = WriterState.OpenTag;
                    chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "<!DOCTYPE " + node.rootNodeName;
                    if (node.pubID && node.sysID) chunk += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
                    else if (node.sysID) chunk += ' SYSTEM "' + node.sysID + '"';
                    if (node.children) {
                        chunk += " [";
                        this.writerOptions.state = WriterState.InsideTag;
                    } else {
                        this.writerOptions.state = WriterState.CloseTag;
                        chunk += ">";
                    }
                    chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);
                }
                this.onData(chunk, this.currentLevel);
                return node.isOpen = true;
            }
        };
        XMLDocumentCB.prototype.closeNode = function(node) {
            var chunk;
            if (!node.isClosed) {
                chunk = "";
                this.writerOptions.state = WriterState.CloseTag;
                if (node.type === NodeType.Element) chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "</" + node.name + ">" + this.writer.endline(node, this.writerOptions, this.currentLevel);
                else chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "]>" + this.writer.endline(node, this.writerOptions, this.currentLevel);
                this.writerOptions.state = WriterState.None;
                this.onData(chunk, this.currentLevel);
                return node.isClosed = true;
            }
        };
        XMLDocumentCB.prototype.onData = function(chunk, level) {
            this.documentStarted = true;
            return this.onDataCallback(chunk, level + 1);
        };
        XMLDocumentCB.prototype.onEnd = function() {
            this.documentCompleted = true;
            return this.onEndCallback();
        };
        XMLDocumentCB.prototype.debugInfo = function(name) {
            if (name == null) return "";
            else return "node: <" + name + ">";
        };
        XMLDocumentCB.prototype.ele = function() {
            return this.element.apply(this, arguments);
        };
        XMLDocumentCB.prototype.nod = function(name, attributes, text) {
            return this.node(name, attributes, text);
        };
        XMLDocumentCB.prototype.txt = function(value) {
            return this.text(value);
        };
        XMLDocumentCB.prototype.dat = function(value) {
            return this.cdata(value);
        };
        XMLDocumentCB.prototype.com = function(value) {
            return this.comment(value);
        };
        XMLDocumentCB.prototype.ins = function(target, value) {
            return this.instruction(target, value);
        };
        XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {
            return this.declaration(version, encoding, standalone);
        };
        XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {
            return this.doctype(root, pubID, sysID);
        };
        XMLDocumentCB.prototype.e = function(name, attributes, text) {
            return this.element(name, attributes, text);
        };
        XMLDocumentCB.prototype.n = function(name, attributes, text) {
            return this.node(name, attributes, text);
        };
        XMLDocumentCB.prototype.t = function(value) {
            return this.text(value);
        };
        XMLDocumentCB.prototype.d = function(value) {
            return this.cdata(value);
        };
        XMLDocumentCB.prototype.c = function(value) {
            return this.comment(value);
        };
        XMLDocumentCB.prototype.r = function(value) {
            return this.raw(value);
        };
        XMLDocumentCB.prototype.i = function(target, value) {
            return this.instruction(target, value);
        };
        XMLDocumentCB.prototype.att = function() {
            if (this.currentNode && this.currentNode.type === NodeType.DocType) return this.attList.apply(this, arguments);
            else return this.attribute.apply(this, arguments);
        };
        XMLDocumentCB.prototype.a = function() {
            if (this.currentNode && this.currentNode.type === NodeType.DocType) return this.attList.apply(this, arguments);
            else return this.attribute.apply(this, arguments);
        };
        XMLDocumentCB.prototype.ent = function(name, value) {
            return this.entity(name, value);
        };
        XMLDocumentCB.prototype.pent = function(name, value) {
            return this.pEntity(name, value);
        };
        XMLDocumentCB.prototype.not = function(name, value) {
            return this.notation(name, value);
        };
        return XMLDocumentCB;
    }();
}).call(module.exports);

});

parcelRegister("6e89D", function(module, exports) {



// Generated by CoffeeScript 1.12.7
(function() {
    var NodeType, WriterState, XMLStreamWriter, XMLWriterBase, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    NodeType = (parcelRequire("22Xcd"));
    XMLWriterBase = (parcelRequire("lJplk"));
    WriterState = (parcelRequire("e1TXk"));
    module.exports = XMLStreamWriter = function(superClass) {
        extend(XMLStreamWriter, superClass);
        function XMLStreamWriter(stream, options) {
            this.stream = stream;
            XMLStreamWriter.__super__.constructor.call(this, options);
        }
        XMLStreamWriter.prototype.endline = function(node, options, level) {
            if (node.isLastRootNode && options.state === WriterState.CloseTag) return "";
            else return XMLStreamWriter.__super__.endline.call(this, node, options, level);
        };
        XMLStreamWriter.prototype.document = function(doc, options) {
            var child, i, j, k, len, len1, ref, ref1, results;
            ref = doc.children;
            for(i = j = 0, len = ref.length; j < len; i = ++j){
                child = ref[i];
                child.isLastRootNode = i === doc.children.length - 1;
            }
            options = this.filterOptions(options);
            ref1 = doc.children;
            results = [];
            for(k = 0, len1 = ref1.length; k < len1; k++){
                child = ref1[k];
                results.push(this.writeChildNode(child, options, 0));
            }
            return results;
        };
        XMLStreamWriter.prototype.attribute = function(att, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));
        };
        XMLStreamWriter.prototype.cdata = function(node, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.comment = function(node, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.declaration = function(node, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.docType = function(node, options, level) {
            var child, j, len, ref;
            level || (level = 0);
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            this.stream.write(this.indent(node, options, level));
            this.stream.write("<!DOCTYPE " + node.root().name);
            if (node.pubID && node.sysID) this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
            else if (node.sysID) this.stream.write(' SYSTEM "' + node.sysID + '"');
            if (node.children.length > 0) {
                this.stream.write(" [");
                this.stream.write(this.endline(node, options, level));
                options.state = WriterState.InsideTag;
                ref = node.children;
                for(j = 0, len = ref.length; j < len; j++){
                    child = ref[j];
                    this.writeChildNode(child, options, level + 1);
                }
                options.state = WriterState.CloseTag;
                this.stream.write("]");
            }
            options.state = WriterState.CloseTag;
            this.stream.write(options.spaceBeforeSlash + ">");
            this.stream.write(this.endline(node, options, level));
            options.state = WriterState.None;
            return this.closeNode(node, options, level);
        };
        XMLStreamWriter.prototype.element = function(node, options, level) {
            var att, child, childNodeCount, firstChildNode, j, len, name, prettySuppressed, ref, ref1;
            level || (level = 0);
            this.openNode(node, options, level);
            options.state = WriterState.OpenTag;
            this.stream.write(this.indent(node, options, level) + "<" + node.name);
            ref = node.attribs;
            for(name in ref){
                if (!hasProp.call(ref, name)) continue;
                att = ref[name];
                this.attribute(att, options, level);
            }
            childNodeCount = node.children.length;
            firstChildNode = childNodeCount === 0 ? null : node.children[0];
            if (childNodeCount === 0 || node.children.every(function(e) {
                return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === "";
            })) {
                if (options.allowEmpty) {
                    this.stream.write(">");
                    options.state = WriterState.CloseTag;
                    this.stream.write("</" + node.name + ">");
                } else {
                    options.state = WriterState.CloseTag;
                    this.stream.write(options.spaceBeforeSlash + "/>");
                }
            } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
                this.stream.write(">");
                options.state = WriterState.InsideTag;
                options.suppressPrettyCount++;
                prettySuppressed = true;
                this.writeChildNode(firstChildNode, options, level + 1);
                options.suppressPrettyCount--;
                prettySuppressed = false;
                options.state = WriterState.CloseTag;
                this.stream.write("</" + node.name + ">");
            } else {
                this.stream.write(">" + this.endline(node, options, level));
                options.state = WriterState.InsideTag;
                ref1 = node.children;
                for(j = 0, len = ref1.length; j < len; j++){
                    child = ref1[j];
                    this.writeChildNode(child, options, level + 1);
                }
                options.state = WriterState.CloseTag;
                this.stream.write(this.indent(node, options, level) + "</" + node.name + ">");
            }
            this.stream.write(this.endline(node, options, level));
            options.state = WriterState.None;
            return this.closeNode(node, options, level);
        };
        XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.raw = function(node, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.text = function(node, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.dtdElement = function(node, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));
        };
        XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {
            return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));
        };
        return XMLStreamWriter;
    }(XMLWriterBase);
}).call(module.exports);

});



parcelRegister("7W0gJ", function(module, exports) {






// Generated by CoffeeScript 1.12.7
(function() {
    "use strict";
    var bom, defaults, events, isEmpty, processItem, processors, sax, setImmediate, bind = function bind(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    }, extend = function extend(child, parent) {
        for(var key in parent)if (hasProp.call(parent, key)) child[key] = parent[key];
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    }, hasProp = {}.hasOwnProperty;
    sax = (parcelRequire("ciFz4"));
    events = (parcelRequire("jnSzx"));
    bom = (parcelRequire("8OEPz"));
    processors = (parcelRequire("l1QkF"));
    setImmediate = (parcelRequire("3f2cZ")).setImmediate;
    defaults = (parcelRequire("c4Cco")).defaults;
    isEmpty = function isEmpty(thing) {
        return typeof thing === "object" && thing != null && Object.keys(thing).length === 0;
    };
    processItem = function processItem(processors, item, key) {
        var i, len, process;
        for(i = 0, len = processors.length; i < len; i++){
            process = processors[i];
            item = process(item, key);
        }
        return item;
    };
    exports.Parser = function(superClass) {
        extend(Parser, superClass);
        function Parser(opts) {
            this.parseStringPromise = bind(this.parseStringPromise, this);
            this.parseString = bind(this.parseString, this);
            this.reset = bind(this.reset, this);
            this.assignOrPush = bind(this.assignOrPush, this);
            this.processAsync = bind(this.processAsync, this);
            var key, ref, value;
            if (!(this instanceof exports.Parser)) return new exports.Parser(opts);
            this.options = {};
            ref = defaults["0.2"];
            for(key in ref){
                if (!hasProp.call(ref, key)) continue;
                value = ref[key];
                this.options[key] = value;
            }
            for(key in opts){
                if (!hasProp.call(opts, key)) continue;
                value = opts[key];
                this.options[key] = value;
            }
            if (this.options.xmlns) this.options.xmlnskey = this.options.attrkey + "ns";
            if (this.options.normalizeTags) {
                if (!this.options.tagNameProcessors) this.options.tagNameProcessors = [];
                this.options.tagNameProcessors.unshift(processors.normalize);
            }
            this.reset();
        }
        Parser.prototype.processAsync = function() {
            var chunk, err;
            try {
                if (this.remaining.length <= this.options.chunkSize) {
                    chunk = this.remaining;
                    this.remaining = "";
                    this.saxParser = this.saxParser.write(chunk);
                    return this.saxParser.close();
                } else {
                    chunk = this.remaining.substr(0, this.options.chunkSize);
                    this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
                    this.saxParser = this.saxParser.write(chunk);
                    return setImmediate(this.processAsync);
                }
            } catch (error1) {
                err = error1;
                if (!this.saxParser.errThrown) {
                    this.saxParser.errThrown = true;
                    return this.emit(err);
                }
            }
        };
        Parser.prototype.assignOrPush = function(obj, key, newValue) {
            if (!(key in obj)) {
                if (!this.options.explicitArray) return obj[key] = newValue;
                else return obj[key] = [
                    newValue
                ];
            } else {
                if (!(obj[key] instanceof Array)) obj[key] = [
                    obj[key]
                ];
                return obj[key].push(newValue);
            }
        };
        Parser.prototype.reset = function() {
            var attrkey, charkey, ontext, stack;
            this.removeAllListeners();
            this.saxParser = sax.parser(this.options.strict, {
                trim: false,
                normalize: false,
                xmlns: this.options.xmlns
            });
            this.saxParser.errThrown = false;
            this.saxParser.onerror = function(_this) {
                return function(error) {
                    _this.saxParser.resume();
                    if (!_this.saxParser.errThrown) {
                        _this.saxParser.errThrown = true;
                        return _this.emit("error", error);
                    }
                };
            }(this);
            this.saxParser.onend = function(_this) {
                return function() {
                    if (!_this.saxParser.ended) {
                        _this.saxParser.ended = true;
                        return _this.emit("end", _this.resultObject);
                    }
                };
            }(this);
            this.saxParser.ended = false;
            this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
            this.resultObject = null;
            stack = [];
            attrkey = this.options.attrkey;
            charkey = this.options.charkey;
            this.saxParser.onopentag = function(_this) {
                return function(node) {
                    var key, newValue, obj, processedKey, ref;
                    obj = Object.create(null);
                    obj[charkey] = "";
                    if (!_this.options.ignoreAttrs) {
                        ref = node.attributes;
                        for(key in ref){
                            if (!hasProp.call(ref, key)) continue;
                            if (!(attrkey in obj) && !_this.options.mergeAttrs) obj[attrkey] = Object.create(null);
                            newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
                            processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
                            if (_this.options.mergeAttrs) _this.assignOrPush(obj, processedKey, newValue);
                            else obj[attrkey][processedKey] = newValue;
                        }
                    }
                    obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
                    if (_this.options.xmlns) obj[_this.options.xmlnskey] = {
                        uri: node.uri,
                        local: node.local
                    };
                    return stack.push(obj);
                };
            }(this);
            this.saxParser.onclosetag = function(_this) {
                return function() {
                    var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;
                    obj = stack.pop();
                    nodeName = obj["#name"];
                    if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) delete obj["#name"];
                    if (obj.cdata === true) {
                        cdata = obj.cdata;
                        delete obj.cdata;
                    }
                    s = stack[stack.length - 1];
                    if (obj[charkey].match(/^\s*$/) && !cdata) {
                        emptyStr = obj[charkey];
                        delete obj[charkey];
                    } else {
                        if (_this.options.trim) obj[charkey] = obj[charkey].trim();
                        if (_this.options.normalize) obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
                        obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
                        if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) obj = obj[charkey];
                    }
                    if (isEmpty(obj)) {
                        if (typeof _this.options.emptyTag === "function") obj = _this.options.emptyTag();
                        else obj = _this.options.emptyTag !== "" ? _this.options.emptyTag : emptyStr;
                    }
                    if (_this.options.validator != null) {
                        xpath = "/" + (function() {
                            var i, len, results;
                            results = [];
                            for(i = 0, len = stack.length; i < len; i++){
                                node = stack[i];
                                results.push(node["#name"]);
                            }
                            return results;
                        })().concat(nodeName).join("/");
                        (function() {
                            var err;
                            try {
                                return obj = _this.options.validator(xpath, s && s[nodeName], obj);
                            } catch (error1) {
                                err = error1;
                                return _this.emit("error", err);
                            }
                        })();
                    }
                    if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === "object") {
                        if (!_this.options.preserveChildrenOrder) {
                            node = Object.create(null);
                            if (_this.options.attrkey in obj) {
                                node[_this.options.attrkey] = obj[_this.options.attrkey];
                                delete obj[_this.options.attrkey];
                            }
                            if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                                node[_this.options.charkey] = obj[_this.options.charkey];
                                delete obj[_this.options.charkey];
                            }
                            if (Object.getOwnPropertyNames(obj).length > 0) node[_this.options.childkey] = obj;
                            obj = node;
                        } else if (s) {
                            s[_this.options.childkey] = s[_this.options.childkey] || [];
                            objClone = Object.create(null);
                            for(key in obj){
                                if (!hasProp.call(obj, key)) continue;
                                objClone[key] = obj[key];
                            }
                            s[_this.options.childkey].push(objClone);
                            delete obj["#name"];
                            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) obj = obj[charkey];
                        }
                    }
                    if (stack.length > 0) return _this.assignOrPush(s, nodeName, obj);
                    else {
                        if (_this.options.explicitRoot) {
                            old = obj;
                            obj = Object.create(null);
                            obj[nodeName] = old;
                        }
                        _this.resultObject = obj;
                        _this.saxParser.ended = true;
                        return _this.emit("end", _this.resultObject);
                    }
                };
            }(this);
            ontext = function(_this) {
                return function(text) {
                    var charChild, s;
                    s = stack[stack.length - 1];
                    if (s) {
                        s[charkey] += text;
                        if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, "").trim() !== "")) {
                            s[_this.options.childkey] = s[_this.options.childkey] || [];
                            charChild = {
                                "#name": "__text__"
                            };
                            charChild[charkey] = text;
                            if (_this.options.normalize) charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
                            s[_this.options.childkey].push(charChild);
                        }
                        return s;
                    }
                };
            }(this);
            this.saxParser.ontext = ontext;
            return this.saxParser.oncdata = function(_this) {
                return function(text) {
                    var s;
                    s = ontext(text);
                    if (s) return s.cdata = true;
                };
            }(this);
        };
        Parser.prototype.parseString = function(str, cb) {
            var err;
            if (cb != null && typeof cb === "function") {
                this.on("end", function(result) {
                    this.reset();
                    return cb(null, result);
                });
                this.on("error", function(err) {
                    this.reset();
                    return cb(err);
                });
            }
            try {
                str = str.toString();
                if (str.trim() === "") {
                    this.emit("end", null);
                    return true;
                }
                str = bom.stripBOM(str);
                if (this.options.async) {
                    this.remaining = str;
                    setImmediate(this.processAsync);
                    return this.saxParser;
                }
                return this.saxParser.write(str).close();
            } catch (error1) {
                err = error1;
                if (!(this.saxParser.errThrown || this.saxParser.ended)) {
                    this.emit("error", err);
                    return this.saxParser.errThrown = true;
                } else if (this.saxParser.ended) throw err;
            }
        };
        Parser.prototype.parseStringPromise = function(str) {
            return new Promise(function(_this) {
                return function(resolve, reject) {
                    return _this.parseString(str, function(err, value) {
                        if (err) return reject(err);
                        else return resolve(value);
                    });
                };
            }(this));
        };
        return Parser;
    }(events);
    exports.parseString = function(str, a, b) {
        var cb, options, parser;
        if (b != null) {
            if (typeof b === "function") cb = b;
            if (typeof a === "object") options = a;
        } else {
            if (typeof a === "function") cb = a;
            options = {};
        }
        parser = new exports.Parser(options);
        return parser.parseString(str, cb);
    };
    exports.parseStringPromise = function(str, a) {
        var options, parser;
        if (typeof a === "object") options = a;
        parser = new exports.Parser(options);
        return parser.parseStringPromise(str);
    };
}).call(this);

});
parcelRegister("ciFz4", function(module, exports) {

var $d6N7B = parcelRequire("d6N7B");
var $8f476859de42b442$require$Buffer = $d6N7B.Buffer;


(function(sax) {
    sax.parser = function(strict, opt) {
        return new SAXParser(strict, opt);
    };
    sax.SAXParser = SAXParser;
    sax.SAXStream = SAXStream;
    sax.createStream = createStream;
    // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
    // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
    // since that's the earliest that a buffer overrun could occur.  This way, checks are
    // as rare as required, but as often as necessary to ensure never crossing this bound.
    // Furthermore, buffers are only tested at most once per write(), so passing a very
    // large string into write() might have undesirable effects, but this is manageable by
    // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
    // edge case, result in creating at most one complete copy of the string passed in.
    // Set to Infinity to have unlimited buffers.
    sax.MAX_BUFFER_LENGTH = 65536;
    var buffers = [
        "comment",
        "sgmlDecl",
        "textNode",
        "tagName",
        "doctype",
        "procInstName",
        "procInstBody",
        "entity",
        "attribName",
        "attribValue",
        "cdata",
        "script"
    ];
    sax.EVENTS = [
        "text",
        "processinginstruction",
        "sgmldeclaration",
        "doctype",
        "comment",
        "opentagstart",
        "attribute",
        "opentag",
        "closetag",
        "opencdata",
        "cdata",
        "closecdata",
        "error",
        "end",
        "ready",
        "script",
        "opennamespace",
        "closenamespace"
    ];
    function SAXParser(strict, opt) {
        if (!(this instanceof SAXParser)) return new SAXParser(strict, opt);
        var parser = this;
        clearBuffers(parser);
        parser.q = parser.c = "";
        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
        parser.opt = opt || {};
        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
        parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
        parser.tags = [];
        parser.closed = parser.closedRoot = parser.sawRoot = false;
        parser.tag = parser.error = null;
        parser.strict = !!strict;
        parser.noscript = !!(strict || parser.opt.noscript);
        parser.state = S.BEGIN;
        parser.strictEntities = parser.opt.strictEntities;
        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
        parser.attribList = [];
        // namespaces form a prototype chain.
        // it always points at the current tag,
        // which protos to its parent tag.
        if (parser.opt.xmlns) parser.ns = Object.create(rootNS);
        // disallow unquoted attribute values if not otherwise configured
        // and strict mode is true
        if (parser.opt.unquotedAttributeValues === undefined) parser.opt.unquotedAttributeValues = !strict;
        // mostly just for error reporting
        parser.trackPosition = parser.opt.position !== false;
        if (parser.trackPosition) parser.position = parser.line = parser.column = 0;
        emit(parser, "onready");
    }
    if (!Object.create) Object.create = function(o) {
        function F() {}
        F.prototype = o;
        var newf = new F();
        return newf;
    };
    if (!Object.keys) Object.keys = function(o) {
        var a = [];
        for(var i in o)if (o.hasOwnProperty(i)) a.push(i);
        return a;
    };
    function checkBufferLength(parser) {
        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
        var maxActual = 0;
        for(var i = 0, l = buffers.length; i < l; i++){
            var len = parser[buffers[i]].length;
            if (len > maxAllowed) // Text/cdata nodes can get big, and since they're buffered,
            // we can get here under normal conditions.
            // Avoid issues by emitting the text node now,
            // so at least it won't get any bigger.
            switch(buffers[i]){
                case "textNode":
                    closeText(parser);
                    break;
                case "cdata":
                    emitNode(parser, "oncdata", parser.cdata);
                    parser.cdata = "";
                    break;
                case "script":
                    emitNode(parser, "onscript", parser.script);
                    parser.script = "";
                    break;
                default:
                    error(parser, "Max buffer length exceeded: " + buffers[i]);
            }
            maxActual = Math.max(maxActual, len);
        }
        // schedule the next check for the earliest possible buffer overrun.
        var m = sax.MAX_BUFFER_LENGTH - maxActual;
        parser.bufferCheckPosition = m + parser.position;
    }
    function clearBuffers(parser) {
        for(var i = 0, l = buffers.length; i < l; i++)parser[buffers[i]] = "";
    }
    function flushBuffers(parser) {
        closeText(parser);
        if (parser.cdata !== "") {
            emitNode(parser, "oncdata", parser.cdata);
            parser.cdata = "";
        }
        if (parser.script !== "") {
            emitNode(parser, "onscript", parser.script);
            parser.script = "";
        }
    }
    SAXParser.prototype = {
        end: function end1() {
            end(this);
        },
        write: write,
        resume: function resume() {
            this.error = null;
            return this;
        },
        close: function close() {
            return this.write(null);
        },
        flush: function flush() {
            flushBuffers(this);
        }
    };
    var Stream;
    try {
        Stream = (parcelRequire("e1HPL")).Stream;
    } catch (ex) {
        Stream = function Stream() {};
    }
    if (!Stream) Stream = function Stream() {};
    var streamWraps = sax.EVENTS.filter(function(ev) {
        return ev !== "error" && ev !== "end";
    });
    function createStream(strict, opt) {
        return new SAXStream(strict, opt);
    }
    function SAXStream(strict, opt) {
        if (!(this instanceof SAXStream)) return new SAXStream(strict, opt);
        Stream.apply(this);
        this._parser = new SAXParser(strict, opt);
        this.writable = true;
        this.readable = true;
        var me = this;
        this._parser.onend = function() {
            me.emit("end");
        };
        this._parser.onerror = function(er) {
            me.emit("error", er);
            // if didn't throw, then means error was handled.
            // go ahead and clear error, so we can write again.
            me._parser.error = null;
        };
        this._decoder = null;
        streamWraps.forEach(function(ev) {
            Object.defineProperty(me, "on" + ev, {
                get: function get() {
                    return me._parser["on" + ev];
                },
                set: function set(h) {
                    if (!h) {
                        me.removeAllListeners(ev);
                        me._parser["on" + ev] = h;
                        return h;
                    }
                    me.on(ev, h);
                },
                enumerable: true,
                configurable: false
            });
        });
    }
    SAXStream.prototype = Object.create(Stream.prototype, {
        constructor: {
            value: SAXStream
        }
    });
    SAXStream.prototype.write = function(data) {
        if (typeof $8f476859de42b442$require$Buffer === "function" && typeof $8f476859de42b442$require$Buffer.isBuffer === "function" && $8f476859de42b442$require$Buffer.isBuffer(data)) {
            if (!this._decoder) {
                var SD = (parcelRequire("3LCl6")).StringDecoder;
                this._decoder = new SD("utf8");
            }
            data = this._decoder.write(data);
        }
        this._parser.write(data.toString());
        this.emit("data", data);
        return true;
    };
    SAXStream.prototype.end = function(chunk) {
        if (chunk && chunk.length) this.write(chunk);
        this._parser.end();
        return true;
    };
    SAXStream.prototype.on = function(ev, handler) {
        var me = this;
        if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) me._parser["on" + ev] = function() {
            var args = arguments.length === 1 ? [
                arguments[0]
            ] : Array.apply(null, arguments);
            args.splice(0, 0, ev);
            me.emit.apply(me, args);
        };
        return Stream.prototype.on.call(me, ev, handler);
    };
    // this really needs to be replaced with character classes.
    // XML allows all manner of ridiculous numbers and digits.
    var CDATA = "[CDATA[";
    var DOCTYPE = "DOCTYPE";
    var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
    var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
    var rootNS = {
        xml: XML_NAMESPACE,
        xmlns: XMLNS_NAMESPACE
    };
    // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
    // This implementation works on strings, a single character at a time
    // as such, it cannot ever support astral-plane characters (10000-EFFFF)
    // without a significant breaking change to either this  parser, or the
    // JavaScript language.  Implementation of an emoji-capable xml parser
    // is left as an exercise for the reader.
    var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
    var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
    var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
    var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
    function isWhitespace(c) {
        return c === " " || c === "\n" || c === "\r" || c === "	";
    }
    function isQuote(c) {
        return c === '"' || c === "'";
    }
    function isAttribEnd(c) {
        return c === ">" || isWhitespace(c);
    }
    function isMatch(regex, c) {
        return regex.test(c);
    }
    function notMatch(regex, c) {
        return !isMatch(regex, c);
    }
    var S = 0;
    sax.STATE = {
        BEGIN: S++,
        BEGIN_WHITESPACE: S++,
        TEXT: S++,
        TEXT_ENTITY: S++,
        OPEN_WAKA: S++,
        SGML_DECL: S++,
        SGML_DECL_QUOTED: S++,
        DOCTYPE: S++,
        DOCTYPE_QUOTED: S++,
        DOCTYPE_DTD: S++,
        DOCTYPE_DTD_QUOTED: S++,
        COMMENT_STARTING: S++,
        COMMENT: S++,
        COMMENT_ENDING: S++,
        COMMENT_ENDED: S++,
        CDATA: S++,
        CDATA_ENDING: S++,
        CDATA_ENDING_2: S++,
        PROC_INST: S++,
        PROC_INST_BODY: S++,
        PROC_INST_ENDING: S++,
        OPEN_TAG: S++,
        OPEN_TAG_SLASH: S++,
        ATTRIB: S++,
        ATTRIB_NAME: S++,
        ATTRIB_NAME_SAW_WHITE: S++,
        ATTRIB_VALUE: S++,
        ATTRIB_VALUE_QUOTED: S++,
        ATTRIB_VALUE_CLOSED: S++,
        ATTRIB_VALUE_UNQUOTED: S++,
        ATTRIB_VALUE_ENTITY_Q: S++,
        ATTRIB_VALUE_ENTITY_U: S++,
        CLOSE_TAG: S++,
        CLOSE_TAG_SAW_WHITE: S++,
        SCRIPT: S++,
        SCRIPT_ENDING: S++ // <script> ... <
    };
    sax.XML_ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'"
    };
    sax.ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'",
        "AElig": 198,
        "Aacute": 193,
        "Acirc": 194,
        "Agrave": 192,
        "Aring": 197,
        "Atilde": 195,
        "Auml": 196,
        "Ccedil": 199,
        "ETH": 208,
        "Eacute": 201,
        "Ecirc": 202,
        "Egrave": 200,
        "Euml": 203,
        "Iacute": 205,
        "Icirc": 206,
        "Igrave": 204,
        "Iuml": 207,
        "Ntilde": 209,
        "Oacute": 211,
        "Ocirc": 212,
        "Ograve": 210,
        "Oslash": 216,
        "Otilde": 213,
        "Ouml": 214,
        "THORN": 222,
        "Uacute": 218,
        "Ucirc": 219,
        "Ugrave": 217,
        "Uuml": 220,
        "Yacute": 221,
        "aacute": 225,
        "acirc": 226,
        "aelig": 230,
        "agrave": 224,
        "aring": 229,
        "atilde": 227,
        "auml": 228,
        "ccedil": 231,
        "eacute": 233,
        "ecirc": 234,
        "egrave": 232,
        "eth": 240,
        "euml": 235,
        "iacute": 237,
        "icirc": 238,
        "igrave": 236,
        "iuml": 239,
        "ntilde": 241,
        "oacute": 243,
        "ocirc": 244,
        "ograve": 242,
        "oslash": 248,
        "otilde": 245,
        "ouml": 246,
        "szlig": 223,
        "thorn": 254,
        "uacute": 250,
        "ucirc": 251,
        "ugrave": 249,
        "uuml": 252,
        "yacute": 253,
        "yuml": 255,
        "copy": 169,
        "reg": 174,
        "nbsp": 160,
        "iexcl": 161,
        "cent": 162,
        "pound": 163,
        "curren": 164,
        "yen": 165,
        "brvbar": 166,
        "sect": 167,
        "uml": 168,
        "ordf": 170,
        "laquo": 171,
        "not": 172,
        "shy": 173,
        "macr": 175,
        "deg": 176,
        "plusmn": 177,
        "sup1": 185,
        "sup2": 178,
        "sup3": 179,
        "acute": 180,
        "micro": 181,
        "para": 182,
        "middot": 183,
        "cedil": 184,
        "ordm": 186,
        "raquo": 187,
        "frac14": 188,
        "frac12": 189,
        "frac34": 190,
        "iquest": 191,
        "times": 215,
        "divide": 247,
        "OElig": 338,
        "oelig": 339,
        "Scaron": 352,
        "scaron": 353,
        "Yuml": 376,
        "fnof": 402,
        "circ": 710,
        "tilde": 732,
        "Alpha": 913,
        "Beta": 914,
        "Gamma": 915,
        "Delta": 916,
        "Epsilon": 917,
        "Zeta": 918,
        "Eta": 919,
        "Theta": 920,
        "Iota": 921,
        "Kappa": 922,
        "Lambda": 923,
        "Mu": 924,
        "Nu": 925,
        "Xi": 926,
        "Omicron": 927,
        "Pi": 928,
        "Rho": 929,
        "Sigma": 931,
        "Tau": 932,
        "Upsilon": 933,
        "Phi": 934,
        "Chi": 935,
        "Psi": 936,
        "Omega": 937,
        "alpha": 945,
        "beta": 946,
        "gamma": 947,
        "delta": 948,
        "epsilon": 949,
        "zeta": 950,
        "eta": 951,
        "theta": 952,
        "iota": 953,
        "kappa": 954,
        "lambda": 955,
        "mu": 956,
        "nu": 957,
        "xi": 958,
        "omicron": 959,
        "pi": 960,
        "rho": 961,
        "sigmaf": 962,
        "sigma": 963,
        "tau": 964,
        "upsilon": 965,
        "phi": 966,
        "chi": 967,
        "psi": 968,
        "omega": 969,
        "thetasym": 977,
        "upsih": 978,
        "piv": 982,
        "ensp": 8194,
        "emsp": 8195,
        "thinsp": 8201,
        "zwnj": 8204,
        "zwj": 8205,
        "lrm": 8206,
        "rlm": 8207,
        "ndash": 8211,
        "mdash": 8212,
        "lsquo": 8216,
        "rsquo": 8217,
        "sbquo": 8218,
        "ldquo": 8220,
        "rdquo": 8221,
        "bdquo": 8222,
        "dagger": 8224,
        "Dagger": 8225,
        "bull": 8226,
        "hellip": 8230,
        "permil": 8240,
        "prime": 8242,
        "Prime": 8243,
        "lsaquo": 8249,
        "rsaquo": 8250,
        "oline": 8254,
        "frasl": 8260,
        "euro": 8364,
        "image": 8465,
        "weierp": 8472,
        "real": 8476,
        "trade": 8482,
        "alefsym": 8501,
        "larr": 8592,
        "uarr": 8593,
        "rarr": 8594,
        "darr": 8595,
        "harr": 8596,
        "crarr": 8629,
        "lArr": 8656,
        "uArr": 8657,
        "rArr": 8658,
        "dArr": 8659,
        "hArr": 8660,
        "forall": 8704,
        "part": 8706,
        "exist": 8707,
        "empty": 8709,
        "nabla": 8711,
        "isin": 8712,
        "notin": 8713,
        "ni": 8715,
        "prod": 8719,
        "sum": 8721,
        "minus": 8722,
        "lowast": 8727,
        "radic": 8730,
        "prop": 8733,
        "infin": 8734,
        "ang": 8736,
        "and": 8743,
        "or": 8744,
        "cap": 8745,
        "cup": 8746,
        "int": 8747,
        "there4": 8756,
        "sim": 8764,
        "cong": 8773,
        "asymp": 8776,
        "ne": 8800,
        "equiv": 8801,
        "le": 8804,
        "ge": 8805,
        "sub": 8834,
        "sup": 8835,
        "nsub": 8836,
        "sube": 8838,
        "supe": 8839,
        "oplus": 8853,
        "otimes": 8855,
        "perp": 8869,
        "sdot": 8901,
        "lceil": 8968,
        "rceil": 8969,
        "lfloor": 8970,
        "rfloor": 8971,
        "lang": 9001,
        "rang": 9002,
        "loz": 9674,
        "spades": 9824,
        "clubs": 9827,
        "hearts": 9829,
        "diams": 9830
    };
    Object.keys(sax.ENTITIES).forEach(function(key) {
        var e = sax.ENTITIES[key];
        var s = typeof e === "number" ? String.fromCharCode(e) : e;
        sax.ENTITIES[key] = s;
    });
    for(var s in sax.STATE)sax.STATE[sax.STATE[s]] = s;
    // shorthand
    S = sax.STATE;
    function emit(parser, event, data) {
        parser[event] && parser[event](data);
    }
    function emitNode(parser, nodeType, data) {
        if (parser.textNode) closeText(parser);
        emit(parser, nodeType, data);
    }
    function closeText(parser) {
        parser.textNode = textopts(parser.opt, parser.textNode);
        if (parser.textNode) emit(parser, "ontext", parser.textNode);
        parser.textNode = "";
    }
    function textopts(opt, text) {
        if (opt.trim) text = text.trim();
        if (opt.normalize) text = text.replace(/\s+/g, " ");
        return text;
    }
    function error(parser, er) {
        closeText(parser);
        if (parser.trackPosition) er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
        er = new Error(er);
        parser.error = er;
        emit(parser, "onerror", er);
        return parser;
    }
    function end(parser) {
        if (parser.sawRoot && !parser.closedRoot) strictFail(parser, "Unclosed root tag");
        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) error(parser, "Unexpected end");
        closeText(parser);
        parser.c = "";
        parser.closed = true;
        emit(parser, "onend");
        SAXParser.call(parser, parser.strict, parser.opt);
        return parser;
    }
    function strictFail(parser, message) {
        if (typeof parser !== "object" || !(parser instanceof SAXParser)) throw new Error("bad call to strictFail");
        if (parser.strict) error(parser, message);
    }
    function newTag(parser) {
        if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
        var parent = parser.tags[parser.tags.length - 1] || parser;
        var tag = parser.tag = {
            name: parser.tagName,
            attributes: {}
        };
        // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
        if (parser.opt.xmlns) tag.ns = parent.ns;
        parser.attribList.length = 0;
        emitNode(parser, "onopentagstart", tag);
    }
    function qname(name, attribute) {
        var i = name.indexOf(":");
        var qualName = i < 0 ? [
            "",
            name
        ] : name.split(":");
        var prefix = qualName[0];
        var local = qualName[1];
        // <x "xmlns"="http://foo">
        if (attribute && name === "xmlns") {
            prefix = "xmlns";
            local = "";
        }
        return {
            prefix: prefix,
            local: local
        };
    }
    function attrib(parser) {
        if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]();
        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
            parser.attribName = parser.attribValue = "";
            return;
        }
        if (parser.opt.xmlns) {
            var qn = qname(parser.attribName, true);
            var prefix = qn.prefix;
            var local = qn.local;
            if (prefix === "xmlns") {
                // namespace binding attribute. push the binding into scope
                if (local === "xml" && parser.attribValue !== XML_NAMESPACE) strictFail(parser, "xml: prefix must be bound to " + XML_NAMESPACE + "\n" + "Actual: " + parser.attribValue);
                else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) strictFail(parser, "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\n" + "Actual: " + parser.attribValue);
                else {
                    var tag = parser.tag;
                    var parent = parser.tags[parser.tags.length - 1] || parser;
                    if (tag.ns === parent.ns) tag.ns = Object.create(parent.ns);
                    tag.ns[local] = parser.attribValue;
                }
            }
            // defer onattribute events until all attributes have been seen
            // so any new bindings can take effect. preserve attribute order
            // so deferred events can be emitted in document order
            parser.attribList.push([
                parser.attribName,
                parser.attribValue
            ]);
        } else {
            // in non-xmlns mode, we can emit the event right away
            parser.tag.attributes[parser.attribName] = parser.attribValue;
            emitNode(parser, "onattribute", {
                name: parser.attribName,
                value: parser.attribValue
            });
        }
        parser.attribName = parser.attribValue = "";
    }
    function openTag(parser, selfClosing) {
        if (parser.opt.xmlns) {
            // emit namespace binding events
            var tag = parser.tag;
            // add namespace info to tag
            var qn = qname(parser.tagName);
            tag.prefix = qn.prefix;
            tag.local = qn.local;
            tag.uri = tag.ns[qn.prefix] || "";
            if (tag.prefix && !tag.uri) {
                strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
                tag.uri = qn.prefix;
            }
            var parent = parser.tags[parser.tags.length - 1] || parser;
            if (tag.ns && parent.ns !== tag.ns) Object.keys(tag.ns).forEach(function(p) {
                emitNode(parser, "onopennamespace", {
                    prefix: p,
                    uri: tag.ns[p]
                });
            });
            // handle deferred onattribute events
            // Note: do not apply default ns to attributes:
            //   http://www.w3.org/TR/REC-xml-names/#defaulting
            for(var i = 0, l = parser.attribList.length; i < l; i++){
                var nv = parser.attribList[i];
                var name = nv[0];
                var value = nv[1];
                var qualName = qname(name, true);
                var prefix = qualName.prefix;
                var local = qualName.local;
                var uri = prefix === "" ? "" : tag.ns[prefix] || "";
                var a = {
                    name: name,
                    value: value,
                    prefix: prefix,
                    local: local,
                    uri: uri
                };
                // if there's any attributes with an undefined namespace,
                // then fail on them now.
                if (prefix && prefix !== "xmlns" && !uri) {
                    strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
                    a.uri = prefix;
                }
                parser.tag.attributes[name] = a;
                emitNode(parser, "onattribute", a);
            }
            parser.attribList.length = 0;
        }
        parser.tag.isSelfClosing = !!selfClosing;
        // process the tag
        parser.sawRoot = true;
        parser.tags.push(parser.tag);
        emitNode(parser, "onopentag", parser.tag);
        if (!selfClosing) {
            // special case for <script> in non-strict mode.
            if (!parser.noscript && parser.tagName.toLowerCase() === "script") parser.state = S.SCRIPT;
            else parser.state = S.TEXT;
            parser.tag = null;
            parser.tagName = "";
        }
        parser.attribName = parser.attribValue = "";
        parser.attribList.length = 0;
    }
    function closeTag(parser) {
        if (!parser.tagName) {
            strictFail(parser, "Weird empty close tag.");
            parser.textNode += "</>";
            parser.state = S.TEXT;
            return;
        }
        if (parser.script) {
            if (parser.tagName !== "script") {
                parser.script += "</" + parser.tagName + ">";
                parser.tagName = "";
                parser.state = S.SCRIPT;
                return;
            }
            emitNode(parser, "onscript", parser.script);
            parser.script = "";
        }
        // first make sure that the closing tag actually exists.
        // <a><b></c></b></a> will close everything, otherwise.
        var t = parser.tags.length;
        var tagName = parser.tagName;
        if (!parser.strict) tagName = tagName[parser.looseCase]();
        var closeTo = tagName;
        while(t--){
            var close = parser.tags[t];
            if (close.name !== closeTo) // fail the first time in strict mode
            strictFail(parser, "Unexpected close tag");
            else break;
        }
        // didn't find it.  we already failed for strict, so just abort.
        if (t < 0) {
            strictFail(parser, "Unmatched closing tag: " + parser.tagName);
            parser.textNode += "</" + parser.tagName + ">";
            parser.state = S.TEXT;
            return;
        }
        parser.tagName = tagName;
        var s = parser.tags.length;
        while(s-- > t){
            var tag = parser.tag = parser.tags.pop();
            parser.tagName = parser.tag.name;
            emitNode(parser, "onclosetag", parser.tagName);
            var x = {};
            for(var i in tag.ns)x[i] = tag.ns[i];
            var parent = parser.tags[parser.tags.length - 1] || parser;
            if (parser.opt.xmlns && tag.ns !== parent.ns) // remove namespace bindings introduced by tag
            Object.keys(tag.ns).forEach(function(p) {
                var n = tag.ns[p];
                emitNode(parser, "onclosenamespace", {
                    prefix: p,
                    uri: n
                });
            });
        }
        if (t === 0) parser.closedRoot = true;
        parser.tagName = parser.attribValue = parser.attribName = "";
        parser.attribList.length = 0;
        parser.state = S.TEXT;
    }
    function parseEntity(parser) {
        var entity = parser.entity;
        var entityLC = entity.toLowerCase();
        var num;
        var numStr = "";
        if (parser.ENTITIES[entity]) return parser.ENTITIES[entity];
        if (parser.ENTITIES[entityLC]) return parser.ENTITIES[entityLC];
        entity = entityLC;
        if (entity.charAt(0) === "#") {
            if (entity.charAt(1) === "x") {
                entity = entity.slice(2);
                num = parseInt(entity, 16);
                numStr = num.toString(16);
            } else {
                entity = entity.slice(1);
                num = parseInt(entity, 10);
                numStr = num.toString(10);
            }
        }
        entity = entity.replace(/^0+/, "");
        if (isNaN(num) || numStr.toLowerCase() !== entity) {
            strictFail(parser, "Invalid character entity");
            return "&" + parser.entity + ";";
        }
        return String.fromCodePoint(num);
    }
    function beginWhiteSpace(parser, c) {
        if (c === "<") {
            parser.state = S.OPEN_WAKA;
            parser.startTagPosition = parser.position;
        } else if (!isWhitespace(c)) {
            // have to process this as a text node.
            // weird, but happens.
            strictFail(parser, "Non-whitespace before first tag.");
            parser.textNode = c;
            parser.state = S.TEXT;
        }
    }
    function charAt(chunk, i) {
        var result = "";
        if (i < chunk.length) result = chunk.charAt(i);
        return result;
    }
    function write(chunk) {
        var parser = this;
        if (this.error) throw this.error;
        if (parser.closed) return error(parser, "Cannot write after close. Assign an onready handler.");
        if (chunk === null) return end(parser);
        if (typeof chunk === "object") chunk = chunk.toString();
        var i = 0;
        var c = "";
        while(true){
            c = charAt(chunk, i++);
            parser.c = c;
            if (!c) break;
            if (parser.trackPosition) {
                parser.position++;
                if (c === "\n") {
                    parser.line++;
                    parser.column = 0;
                } else parser.column++;
            }
            switch(parser.state){
                case S.BEGIN:
                    parser.state = S.BEGIN_WHITESPACE;
                    if (c === "\uFEFF") continue;
                    beginWhiteSpace(parser, c);
                    continue;
                case S.BEGIN_WHITESPACE:
                    beginWhiteSpace(parser, c);
                    continue;
                case S.TEXT:
                    if (parser.sawRoot && !parser.closedRoot) {
                        var starti = i - 1;
                        while(c && c !== "<" && c !== "&"){
                            c = charAt(chunk, i++);
                            if (c && parser.trackPosition) {
                                parser.position++;
                                if (c === "\n") {
                                    parser.line++;
                                    parser.column = 0;
                                } else parser.column++;
                            }
                        }
                        parser.textNode += chunk.substring(starti, i - 1);
                    }
                    if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                        parser.state = S.OPEN_WAKA;
                        parser.startTagPosition = parser.position;
                    } else {
                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) strictFail(parser, "Text data outside of root node.");
                        if (c === "&") parser.state = S.TEXT_ENTITY;
                        else parser.textNode += c;
                    }
                    continue;
                case S.SCRIPT:
                    // only non-strict
                    if (c === "<") parser.state = S.SCRIPT_ENDING;
                    else parser.script += c;
                    continue;
                case S.SCRIPT_ENDING:
                    if (c === "/") parser.state = S.CLOSE_TAG;
                    else {
                        parser.script += "<" + c;
                        parser.state = S.SCRIPT;
                    }
                    continue;
                case S.OPEN_WAKA:
                    // either a /, ?, !, or text is coming next.
                    if (c === "!") {
                        parser.state = S.SGML_DECL;
                        parser.sgmlDecl = "";
                    } else if (isWhitespace(c)) ;
                    else if (isMatch(nameStart, c)) {
                        parser.state = S.OPEN_TAG;
                        parser.tagName = c;
                    } else if (c === "/") {
                        parser.state = S.CLOSE_TAG;
                        parser.tagName = "";
                    } else if (c === "?") {
                        parser.state = S.PROC_INST;
                        parser.procInstName = parser.procInstBody = "";
                    } else {
                        strictFail(parser, "Unencoded <");
                        // if there was some whitespace, then add that in.
                        if (parser.startTagPosition + 1 < parser.position) {
                            var pad = parser.position - parser.startTagPosition;
                            c = new Array(pad).join(" ") + c;
                        }
                        parser.textNode += "<" + c;
                        parser.state = S.TEXT;
                    }
                    continue;
                case S.SGML_DECL:
                    if (parser.sgmlDecl + c === "--") {
                        parser.state = S.COMMENT;
                        parser.comment = "";
                        parser.sgmlDecl = "";
                        continue;
                    }
                    if (parser.doctype && parser.doctype !== true && parser.sgmlDecl) {
                        parser.state = S.DOCTYPE_DTD;
                        parser.doctype += "<!" + parser.sgmlDecl + c;
                        parser.sgmlDecl = "";
                    } else if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                        emitNode(parser, "onopencdata");
                        parser.state = S.CDATA;
                        parser.sgmlDecl = "";
                        parser.cdata = "";
                    } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                        parser.state = S.DOCTYPE;
                        if (parser.doctype || parser.sawRoot) strictFail(parser, "Inappropriately located doctype declaration");
                        parser.doctype = "";
                        parser.sgmlDecl = "";
                    } else if (c === ">") {
                        emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                        parser.sgmlDecl = "";
                        parser.state = S.TEXT;
                    } else if (isQuote(c)) {
                        parser.state = S.SGML_DECL_QUOTED;
                        parser.sgmlDecl += c;
                    } else parser.sgmlDecl += c;
                    continue;
                case S.SGML_DECL_QUOTED:
                    if (c === parser.q) {
                        parser.state = S.SGML_DECL;
                        parser.q = "";
                    }
                    parser.sgmlDecl += c;
                    continue;
                case S.DOCTYPE:
                    if (c === ">") {
                        parser.state = S.TEXT;
                        emitNode(parser, "ondoctype", parser.doctype);
                        parser.doctype = true // just remember that we saw it.
                        ;
                    } else {
                        parser.doctype += c;
                        if (c === "[") parser.state = S.DOCTYPE_DTD;
                        else if (isQuote(c)) {
                            parser.state = S.DOCTYPE_QUOTED;
                            parser.q = c;
                        }
                    }
                    continue;
                case S.DOCTYPE_QUOTED:
                    parser.doctype += c;
                    if (c === parser.q) {
                        parser.q = "";
                        parser.state = S.DOCTYPE;
                    }
                    continue;
                case S.DOCTYPE_DTD:
                    if (c === "]") {
                        parser.doctype += c;
                        parser.state = S.DOCTYPE;
                    } else if (c === "<") {
                        parser.state = S.OPEN_WAKA;
                        parser.startTagPosition = parser.position;
                    } else if (isQuote(c)) {
                        parser.doctype += c;
                        parser.state = S.DOCTYPE_DTD_QUOTED;
                        parser.q = c;
                    } else parser.doctype += c;
                    continue;
                case S.DOCTYPE_DTD_QUOTED:
                    parser.doctype += c;
                    if (c === parser.q) {
                        parser.state = S.DOCTYPE_DTD;
                        parser.q = "";
                    }
                    continue;
                case S.COMMENT:
                    if (c === "-") parser.state = S.COMMENT_ENDING;
                    else parser.comment += c;
                    continue;
                case S.COMMENT_ENDING:
                    if (c === "-") {
                        parser.state = S.COMMENT_ENDED;
                        parser.comment = textopts(parser.opt, parser.comment);
                        if (parser.comment) emitNode(parser, "oncomment", parser.comment);
                        parser.comment = "";
                    } else {
                        parser.comment += "-" + c;
                        parser.state = S.COMMENT;
                    }
                    continue;
                case S.COMMENT_ENDED:
                    if (c !== ">") {
                        strictFail(parser, "Malformed comment");
                        // allow <!-- blah -- bloo --> in non-strict mode,
                        // which is a comment of " blah -- bloo "
                        parser.comment += "--" + c;
                        parser.state = S.COMMENT;
                    } else if (parser.doctype && parser.doctype !== true) parser.state = S.DOCTYPE_DTD;
                    else parser.state = S.TEXT;
                    continue;
                case S.CDATA:
                    if (c === "]") parser.state = S.CDATA_ENDING;
                    else parser.cdata += c;
                    continue;
                case S.CDATA_ENDING:
                    if (c === "]") parser.state = S.CDATA_ENDING_2;
                    else {
                        parser.cdata += "]" + c;
                        parser.state = S.CDATA;
                    }
                    continue;
                case S.CDATA_ENDING_2:
                    if (c === ">") {
                        if (parser.cdata) emitNode(parser, "oncdata", parser.cdata);
                        emitNode(parser, "onclosecdata");
                        parser.cdata = "";
                        parser.state = S.TEXT;
                    } else if (c === "]") parser.cdata += "]";
                    else {
                        parser.cdata += "]]" + c;
                        parser.state = S.CDATA;
                    }
                    continue;
                case S.PROC_INST:
                    if (c === "?") parser.state = S.PROC_INST_ENDING;
                    else if (isWhitespace(c)) parser.state = S.PROC_INST_BODY;
                    else parser.procInstName += c;
                    continue;
                case S.PROC_INST_BODY:
                    if (!parser.procInstBody && isWhitespace(c)) continue;
                    else if (c === "?") parser.state = S.PROC_INST_ENDING;
                    else parser.procInstBody += c;
                    continue;
                case S.PROC_INST_ENDING:
                    if (c === ">") {
                        emitNode(parser, "onprocessinginstruction", {
                            name: parser.procInstName,
                            body: parser.procInstBody
                        });
                        parser.procInstName = parser.procInstBody = "";
                        parser.state = S.TEXT;
                    } else {
                        parser.procInstBody += "?" + c;
                        parser.state = S.PROC_INST_BODY;
                    }
                    continue;
                case S.OPEN_TAG:
                    if (isMatch(nameBody, c)) parser.tagName += c;
                    else {
                        newTag(parser);
                        if (c === ">") openTag(parser);
                        else if (c === "/") parser.state = S.OPEN_TAG_SLASH;
                        else {
                            if (!isWhitespace(c)) strictFail(parser, "Invalid character in tag name");
                            parser.state = S.ATTRIB;
                        }
                    }
                    continue;
                case S.OPEN_TAG_SLASH:
                    if (c === ">") {
                        openTag(parser, true);
                        closeTag(parser);
                    } else {
                        strictFail(parser, "Forward-slash in opening tag not followed by >");
                        parser.state = S.ATTRIB;
                    }
                    continue;
                case S.ATTRIB:
                    // haven't read the attribute name yet.
                    if (isWhitespace(c)) continue;
                    else if (c === ">") openTag(parser);
                    else if (c === "/") parser.state = S.OPEN_TAG_SLASH;
                    else if (isMatch(nameStart, c)) {
                        parser.attribName = c;
                        parser.attribValue = "";
                        parser.state = S.ATTRIB_NAME;
                    } else strictFail(parser, "Invalid attribute name");
                    continue;
                case S.ATTRIB_NAME:
                    if (c === "=") parser.state = S.ATTRIB_VALUE;
                    else if (c === ">") {
                        strictFail(parser, "Attribute without value");
                        parser.attribValue = parser.attribName;
                        attrib(parser);
                        openTag(parser);
                    } else if (isWhitespace(c)) parser.state = S.ATTRIB_NAME_SAW_WHITE;
                    else if (isMatch(nameBody, c)) parser.attribName += c;
                    else strictFail(parser, "Invalid attribute name");
                    continue;
                case S.ATTRIB_NAME_SAW_WHITE:
                    if (c === "=") parser.state = S.ATTRIB_VALUE;
                    else if (isWhitespace(c)) continue;
                    else {
                        strictFail(parser, "Attribute without value");
                        parser.tag.attributes[parser.attribName] = "";
                        parser.attribValue = "";
                        emitNode(parser, "onattribute", {
                            name: parser.attribName,
                            value: ""
                        });
                        parser.attribName = "";
                        if (c === ">") openTag(parser);
                        else if (isMatch(nameStart, c)) {
                            parser.attribName = c;
                            parser.state = S.ATTRIB_NAME;
                        } else {
                            strictFail(parser, "Invalid attribute name");
                            parser.state = S.ATTRIB;
                        }
                    }
                    continue;
                case S.ATTRIB_VALUE:
                    if (isWhitespace(c)) continue;
                    else if (isQuote(c)) {
                        parser.q = c;
                        parser.state = S.ATTRIB_VALUE_QUOTED;
                    } else {
                        if (!parser.opt.unquotedAttributeValues) error(parser, "Unquoted attribute value");
                        parser.state = S.ATTRIB_VALUE_UNQUOTED;
                        parser.attribValue = c;
                    }
                    continue;
                case S.ATTRIB_VALUE_QUOTED:
                    if (c !== parser.q) {
                        if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                        else parser.attribValue += c;
                        continue;
                    }
                    attrib(parser);
                    parser.q = "";
                    parser.state = S.ATTRIB_VALUE_CLOSED;
                    continue;
                case S.ATTRIB_VALUE_CLOSED:
                    if (isWhitespace(c)) parser.state = S.ATTRIB;
                    else if (c === ">") openTag(parser);
                    else if (c === "/") parser.state = S.OPEN_TAG_SLASH;
                    else if (isMatch(nameStart, c)) {
                        strictFail(parser, "No whitespace between attributes");
                        parser.attribName = c;
                        parser.attribValue = "";
                        parser.state = S.ATTRIB_NAME;
                    } else strictFail(parser, "Invalid attribute name");
                    continue;
                case S.ATTRIB_VALUE_UNQUOTED:
                    if (!isAttribEnd(c)) {
                        if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_U;
                        else parser.attribValue += c;
                        continue;
                    }
                    attrib(parser);
                    if (c === ">") openTag(parser);
                    else parser.state = S.ATTRIB;
                    continue;
                case S.CLOSE_TAG:
                    if (!parser.tagName) {
                        if (isWhitespace(c)) continue;
                        else if (notMatch(nameStart, c)) {
                            if (parser.script) {
                                parser.script += "</" + c;
                                parser.state = S.SCRIPT;
                            } else strictFail(parser, "Invalid tagname in closing tag.");
                        } else parser.tagName = c;
                    } else if (c === ">") closeTag(parser);
                    else if (isMatch(nameBody, c)) parser.tagName += c;
                    else if (parser.script) {
                        parser.script += "</" + parser.tagName;
                        parser.tagName = "";
                        parser.state = S.SCRIPT;
                    } else {
                        if (!isWhitespace(c)) strictFail(parser, "Invalid tagname in closing tag");
                        parser.state = S.CLOSE_TAG_SAW_WHITE;
                    }
                    continue;
                case S.CLOSE_TAG_SAW_WHITE:
                    if (isWhitespace(c)) continue;
                    if (c === ">") closeTag(parser);
                    else strictFail(parser, "Invalid characters in closing tag");
                    continue;
                case S.TEXT_ENTITY:
                case S.ATTRIB_VALUE_ENTITY_Q:
                case S.ATTRIB_VALUE_ENTITY_U:
                    var returnState;
                    var buffer;
                    switch(parser.state){
                        case S.TEXT_ENTITY:
                            returnState = S.TEXT;
                            buffer = "textNode";
                            break;
                        case S.ATTRIB_VALUE_ENTITY_Q:
                            returnState = S.ATTRIB_VALUE_QUOTED;
                            buffer = "attribValue";
                            break;
                        case S.ATTRIB_VALUE_ENTITY_U:
                            returnState = S.ATTRIB_VALUE_UNQUOTED;
                            buffer = "attribValue";
                            break;
                    }
                    if (c === ";") {
                        var parsedEntity = parseEntity(parser);
                        if (parser.opt.unparsedEntities && !Object.values(sax.XML_ENTITIES).includes(parsedEntity)) {
                            parser.entity = "";
                            parser.state = returnState;
                            parser.write(parsedEntity);
                        } else {
                            parser[buffer] += parsedEntity;
                            parser.entity = "";
                            parser.state = returnState;
                        }
                    } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) parser.entity += c;
                    else {
                        strictFail(parser, "Invalid character in entity name");
                        parser[buffer] += "&" + parser.entity + c;
                        parser.entity = "";
                        parser.state = returnState;
                    }
                    continue;
                default:
                    throw new Error(parser, "Unknown state: " + parser.state);
            }
        } // while
        if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser);
        return parser;
    }
    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */ /* istanbul ignore next */ if (!String.fromCodePoint) (function() {
        var stringFromCharCode = String.fromCharCode;
        var floor = Math.floor;
        var fromCodePoint = function fromCodePoint() {
            var MAX_SIZE = 0x4000;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) return "";
            var result = "";
            while(++index < length){
                var codePoint = Number(arguments[index]);
                if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                codePoint < 0 || // not a valid Unicode code point
                codePoint > 0x10FFFF || // not a valid Unicode code point
                floor(codePoint) !== codePoint // not an integer
                ) throw RangeError("Invalid code point: " + codePoint);
                if (codePoint <= 0xFFFF) codeUnits.push(codePoint);
                else {
                    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                    codePoint -= 0x10000;
                    highSurrogate = (codePoint >> 10) + 0xD800;
                    lowSurrogate = codePoint % 0x400 + 0xDC00;
                    codeUnits.push(highSurrogate, lowSurrogate);
                }
                if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                    result += stringFromCharCode.apply(null, codeUnits);
                    codeUnits.length = 0;
                }
            }
            return result;
        };
        /* istanbul ignore next */ if (Object.defineProperty) Object.defineProperty(String, "fromCodePoint", {
            value: fromCodePoint,
            configurable: true,
            writable: true
        });
        else String.fromCodePoint = fromCodePoint;
    })();
})(module.exports);

});
parcelRegister("e1HPL", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = $a363293571149593$var$Stream;

var $jnSzx = parcelRequire("jnSzx");
var $a363293571149593$require$EE = $jnSzx.EventEmitter;

var $4oIhJ = parcelRequire("4oIhJ");
$4oIhJ($a363293571149593$var$Stream, $a363293571149593$require$EE);

$a363293571149593$var$Stream.Readable = (parcelRequire("irtPM"));

$a363293571149593$var$Stream.Writable = (parcelRequire("9XMVX"));

$a363293571149593$var$Stream.Duplex = (parcelRequire("kDi9T"));

$a363293571149593$var$Stream.Transform = (parcelRequire("l7MCq"));

$a363293571149593$var$Stream.PassThrough = (parcelRequire("4fczT"));

$a363293571149593$var$Stream.finished = (parcelRequire("cex0t"));

$a363293571149593$var$Stream.pipeline = (parcelRequire("5a8LX"));
// Backwards-compat with node 0.4.x
$a363293571149593$var$Stream.Stream = $a363293571149593$var$Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function $a363293571149593$var$Stream() {
    $a363293571149593$require$EE.call(this);
}
$a363293571149593$var$Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on("data", ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on("drain", ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if ($a363293571149593$require$EE.listenerCount(this, "error") === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

});
parcelRegister("irtPM", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $1s5sD = parcelRequire("1s5sD");
"use strict";
module.exports = $d6d1e4138a672680$var$Readable;
/*<replacement>*/ var $d6d1e4138a672680$var$Duplex;
/*</replacement>*/ $d6d1e4138a672680$var$Readable.ReadableState = $d6d1e4138a672680$var$ReadableState;

var $jnSzx = parcelRequire("jnSzx");
var $d6d1e4138a672680$require$EE = $jnSzx.EventEmitter;
var $d6d1e4138a672680$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $7jRdr = parcelRequire("7jRdr");

var $d6N7B = parcelRequire("d6N7B");
var $d6d1e4138a672680$require$Buffer = $d6N7B.Buffer;
var $d6d1e4138a672680$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $d6d1e4138a672680$var$_uint8ArrayToBuffer(chunk) {
    return $d6d1e4138a672680$require$Buffer.from(chunk);
}
function $d6d1e4138a672680$var$_isUint8Array(obj) {
    return $d6d1e4138a672680$require$Buffer.isBuffer(obj) || obj instanceof $d6d1e4138a672680$var$OurUint8Array;
}

var $69mun = parcelRequire("69mun");
var $d6d1e4138a672680$var$debug;
if ($69mun && $69mun.debuglog) $d6d1e4138a672680$var$debug = $69mun.debuglog("stream");
else $d6d1e4138a672680$var$debug = function debug() {};

var $arrSa = parcelRequire("arrSa");

var $2W1t1 = parcelRequire("2W1t1");

var $cMQLD = parcelRequire("cMQLD");
var $d6d1e4138a672680$var$getHighWaterMark = $cMQLD.getHighWaterMark;

var $lk2dN = parcelRequire("lk2dN");
var $d6d1e4138a672680$require$_require$codes = $lk2dN.codes;
var $d6d1e4138a672680$var$ERR_INVALID_ARG_TYPE = $d6d1e4138a672680$require$_require$codes.ERR_INVALID_ARG_TYPE, $d6d1e4138a672680$var$ERR_STREAM_PUSH_AFTER_EOF = $d6d1e4138a672680$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $d6d1e4138a672680$var$ERR_METHOD_NOT_IMPLEMENTED = $d6d1e4138a672680$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $d6d1e4138a672680$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $d6d1e4138a672680$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var $d6d1e4138a672680$var$StringDecoder;
var $d6d1e4138a672680$var$createReadableStreamAsyncIterator;
var $d6d1e4138a672680$var$from;

(parcelRequire("4oIhJ"))($d6d1e4138a672680$var$Readable, $7jRdr);
var $d6d1e4138a672680$var$errorOrDestroy = $2W1t1.errorOrDestroy;
var $d6d1e4138a672680$var$kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function $d6d1e4138a672680$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $d6d1e4138a672680$var$ReadableState(options, stream, isDuplex) {
    $d6d1e4138a672680$var$Duplex = $d6d1e4138a672680$var$Duplex || (parcelRequire("kDi9T"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $d6d1e4138a672680$var$Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $d6d1e4138a672680$var$getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $arrSa();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$d6d1e4138a672680$var$StringDecoder) $d6d1e4138a672680$var$StringDecoder = (parcelRequire("3LCl6")).StringDecoder;
        this.decoder = new $d6d1e4138a672680$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $d6d1e4138a672680$var$Readable(options) {
    $d6d1e4138a672680$var$Duplex = $d6d1e4138a672680$var$Duplex || (parcelRequire("kDi9T"));
    if (!(this instanceof $d6d1e4138a672680$var$Readable)) return new $d6d1e4138a672680$var$Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $d6d1e4138a672680$var$Duplex;
    this._readableState = new $d6d1e4138a672680$var$ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    $7jRdr.call(this);
}
Object.defineProperty($d6d1e4138a672680$var$Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$d6d1e4138a672680$var$Readable.prototype.destroy = $2W1t1.destroy;
$d6d1e4138a672680$var$Readable.prototype._undestroy = $2W1t1.undestroy;
$d6d1e4138a672680$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$d6d1e4138a672680$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $d6d1e4138a672680$require$Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $d6d1e4138a672680$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
$d6d1e4138a672680$var$Readable.prototype.unshift = function(chunk) {
    return $d6d1e4138a672680$var$readableAddChunk(this, chunk, null, true, false);
};
function $d6d1e4138a672680$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $d6d1e4138a672680$var$debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $d6d1e4138a672680$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $d6d1e4138a672680$var$chunkInvalid(state, chunk);
        if (er) $d6d1e4138a672680$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== $d6d1e4138a672680$require$Buffer.prototype) chunk = $d6d1e4138a672680$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $d6d1e4138a672680$var$errorOrDestroy(stream, new $d6d1e4138a672680$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $d6d1e4138a672680$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $d6d1e4138a672680$var$errorOrDestroy(stream, new $d6d1e4138a672680$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $d6d1e4138a672680$var$addChunk(stream, state, chunk, false);
                    else $d6d1e4138a672680$var$maybeReadMore(stream, state);
                } else $d6d1e4138a672680$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $d6d1e4138a672680$var$maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $d6d1e4138a672680$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $d6d1e4138a672680$var$emitReadable(stream);
    }
    $d6d1e4138a672680$var$maybeReadMore(stream, state);
}
function $d6d1e4138a672680$var$chunkInvalid(state, chunk) {
    var er;
    if (!$d6d1e4138a672680$var$_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new $d6d1e4138a672680$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
$d6d1e4138a672680$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};

// backwards compatibility.
$d6d1e4138a672680$var$Readable.prototype.setEncoding = function(enc) {
    if (!$d6d1e4138a672680$var$StringDecoder) $d6d1e4138a672680$var$StringDecoder = (parcelRequire("3LCl6")).StringDecoder;
    var decoder = new $d6d1e4138a672680$var$StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var $d6d1e4138a672680$var$MAX_HWM = 0x40000000;
function $d6d1e4138a672680$var$computeNewHighWaterMark(n) {
    if (n >= $d6d1e4138a672680$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $d6d1e4138a672680$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $d6d1e4138a672680$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $d6d1e4138a672680$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
$d6d1e4138a672680$var$Readable.prototype.read = function(n) {
    $d6d1e4138a672680$var$debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $d6d1e4138a672680$var$debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) $d6d1e4138a672680$var$endReadable(this);
        else $d6d1e4138a672680$var$emitReadable(this);
        return null;
    }
    n = $d6d1e4138a672680$var$howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $d6d1e4138a672680$var$endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $d6d1e4138a672680$var$debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $d6d1e4138a672680$var$debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $d6d1e4138a672680$var$debug("reading or ended", doRead);
    } else if (doRead) {
        $d6d1e4138a672680$var$debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $d6d1e4138a672680$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $d6d1e4138a672680$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $d6d1e4138a672680$var$endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function $d6d1e4138a672680$var$onEofChunk(stream, state) {
    $d6d1e4138a672680$var$debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $d6d1e4138a672680$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $d6d1e4138a672680$var$emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $d6d1e4138a672680$var$emitReadable(stream) {
    var state = stream._readableState;
    $d6d1e4138a672680$var$debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $d6d1e4138a672680$var$debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        $1s5sD.nextTick($d6d1e4138a672680$var$emitReadable_, stream);
    }
}
function $d6d1e4138a672680$var$emitReadable_(stream) {
    var state = stream._readableState;
    $d6d1e4138a672680$var$debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $d6d1e4138a672680$var$flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $d6d1e4138a672680$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $1s5sD.nextTick($d6d1e4138a672680$var$maybeReadMore_, stream, state);
    }
}
function $d6d1e4138a672680$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $d6d1e4138a672680$var$debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$d6d1e4138a672680$var$Readable.prototype._read = function(n) {
    $d6d1e4138a672680$var$errorOrDestroy(this, new $d6d1e4138a672680$var$ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
$d6d1e4138a672680$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $d6d1e4138a672680$var$debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $1s5sD.stdout && dest !== $1s5sD.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $1s5sD.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $d6d1e4138a672680$var$debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $d6d1e4138a672680$var$debug("onend");
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $d6d1e4138a672680$var$pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        $d6d1e4138a672680$var$debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        $d6d1e4138a672680$var$debug("ondata");
        var ret = dest.write(chunk);
        $d6d1e4138a672680$var$debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $d6d1e4138a672680$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $d6d1e4138a672680$var$debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $d6d1e4138a672680$var$debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if ($d6d1e4138a672680$var$EElistenerCount(dest, "error") === 0) $d6d1e4138a672680$var$errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    $d6d1e4138a672680$var$prependListener(dest, "error", onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        $d6d1e4138a672680$var$debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        $d6d1e4138a672680$var$debug("unpipe");
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $d6d1e4138a672680$var$debug("pipe resume");
        src.resume();
    }
    return dest;
};
function $d6d1e4138a672680$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $d6d1e4138a672680$var$debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $d6d1e4138a672680$var$EElistenerCount(src, "data")) {
            state.flowing = true;
            $d6d1e4138a672680$var$flow(src);
        }
    };
}
$d6d1e4138a672680$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = $d6d1e4138a672680$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
$d6d1e4138a672680$var$Readable.prototype.on = function(ev, fn) {
    var res = $7jRdr.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $d6d1e4138a672680$var$debug("on readable", state.length, state.reading);
            if (state.length) $d6d1e4138a672680$var$emitReadable(this);
            else if (!state.reading) $1s5sD.nextTick($d6d1e4138a672680$var$nReadingNextTick, this);
        }
    }
    return res;
};
$d6d1e4138a672680$var$Readable.prototype.addListener = $d6d1e4138a672680$var$Readable.prototype.on;
$d6d1e4138a672680$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $7jRdr.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $1s5sD.nextTick($d6d1e4138a672680$var$updateReadableListening, this);
    return res;
};
$d6d1e4138a672680$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $7jRdr.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $1s5sD.nextTick($d6d1e4138a672680$var$updateReadableListening, this);
    return res;
};
function $d6d1e4138a672680$var$updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function $d6d1e4138a672680$var$nReadingNextTick(self1) {
    $d6d1e4138a672680$var$debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$d6d1e4138a672680$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $d6d1e4138a672680$var$debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $d6d1e4138a672680$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $d6d1e4138a672680$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $1s5sD.nextTick($d6d1e4138a672680$var$resume_, stream, state);
    }
}
function $d6d1e4138a672680$var$resume_(stream, state) {
    $d6d1e4138a672680$var$debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    $d6d1e4138a672680$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$d6d1e4138a672680$var$Readable.prototype.pause = function() {
    $d6d1e4138a672680$var$debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $d6d1e4138a672680$var$debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function $d6d1e4138a672680$var$flow(stream) {
    var state = stream._readableState;
    $d6d1e4138a672680$var$debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$d6d1e4138a672680$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        $d6d1e4138a672680$var$debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        $d6d1e4138a672680$var$debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < $d6d1e4138a672680$var$kProxyEvents.length; n++)stream.on($d6d1e4138a672680$var$kProxyEvents[n], this.emit.bind(this, $d6d1e4138a672680$var$kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $d6d1e4138a672680$var$debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === "function") $d6d1e4138a672680$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($d6d1e4138a672680$var$createReadableStreamAsyncIterator === undefined) $d6d1e4138a672680$var$createReadableStreamAsyncIterator = (parcelRequire("i1UBR"));
    return $d6d1e4138a672680$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($d6d1e4138a672680$var$Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($d6d1e4138a672680$var$Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($d6d1e4138a672680$var$Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
$d6d1e4138a672680$var$Readable._fromList = $d6d1e4138a672680$var$fromList;
Object.defineProperty($d6d1e4138a672680$var$Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $d6d1e4138a672680$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $d6d1e4138a672680$var$endReadable(stream) {
    var state = stream._readableState;
    $d6d1e4138a672680$var$debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $1s5sD.nextTick($d6d1e4138a672680$var$endReadableNT, state, stream);
    }
}
function $d6d1e4138a672680$var$endReadableNT(state, stream) {
    $d6d1e4138a672680$var$debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === "function") $d6d1e4138a672680$var$Readable.from = function(iterable, opts) {
    if ($d6d1e4138a672680$var$from === undefined) $d6d1e4138a672680$var$from = (parcelRequire("9OBDR"));
    return $d6d1e4138a672680$var$from($d6d1e4138a672680$var$Readable, iterable, opts);
};
function $d6d1e4138a672680$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRegister("7jRdr", function(module, exports) {

module.exports = (parcelRequire("jnSzx")).EventEmitter;

});

parcelRegister("arrSa", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");
"use strict";
function $79a20bf494b619e0$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function $79a20bf494b619e0$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? $79a20bf494b619e0$var$ownKeys(Object(source), !0).forEach(function(key) {
            $79a20bf494b619e0$var$_defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : $79a20bf494b619e0$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $79a20bf494b619e0$var$_defineProperty(obj, key, value) {
    key = $79a20bf494b619e0$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $79a20bf494b619e0$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $79a20bf494b619e0$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, $79a20bf494b619e0$var$_toPropertyKey(descriptor.key), descriptor);
    }
}
function $79a20bf494b619e0$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $79a20bf494b619e0$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $79a20bf494b619e0$var$_defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function $79a20bf494b619e0$var$_toPropertyKey(arg) {
    var key = $79a20bf494b619e0$var$_toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : (0, $aDbZK._)(key)) === "symbol" ? key : String(key);
}
function $79a20bf494b619e0$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $d6N7B = parcelRequire("d6N7B");
var $79a20bf494b619e0$var$Buffer = $d6N7B.Buffer;

var $69mun = parcelRequire("69mun");
var $79a20bf494b619e0$var$inspect = $69mun.inspect;
var $79a20bf494b619e0$var$custom = $79a20bf494b619e0$var$inspect && $79a20bf494b619e0$var$inspect.custom || "inspect";
function $79a20bf494b619e0$var$copyBuffer(src, target, offset) {
    $79a20bf494b619e0$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $79a20bf494b619e0$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $79a20bf494b619e0$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $79a20bf494b619e0$var$Buffer.alloc(0);
                var ret = $79a20bf494b619e0$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $79a20bf494b619e0$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $79a20bf494b619e0$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: $79a20bf494b619e0$var$custom,
            value: function value(_, options) {
                return $79a20bf494b619e0$var$inspect(this, $79a20bf494b619e0$var$_objectSpread($79a20bf494b619e0$var$_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRegister("2W1t1", function(module, exports) {

var $1s5sD = parcelRequire("1s5sD");
"use strict";
// undocumented cb() API, needed for core, not for public API
function $223222e3882cf937$var$destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) $1s5sD.nextTick($223222e3882cf937$var$emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $1s5sD.nextTick($223222e3882cf937$var$emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $1s5sD.nextTick($223222e3882cf937$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $1s5sD.nextTick($223222e3882cf937$var$emitErrorAndCloseNT, _this, err);
            } else $1s5sD.nextTick($223222e3882cf937$var$emitCloseNT, _this);
        } else if (cb) {
            $1s5sD.nextTick($223222e3882cf937$var$emitCloseNT, _this);
            cb(err);
        } else $1s5sD.nextTick($223222e3882cf937$var$emitCloseNT, _this);
    });
    return this;
}
function $223222e3882cf937$var$emitErrorAndCloseNT(self, err) {
    $223222e3882cf937$var$emitErrorNT(self, err);
    $223222e3882cf937$var$emitCloseNT(self);
}
function $223222e3882cf937$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function $223222e3882cf937$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $223222e3882cf937$var$emitErrorNT(self, err) {
    self.emit("error", err);
}
function $223222e3882cf937$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: $223222e3882cf937$var$destroy,
    undestroy: $223222e3882cf937$var$undestroy,
    errorOrDestroy: $223222e3882cf937$var$errorOrDestroy
};

});

parcelRegister("cMQLD", function(module, exports) {
"use strict";

var $94f2e63d97e8211c$var$ERR_INVALID_OPT_VALUE = (parcelRequire("lk2dN")).codes.ERR_INVALID_OPT_VALUE;
function $94f2e63d97e8211c$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $94f2e63d97e8211c$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $94f2e63d97e8211c$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new $94f2e63d97e8211c$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $94f2e63d97e8211c$var$getHighWaterMark
};

});
parcelRegister("lk2dN", function(module, exports) {

$parcel$export(module.exports, "codes", function () { return $f85d30606988adff$export$e45cb6485273080e; }, function (v) { return $f85d30606988adff$export$e45cb6485273080e = v; });

var $aDbZK = parcelRequire("aDbZK");
var $f85d30606988adff$export$e45cb6485273080e;
"use strict";
function $f85d30606988adff$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $f85d30606988adff$var$codes = {};
function $f85d30606988adff$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        $f85d30606988adff$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    $f85d30606988adff$var$codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $f85d30606988adff$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $f85d30606988adff$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $f85d30606988adff$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $f85d30606988adff$var$includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$f85d30606988adff$var$createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$f85d30606988adff$var$createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && $f85d30606988adff$var$startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if ($f85d30606988adff$var$endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($f85d30606988adff$var$oneOf(expected, "type"));
    else {
        var type = $f85d30606988adff$var$includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat($f85d30606988adff$var$oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual === "undefined" ? "undefined" : (0, $aDbZK._)(actual));
    return msg;
}, TypeError);
$f85d30606988adff$var$createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
$f85d30606988adff$var$createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
$f85d30606988adff$var$createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
$f85d30606988adff$var$createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
$f85d30606988adff$var$createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
$f85d30606988adff$var$createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
$f85d30606988adff$var$createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
$f85d30606988adff$var$createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
$f85d30606988adff$var$createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
$f85d30606988adff$var$createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
$f85d30606988adff$export$e45cb6485273080e = $f85d30606988adff$var$codes;

});


parcelRegister("kDi9T", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

var $1s5sD = parcelRequire("1s5sD");
"use strict";
/*<replacement>*/ var $f0558919380f32db$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $f0558919380f32db$var$Duplex;

var $irtPM = parcelRequire("irtPM");

var $9XMVX = parcelRequire("9XMVX");

(parcelRequire("4oIhJ"))($f0558919380f32db$var$Duplex, $irtPM);
// Allow the keys array to be GC'ed.
var $f0558919380f32db$var$keys = $f0558919380f32db$var$objectKeys($9XMVX.prototype);
for(var $f0558919380f32db$var$v = 0; $f0558919380f32db$var$v < $f0558919380f32db$var$keys.length; $f0558919380f32db$var$v++){
    var $f0558919380f32db$var$method = $f0558919380f32db$var$keys[$f0558919380f32db$var$v];
    if (!$f0558919380f32db$var$Duplex.prototype[$f0558919380f32db$var$method]) $f0558919380f32db$var$Duplex.prototype[$f0558919380f32db$var$method] = $9XMVX.prototype[$f0558919380f32db$var$method];
}
function $f0558919380f32db$var$Duplex(options) {
    if (!(this instanceof $f0558919380f32db$var$Duplex)) return new $f0558919380f32db$var$Duplex(options);
    $irtPM.call(this, options);
    $9XMVX.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", $f0558919380f32db$var$onend);
        }
    }
}
Object.defineProperty($f0558919380f32db$var$Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($f0558919380f32db$var$Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($f0558919380f32db$var$Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function $f0558919380f32db$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    $1s5sD.nextTick($f0558919380f32db$var$onEndNT, this);
}
function $f0558919380f32db$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($f0558919380f32db$var$Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRegister("9XMVX", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

var $1s5sD = parcelRequire("1s5sD");
"use strict";
module.exports = $740f94fee524995b$var$Writable;
/* <replacement> */ function $740f94fee524995b$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function $740f94fee524995b$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $740f94fee524995b$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $740f94fee524995b$var$Duplex;
/*</replacement>*/ $740f94fee524995b$var$Writable.WritableState = $740f94fee524995b$var$WritableState;

/*<replacement>*/ var $740f94fee524995b$var$internalUtil = {
    deprecate: (parcelRequire("dgJS1"))
};

var $7jRdr = parcelRequire("7jRdr");

var $d6N7B = parcelRequire("d6N7B");
var $740f94fee524995b$require$Buffer = $d6N7B.Buffer;
var $740f94fee524995b$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $740f94fee524995b$var$_uint8ArrayToBuffer(chunk) {
    return $740f94fee524995b$require$Buffer.from(chunk);
}
function $740f94fee524995b$var$_isUint8Array(obj) {
    return $740f94fee524995b$require$Buffer.isBuffer(obj) || obj instanceof $740f94fee524995b$var$OurUint8Array;
}

var $2W1t1 = parcelRequire("2W1t1");

var $cMQLD = parcelRequire("cMQLD");
var $740f94fee524995b$var$getHighWaterMark = $cMQLD.getHighWaterMark;

var $lk2dN = parcelRequire("lk2dN");
var $740f94fee524995b$require$_require$codes = $lk2dN.codes;
var $740f94fee524995b$var$ERR_INVALID_ARG_TYPE = $740f94fee524995b$require$_require$codes.ERR_INVALID_ARG_TYPE, $740f94fee524995b$var$ERR_METHOD_NOT_IMPLEMENTED = $740f94fee524995b$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $740f94fee524995b$var$ERR_MULTIPLE_CALLBACK = $740f94fee524995b$require$_require$codes.ERR_MULTIPLE_CALLBACK, $740f94fee524995b$var$ERR_STREAM_CANNOT_PIPE = $740f94fee524995b$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $740f94fee524995b$var$ERR_STREAM_DESTROYED = $740f94fee524995b$require$_require$codes.ERR_STREAM_DESTROYED, $740f94fee524995b$var$ERR_STREAM_NULL_VALUES = $740f94fee524995b$require$_require$codes.ERR_STREAM_NULL_VALUES, $740f94fee524995b$var$ERR_STREAM_WRITE_AFTER_END = $740f94fee524995b$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $740f94fee524995b$var$ERR_UNKNOWN_ENCODING = $740f94fee524995b$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $740f94fee524995b$var$errorOrDestroy = $2W1t1.errorOrDestroy;

(parcelRequire("4oIhJ"))($740f94fee524995b$var$Writable, $7jRdr);
function $740f94fee524995b$var$nop() {}

function $740f94fee524995b$var$WritableState(options, stream, isDuplex) {
    $740f94fee524995b$var$Duplex = $740f94fee524995b$var$Duplex || (parcelRequire("kDi9T"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $740f94fee524995b$var$Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $740f94fee524995b$var$getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $740f94fee524995b$var$onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $740f94fee524995b$var$CorkedRequest(this);
}
$740f94fee524995b$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($740f94fee524995b$var$WritableState.prototype, "buffer", {
            get: $740f94fee524995b$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $740f94fee524995b$var$realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    $740f94fee524995b$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($740f94fee524995b$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($740f94fee524995b$var$realHasInstance.call(this, object)) return true;
            if (this !== $740f94fee524995b$var$Writable) return false;
            return object && object._writableState instanceof $740f94fee524995b$var$WritableState;
        }
    });
} else $740f94fee524995b$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $740f94fee524995b$var$Writable(options) {
    $740f94fee524995b$var$Duplex = $740f94fee524995b$var$Duplex || (parcelRequire("kDi9T"));
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $740f94fee524995b$var$Duplex;
    if (!isDuplex && !$740f94fee524995b$var$realHasInstance.call($740f94fee524995b$var$Writable, this)) return new $740f94fee524995b$var$Writable(options);
    this._writableState = new $740f94fee524995b$var$WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    $7jRdr.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
$740f94fee524995b$var$Writable.prototype.pipe = function() {
    $740f94fee524995b$var$errorOrDestroy(this, new $740f94fee524995b$var$ERR_STREAM_CANNOT_PIPE());
};
function $740f94fee524995b$var$writeAfterEnd(stream, cb) {
    var er = new $740f94fee524995b$var$ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    $740f94fee524995b$var$errorOrDestroy(stream, er);
    $1s5sD.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $740f94fee524995b$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $740f94fee524995b$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new $740f94fee524995b$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        $740f94fee524995b$var$errorOrDestroy(stream, er);
        $1s5sD.nextTick(cb, er);
        return false;
    }
    return true;
}
$740f94fee524995b$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $740f94fee524995b$var$_isUint8Array(chunk);
    if (isBuf && !$740f94fee524995b$require$Buffer.isBuffer(chunk)) chunk = $740f94fee524995b$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = $740f94fee524995b$var$nop;
    if (state.ending) $740f94fee524995b$var$writeAfterEnd(this, cb);
    else if (isBuf || $740f94fee524995b$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $740f94fee524995b$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$740f94fee524995b$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$740f94fee524995b$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $740f94fee524995b$var$clearBuffer(this, state);
    }
};
$740f94fee524995b$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new $740f94fee524995b$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($740f94fee524995b$var$Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $740f94fee524995b$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = $740f94fee524995b$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($740f94fee524995b$var$Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $740f94fee524995b$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $740f94fee524995b$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $740f94fee524995b$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $740f94fee524995b$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $740f94fee524995b$var$ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $740f94fee524995b$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $1s5sD.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        $1s5sD.nextTick($740f94fee524995b$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $740f94fee524995b$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $740f94fee524995b$var$errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        $740f94fee524995b$var$finishMaybe(stream, state);
    }
}
function $740f94fee524995b$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $740f94fee524995b$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new $740f94fee524995b$var$ERR_MULTIPLE_CALLBACK();
    $740f94fee524995b$var$onwriteStateUpdate(state);
    if (er) $740f94fee524995b$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $740f94fee524995b$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $740f94fee524995b$var$clearBuffer(stream, state);
        if (sync) $1s5sD.nextTick($740f94fee524995b$var$afterWrite, stream, state, finished, cb);
        else $740f94fee524995b$var$afterWrite(stream, state, finished, cb);
    }
}
function $740f94fee524995b$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $740f94fee524995b$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $740f94fee524995b$var$finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $740f94fee524995b$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function $740f94fee524995b$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $740f94fee524995b$var$doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $740f94fee524995b$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $740f94fee524995b$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$740f94fee524995b$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $740f94fee524995b$var$ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
$740f94fee524995b$var$Writable.prototype._writev = null;
$740f94fee524995b$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) $740f94fee524995b$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($740f94fee524995b$var$Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $740f94fee524995b$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $740f94fee524995b$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $740f94fee524995b$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        $740f94fee524995b$var$finishMaybe(stream, state);
    });
}
function $740f94fee524995b$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $1s5sD.nextTick($740f94fee524995b$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function $740f94fee524995b$var$finishMaybe(stream, state) {
    var need = $740f94fee524995b$var$needFinish(state);
    if (need) {
        $740f94fee524995b$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $740f94fee524995b$var$endWritable(stream, state, cb) {
    state.ending = true;
    $740f94fee524995b$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $1s5sD.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $740f94fee524995b$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($740f94fee524995b$var$Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$740f94fee524995b$var$Writable.prototype.destroy = $2W1t1.destroy;
$740f94fee524995b$var$Writable.prototype._undestroy = $2W1t1.undestroy;
$740f94fee524995b$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});


parcelRegister("i1UBR", function(module, exports) {

var $aDbZK = parcelRequire("aDbZK");

var $1s5sD = parcelRequire("1s5sD");
"use strict";
var $d2043b79a9bbee00$var$_Object$setPrototypeO;
function $d2043b79a9bbee00$var$_defineProperty(obj, key, value) {
    key = $d2043b79a9bbee00$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $d2043b79a9bbee00$var$_toPropertyKey(arg) {
    var key = $d2043b79a9bbee00$var$_toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : (0, $aDbZK._)(key)) === "symbol" ? key : String(key);
}
function $d2043b79a9bbee00$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $cex0t = parcelRequire("cex0t");
var $d2043b79a9bbee00$var$kLastResolve = Symbol("lastResolve");
var $d2043b79a9bbee00$var$kLastReject = Symbol("lastReject");
var $d2043b79a9bbee00$var$kError = Symbol("error");
var $d2043b79a9bbee00$var$kEnded = Symbol("ended");
var $d2043b79a9bbee00$var$kLastPromise = Symbol("lastPromise");
var $d2043b79a9bbee00$var$kHandlePromise = Symbol("handlePromise");
var $d2043b79a9bbee00$var$kStream = Symbol("stream");
function $d2043b79a9bbee00$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $d2043b79a9bbee00$var$readAndResolve(iter) {
    var resolve = iter[$d2043b79a9bbee00$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$d2043b79a9bbee00$var$kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$d2043b79a9bbee00$var$kLastPromise] = null;
            iter[$d2043b79a9bbee00$var$kLastResolve] = null;
            iter[$d2043b79a9bbee00$var$kLastReject] = null;
            resolve($d2043b79a9bbee00$var$createIterResult(data, false));
        }
    }
}
function $d2043b79a9bbee00$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $1s5sD.nextTick($d2043b79a9bbee00$var$readAndResolve, iter);
}
function $d2043b79a9bbee00$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$d2043b79a9bbee00$var$kEnded]) {
                resolve($d2043b79a9bbee00$var$createIterResult(undefined, true));
                return;
            }
            iter[$d2043b79a9bbee00$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $d2043b79a9bbee00$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $d2043b79a9bbee00$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($d2043b79a9bbee00$var$_Object$setPrototypeO = {
    get stream () {
        return this[$d2043b79a9bbee00$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$d2043b79a9bbee00$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$d2043b79a9bbee00$var$kEnded]) return Promise.resolve($d2043b79a9bbee00$var$createIterResult(undefined, true));
        if (this[$d2043b79a9bbee00$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $1s5sD.nextTick(function() {
                if (_this[$d2043b79a9bbee00$var$kError]) reject(_this[$d2043b79a9bbee00$var$kError]);
                else resolve($d2043b79a9bbee00$var$createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$d2043b79a9bbee00$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($d2043b79a9bbee00$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$d2043b79a9bbee00$var$kStream].read();
            if (data !== null) return Promise.resolve($d2043b79a9bbee00$var$createIterResult(data, false));
            promise = new Promise(this[$d2043b79a9bbee00$var$kHandlePromise]);
        }
        this[$d2043b79a9bbee00$var$kLastPromise] = promise;
        return promise;
    }
}, $d2043b79a9bbee00$var$_defineProperty($d2043b79a9bbee00$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $d2043b79a9bbee00$var$_defineProperty($d2043b79a9bbee00$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$d2043b79a9bbee00$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($d2043b79a9bbee00$var$createIterResult(undefined, true));
        });
    });
}), $d2043b79a9bbee00$var$_Object$setPrototypeO), $d2043b79a9bbee00$var$AsyncIteratorPrototype);
var $d2043b79a9bbee00$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($d2043b79a9bbee00$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $d2043b79a9bbee00$var$_defineProperty(_Object$create, $d2043b79a9bbee00$var$kStream, {
        value: stream,
        writable: true
    }), $d2043b79a9bbee00$var$_defineProperty(_Object$create, $d2043b79a9bbee00$var$kLastResolve, {
        value: null,
        writable: true
    }), $d2043b79a9bbee00$var$_defineProperty(_Object$create, $d2043b79a9bbee00$var$kLastReject, {
        value: null,
        writable: true
    }), $d2043b79a9bbee00$var$_defineProperty(_Object$create, $d2043b79a9bbee00$var$kError, {
        value: null,
        writable: true
    }), $d2043b79a9bbee00$var$_defineProperty(_Object$create, $d2043b79a9bbee00$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $d2043b79a9bbee00$var$_defineProperty(_Object$create, $d2043b79a9bbee00$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$d2043b79a9bbee00$var$kStream].read();
            if (data) {
                iterator[$d2043b79a9bbee00$var$kLastPromise] = null;
                iterator[$d2043b79a9bbee00$var$kLastResolve] = null;
                iterator[$d2043b79a9bbee00$var$kLastReject] = null;
                resolve($d2043b79a9bbee00$var$createIterResult(data, false));
            } else {
                iterator[$d2043b79a9bbee00$var$kLastResolve] = resolve;
                iterator[$d2043b79a9bbee00$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$d2043b79a9bbee00$var$kLastPromise] = null;
    $cex0t(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[$d2043b79a9bbee00$var$kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$d2043b79a9bbee00$var$kLastPromise] = null;
                iterator[$d2043b79a9bbee00$var$kLastResolve] = null;
                iterator[$d2043b79a9bbee00$var$kLastReject] = null;
                reject(err);
            }
            iterator[$d2043b79a9bbee00$var$kError] = err;
            return;
        }
        var resolve = iterator[$d2043b79a9bbee00$var$kLastResolve];
        if (resolve !== null) {
            iterator[$d2043b79a9bbee00$var$kLastPromise] = null;
            iterator[$d2043b79a9bbee00$var$kLastResolve] = null;
            iterator[$d2043b79a9bbee00$var$kLastReject] = null;
            resolve($d2043b79a9bbee00$var$createIterResult(undefined, true));
        }
        iterator[$d2043b79a9bbee00$var$kEnded] = true;
    });
    stream.on("readable", $d2043b79a9bbee00$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $d2043b79a9bbee00$var$createReadableStreamAsyncIterator;

});
parcelRegister("cex0t", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";

var $8e80653f6cd0bb66$var$ERR_STREAM_PREMATURE_CLOSE = (parcelRequire("lk2dN")).codes.ERR_STREAM_PREMATURE_CLOSE;
function $8e80653f6cd0bb66$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $8e80653f6cd0bb66$var$noop() {}
function $8e80653f6cd0bb66$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function $8e80653f6cd0bb66$var$eos(stream, opts, callback) {
    if (typeof opts === "function") return $8e80653f6cd0bb66$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $8e80653f6cd0bb66$var$once(callback || $8e80653f6cd0bb66$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $8e80653f6cd0bb66$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $8e80653f6cd0bb66$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if ($8e80653f6cd0bb66$var$isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = $8e80653f6cd0bb66$var$eos;

});


parcelRegister("9OBDR", function(module, exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

});


parcelRegister("l7MCq", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = $f60ff715c2b69c49$var$Transform;

var $lk2dN = parcelRequire("lk2dN");
var $f60ff715c2b69c49$require$_require$codes = $lk2dN.codes;
var $f60ff715c2b69c49$var$ERR_METHOD_NOT_IMPLEMENTED = $f60ff715c2b69c49$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $f60ff715c2b69c49$var$ERR_MULTIPLE_CALLBACK = $f60ff715c2b69c49$require$_require$codes.ERR_MULTIPLE_CALLBACK, $f60ff715c2b69c49$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $f60ff715c2b69c49$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $f60ff715c2b69c49$var$ERR_TRANSFORM_WITH_LENGTH_0 = $f60ff715c2b69c49$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $kDi9T = parcelRequire("kDi9T");

(parcelRequire("4oIhJ"))($f60ff715c2b69c49$var$Transform, $kDi9T);
function $f60ff715c2b69c49$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new $f60ff715c2b69c49$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $f60ff715c2b69c49$var$Transform(options) {
    if (!(this instanceof $f60ff715c2b69c49$var$Transform)) return new $f60ff715c2b69c49$var$Transform(options);
    $kDi9T.call(this, options);
    this._transformState = {
        afterTransform: $f60ff715c2b69c49$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", $f60ff715c2b69c49$var$prefinish);
}
function $f60ff715c2b69c49$var$prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        $f60ff715c2b69c49$var$done(_this, er, data);
    });
    else $f60ff715c2b69c49$var$done(this, null, null);
}
$f60ff715c2b69c49$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $kDi9T.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$f60ff715c2b69c49$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $f60ff715c2b69c49$var$ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
$f60ff715c2b69c49$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$f60ff715c2b69c49$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$f60ff715c2b69c49$var$Transform.prototype._destroy = function(err, cb) {
    $kDi9T.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $f60ff715c2b69c49$var$done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $f60ff715c2b69c49$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $f60ff715c2b69c49$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRegister("4fczT", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = $317251e0787e345a$var$PassThrough;

var $l7MCq = parcelRequire("l7MCq");

(parcelRequire("4oIhJ"))($317251e0787e345a$var$PassThrough, $l7MCq);
function $317251e0787e345a$var$PassThrough(options) {
    if (!(this instanceof $317251e0787e345a$var$PassThrough)) return new $317251e0787e345a$var$PassThrough(options);
    $l7MCq.call(this, options);
}
$317251e0787e345a$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRegister("5a8LX", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var $3c24b0f8eaee2a63$var$eos;
function $3c24b0f8eaee2a63$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $lk2dN = parcelRequire("lk2dN");
var $3c24b0f8eaee2a63$require$_require$codes = $lk2dN.codes;
var $3c24b0f8eaee2a63$var$ERR_MISSING_ARGS = $3c24b0f8eaee2a63$require$_require$codes.ERR_MISSING_ARGS, $3c24b0f8eaee2a63$var$ERR_STREAM_DESTROYED = $3c24b0f8eaee2a63$require$_require$codes.ERR_STREAM_DESTROYED;
function $3c24b0f8eaee2a63$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $3c24b0f8eaee2a63$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}

function $3c24b0f8eaee2a63$var$destroyer(stream, reading, writing, callback) {
    callback = $3c24b0f8eaee2a63$var$once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if ($3c24b0f8eaee2a63$var$eos === undefined) $3c24b0f8eaee2a63$var$eos = (parcelRequire("cex0t"));
    $3c24b0f8eaee2a63$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if ($3c24b0f8eaee2a63$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new $3c24b0f8eaee2a63$var$ERR_STREAM_DESTROYED("pipe"));
    };
}
function $3c24b0f8eaee2a63$var$call(fn) {
    fn();
}
function $3c24b0f8eaee2a63$var$pipe(from, to) {
    return from.pipe(to);
}
function $3c24b0f8eaee2a63$var$popCallback(streams) {
    if (!streams.length) return $3c24b0f8eaee2a63$var$noop;
    if (typeof streams[streams.length - 1] !== "function") return $3c24b0f8eaee2a63$var$noop;
    return streams.pop();
}
function $3c24b0f8eaee2a63$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $3c24b0f8eaee2a63$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $3c24b0f8eaee2a63$var$ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $3c24b0f8eaee2a63$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($3c24b0f8eaee2a63$var$call);
            if (reading) return;
            destroys.forEach($3c24b0f8eaee2a63$var$call);
            callback(error);
        });
    });
    return streams.reduce($3c24b0f8eaee2a63$var$pipe);
}
module.exports = $3c24b0f8eaee2a63$var$pipeline;

});



parcelRegister("8OEPz", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    "use strict";
    module.exports.stripBOM = function(str) {
        if (str[0] === "\uFEFF") return str.substring(1);
        else return str;
    };
}).call(module.exports);

});

parcelRegister("l1QkF", function(module, exports) {
// Generated by CoffeeScript 1.12.7
(function() {
    "use strict";
    var prefixMatch;
    prefixMatch = new RegExp(/(?!xmlns)^.*:/);
    module.exports.normalize = function(str) {
        return str.toLowerCase();
    };
    module.exports.firstCharLowerCase = function(str) {
        return str.charAt(0).toLowerCase() + str.slice(1);
    };
    module.exports.stripPrefix = function(str) {
        return str.replace(prefixMatch, "");
    };
    module.exports.parseNumbers = function(str) {
        if (!isNaN(str)) str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
        return str;
    };
    module.exports.parseBooleans = function(str) {
        if (/^(?:true|false)$/i.test(str)) str = str.toLowerCase() === "true";
        return str;
    };
}).call(module.exports);

});

parcelRegister("3f2cZ", function(module, exports) {
var $25c47c608c9a5263$var$scope = typeof $parcel$global !== "undefined" && $parcel$global || typeof self !== "undefined" && self || window;
var $25c47c608c9a5263$var$apply = Function.prototype.apply;
// DOM APIs, for completeness
module.exports.setTimeout = function() {
    return new $25c47c608c9a5263$var$Timeout($25c47c608c9a5263$var$apply.call(setTimeout, $25c47c608c9a5263$var$scope, arguments), clearTimeout);
};
module.exports.setInterval = function() {
    return new $25c47c608c9a5263$var$Timeout($25c47c608c9a5263$var$apply.call(setInterval, $25c47c608c9a5263$var$scope, arguments), clearInterval);
};
module.exports.clearTimeout = module.exports.clearInterval = function(timeout) {
    if (timeout) timeout.close();
};
function $25c47c608c9a5263$var$Timeout(id, clearFn) {
    this._id = id;
    this._clearFn = clearFn;
}
$25c47c608c9a5263$var$Timeout.prototype.unref = $25c47c608c9a5263$var$Timeout.prototype.ref = function() {};
$25c47c608c9a5263$var$Timeout.prototype.close = function() {
    this._clearFn.call($25c47c608c9a5263$var$scope, this._id);
};
// Does not start the time, just sets up the members needed.
module.exports.enroll = function(item, msecs) {
    clearTimeout(item._idleTimeoutId);
    item._idleTimeout = msecs;
};
module.exports.unenroll = function(item) {
    clearTimeout(item._idleTimeoutId);
    item._idleTimeout = -1;
};
module.exports._unrefActive = module.exports.active = function(item) {
    clearTimeout(item._idleTimeoutId);
    var msecs = item._idleTimeout;
    if (msecs >= 0) item._idleTimeoutId = setTimeout(function onTimeout() {
        if (item._onTimeout) item._onTimeout();
    }, msecs);
};
parcelRequire("7Ou5h");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
module.exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof $parcel$global !== "undefined" && $parcel$global.setImmediate || module.exports && module.exports.setImmediate;
module.exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof $parcel$global !== "undefined" && $parcel$global.clearImmediate || module.exports && module.exports.clearImmediate;

});
parcelRegister("7Ou5h", function(module, exports) {

var $1s5sD = parcelRequire("1s5sD");
(function(global1, undefined) {
    "use strict";
    if (global1.setImmediate) return;
    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global1.document;
    var registerImmediate;
    function setImmediate(callback) {
        // Callback can either be a function or a string
        if (typeof callback !== "function") callback = new Function("" + callback);
        // Copy function arguments
        var args = new Array(arguments.length - 1);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i + 1];
        // Store and register the task
        var task = {
            callback: callback,
            args: args
        };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }
    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }
    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch(args.length){
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;
        }
    }
    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
        // "too much recursion" error.
        setTimeout(runIfPresent, 0, handle);
        else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally{
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }
    function installNextTickImplementation() {
        registerImmediate = function registerImmediate(handle) {
            $1s5sD.nextTick(function() {
                runIfPresent(handle);
            });
        };
    }
    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global1.postMessage && !global1.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global1.onmessage;
            global1.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global1.postMessage("", "*");
            global1.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }
    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function onGlobalMessage(event) {
            if (event.source === global1 && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) runIfPresent(+event.data.slice(messagePrefix.length));
        };
        if (global1.addEventListener) global1.addEventListener("message", onGlobalMessage, false);
        else global1.attachEvent("onmessage", onGlobalMessage);
        registerImmediate = function registerImmediate(handle) {
            global1.postMessage(messagePrefix + handle, "*");
        };
    }
    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };
        registerImmediate = function registerImmediate(handle) {
            channel.port2.postMessage(handle);
        };
    }
    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function registerImmediate(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function() {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }
    function installSetTimeoutImplementation() {
        registerImmediate = function registerImmediate(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }
    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global1);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global1;
    // Don't get fooled by e.g. browserify environments.
    if (({}).toString.call(global1.process) === "[object process]") // For Node.js before 0.9
    installNextTickImplementation();
    else if (canUsePostMessage()) // For non-IE10 modern browsers
    installPostMessageImplementation();
    else if (global1.MessageChannel) // For web workers, where supported
    installMessageChannelImplementation();
    else if (doc && "onreadystatechange" in doc.createElement("script")) // For IE 6–8
    installReadyStateChangeImplementation();
    else // For older browsers
    installSetTimeoutImplementation();
    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof $parcel$global === "undefined" ? module.exports : $parcel$global : self);

});




parcelRegister("bCWd1", function(module, exports) {
var $87706566708543ad$var$fields = module.exports = {};
$87706566708543ad$var$fields.feed = [
    [
        "author",
        "creator"
    ],
    [
        "dc:publisher",
        "publisher"
    ],
    [
        "dc:creator",
        "creator"
    ],
    [
        "dc:source",
        "source"
    ],
    [
        "dc:title",
        "title"
    ],
    [
        "dc:type",
        "type"
    ],
    "title",
    "description",
    "author",
    "pubDate",
    "webMaster",
    "managingEditor",
    "generator",
    "link",
    "language",
    "copyright",
    "lastBuildDate",
    "docs",
    "generator",
    "ttl",
    "rating",
    "skipHours",
    "skipDays"
];
$87706566708543ad$var$fields.item = [
    [
        "author",
        "creator"
    ],
    [
        "dc:creator",
        "creator"
    ],
    [
        "dc:date",
        "date"
    ],
    [
        "dc:language",
        "language"
    ],
    [
        "dc:rights",
        "rights"
    ],
    [
        "dc:source",
        "source"
    ],
    [
        "dc:title",
        "title"
    ],
    "title",
    "link",
    "pubDate",
    "author",
    "summary",
    [
        "content:encoded",
        "content:encoded",
        {
            includeSnippet: true
        }
    ],
    "enclosure",
    "dc:creator",
    "dc:date",
    "comments"
];
var $87706566708543ad$var$mapItunesField = function mapItunesField(f) {
    return [
        "itunes:" + f,
        f
    ];
};
$87706566708543ad$var$fields.podcastFeed = [
    "author",
    "subtitle",
    "summary",
    "explicit"
].map($87706566708543ad$var$mapItunesField);
$87706566708543ad$var$fields.podcastItem = [
    "author",
    "subtitle",
    "summary",
    "explicit",
    "duration",
    "image",
    "episode",
    "image",
    "season",
    "keywords",
    "episodeType"
].map($87706566708543ad$var$mapItunesField);

});

parcelRegister("a58J2", function(module, exports) {
var $757123b8d5a53692$var$utils = module.exports = {};

var $c7Pbh = parcelRequire("c7Pbh");

var $fAUxG = parcelRequire("fAUxG");
$757123b8d5a53692$var$utils.stripHtml = function(str) {
    str = str.replace(/([^\n])<\/?(h|br|p|ul|ol|li|blockquote|section|table|tr|div)(?:.|\n)*?>([^\n])/gm, "$1\n$3");
    str = str.replace(/<(?:.|\n)*?>/gm, "");
    return str;
};
$757123b8d5a53692$var$utils.getSnippet = function(str) {
    return $c7Pbh.decodeHTML($757123b8d5a53692$var$utils.stripHtml(str)).trim();
};
$757123b8d5a53692$var$utils.getLink = function(links, rel, fallbackIdx) {
    if (!links) return;
    for(var i = 0; i < links.length; ++i){
        if (links[i].$.rel === rel) return links[i].$.href;
    }
    if (links[fallbackIdx]) return links[fallbackIdx].$.href;
};
$757123b8d5a53692$var$utils.getContent = function(content) {
    if (typeof content._ === "string") return content._;
    else if (typeof content === "object") {
        var builder = new $fAUxG.Builder({
            headless: true,
            explicitRoot: true,
            rootName: "div",
            renderOpts: {
                pretty: false
            }
        });
        return builder.buildObject(content);
    } else return content;
};
$757123b8d5a53692$var$utils.copyFromXML = function(xml, dest, fields) {
    fields.forEach(function(f) {
        var from = f;
        var to = f;
        var options = {};
        if (Array.isArray(f)) {
            from = f[0];
            to = f[1];
            if (f.length > 2) options = f[2];
        }
        var keepArray = options.keepArray, includeSnippet = options.includeSnippet;
        if (xml[from] !== undefined) dest[to] = keepArray ? xml[from] : xml[from][0];
        if (dest[to] && typeof dest[to]._ === "string") dest[to] = dest[to]._;
        if (includeSnippet && dest[to] && typeof dest[to] === "string") dest[to + "Snippet"] = $757123b8d5a53692$var$utils.getSnippet(dest[to]);
    });
};
$757123b8d5a53692$var$utils.maybePromisify = function(callback, promise) {
    if (!callback) return promise;
    return promise.then(function(data) {
        return setTimeout(function() {
            return callback(null, data);
        });
    }, function(err) {
        return setTimeout(function() {
            return callback(err);
        });
    });
};
var $757123b8d5a53692$var$DEFAULT_ENCODING = "utf8";
var $757123b8d5a53692$var$ENCODING_REGEX = /(encoding|charset)\s*=\s*(\S+)/;
var $757123b8d5a53692$var$SUPPORTED_ENCODINGS = [
    "ascii",
    "utf8",
    "utf16le",
    "ucs2",
    "base64",
    "latin1",
    "binary",
    "hex"
];
var $757123b8d5a53692$var$ENCODING_ALIASES = {
    "utf-8": "utf8",
    "iso-8859-1": "latin1"
};
$757123b8d5a53692$var$utils.getEncodingFromContentType = function(contentType) {
    contentType = contentType || "";
    var match = contentType.match($757123b8d5a53692$var$ENCODING_REGEX);
    var encoding = (match || [])[2] || "";
    encoding = encoding.toLowerCase();
    encoding = $757123b8d5a53692$var$ENCODING_ALIASES[encoding] || encoding;
    if (!encoding || $757123b8d5a53692$var$SUPPORTED_ENCODINGS.indexOf(encoding) === -1) encoding = $757123b8d5a53692$var$DEFAULT_ENCODING;
    return encoding;
};

});
parcelRegister("c7Pbh", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.decodeXMLStrict = module.exports.decodeHTML5Strict = module.exports.decodeHTML4Strict = module.exports.decodeHTML5 = module.exports.decodeHTML4 = module.exports.decodeHTMLStrict = module.exports.decodeHTML = module.exports.decodeXML = module.exports.encodeHTML5 = module.exports.encodeHTML4 = module.exports.escapeUTF8 = module.exports.escape = module.exports.encodeNonAsciiHTML = module.exports.encodeHTML = module.exports.encodeXML = module.exports.encode = module.exports.decodeStrict = module.exports.decode = void 0;

var $1SyJf = parcelRequire("1SyJf");

var $1XRjc = parcelRequire("1XRjc");
/**
 * Decodes a string with entities.
 *
 * @param data String to decode.
 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
 * @deprecated Use `decodeXML` or `decodeHTML` directly.
 */ function $8d3dd6f4b23de955$var$decode(data, level) {
    return (!level || level <= 0 ? $1SyJf.decodeXML : $1SyJf.decodeHTML)(data);
}
module.exports.decode = $8d3dd6f4b23de955$var$decode;
/**
 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
 *
 * @param data String to decode.
 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
 * @deprecated Use `decodeHTMLStrict` or `decodeXML` directly.
 */ function $8d3dd6f4b23de955$var$decodeStrict(data, level) {
    return (!level || level <= 0 ? $1SyJf.decodeXML : $1SyJf.decodeHTMLStrict)(data);
}
module.exports.decodeStrict = $8d3dd6f4b23de955$var$decodeStrict;
/**
 * Encodes a string with entities.
 *
 * @param data String to encode.
 * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.
 * @deprecated Use `encodeHTML`, `encodeXML` or `encodeNonAsciiHTML` directly.
 */ function $8d3dd6f4b23de955$var$encode(data, level) {
    return (!level || level <= 0 ? $1XRjc.encodeXML : $1XRjc.encodeHTML)(data);
}
module.exports.encode = $8d3dd6f4b23de955$var$encode;

var $1XRjc = parcelRequire("1XRjc");
Object.defineProperty(module.exports, "encodeXML", {
    enumerable: true,
    get: function get() {
        return $1XRjc.encodeXML;
    }
});
Object.defineProperty(module.exports, "encodeHTML", {
    enumerable: true,
    get: function get() {
        return $1XRjc.encodeHTML;
    }
});
Object.defineProperty(module.exports, "encodeNonAsciiHTML", {
    enumerable: true,
    get: function get() {
        return $1XRjc.encodeNonAsciiHTML;
    }
});
Object.defineProperty(module.exports, "escape", {
    enumerable: true,
    get: function get() {
        return $1XRjc.escape;
    }
});
Object.defineProperty(module.exports, "escapeUTF8", {
    enumerable: true,
    get: function get() {
        return $1XRjc.escapeUTF8;
    }
});
// Legacy aliases (deprecated)
Object.defineProperty(module.exports, "encodeHTML4", {
    enumerable: true,
    get: function get() {
        return $1XRjc.encodeHTML;
    }
});
Object.defineProperty(module.exports, "encodeHTML5", {
    enumerable: true,
    get: function get() {
        return $1XRjc.encodeHTML;
    }
});

var $1SyJf = parcelRequire("1SyJf");
Object.defineProperty(module.exports, "decodeXML", {
    enumerable: true,
    get: function get() {
        return $1SyJf.decodeXML;
    }
});
Object.defineProperty(module.exports, "decodeHTML", {
    enumerable: true,
    get: function get() {
        return $1SyJf.decodeHTML;
    }
});
Object.defineProperty(module.exports, "decodeHTMLStrict", {
    enumerable: true,
    get: function get() {
        return $1SyJf.decodeHTMLStrict;
    }
});
// Legacy aliases (deprecated)
Object.defineProperty(module.exports, "decodeHTML4", {
    enumerable: true,
    get: function get() {
        return $1SyJf.decodeHTML;
    }
});
Object.defineProperty(module.exports, "decodeHTML5", {
    enumerable: true,
    get: function get() {
        return $1SyJf.decodeHTML;
    }
});
Object.defineProperty(module.exports, "decodeHTML4Strict", {
    enumerable: true,
    get: function get() {
        return $1SyJf.decodeHTMLStrict;
    }
});
Object.defineProperty(module.exports, "decodeHTML5Strict", {
    enumerable: true,
    get: function get() {
        return $1SyJf.decodeHTMLStrict;
    }
});
Object.defineProperty(module.exports, "decodeXMLStrict", {
    enumerable: true,
    get: function get() {
        return $1SyJf.decodeXML;
    }
});

});
parcelRegister("1SyJf", function(module, exports) {
"use strict";
var $15e5c6073e27432b$var$__importDefault = module.exports && module.exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.decodeHTML = module.exports.decodeHTMLStrict = module.exports.decodeXML = void 0;

var $15e5c6073e27432b$var$entities_json_1 = $15e5c6073e27432b$var$__importDefault((parcelRequire("54IHR")));

var $15e5c6073e27432b$var$legacy_json_1 = $15e5c6073e27432b$var$__importDefault((parcelRequire("2Gw0i")));

var $15e5c6073e27432b$var$xml_json_1 = $15e5c6073e27432b$var$__importDefault((parcelRequire("ai2qX")));

var $15e5c6073e27432b$var$decode_codepoint_1 = $15e5c6073e27432b$var$__importDefault((parcelRequire("lkWgZ")));
var $15e5c6073e27432b$var$strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
module.exports.decodeXML = $15e5c6073e27432b$var$getStrictDecoder($15e5c6073e27432b$var$xml_json_1.default);
module.exports.decodeHTMLStrict = $15e5c6073e27432b$var$getStrictDecoder($15e5c6073e27432b$var$entities_json_1.default);
function $15e5c6073e27432b$var$getStrictDecoder(map) {
    var replace = $15e5c6073e27432b$var$getReplacer(map);
    return function(str) {
        return String(str).replace($15e5c6073e27432b$var$strictEntityRe, replace);
    };
}
var $15e5c6073e27432b$var$sorter = function sorter(a, b) {
    return a < b ? 1 : -1;
};
module.exports.decodeHTML = function() {
    var legacy = Object.keys($15e5c6073e27432b$var$legacy_json_1.default).sort($15e5c6073e27432b$var$sorter);
    var keys = Object.keys($15e5c6073e27432b$var$entities_json_1.default).sort($15e5c6073e27432b$var$sorter);
    for(var i = 0, j = 0; i < keys.length; i++)if (legacy[j] === keys[i]) {
        keys[i] += ";?";
        j++;
    } else keys[i] += ";";
    var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
    var replace = $15e5c6073e27432b$var$getReplacer($15e5c6073e27432b$var$entities_json_1.default);
    function replacer(str) {
        if (str.substr(-1) !== ";") str += ";";
        return replace(str);
    }
    // TODO consider creating a merged map
    return function(str) {
        return String(str).replace(re, replacer);
    };
}();
function $15e5c6073e27432b$var$getReplacer(map) {
    return function replace(str) {
        if (str.charAt(1) === "#") {
            var secondChar = str.charAt(2);
            if (secondChar === "X" || secondChar === "x") return $15e5c6073e27432b$var$decode_codepoint_1.default(parseInt(str.substr(3), 16));
            return $15e5c6073e27432b$var$decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
        return map[str.slice(1, -1)] || str;
    };
}

});
parcelRegister("54IHR", function(module, exports) {
module.exports = JSON.parse('{"Aacute":"\xc1","aacute":"\xe1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\xc2","acirc":"\xe2","acute":"\xb4","Acy":"\u0410","acy":"\u0430","AElig":"\xc6","aelig":"\xe6","af":"\u2061","Afr":"\uD835\uDD04","afr":"\uD835\uDD1E","Agrave":"\xc0","agrave":"\xe0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\xc5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\uD835\uDD38","aopf":"\uD835\uDD52","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"\'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\xc5","aring":"\xe5","Ascr":"\uD835\uDC9C","ascr":"\uD835\uDCB6","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\xc3","atilde":"\xe3","Auml":"\xc4","auml":"\xe4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\uD835\uDD05","bfr":"\uD835\uDD1F","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\uD835\uDD39","bopf":"\uD835\uDD53","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\xa6","bscr":"\uD835\uDCB7","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\xc7","ccedil":"\xe7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\xb8","Cedilla":"\xb8","cemptyv":"\u29B2","cent":"\xa2","centerdot":"\xb7","CenterDot":"\xb7","cfr":"\uD835\uDD20","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\xae","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\uD835\uDD54","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\xa9","COPY":"\xa9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\uD835\uDC9E","cscr":"\uD835\uDCB8","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\xa4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\xb0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\uD835\uDD07","dfr":"\uD835\uDD21","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\xb4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\xa8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\xf7","divide":"\xf7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\uD835\uDD3B","dopf":"\uD835\uDD55","Dot":"\xa8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\xa8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\uD835\uDC9F","dscr":"\uD835\uDCB9","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\xc9","eacute":"\xe9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\xca","ecirc":"\xea","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\uD835\uDD08","efr":"\uD835\uDD22","eg":"\u2A9A","Egrave":"\xc8","egrave":"\xe8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\uD835\uDD3C","eopf":"\uD835\uDD56","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\xd0","eth":"\xf0","Euml":"\xcb","euml":"\xeb","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\uD835\uDD09","ffr":"\uD835\uDD23","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\uD835\uDD3D","fopf":"\uD835\uDD57","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\xbd","frac13":"\u2153","frac14":"\xbc","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\xbe","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\uD835\uDCBB","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\uD835\uDD0A","gfr":"\uD835\uDD24","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\uD835\uDD3E","gopf":"\uD835\uDD58","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\uD835\uDCA2","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\xbd","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\uD835\uDD25","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\uD835\uDD59","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\uD835\uDCBD","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\xcd","iacute":"\xed","ic":"\u2063","Icirc":"\xce","icirc":"\xee","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\xa1","iff":"\u21D4","ifr":"\uD835\uDD26","Ifr":"\u2111","Igrave":"\xcc","igrave":"\xec","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\uD835\uDD40","iopf":"\uD835\uDD5A","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\xbf","iscr":"\uD835\uDCBE","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\xcf","iuml":"\xef","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\uD835\uDD0D","jfr":"\uD835\uDD27","jmath":"\u0237","Jopf":"\uD835\uDD41","jopf":"\uD835\uDD5B","Jscr":"\uD835\uDCA5","jscr":"\uD835\uDCBF","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\uD835\uDD0E","kfr":"\uD835\uDD28","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\uD835\uDD42","kopf":"\uD835\uDD5C","Kscr":"\uD835\uDCA6","kscr":"\uD835\uDCC0","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\xab","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\uD835\uDD0F","lfr":"\uD835\uDD29","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\uD835\uDD43","lopf":"\uD835\uDD5D","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\uD835\uDCC1","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\xaf","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\uD835\uDD10","mfr":"\uD835\uDD2A","mho":"\u2127","micro":"\xb5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\xb7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\uD835\uDD44","mopf":"\uD835\uDD5E","mp":"\u2213","mscr":"\uD835\uDCC2","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\xa0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\uD835\uDD11","nfr":"\uD835\uDD2B","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\xa0","nopf":"\uD835\uDD5F","Nopf":"\u2115","Not":"\u2AEC","not":"\xac","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\uD835\uDCA9","nscr":"\uD835\uDCC3","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\xd1","ntilde":"\xf1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\xd3","oacute":"\xf3","oast":"\u229B","Ocirc":"\xd4","ocirc":"\xf4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\uD835\uDD12","ofr":"\uD835\uDD2C","ogon":"\u02DB","Ograve":"\xd2","ograve":"\xf2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\uD835\uDD46","oopf":"\uD835\uDD60","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\xaa","ordm":"\xba","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\uD835\uDCAA","oscr":"\u2134","Oslash":"\xd8","oslash":"\xf8","osol":"\u2298","Otilde":"\xd5","otilde":"\xf5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\xd6","ouml":"\xf6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\xb6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\uD835\uDD13","pfr":"\uD835\uDD2D","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\xb1","plusmn":"\xb1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\xb1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\uD835\uDD61","Popf":"\u2119","pound":"\xa3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\uD835\uDCAB","pscr":"\uD835\uDCC5","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\uD835\uDD14","qfr":"\uD835\uDD2E","qint":"\u2A0C","qopf":"\uD835\uDD62","Qopf":"\u211A","qprime":"\u2057","Qscr":"\uD835\uDCAC","qscr":"\uD835\uDCC6","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\\"","QUOT":"\\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\xbb","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\xae","REG":"\xae","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\uD835\uDD2F","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\uD835\uDD63","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\uD835\uDCC7","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\xa7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\uD835\uDD16","sfr":"\uD835\uDD30","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\xad","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\uD835\uDD4A","sopf":"\uD835\uDD64","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\uD835\uDCAE","sscr":"\uD835\uDCC8","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\xaf","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\xb9","sup2":"\xb2","sup3":"\xb3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\xdf","Tab":"\\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\uD835\uDD17","tfr":"\uD835\uDD31","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\xde","thorn":"\xfe","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\xd7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\uD835\uDD4B","topf":"\uD835\uDD65","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\uD835\uDCAF","tscr":"\uD835\uDCC9","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\xda","uacute":"\xfa","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\xdb","ucirc":"\xfb","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\uD835\uDD18","ufr":"\uD835\uDD32","Ugrave":"\xd9","ugrave":"\xf9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\xa8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\uD835\uDD4C","uopf":"\uD835\uDD66","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\uD835\uDCB0","uscr":"\uD835\uDCCA","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\xdc","uuml":"\xfc","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\uD835\uDD19","vfr":"\uD835\uDD33","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\uD835\uDD4D","vopf":"\uD835\uDD67","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\uD835\uDCB1","vscr":"\uD835\uDCCB","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\uD835\uDD1A","wfr":"\uD835\uDD34","Wopf":"\uD835\uDD4E","wopf":"\uD835\uDD68","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\uD835\uDCB2","wscr":"\uD835\uDCCC","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\uD835\uDD1B","xfr":"\uD835\uDD35","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\uD835\uDD4F","xopf":"\uD835\uDD69","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\uD835\uDCB3","xscr":"\uD835\uDCCD","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\xdd","yacute":"\xfd","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\xa5","Yfr":"\uD835\uDD1C","yfr":"\uD835\uDD36","YIcy":"\u0407","yicy":"\u0457","Yopf":"\uD835\uDD50","yopf":"\uD835\uDD6A","Yscr":"\uD835\uDCB4","yscr":"\uD835\uDCCE","YUcy":"\u042E","yucy":"\u044E","yuml":"\xff","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\uD835\uDD37","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\uD835\uDD6B","Zopf":"\u2124","Zscr":"\uD835\uDCB5","zscr":"\uD835\uDCCF","zwj":"\u200D","zwnj":"\u200C"}');

});

parcelRegister("2Gw0i", function(module, exports) {
module.exports = JSON.parse('{"Aacute":"\xc1","aacute":"\xe1","Acirc":"\xc2","acirc":"\xe2","acute":"\xb4","AElig":"\xc6","aelig":"\xe6","Agrave":"\xc0","agrave":"\xe0","amp":"&","AMP":"&","Aring":"\xc5","aring":"\xe5","Atilde":"\xc3","atilde":"\xe3","Auml":"\xc4","auml":"\xe4","brvbar":"\xa6","Ccedil":"\xc7","ccedil":"\xe7","cedil":"\xb8","cent":"\xa2","copy":"\xa9","COPY":"\xa9","curren":"\xa4","deg":"\xb0","divide":"\xf7","Eacute":"\xc9","eacute":"\xe9","Ecirc":"\xca","ecirc":"\xea","Egrave":"\xc8","egrave":"\xe8","ETH":"\xd0","eth":"\xf0","Euml":"\xcb","euml":"\xeb","frac12":"\xbd","frac14":"\xbc","frac34":"\xbe","gt":">","GT":">","Iacute":"\xcd","iacute":"\xed","Icirc":"\xce","icirc":"\xee","iexcl":"\xa1","Igrave":"\xcc","igrave":"\xec","iquest":"\xbf","Iuml":"\xcf","iuml":"\xef","laquo":"\xab","lt":"<","LT":"<","macr":"\xaf","micro":"\xb5","middot":"\xb7","nbsp":"\xa0","not":"\xac","Ntilde":"\xd1","ntilde":"\xf1","Oacute":"\xd3","oacute":"\xf3","Ocirc":"\xd4","ocirc":"\xf4","Ograve":"\xd2","ograve":"\xf2","ordf":"\xaa","ordm":"\xba","Oslash":"\xd8","oslash":"\xf8","Otilde":"\xd5","otilde":"\xf5","Ouml":"\xd6","ouml":"\xf6","para":"\xb6","plusmn":"\xb1","pound":"\xa3","quot":"\\"","QUOT":"\\"","raquo":"\xbb","reg":"\xae","REG":"\xae","sect":"\xa7","shy":"\xad","sup1":"\xb9","sup2":"\xb2","sup3":"\xb3","szlig":"\xdf","THORN":"\xde","thorn":"\xfe","times":"\xd7","Uacute":"\xda","uacute":"\xfa","Ucirc":"\xdb","ucirc":"\xfb","Ugrave":"\xd9","ugrave":"\xf9","uml":"\xa8","Uuml":"\xdc","uuml":"\xfc","Yacute":"\xdd","yacute":"\xfd","yen":"\xa5","yuml":"\xff"}');

});

parcelRegister("ai2qX", function(module, exports) {
module.exports = JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}');

});

parcelRegister("lkWgZ", function(module, exports) {
"use strict";
var $f888ab066f98567a$var$__importDefault = module.exports && module.exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $f888ab066f98567a$var$decode_json_1 = $f888ab066f98567a$var$__importDefault((parcelRequire("l67Dw")));
// Adapted from https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
var $f888ab066f98567a$var$fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
String.fromCodePoint || function(codePoint) {
    var output = "";
    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
        codePoint = 0xdc00 | codePoint & 0x3ff;
    }
    output += String.fromCharCode(codePoint);
    return output;
};
function $f888ab066f98567a$var$decodeCodePoint(codePoint) {
    if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) return "\uFFFD";
    if (codePoint in $f888ab066f98567a$var$decode_json_1.default) codePoint = $f888ab066f98567a$var$decode_json_1.default[codePoint];
    return $f888ab066f98567a$var$fromCodePoint(codePoint);
}
module.exports.default = $f888ab066f98567a$var$decodeCodePoint;

});
parcelRegister("l67Dw", function(module, exports) {
module.exports = JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}');

});



parcelRegister("1XRjc", function(module, exports) {
"use strict";
var $16e4a71c781c5a0b$var$__importDefault = module.exports && module.exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.escapeUTF8 = module.exports.escape = module.exports.encodeNonAsciiHTML = module.exports.encodeHTML = module.exports.encodeXML = void 0;

var $16e4a71c781c5a0b$var$xml_json_1 = $16e4a71c781c5a0b$var$__importDefault((parcelRequire("ai2qX")));
var $16e4a71c781c5a0b$var$inverseXML = $16e4a71c781c5a0b$var$getInverseObj($16e4a71c781c5a0b$var$xml_json_1.default);
var $16e4a71c781c5a0b$var$xmlReplacer = $16e4a71c781c5a0b$var$getInverseReplacer($16e4a71c781c5a0b$var$inverseXML);
/**
 * Encodes all non-ASCII characters, as well as characters not valid in XML
 * documents using XML entities.
 *
 * If a character has no equivalent entity, a
 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
 */ module.exports.encodeXML = $16e4a71c781c5a0b$var$getASCIIEncoder($16e4a71c781c5a0b$var$inverseXML);

var $16e4a71c781c5a0b$var$entities_json_1 = $16e4a71c781c5a0b$var$__importDefault((parcelRequire("54IHR")));
var $16e4a71c781c5a0b$var$inverseHTML = $16e4a71c781c5a0b$var$getInverseObj($16e4a71c781c5a0b$var$entities_json_1.default);
var $16e4a71c781c5a0b$var$htmlReplacer = $16e4a71c781c5a0b$var$getInverseReplacer($16e4a71c781c5a0b$var$inverseHTML);
/**
 * Encodes all entities and non-ASCII characters in the input.
 *
 * This includes characters that are valid ASCII characters in HTML documents.
 * For example `#` will be encoded as `&num;`. To get a more compact output,
 * consider using the `encodeNonAsciiHTML` function.
 *
 * If a character has no equivalent entity, a
 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
 */ module.exports.encodeHTML = $16e4a71c781c5a0b$var$getInverse($16e4a71c781c5a0b$var$inverseHTML, $16e4a71c781c5a0b$var$htmlReplacer);
/**
 * Encodes all non-ASCII characters, as well as characters not valid in HTML
 * documents using HTML entities.
 *
 * If a character has no equivalent entity, a
 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
 */ module.exports.encodeNonAsciiHTML = $16e4a71c781c5a0b$var$getASCIIEncoder($16e4a71c781c5a0b$var$inverseHTML);
function $16e4a71c781c5a0b$var$getInverseObj(obj) {
    return Object.keys(obj).sort().reduce(function(inverse, name) {
        inverse[obj[name]] = "&" + name + ";";
        return inverse;
    }, {});
}
function $16e4a71c781c5a0b$var$getInverseReplacer(inverse) {
    var single = [];
    var multiple = [];
    for(var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++){
        var k = _a[_i];
        if (k.length === 1) // Add value to single array
        single.push("\\" + k);
        else // Add value to multiple array
        multiple.push(k);
    }
    // Add ranges to single characters.
    single.sort();
    for(var start = 0; start < single.length - 1; start++){
        // Find the end of a run of characters
        var end = start;
        while(end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1))end += 1;
        var count = 1 + end - start;
        // We want to replace at least three characters
        if (count < 3) continue;
        single.splice(start, count, single[start] + "-" + single[end]);
    }
    multiple.unshift("[" + single.join("") + "]");
    return new RegExp(multiple.join("|"), "g");
}
// /[^\0-\x7F]/gu
var $16e4a71c781c5a0b$var$reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
var $16e4a71c781c5a0b$var$getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
String.prototype.codePointAt != null ? function getCodePoint(str) {
    return str.codePointAt(0);
} : function(c) {
    return (c.charCodeAt(0) - 0xd800) * 0x400 + c.charCodeAt(1) - 0xdc00 + 0x10000;
};
function $16e4a71c781c5a0b$var$singleCharReplacer(c) {
    return "&#x" + (c.length > 1 ? $16e4a71c781c5a0b$var$getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
}
function $16e4a71c781c5a0b$var$getInverse(inverse, re) {
    return function(data) {
        return data.replace(re, function(name) {
            return inverse[name];
        }).replace($16e4a71c781c5a0b$var$reNonASCII, $16e4a71c781c5a0b$var$singleCharReplacer);
    };
}
var $16e4a71c781c5a0b$var$reEscapeChars = new RegExp($16e4a71c781c5a0b$var$xmlReplacer.source + "|" + $16e4a71c781c5a0b$var$reNonASCII.source, "g");
/**
 * Encodes all non-ASCII characters, as well as characters not valid in XML
 * documents using numeric hexadecimal reference (eg. `&#xfc;`).
 *
 * Have a look at `escapeUTF8` if you want a more concise output at the expense
 * of reduced transportability.
 *
 * @param data String to escape.
 */ function $16e4a71c781c5a0b$var$escape(data) {
    return data.replace($16e4a71c781c5a0b$var$reEscapeChars, $16e4a71c781c5a0b$var$singleCharReplacer);
}
module.exports.escape = $16e4a71c781c5a0b$var$escape;
/**
 * Encodes all characters not valid in XML documents using numeric hexadecimal
 * reference (eg. `&#xfc;`).
 *
 * Note that the output will be character-set dependent.
 *
 * @param data String to escape.
 */ function $16e4a71c781c5a0b$var$escapeUTF8(data) {
    return data.replace($16e4a71c781c5a0b$var$xmlReplacer, $16e4a71c781c5a0b$var$singleCharReplacer);
}
module.exports.escapeUTF8 = $16e4a71c781c5a0b$var$escapeUTF8;
function $16e4a71c781c5a0b$var$getASCIIEncoder(obj) {
    return function(data) {
        return data.replace($16e4a71c781c5a0b$var$reEscapeChars, function(c) {
            return obj[c] || $16e4a71c781c5a0b$var$singleCharReplacer(c);
        });
    };
}

});




function $ba0748fc6d85beab$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function $ba0748fc6d85beab$export$71511d61b312f219(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                $ba0748fc6d85beab$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                $ba0748fc6d85beab$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}


/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ 
var $aDbZK = parcelRequire("aDbZK");
var $04f2fd83a0b0b7f9$var$extendStatics = function extendStatics1(d, b) {
    $04f2fd83a0b0b7f9$var$extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return $04f2fd83a0b0b7f9$var$extendStatics(d, b);
};
function $04f2fd83a0b0b7f9$export$a8ba968b8961cb8a(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    $04f2fd83a0b0b7f9$var$extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var $04f2fd83a0b0b7f9$export$18ce0697a983be9b = function __assign1() {
    $04f2fd83a0b0b7f9$export$18ce0697a983be9b = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $04f2fd83a0b0b7f9$export$18ce0697a983be9b.apply(this, arguments);
};
function $04f2fd83a0b0b7f9$export$3c9a16f847548506(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function $04f2fd83a0b0b7f9$export$29e00dfd3077644b(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function $04f2fd83a0b0b7f9$export$d5ad3fd78186038f(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function $04f2fd83a0b0b7f9$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function $04f2fd83a0b0b7f9$export$d831c04e792af3d(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function $04f2fd83a0b0b7f9$export$6a2a36740a146cb8(x) {
    return (typeof x === "undefined" ? "undefined" : (0, $aDbZK._)(x)) === "symbol" ? x : "".concat(x);
}
function $04f2fd83a0b0b7f9$export$d1a06452d3489bc7(f, name, prefix) {
    if ((typeof name === "undefined" ? "undefined" : (0, $aDbZK._)(name)) === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function $04f2fd83a0b0b7f9$export$f1db080c865becb9(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function $04f2fd83a0b0b7f9$export$1050f835b63b671e(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function $04f2fd83a0b0b7f9$export$67ebef60e6f28a6(thisArg, body) {
    var _ = {
        label: 0,
        sent: function sent() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var $04f2fd83a0b0b7f9$export$45d3717a4c69092e = Object.create ? function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function get() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function $04f2fd83a0b0b7f9$export$f33643c0debef087(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) $04f2fd83a0b0b7f9$export$45d3717a4c69092e(o, m, p);
}
function $04f2fd83a0b0b7f9$export$19a8beecd37a4c45(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function $04f2fd83a0b0b7f9$export$8d051b38c9118094(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function $04f2fd83a0b0b7f9$export$afc72e2116322959() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($04f2fd83a0b0b7f9$export$8d051b38c9118094(arguments[i]));
    return ar;
}
function $04f2fd83a0b0b7f9$export$6388937ca91ccae8() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function $04f2fd83a0b0b7f9$export$1216008129fb82ed(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function $04f2fd83a0b0b7f9$export$10c90e4f7922046c(v) {
    return this instanceof $04f2fd83a0b0b7f9$export$10c90e4f7922046c ? (this.v = v, this) : new $04f2fd83a0b0b7f9$export$10c90e4f7922046c(v);
}
function $04f2fd83a0b0b7f9$export$e427f37a30a4de9b(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function awaitReturn(f) {
        return function(v) {
            return Promise.resolve(v).then(f, reject);
        };
    }
    function verb(n, f) {
        if (g[n]) {
            i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
            if (f) i[n] = f(i[n]);
        }
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof $04f2fd83a0b0b7f9$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function $04f2fd83a0b0b7f9$export$bbd80228419bb833(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: $04f2fd83a0b0b7f9$export$10c90e4f7922046c(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function $04f2fd83a0b0b7f9$export$e3b29a3d6162315f(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof $04f2fd83a0b0b7f9$export$19a8beecd37a4c45 === "function" ? $04f2fd83a0b0b7f9$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function $04f2fd83a0b0b7f9$export$4fb47efe1390b86f(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var $04f2fd83a0b0b7f9$var$__setModuleDefault = Object.create ? function __setModuleDefault(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function $04f2fd83a0b0b7f9$export$c21735bcef00d192(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $04f2fd83a0b0b7f9$export$45d3717a4c69092e(result, mod, k);
    }
    $04f2fd83a0b0b7f9$var$__setModuleDefault(result, mod);
    return result;
}
function $04f2fd83a0b0b7f9$export$da59b14a69baef04(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function $04f2fd83a0b0b7f9$export$d5dcaf168c640c35(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function $04f2fd83a0b0b7f9$export$d40a35129aaff81f(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function $04f2fd83a0b0b7f9$export$81fdc39f203e4e04(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
function $04f2fd83a0b0b7f9$export$88ac25d8e944e405(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function dispose() {
            try {
                inner.call(this);
            } catch (e) {
                return Promise.reject(e);
            }
        };
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) env.stack.push({
        async: true
    });
    return value;
}
var $04f2fd83a0b0b7f9$var$_SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function _SuppressedError(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function $04f2fd83a0b0b7f9$export$8f076105dc360e92(env) {
    function fail(e) {
        env.error = env.hasError ? new $04f2fd83a0b0b7f9$var$_SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    var r, s = 0;
    function next() {
        while(r = env.stack.pop())try {
            if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
            if (r.dispose) {
                var result = r.dispose.call(r.value);
                if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                });
            } else s |= 1;
        } catch (e) {
            fail(e);
        }
        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
        if (env.hasError) throw env.error;
    }
    return next();
}
var $04f2fd83a0b0b7f9$export$2e2bcd8739ae039 = {
    __extends: $04f2fd83a0b0b7f9$export$a8ba968b8961cb8a,
    __assign: $04f2fd83a0b0b7f9$export$18ce0697a983be9b,
    __rest: $04f2fd83a0b0b7f9$export$3c9a16f847548506,
    __decorate: $04f2fd83a0b0b7f9$export$29e00dfd3077644b,
    __param: $04f2fd83a0b0b7f9$export$d5ad3fd78186038f,
    __metadata: $04f2fd83a0b0b7f9$export$f1db080c865becb9,
    __awaiter: $04f2fd83a0b0b7f9$export$1050f835b63b671e,
    __generator: $04f2fd83a0b0b7f9$export$67ebef60e6f28a6,
    __createBinding: $04f2fd83a0b0b7f9$export$45d3717a4c69092e,
    __exportStar: $04f2fd83a0b0b7f9$export$f33643c0debef087,
    __values: $04f2fd83a0b0b7f9$export$19a8beecd37a4c45,
    __read: $04f2fd83a0b0b7f9$export$8d051b38c9118094,
    __spread: $04f2fd83a0b0b7f9$export$afc72e2116322959,
    __spreadArrays: $04f2fd83a0b0b7f9$export$6388937ca91ccae8,
    __spreadArray: $04f2fd83a0b0b7f9$export$1216008129fb82ed,
    __await: $04f2fd83a0b0b7f9$export$10c90e4f7922046c,
    __asyncGenerator: $04f2fd83a0b0b7f9$export$e427f37a30a4de9b,
    __asyncDelegator: $04f2fd83a0b0b7f9$export$bbd80228419bb833,
    __asyncValues: $04f2fd83a0b0b7f9$export$e3b29a3d6162315f,
    __makeTemplateObject: $04f2fd83a0b0b7f9$export$4fb47efe1390b86f,
    __importStar: $04f2fd83a0b0b7f9$export$c21735bcef00d192,
    __importDefault: $04f2fd83a0b0b7f9$export$da59b14a69baef04,
    __classPrivateFieldGet: $04f2fd83a0b0b7f9$export$d5dcaf168c640c35,
    __classPrivateFieldSet: $04f2fd83a0b0b7f9$export$d40a35129aaff81f,
    __classPrivateFieldIn: $04f2fd83a0b0b7f9$export$81fdc39f203e4e04,
    __addDisposableResource: $04f2fd83a0b0b7f9$export$88ac25d8e944e405,
    __disposeResources: $04f2fd83a0b0b7f9$export$8f076105dc360e92
};






"use strict";
var $162001cafa2b40fd$export$af5de1609f06c8e6 = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
];
var $162001cafa2b40fd$export$6c04b58eee2a9a32 = function() {
    var visibleElements = document.querySelectorAll('.item:not([style*="display: none"])');
    visibleElements.forEach(function(element, index) {
        if (getComputedStyle(element).display !== "none") element.setAttribute("tabindex", index);
        else element.removeAttribute("tabindex");
    });
};
var $162001cafa2b40fd$export$4f9f22e5a1695548 = function load_ads() {
    getKaiAd({
        publisher: "4408b6fa-4e1d-438f-af4d-f3be2fa97208",
        app: "flop",
        slot: "flop",
        test: 0,
        timeout: 10000,
        h: 120,
        w: 240,
        container: document.getElementById("KaiOSads-Wrapper"),
        onerror: function(err) {
            return console.error("Error:", err);
        },
        onready: function(ad) {
            // user clicked the ad
            ad.on("click", function() {
                return console.log("click event");
            });
            // user closed the ad (currently only with fullscreen)
            ad.on("close", function() {
                return console.log("close event");
            });
            // the ad succesfully displayed
            ad.on("display", function() {
                $162001cafa2b40fd$export$6c04b58eee2a9a32();
            });
            // Ad is ready to be displayed
            // calling 'display' will display the ad
            ad.call("display", {
                navClass: "item",
                tabindex: 3,
                display: "block"
            });
        }
    });
};
function $162001cafa2b40fd$export$9e15fb06e64c4810(length) {
    var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var result = "";
    for(var i = 0; i < length; i++){
        var randomIndex = Math.floor(Math.random() * characters.length);
        result += characters.charAt(randomIndex);
    }
    return result;
}
//polyfill
if (window.NodeList && !NodeList.prototype.forEach) NodeList.prototype.forEach = Array.prototype.forEach;
var $162001cafa2b40fd$export$33d904bed5c25b69 = function geolocation(callback) {
    var n = document.getElementById("side-toast");
    if (n) {
        n.style.transform = "translate(0vw,0px)";
        n.innerHTML = "Determining position...";
    }
    var lastCallbackTime = 0;
    var showPosition = function showPosition(position) {
        console.log(position);
        var now = Date.now();
        // Only proceed if 20 seconds have passed since the last callback
        if (now - lastCallbackTime >= 20000) {
            lastCallbackTime = now;
            callback(position);
            if (n) {
                n.style.transform = "translate(-100vw,0px)";
                n.innerHTML = "";
            }
        }
    };
    var error = function error(error) {
        if (n) {
            n.style.transform = "translate(-100vw,0px)";
            n.innerHTML = "";
        }
        switch(error.code){
            case error.PERMISSION_DENIED:
                $162001cafa2b40fd$export$6593825dc0f3a767("Location not provided", 5000);
                break;
            case error.POSITION_UNAVAILABLE:
                $162001cafa2b40fd$export$6593825dc0f3a767("Current location not available", 5000);
                break;
            case error.TIMEOUT:
                $162001cafa2b40fd$export$6593825dc0f3a767("Current location not available", 5000);
                break;
            default:
                $162001cafa2b40fd$export$6593825dc0f3a767("Current location not available", 5000);
                break;
        }
    };
    // Use watchPosition to continuously monitor location
    var watchID = navigator.geolocation.watchPosition(showPosition, error, {
        enableHighAccuracy: true,
        timeout: 20000,
        maximumAge: 1000
    });
};
var $162001cafa2b40fd$export$113cec1d2aba8489 = function clipboard() {
    try {
        var text = window.location.origin + "/#!/intro?id=" + (0, $17d11d58618cc814$export$a5a6e0b888b2c992).custom_peer_id;
        var input = document.createElement("input");
        input.setAttribute("value", text);
        document.body.appendChild(input);
        input.select();
        var result = document.execCommand("copy");
        document.body.removeChild(input);
        $162001cafa2b40fd$export$6593825dc0f3a767("You can now open an app of your choice and invite a person to chat, the address that leads to the chat room is in your clipboard", 3000);
        return result; // Returns true if the copy was successful, false otherwise
    } catch (error) {
        console.error("Failed to copy text: ", error);
        return false; // Returns false if an error occurred
    }
};
function $162001cafa2b40fd$export$ed80d9de1d9df928(url) {
    return new Promise(function(resolve) {
        try {
            var activity = new MozActivity({
                name: "share",
                data: {
                    type: "url",
                    url: url
                }
            });
            activity.onsuccess = function() {
                resolve(true);
            };
            activity.onerror = function() {
                console.log("The activity encountered an error: " + this.error);
                resolve(false);
            };
        } catch (e) {
        // Handle the case where MozActivity is not available
        }
        if ("b2g" in navigator) {
            var activity1 = new WebActivity("share", {
                type: "url",
                url: url
            });
            activity1.start().then(function() {
                console.log("WebActivity successful");
                resolve(true);
            }, function(err) {
                console.log(err);
                resolve(false);
            });
        }
        if ((0, $17d11d58618cc814$export$471f7ae5c4103ae1).notKaiOS) {
            var success = $162001cafa2b40fd$export$113cec1d2aba8489();
            if (success) {
                console.log("Text copied to clipboard successfully.");
                resolve(true);
            } else {
                console.log("Failed to copy text to clipboard.");
                resolve(false);
            }
        }
        if ((0, $17d11d58618cc814$export$471f7ae5c4103ae1).os !== "unknow") {
            if (navigator.share) navigator.share({
                title: "Flop P2P-Messenger",
                text: "Flop P2P-Messenger",
                url: url
            }).then(function() {
                console.log("Successful share");
                resolve(true);
            }).catch(function(error) {
                console.log("Error sharing", error);
                resolve(false);
            });
            else {
                console.log("Share not supported on this browser, do it the old way.");
                resolve(false);
            }
        }
    });
}
function $162001cafa2b40fd$export$ad64e00ff47c1b17() {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;
    // iOS detection
    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) return "iOS";
    // Android detection
    if (/android/i.test(userAgent)) return "Android";
    "b2g" in navigator || navigator;
    // Other mobile OS or not a mobile device
    return false;
}
function $162001cafa2b40fd$export$3ce6949f20cea765(url) {
    try {
        var activity = new MozActivity({
            name: "view",
            data: {
                type: "url",
                url: url
            }
        });
        activity.onsuccess = function() {};
        activity.onerror = function() {
            console.log("The activity encounter en error: " + this.error);
        };
    } catch (e) {}
    if ("b2g" in navigator) {
        var activity1 = new WebActivity("view", {
            type: "url",
            url: url
        });
        activity1.start().then(function(rv) {
            console.log("Results passed back from activity handler:");
            console.log(rv);
        }, function(err) {
            console.log(err);
        });
    }
}
var $162001cafa2b40fd$export$8d5407925537b0ea = function(n) {
    var smsLink = document.createElement("a");
    smsLink.href = "sms:" + n;
    smsLink.textContent = "";
    document.body.appendChild(smsLink);
    smsLink.addEventListener("click", function() {});
    smsLink.click();
    document.body.removeChild(smsLink);
};
var $162001cafa2b40fd$export$d290fa47940df19d = function(n) {
    var email = "";
    var subject = "";
    var emailBody = n;
    var smsLink = document.createElement("a");
    smsLink.href = "mailto:" + email + "?subject=" + subject + "&body=" + emailBody;
    smsLink.textContent = "";
    document.body.appendChild(smsLink);
    smsLink.addEventListener("click", function() {});
    smsLink.click();
    document.body.removeChild(smsLink);
};
//check if internet connection
function $162001cafa2b40fd$var$check_iconnection() {
    function updateOfflineStatus() {
        $162001cafa2b40fd$export$a224d1f4f6f98541("Your Browser is offline", 15000);
        return false;
    }
    window.addEventListener("offline", updateOfflineStatus);
}
function $162001cafa2b40fd$var$delete_file(filename) {
    var sdcard = navigator.getDeviceStorages("sdcard");
    var request = sdcard[1].delete(filename);
    request.onsuccess = function() {
    //toaster("File deleted", 2000);
    };
    request.onerror = function() {
    //toaster("Unable to delete the file: " + this.error, 2000);
    };
}
function $162001cafa2b40fd$var$get_file(filename) {
    var sdcard = navigator.getDeviceStorages("sdcard");
    var request = sdcard[1].get(filename);
    request.onsuccess = function() {
        var file = this.result;
    //alert("Get the file: " + file.name);
    };
    request.onerror = function() {
    //alert("Unable to get the file: " + this.error);
    };
}
function $162001cafa2b40fd$var$write_file(data, filename) {
    var sdcard = navigator.getDeviceStorages("sdcard");
    var file = new Blob([
        data
    ], {
        type: "text/plain"
    });
    var request = sdcard[1].addNamed(file, filename);
    request.onsuccess = function() {
        var name1 = this.result;
    //toaster('File "' + name + '" successfully wrote on the sdcard storage area', 2000);
    };
    // An error typically occur if a file with the same name already exist
    request.onerror = function() {
        $162001cafa2b40fd$export$a224d1f4f6f98541("Unable to write the file: " + this.error, 2000);
    };
}
var $162001cafa2b40fd$export$b04ad9f70842c3f1 = function sort_array(arr, item_key, type) {
    if (type == "date") arr.sort(function(a, b) {
        var da = new Date(a[item_key]), db = new Date(b[item_key]);
        return da - db;
    });
    //sort by number
    if (type == "number") arr.sort(function(a, b) {
        return b[item_key] - a[item_key];
    });
    //sort by string
    if (type == "string") arr.sort(function(a, b) {
        var fa = a[item_key].toLowerCase(), fb = b[item_key].toLowerCase();
        if (fa < fb) return -1;
        if (fa > fb) return 1;
        return 0;
    });
};
var $162001cafa2b40fd$var$uid = function uid() {
    function _p8(s) {
        var p = (Math.random().toString(16) + "000000000").substr(2, 8);
        return s ? "-" + p.substr(0, 4) + "-" + p.substr(4, 4) : p;
    }
    return "greg@" + _p8() + _p8(true) + _p8(true) + _p8();
};
var $162001cafa2b40fd$var$notification = "";
var $162001cafa2b40fd$var$notify = function notify(param_title, param_text, param_silent) {
    var options = {
        body: param_text,
        silent: param_silent,
        requireInteraction: false
    };
    // Let's check whether notification permissions have already been granted
    if (Notification.permission === "granted") // If it's okay let's create a notification
    $162001cafa2b40fd$var$notification = new Notification(param_title, options);
    // Otherwise, we need to ask the user for permission
    if (Notification.permission !== "denied") Notification.requestPermission().then(function(permission) {
        // If the user accepts, let's create a notification
        if (permission === "granted") $162001cafa2b40fd$var$notification = new Notification(param_title, options);
    });
};
var $162001cafa2b40fd$export$75525525b38ea7b3 = function pushLocalNotification(title, body) {
    window.Notification.requestPermission().then(function(result) {
        var notification = new window.Notification(title, {
            body: body
        });
        if (Notification.permission === "denied") console.error("Notification permission is denied");
        else if (Notification.permission === "default") Notification.requestPermission().then(function(permission) {
            permission;
        });
        notification.onerror = function(err) {
            console.log(err);
        };
        notification.onclick = function(event) {
            if (window.navigator.mozApps) {
                var request = window.navigator.mozApps.getSelf();
                request.onsuccess = function() {
                    if (request.result) {
                        notification.close();
                        request.result.launch();
                    }
                };
            } else window.open(document.location.origin, "_blank");
        };
        notification.onshow = function() {
        // notification.close();
        };
    });
};
if (navigator.mozSetMessageHandler) navigator.mozSetMessageHandler("alarm", function(message) {
    $162001cafa2b40fd$export$75525525b38ea7b3("Greg", message.data.note);
});
function $162001cafa2b40fd$export$a22775fa5e2eebd9(url) {
    var pattern = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
    if (pattern.test(url)) return true;
    return false;
}
var $162001cafa2b40fd$export$39e873de56f329d8 = function getManifest(callback) {
    if (navigator.mozApps) {
        var self = navigator.mozApps.getSelf();
        self.onsuccess = function() {
            callback(self.result);
        };
        self.onerror = function() {};
    } else fetch("/manifest.webmanifest").then(function(r) {
        return r.json();
    }).then(function(parsedResponse) {
        return callback(parsedResponse);
    });
};
//top toaster
var $162001cafa2b40fd$var$queue = [];
var $162001cafa2b40fd$var$timeout;
var $162001cafa2b40fd$export$a224d1f4f6f98541 = function toaster(text, time) {
    $162001cafa2b40fd$var$queue.push({
        text: text,
        time: time
    });
    if ($162001cafa2b40fd$var$queue.length === 1) $162001cafa2b40fd$var$toast_q(text, time);
};
var $162001cafa2b40fd$var$toast_q = function toast_q1(text, time) {
    var x = document.querySelector("div#toast");
    x.innerHTML = $162001cafa2b40fd$var$queue[0].text;
    x.style.transform = "translate(0px, 0px)";
    $162001cafa2b40fd$var$timeout = setTimeout(function() {
        $162001cafa2b40fd$var$timeout = null;
        x.style.transform = "translate(0px, -100px)";
        $162001cafa2b40fd$var$queue = $162001cafa2b40fd$var$queue.slice(1);
        if ($162001cafa2b40fd$var$queue.length > 0) setTimeout(function() {
            $162001cafa2b40fd$var$toast_q(text, time);
        }, 1000);
    }, time);
};
//side toaster
var $162001cafa2b40fd$var$queue_st = [];
var $162001cafa2b40fd$export$6593825dc0f3a767 = function side_toaster(text, time) {
    $162001cafa2b40fd$var$queue_st.push({
        text: text,
        time: time
    });
    if ($162001cafa2b40fd$var$queue_st.length === 1) $162001cafa2b40fd$var$toast_qq(text, time);
};
var $162001cafa2b40fd$var$toast_qq = function toast_qq1(text, time) {
    var x = document.querySelector("div#side-toast");
    x.style.opacity = "100";
    x.innerHTML = $162001cafa2b40fd$var$queue_st[0].text;
    x.style.transform = "translate(0vh, 0vw)";
    $162001cafa2b40fd$var$timeout = setTimeout(function() {
        x.style.transform = "translate(-100vw,0px)";
        $162001cafa2b40fd$var$queue_st = $162001cafa2b40fd$var$queue.slice(1);
        if ($162001cafa2b40fd$var$queue_st.length > 0) setTimeout(function() {
            $162001cafa2b40fd$var$toast_qq(text, time);
        }, 1000);
    }, time);
};
var $162001cafa2b40fd$export$247be4ede8e3a24a = function bottom_bar(left, center, right) {
    document.querySelector("div#bottom-bar div.button-left").innerHTML = left;
    document.querySelector("div#bottom-bar div.button-center").innerHTML = center;
    document.querySelector("div#bottom-bar div.button-right").innerHTML = right;
    if (left == "" && center == "" && right == "") document.querySelector("div#bottom-bar").style.display = "none";
    else document.querySelector("div#bottom-bar").style.display = "block";
};
var $162001cafa2b40fd$export$7ce2ea7c45ae9a07 = function top_bar(left, center, right) {
    document.querySelector("div#top-bar div.button-left").innerHTML = left;
    document.querySelector("div#top-bar div.button-center").innerHTML = center;
    document.querySelector("div#top-bar div.button-right").innerHTML = right;
    if (left == "" && center == "" && right == "") document.querySelector("div#top-bar").style.display = "none";
    else document.querySelector("div#top-bar").style.display = "block";
};
var $162001cafa2b40fd$var$lock;
var $162001cafa2b40fd$var$screenlock = function screenlock(stat) {
    if (typeof window.navigator.requestWakeLock === "undefined") return false;
    if (stat == "lock") {
        $162001cafa2b40fd$var$lock = window.navigator.requestWakeLock("screen");
        $162001cafa2b40fd$var$lock.onsuccess = function() {};
        $162001cafa2b40fd$var$lock.onerror = function() {
            alert("An error occurred: " + this.error.name);
        };
    }
    if (stat == "unlock") {
        if ($162001cafa2b40fd$var$lock.topic == "screen") $162001cafa2b40fd$var$lock.unlock();
    }
};
var $162001cafa2b40fd$export$6714d0f9237d35de = function pick_image(callback) {
    try {
        var pick = new MozActivity({
            name: "pick",
            data: {
                type: [
                    "image/png",
                    "image/jpg",
                    "image/jpeg"
                ]
            }
        });
        pick.onsuccess = function(e) {
            console.log("success" + this.result);
            callback(this.result);
        };
        pick.onerror = function() {
            console.log("The activity encounter en error: " + this.error);
        };
    } catch (e) {
        console.log(e);
    }
    if ("b2g" in navigator) {
        var pick1 = new WebActivity("pick", {
            type: "image/*"
        });
        pick1.start().then(function(rv) {
            callback(rv);
        }, function(err) {
            console.log(err);
        });
    }
    if ((0, $17d11d58618cc814$export$471f7ae5c4103ae1).notKaiOS) {
        var fileInput = document.createElement("input");
        fileInput.type = "file";
        fileInput.accept = "image/*";
        fileInput.style.display = "none";
        document.body.appendChild(fileInput);
        fileInput.click();
        fileInput.addEventListener("change", function(event) {
            var file = event.target.files[0];
            if (file) callback({
                blob: file,
                filename: file.name,
                filetype: file.type
            });
        });
    }
};
function $162001cafa2b40fd$export$dccb98b97a3cb8be(storage, path, notification) {
    var sdcard = navigator.getDeviceStorages("sdcard");
    var requestDel = sdcard[storage].delete(path);
    requestDel.onsuccess = function() {
        if (notification == "notification") helper.toaster('File "' + name + '" successfully deleted frome the sdcard storage area');
    };
    requestDel.onerror = function() {
        helper.toaster("Unable to delete the file: " + this.error);
    };
}
var $162001cafa2b40fd$export$bb3b75778e3e272 = function downloadFile(filename, data, callback) {
    if ((0, $17d11d58618cc814$export$471f7ae5c4103ae1).notKaiOS) {
        var imgSrc = data;
        // Create a link element
        var a = document.createElement("a");
        a.href = imgSrc;
        a.download = filename;
        // Append the link to the body
        document.body.appendChild(a);
        // Programmatically click the link to trigger the download
        a.click();
        // Remove the link from the document
        document.body.removeChild(a);
    } else {
        var sdcard = "";
        try {
            sdcard = navigator.getDeviceStorage("sdcard");
        } catch (e) {}
        if ("b2g" in navigator) try {
            sdcard = navigator.b2g.getDeviceStorage("sdcard");
        } catch (e) {}
        fetch(data).then(function(res) {
            return res.blob();
        }).then(function(blob) {
            var request = sdcard.addNamed(blob, filename);
            request.onsuccess = function() {
                $162001cafa2b40fd$export$6593825dc0f3a767("file downloaded", 2000);
            };
            request.onerror = function() {
                $162001cafa2b40fd$export$6593825dc0f3a767("Unable to download the file, the file probably already exists.", 4000);
            };
        }).catch(function(error) {
            $162001cafa2b40fd$export$6593825dc0f3a767("Unable to download the file", 2000);
        });
    }
};
function $162001cafa2b40fd$export$637fd9537164f29b() {
    var mediaRecorder;
    var recordedChunks = [];
    var isInitialized = false;
    var stream;
    function init() {
        return _init.apply(this, arguments);
    }
    function _init() {
        _init = (0, $ba0748fc6d85beab$export$71511d61b312f219)(function() {
            var error;
            return (0, $04f2fd83a0b0b7f9$export$67ebef60e6f28a6)(this, function(_state) {
                switch(_state.label){
                    case 0:
                        _state.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4,
                            navigator.mediaDevices.getUserMedia({
                                audio: true
                            })
                        ];
                    case 1:
                        stream = _state.sent();
                        mediaRecorder = new MediaRecorder(stream, {
                            mimeType: "audio/webm"
                        });
                        mediaRecorder.ondataavailable = function(event) {
                            console.log(event);
                            if (event.data.size > 0) {
                                recordedChunks.push(event.data);
                                console.log(event.data);
                            }
                        };
                        mediaRecorder.addEventListener("error", function(event) {
                            console.error("Error recording stream: ".concat(event.error.name));
                        });
                        isInitialized = true; // Set the flag to true when initialization is complete
                        return [
                            3,
                            3
                        ];
                    case 2:
                        error = _state.sent();
                        console.error("Error accessing media devices.", error);
                        return [
                            3,
                            3
                        ];
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
        return _init.apply(this, arguments);
    }
    function startRecording() {
        return _startRecording.apply(this, arguments);
    }
    function _startRecording() {
        _startRecording = (0, $ba0748fc6d85beab$export$71511d61b312f219)(function() {
            return (0, $04f2fd83a0b0b7f9$export$67ebef60e6f28a6)(this, function(_state) {
                switch(_state.label){
                    case 0:
                        if (!!isInitialized) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            init()
                        ];
                    case 1:
                        _state.sent(); // Ensure initialization is complete before starting recording
                        _state.label = 2;
                    case 2:
                        recordedChunks = []; // Clear any previous recordings
                        mediaRecorder.start();
                        return [
                            2
                        ];
                }
            });
        });
        return _startRecording.apply(this, arguments);
    }
    function stopRecording() {
        return new Promise(function(resolve) {
            mediaRecorder.onstop = function() {
                var mimeType = "";
                if (MediaRecorder.isTypeSupported("audio/webm; codecs=opus")) mimeType = "audio/webm; codecs=opus";
                else if (MediaRecorder.isTypeSupported("audio/ogg; codecs=opus")) mimeType = "audio/ogg; codecs=opus";
                else if (MediaRecorder.isTypeSupported("audio/mpeg")) mimeType = "audio/mpeg";
                else console.warn("No supported MIME type found for audio recording.");
                var blob = new Blob(recordedChunks, {
                    type: mimeType
                });
                recordedChunks = [];
                resolve(blob);
            };
            mediaRecorder.stop();
        });
    }
    function cleanup() {
        if (stream) stream.getTracks().forEach(function(track) {
            return track.stop();
        });
        mediaRecorder = null;
        recordedChunks = [];
        stream = null;
        isInitialized = false;
    }
    // Return an object with the methods to start and stop recording
    return {
        startRecording: startRecording,
        stopRecording: stopRecording,
        cleanup: cleanup
    };
}


var $39e0152360893de3$exports = {};
(function webpackUniversalModuleDefinition(root, factory) {
    $39e0152360893de3$exports = factory();
})(typeof self !== "undefined" ? self : $39e0152360893de3$exports, function() {
    return /******/ function(modules) {
        /******/ // The module cache
        /******/ var installedModules = {};
        /******/ /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports;
            /******/ // Create a new module (and put it into the cache)
            /******/ var module1 = installedModules[moduleId] = {
                /******/ i: moduleId,
                /******/ l: false,
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __webpack_require__);
            /******/ /******/ // Flag the module as loaded
            /******/ module1.l = true;
            /******/ /******/ // Return the exports of the module
            /******/ return module1.exports;
        /******/ }
        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)
        /******/ __webpack_require__.m = modules;
        /******/ /******/ // expose the module cache
        /******/ __webpack_require__.c = installedModules;
        /******/ /******/ // define getter function for harmony exports
        /******/ __webpack_require__.d = function(exports, name, getter) {
            /******/ if (!__webpack_require__.o(exports, name)) /******/ Object.defineProperty(exports, name, {
                /******/ configurable: false,
                /******/ enumerable: true,
                /******/ get: getter
            });
        /******/ };
        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ __webpack_require__.n = function(module1) {
            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {
                return module1["default"];
            } : /******/ function getModuleExports() {
                return module1;
            };
            /******/ __webpack_require__.d(getter, "a", getter);
            /******/ return getter;
        /******/ };
        /******/ /******/ // Object.prototype.hasOwnProperty.call
        /******/ __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/ /******/ // __webpack_public_path__
        /******/ __webpack_require__.p = "";
        /******/ /******/ // Load entry module and return exports
        /******/ return __webpack_require__(__webpack_require__.s = 3);
    /******/ }([
        /* 0 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix = /** @class */ function() {
                function BitMatrix(data, width) {
                    this.width = width;
                    this.height = data.length / width;
                    this.data = data;
                }
                BitMatrix.createEmpty = function(width, height) {
                    return new BitMatrix(new Uint8ClampedArray(width * height), width);
                };
                BitMatrix.prototype.get = function(x, y) {
                    if (x < 0 || x >= this.width || y < 0 || y >= this.height) return false;
                    return !!this.data[y * this.width + x];
                };
                BitMatrix.prototype.set = function(x, y, v) {
                    this.data[y * this.width + x] = v ? 1 : 0;
                };
                BitMatrix.prototype.setRegion = function(left, top, width, height, v) {
                    for(var y = top; y < top + height; y++)for(var x = left; x < left + width; x++)this.set(x, y, !!v);
                };
                return BitMatrix;
            }();
            exports.BitMatrix = BitMatrix;
        /***/ },
        /* 1 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var GenericGFPoly_1 = __webpack_require__(2);
            function addOrSubtractGF(a, b) {
                return a ^ b; // tslint:disable-line:no-bitwise
            }
            exports.addOrSubtractGF = addOrSubtractGF;
            var GenericGF = /** @class */ function() {
                function GenericGF(primitive, size, genBase) {
                    this.primitive = primitive;
                    this.size = size;
                    this.generatorBase = genBase;
                    this.expTable = new Array(this.size);
                    this.logTable = new Array(this.size);
                    var x = 1;
                    for(var i = 0; i < this.size; i++){
                        this.expTable[i] = x;
                        x = x * 2;
                        if (x >= this.size) x = (x ^ this.primitive) & this.size - 1; // tslint:disable-line:no-bitwise
                    }
                    for(var i = 0; i < this.size - 1; i++)this.logTable[this.expTable[i]] = i;
                    this.zero = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([
                        0
                    ]));
                    this.one = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([
                        1
                    ]));
                }
                GenericGF.prototype.multiply = function(a, b) {
                    if (a === 0 || b === 0) return 0;
                    return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];
                };
                GenericGF.prototype.inverse = function(a) {
                    if (a === 0) throw new Error("Can't invert 0");
                    return this.expTable[this.size - this.logTable[a] - 1];
                };
                GenericGF.prototype.buildMonomial = function(degree, coefficient) {
                    if (degree < 0) throw new Error("Invalid monomial degree less than 0");
                    if (coefficient === 0) return this.zero;
                    var coefficients = new Uint8ClampedArray(degree + 1);
                    coefficients[0] = coefficient;
                    return new GenericGFPoly_1.default(this, coefficients);
                };
                GenericGF.prototype.log = function(a) {
                    if (a === 0) throw new Error("Can't take log(0)");
                    return this.logTable[a];
                };
                GenericGF.prototype.exp = function(a) {
                    return this.expTable[a];
                };
                return GenericGF;
            }();
            exports.default = GenericGF;
        /***/ },
        /* 2 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var GenericGF_1 = __webpack_require__(1);
            var GenericGFPoly = /** @class */ function() {
                function GenericGFPoly(field, coefficients) {
                    if (coefficients.length === 0) throw new Error("No coefficients.");
                    this.field = field;
                    var coefficientsLength = coefficients.length;
                    if (coefficientsLength > 1 && coefficients[0] === 0) {
                        // Leading term must be non-zero for anything except the constant polynomial "0"
                        var firstNonZero = 1;
                        while(firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0)firstNonZero++;
                        if (firstNonZero === coefficientsLength) this.coefficients = field.zero.coefficients;
                        else {
                            this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);
                            for(var i = 0; i < this.coefficients.length; i++)this.coefficients[i] = coefficients[firstNonZero + i];
                        }
                    } else this.coefficients = coefficients;
                }
                GenericGFPoly.prototype.degree = function() {
                    return this.coefficients.length - 1;
                };
                GenericGFPoly.prototype.isZero = function() {
                    return this.coefficients[0] === 0;
                };
                GenericGFPoly.prototype.getCoefficient = function(degree) {
                    return this.coefficients[this.coefficients.length - 1 - degree];
                };
                GenericGFPoly.prototype.addOrSubtract = function(other) {
                    var _a;
                    if (this.isZero()) return other;
                    if (other.isZero()) return this;
                    var smallerCoefficients = this.coefficients;
                    var largerCoefficients = other.coefficients;
                    if (smallerCoefficients.length > largerCoefficients.length) _a = [
                        largerCoefficients,
                        smallerCoefficients
                    ], smallerCoefficients = _a[0], largerCoefficients = _a[1];
                    var sumDiff = new Uint8ClampedArray(largerCoefficients.length);
                    var lengthDiff = largerCoefficients.length - smallerCoefficients.length;
                    for(var i = 0; i < lengthDiff; i++)sumDiff[i] = largerCoefficients[i];
                    for(var i = lengthDiff; i < largerCoefficients.length; i++)sumDiff[i] = GenericGF_1.addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);
                    return new GenericGFPoly(this.field, sumDiff);
                };
                GenericGFPoly.prototype.multiply = function(scalar) {
                    if (scalar === 0) return this.field.zero;
                    if (scalar === 1) return this;
                    var size = this.coefficients.length;
                    var product = new Uint8ClampedArray(size);
                    for(var i = 0; i < size; i++)product[i] = this.field.multiply(this.coefficients[i], scalar);
                    return new GenericGFPoly(this.field, product);
                };
                GenericGFPoly.prototype.multiplyPoly = function(other) {
                    if (this.isZero() || other.isZero()) return this.field.zero;
                    var aCoefficients = this.coefficients;
                    var aLength = aCoefficients.length;
                    var bCoefficients = other.coefficients;
                    var bLength = bCoefficients.length;
                    var product = new Uint8ClampedArray(aLength + bLength - 1);
                    for(var i = 0; i < aLength; i++){
                        var aCoeff = aCoefficients[i];
                        for(var j = 0; j < bLength; j++)product[i + j] = GenericGF_1.addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));
                    }
                    return new GenericGFPoly(this.field, product);
                };
                GenericGFPoly.prototype.multiplyByMonomial = function(degree, coefficient) {
                    if (degree < 0) throw new Error("Invalid degree less than 0");
                    if (coefficient === 0) return this.field.zero;
                    var size = this.coefficients.length;
                    var product = new Uint8ClampedArray(size + degree);
                    for(var i = 0; i < size; i++)product[i] = this.field.multiply(this.coefficients[i], coefficient);
                    return new GenericGFPoly(this.field, product);
                };
                GenericGFPoly.prototype.evaluateAt = function(a) {
                    var result = 0;
                    if (a === 0) // Just return the x^0 coefficient
                    return this.getCoefficient(0);
                    var size = this.coefficients.length;
                    if (a === 1) {
                        // Just the sum of the coefficients
                        this.coefficients.forEach(function(coefficient) {
                            result = GenericGF_1.addOrSubtractGF(result, coefficient);
                        });
                        return result;
                    }
                    result = this.coefficients[0];
                    for(var i = 1; i < size; i++)result = GenericGF_1.addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);
                    return result;
                };
                return GenericGFPoly;
            }();
            exports.default = GenericGFPoly;
        /***/ },
        /* 3 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var binarizer_1 = __webpack_require__(4);
            var decoder_1 = __webpack_require__(5);
            var extractor_1 = __webpack_require__(11);
            var locator_1 = __webpack_require__(12);
            function scan(matrix) {
                var locations = locator_1.locate(matrix);
                if (!locations) return null;
                for(var _i = 0, locations_1 = locations; _i < locations_1.length; _i++){
                    var location_1 = locations_1[_i];
                    var extracted = extractor_1.extract(matrix, location_1);
                    var decoded = decoder_1.decode(extracted.matrix);
                    if (decoded) return {
                        binaryData: decoded.bytes,
                        data: decoded.text,
                        chunks: decoded.chunks,
                        version: decoded.version,
                        location: {
                            topRightCorner: extracted.mappingFunction(location_1.dimension, 0),
                            topLeftCorner: extracted.mappingFunction(0, 0),
                            bottomRightCorner: extracted.mappingFunction(location_1.dimension, location_1.dimension),
                            bottomLeftCorner: extracted.mappingFunction(0, location_1.dimension),
                            topRightFinderPattern: location_1.topRight,
                            topLeftFinderPattern: location_1.topLeft,
                            bottomLeftFinderPattern: location_1.bottomLeft,
                            bottomRightAlignmentPattern: location_1.alignmentPattern
                        }
                    };
                }
                return null;
            }
            var defaultOptions = {
                inversionAttempts: "attemptBoth"
            };
            function jsQR(data, width, height, providedOptions) {
                if (providedOptions === void 0) providedOptions = {};
                var options = defaultOptions;
                Object.keys(options || {}).forEach(function(opt) {
                    options[opt] = providedOptions[opt] || options[opt];
                });
                var shouldInvert = options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst";
                var tryInvertedFirst = options.inversionAttempts === "onlyInvert" || options.inversionAttempts === "invertFirst";
                var _a = binarizer_1.binarize(data, width, height, shouldInvert), binarized = _a.binarized, inverted = _a.inverted;
                var result = scan(tryInvertedFirst ? inverted : binarized);
                if (!result && (options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst")) result = scan(tryInvertedFirst ? binarized : inverted);
                return result;
            }
            jsQR.default = jsQR;
            exports.default = jsQR;
        /***/ },
        /* 4 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix_1 = __webpack_require__(0);
            var REGION_SIZE = 8;
            var MIN_DYNAMIC_RANGE = 24;
            function numBetween(value, min, max) {
                return value < min ? min : value > max ? max : value;
            }
            // Like BitMatrix but accepts arbitry Uint8 values
            var Matrix = /** @class */ function() {
                function Matrix(width, height) {
                    this.width = width;
                    this.data = new Uint8ClampedArray(width * height);
                }
                Matrix.prototype.get = function(x, y) {
                    return this.data[y * this.width + x];
                };
                Matrix.prototype.set = function(x, y, value) {
                    this.data[y * this.width + x] = value;
                };
                return Matrix;
            }();
            function binarize(data, width, height, returnInverted) {
                if (data.length !== width * height * 4) throw new Error("Malformed data passed to binarizer.");
                // Convert image to greyscale
                var greyscalePixels = new Matrix(width, height);
                for(var x = 0; x < width; x++)for(var y = 0; y < height; y++){
                    var r = data[(y * width + x) * 4 + 0];
                    var g = data[(y * width + x) * 4 + 1];
                    var b = data[(y * width + x) * 4 + 2];
                    greyscalePixels.set(x, y, 0.2126 * r + 0.7152 * g + 0.0722 * b);
                }
                var horizontalRegionCount = Math.ceil(width / REGION_SIZE);
                var verticalRegionCount = Math.ceil(height / REGION_SIZE);
                var blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);
                for(var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++)for(var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++){
                    var sum = 0;
                    var min = Infinity;
                    var max = 0;
                    for(var y = 0; y < REGION_SIZE; y++)for(var x = 0; x < REGION_SIZE; x++){
                        var pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);
                        sum += pixelLumosity;
                        min = Math.min(min, pixelLumosity);
                        max = Math.max(max, pixelLumosity);
                    }
                    var average = sum / Math.pow(REGION_SIZE, 2);
                    if (max - min <= MIN_DYNAMIC_RANGE) {
                        // If variation within the block is low, assume this is a block with only light or only
                        // dark pixels. In that case we do not want to use the average, as it would divide this
                        // low contrast area into black and white pixels, essentially creating data out of noise.
                        //
                        // Default the blackpoint for these blocks to be half the min - effectively white them out
                        average = min / 2;
                        if (verticalRegion > 0 && hortizontalRegion > 0) {
                            // Correct the "white background" assumption for blocks that have neighbors by comparing
                            // the pixels in this block to the previously calculated black points. This is based on
                            // the fact that dark barcode symbology is always surrounded by some amount of light
                            // background for which reasonable black point estimates were made. The bp estimated at
                            // the boundaries is used for the interior.
                            // The (min < bp) is arbitrary but works better than other heuristics that were tried.
                            var averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) + 2 * blackPoints.get(hortizontalRegion - 1, verticalRegion) + blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;
                            if (min < averageNeighborBlackPoint) average = averageNeighborBlackPoint;
                        }
                    }
                    blackPoints.set(hortizontalRegion, verticalRegion, average);
                }
                var binarized = BitMatrix_1.BitMatrix.createEmpty(width, height);
                var inverted = null;
                if (returnInverted) inverted = BitMatrix_1.BitMatrix.createEmpty(width, height);
                for(var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++)for(var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++){
                    var left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);
                    var top_1 = numBetween(verticalRegion, 2, verticalRegionCount - 3);
                    var sum = 0;
                    for(var xRegion = -2; xRegion <= 2; xRegion++)for(var yRegion = -2; yRegion <= 2; yRegion++)sum += blackPoints.get(left + xRegion, top_1 + yRegion);
                    var threshold = sum / 25;
                    for(var xRegion = 0; xRegion < REGION_SIZE; xRegion++)for(var yRegion = 0; yRegion < REGION_SIZE; yRegion++){
                        var x = hortizontalRegion * REGION_SIZE + xRegion;
                        var y = verticalRegion * REGION_SIZE + yRegion;
                        var lum = greyscalePixels.get(x, y);
                        binarized.set(x, y, lum <= threshold);
                        if (returnInverted) inverted.set(x, y, !(lum <= threshold));
                    }
                }
                if (returnInverted) return {
                    binarized: binarized,
                    inverted: inverted
                };
                return {
                    binarized: binarized
                };
            }
            exports.binarize = binarize;
        /***/ },
        /* 5 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix_1 = __webpack_require__(0);
            var decodeData_1 = __webpack_require__(6);
            var reedsolomon_1 = __webpack_require__(9);
            var version_1 = __webpack_require__(10);
            // tslint:disable:no-bitwise
            function numBitsDiffering(x, y) {
                var z = x ^ y;
                var bitCount = 0;
                while(z){
                    bitCount++;
                    z &= z - 1;
                }
                return bitCount;
            }
            function pushBit(bit, byte) {
                return byte << 1 | bit;
            }
            // tslint:enable:no-bitwise
            var FORMAT_INFO_TABLE = [
                {
                    bits: 0x5412,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x5125,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x5E7C,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x5B4B,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x45F9,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x40CE,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x4F97,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x4AA0,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 7
                    }
                },
                {
                    bits: 0x77C4,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x72F3,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x7DAA,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x789D,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x662F,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x6318,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x6C41,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x6976,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 7
                    }
                },
                {
                    bits: 0x1689,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x13BE,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x1CE7,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x19D0,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x0762,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x0255,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x0D0C,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x083B,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 7
                    }
                },
                {
                    bits: 0x355F,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x3068,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x3F31,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x3A06,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x24B4,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x2183,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x2EDA,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x2BED,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 7
                    }
                }
            ];
            var DATA_MASKS = [
                function(p) {
                    return (p.y + p.x) % 2 === 0;
                },
                function(p) {
                    return p.y % 2 === 0;
                },
                function(p) {
                    return p.x % 3 === 0;
                },
                function(p) {
                    return (p.y + p.x) % 3 === 0;
                },
                function(p) {
                    return (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0;
                },
                function(p) {
                    return p.x * p.y % 2 + p.x * p.y % 3 === 0;
                },
                function(p) {
                    return (p.y * p.x % 2 + p.y * p.x % 3) % 2 === 0;
                },
                function(p) {
                    return ((p.y + p.x) % 2 + p.y * p.x % 3) % 2 === 0;
                }
            ];
            function buildFunctionPatternMask(version) {
                var dimension = 17 + 4 * version.versionNumber;
                var matrix = BitMatrix_1.BitMatrix.createEmpty(dimension, dimension);
                matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format
                matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format
                matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format
                // Alignment patterns
                for(var _i = 0, _a = version.alignmentPatternCenters; _i < _a.length; _i++){
                    var x = _a[_i];
                    for(var _b = 0, _c = version.alignmentPatternCenters; _b < _c.length; _b++){
                        var y = _c[_b];
                        if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) matrix.setRegion(x - 2, y - 2, 5, 5, true);
                    }
                }
                matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern
                matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern
                if (version.versionNumber > 6) {
                    matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right
                    matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left
                }
                return matrix;
            }
            function readCodewords(matrix, version, formatInfo) {
                var dataMask = DATA_MASKS[formatInfo.dataMask];
                var dimension = matrix.height;
                var functionPatternMask = buildFunctionPatternMask(version);
                var codewords = [];
                var currentByte = 0;
                var bitsRead = 0;
                // Read columns in pairs, from right to left
                var readingUp = true;
                for(var columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2){
                    if (columnIndex === 6) columnIndex--;
                    for(var i = 0; i < dimension; i++){
                        var y = readingUp ? dimension - 1 - i : i;
                        for(var columnOffset = 0; columnOffset < 2; columnOffset++){
                            var x = columnIndex - columnOffset;
                            if (!functionPatternMask.get(x, y)) {
                                bitsRead++;
                                var bit = matrix.get(x, y);
                                if (dataMask({
                                    y: y,
                                    x: x
                                })) bit = !bit;
                                currentByte = pushBit(bit, currentByte);
                                if (bitsRead === 8) {
                                    codewords.push(currentByte);
                                    bitsRead = 0;
                                    currentByte = 0;
                                }
                            }
                        }
                    }
                    readingUp = !readingUp;
                }
                return codewords;
            }
            function readVersion(matrix) {
                var dimension = matrix.height;
                var provisionalVersion = Math.floor((dimension - 17) / 4);
                if (provisionalVersion <= 6) return version_1.VERSIONS[provisionalVersion - 1];
                var topRightVersionBits = 0;
                for(var y = 5; y >= 0; y--)for(var x = dimension - 9; x >= dimension - 11; x--)topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);
                var bottomLeftVersionBits = 0;
                for(var x = 5; x >= 0; x--)for(var y = dimension - 9; y >= dimension - 11; y--)bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);
                var bestDifference = Infinity;
                var bestVersion;
                for(var _i = 0, VERSIONS_1 = version_1.VERSIONS; _i < VERSIONS_1.length; _i++){
                    var version = VERSIONS_1[_i];
                    if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) return version;
                    var difference = numBitsDiffering(topRightVersionBits, version.infoBits);
                    if (difference < bestDifference) {
                        bestVersion = version;
                        bestDifference = difference;
                    }
                    difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);
                    if (difference < bestDifference) {
                        bestVersion = version;
                        bestDifference = difference;
                    }
                }
                // We can tolerate up to 3 bits of error since no two version info codewords will
                // differ in less than 8 bits.
                if (bestDifference <= 3) return bestVersion;
            }
            function readFormatInformation(matrix) {
                var topLeftFormatInfoBits = 0;
                for(var x = 0; x <= 8; x++)if (x !== 6) topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);
                for(var y = 7; y >= 0; y--)if (y !== 6) topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);
                var dimension = matrix.height;
                var topRightBottomRightFormatInfoBits = 0;
                for(var y = dimension - 1; y >= dimension - 7; y--)topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);
                for(var x = dimension - 8; x < dimension; x++)topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);
                var bestDifference = Infinity;
                var bestFormatInfo = null;
                for(var _i = 0, FORMAT_INFO_TABLE_1 = FORMAT_INFO_TABLE; _i < FORMAT_INFO_TABLE_1.length; _i++){
                    var _a = FORMAT_INFO_TABLE_1[_i], bits = _a.bits, formatInfo = _a.formatInfo;
                    if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) return formatInfo;
                    var difference = numBitsDiffering(topLeftFormatInfoBits, bits);
                    if (difference < bestDifference) {
                        bestFormatInfo = formatInfo;
                        bestDifference = difference;
                    }
                    if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) {
                        difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);
                        if (difference < bestDifference) {
                            bestFormatInfo = formatInfo;
                            bestDifference = difference;
                        }
                    }
                }
                // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match
                if (bestDifference <= 3) return bestFormatInfo;
                return null;
            }
            function getDataBlocks(codewords, version, ecLevel) {
                var ecInfo = version.errorCorrectionLevels[ecLevel];
                var dataBlocks = [];
                var totalCodewords = 0;
                ecInfo.ecBlocks.forEach(function(block) {
                    for(var i = 0; i < block.numBlocks; i++){
                        dataBlocks.push({
                            numDataCodewords: block.dataCodewordsPerBlock,
                            codewords: []
                        });
                        totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;
                    }
                });
                // In some cases the QR code will be malformed enough that we pull off more or less than we should.
                // If we pull off less there's nothing we can do.
                // If we pull off more we can safely truncate
                if (codewords.length < totalCodewords) return null;
                codewords = codewords.slice(0, totalCodewords);
                var shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;
                // Pull codewords to fill the blocks up to the minimum size
                for(var i = 0; i < shortBlockSize; i++)for(var _i = 0, dataBlocks_1 = dataBlocks; _i < dataBlocks_1.length; _i++){
                    var dataBlock = dataBlocks_1[_i];
                    dataBlock.codewords.push(codewords.shift());
                }
                // If there are any large blocks, pull codewords to fill the last element of those
                if (ecInfo.ecBlocks.length > 1) {
                    var smallBlockCount = ecInfo.ecBlocks[0].numBlocks;
                    var largeBlockCount = ecInfo.ecBlocks[1].numBlocks;
                    for(var i = 0; i < largeBlockCount; i++)dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());
                }
                // Add the rest of the codewords to the blocks. These are the error correction codewords.
                while(codewords.length > 0)for(var _a = 0, dataBlocks_2 = dataBlocks; _a < dataBlocks_2.length; _a++){
                    var dataBlock = dataBlocks_2[_a];
                    dataBlock.codewords.push(codewords.shift());
                }
                return dataBlocks;
            }
            function decodeMatrix(matrix) {
                var version = readVersion(matrix);
                if (!version) return null;
                var formatInfo = readFormatInformation(matrix);
                if (!formatInfo) return null;
                var codewords = readCodewords(matrix, version, formatInfo);
                var dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);
                if (!dataBlocks) return null;
                // Count total number of data bytes
                var totalBytes = dataBlocks.reduce(function(a, b) {
                    return a + b.numDataCodewords;
                }, 0);
                var resultBytes = new Uint8ClampedArray(totalBytes);
                var resultIndex = 0;
                for(var _i = 0, dataBlocks_3 = dataBlocks; _i < dataBlocks_3.length; _i++){
                    var dataBlock = dataBlocks_3[_i];
                    var correctedBytes = reedsolomon_1.decode(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);
                    if (!correctedBytes) return null;
                    for(var i = 0; i < dataBlock.numDataCodewords; i++)resultBytes[resultIndex++] = correctedBytes[i];
                }
                try {
                    return decodeData_1.decode(resultBytes, version.versionNumber);
                } catch (_a) {
                    return null;
                }
            }
            function decode(matrix) {
                if (matrix == null) return null;
                var result = decodeMatrix(matrix);
                if (result) return result;
                // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.
                for(var x = 0; x < matrix.width; x++){
                    for(var y = x + 1; y < matrix.height; y++)if (matrix.get(x, y) !== matrix.get(y, x)) {
                        matrix.set(x, y, !matrix.get(x, y));
                        matrix.set(y, x, !matrix.get(y, x));
                    }
                }
                return decodeMatrix(matrix);
            }
            exports.decode = decode;
        /***/ },
        /* 6 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // tslint:disable:no-bitwise
            var BitStream_1 = __webpack_require__(7);
            var shiftJISTable_1 = __webpack_require__(8);
            var Mode;
            (function(Mode) {
                Mode["Numeric"] = "numeric";
                Mode["Alphanumeric"] = "alphanumeric";
                Mode["Byte"] = "byte";
                Mode["Kanji"] = "kanji";
                Mode["ECI"] = "eci";
            })(Mode = exports.Mode || (exports.Mode = {}));
            var ModeByte;
            (function(ModeByte) {
                ModeByte[ModeByte["Terminator"] = 0] = "Terminator";
                ModeByte[ModeByte["Numeric"] = 1] = "Numeric";
                ModeByte[ModeByte["Alphanumeric"] = 2] = "Alphanumeric";
                ModeByte[ModeByte["Byte"] = 4] = "Byte";
                ModeByte[ModeByte["Kanji"] = 8] = "Kanji";
                ModeByte[ModeByte["ECI"] = 7] = "ECI";
            // StructuredAppend = 0x3,
            // FNC1FirstPosition = 0x5,
            // FNC1SecondPosition = 0x9,
            })(ModeByte || (ModeByte = {}));
            function decodeNumeric(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    10,
                    12,
                    14
                ][size];
                var length = stream.readBits(characterCountSize);
                // Read digits in groups of 3
                while(length >= 3){
                    var num = stream.readBits(10);
                    if (num >= 1000) throw new Error("Invalid numeric value above 999");
                    var a = Math.floor(num / 100);
                    var b = Math.floor(num / 10) % 10;
                    var c = num % 10;
                    bytes.push(48 + a, 48 + b, 48 + c);
                    text += a.toString() + b.toString() + c.toString();
                    length -= 3;
                }
                // If the number of digits aren't a multiple of 3, the remaining digits are special cased.
                if (length === 2) {
                    var num = stream.readBits(7);
                    if (num >= 100) throw new Error("Invalid numeric value above 99");
                    var a = Math.floor(num / 10);
                    var b = num % 10;
                    bytes.push(48 + a, 48 + b);
                    text += a.toString() + b.toString();
                } else if (length === 1) {
                    var num = stream.readBits(4);
                    if (num >= 10) throw new Error("Invalid numeric value above 9");
                    bytes.push(48 + num);
                    text += num.toString();
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            var AlphanumericCharacterCodes = [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "A",
                "B",
                "C",
                "D",
                "E",
                "F",
                "G",
                "H",
                "I",
                "J",
                "K",
                "L",
                "M",
                "N",
                "O",
                "P",
                "Q",
                "R",
                "S",
                "T",
                "U",
                "V",
                "W",
                "X",
                "Y",
                "Z",
                " ",
                "$",
                "%",
                "*",
                "+",
                "-",
                ".",
                "/",
                ":"
            ];
            function decodeAlphanumeric(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    9,
                    11,
                    13
                ][size];
                var length = stream.readBits(characterCountSize);
                while(length >= 2){
                    var v = stream.readBits(11);
                    var a = Math.floor(v / 45);
                    var b = v % 45;
                    bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));
                    text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];
                    length -= 2;
                }
                if (length === 1) {
                    var a = stream.readBits(6);
                    bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));
                    text += AlphanumericCharacterCodes[a];
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            function decodeByte(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    8,
                    16,
                    16
                ][size];
                var length = stream.readBits(characterCountSize);
                for(var i = 0; i < length; i++){
                    var b = stream.readBits(8);
                    bytes.push(b);
                }
                try {
                    text += decodeURIComponent(bytes.map(function(b) {
                        return "%" + ("0" + b.toString(16)).substr(-2);
                    }).join(""));
                } catch (_a) {
                // failed to decode
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            function decodeKanji(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    8,
                    10,
                    12
                ][size];
                var length = stream.readBits(characterCountSize);
                for(var i = 0; i < length; i++){
                    var k = stream.readBits(13);
                    var c = Math.floor(k / 0xC0) << 8 | k % 0xC0;
                    if (c < 0x1F00) c += 0x8140;
                    else c += 0xC140;
                    bytes.push(c >> 8, c & 0xFF);
                    text += String.fromCharCode(shiftJISTable_1.shiftJISTable[c]);
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            function decode(data, version) {
                var _a, _b, _c, _d;
                var stream = new BitStream_1.BitStream(data);
                // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).
                var size = version <= 9 ? 0 : version <= 26 ? 1 : 2;
                var result = {
                    text: "",
                    bytes: [],
                    chunks: [],
                    version: version
                };
                while(stream.available() >= 4){
                    var mode = stream.readBits(4);
                    if (mode === ModeByte.Terminator) return result;
                    else if (mode === ModeByte.ECI) {
                        if (stream.readBits(1) === 0) result.chunks.push({
                            type: Mode.ECI,
                            assignmentNumber: stream.readBits(7)
                        });
                        else if (stream.readBits(1) === 0) result.chunks.push({
                            type: Mode.ECI,
                            assignmentNumber: stream.readBits(14)
                        });
                        else if (stream.readBits(1) === 0) result.chunks.push({
                            type: Mode.ECI,
                            assignmentNumber: stream.readBits(21)
                        });
                        else // ECI data seems corrupted
                        result.chunks.push({
                            type: Mode.ECI,
                            assignmentNumber: -1
                        });
                    } else if (mode === ModeByte.Numeric) {
                        var numericResult = decodeNumeric(stream, size);
                        result.text += numericResult.text;
                        (_a = result.bytes).push.apply(_a, numericResult.bytes);
                        result.chunks.push({
                            type: Mode.Numeric,
                            text: numericResult.text
                        });
                    } else if (mode === ModeByte.Alphanumeric) {
                        var alphanumericResult = decodeAlphanumeric(stream, size);
                        result.text += alphanumericResult.text;
                        (_b = result.bytes).push.apply(_b, alphanumericResult.bytes);
                        result.chunks.push({
                            type: Mode.Alphanumeric,
                            text: alphanumericResult.text
                        });
                    } else if (mode === ModeByte.Byte) {
                        var byteResult = decodeByte(stream, size);
                        result.text += byteResult.text;
                        (_c = result.bytes).push.apply(_c, byteResult.bytes);
                        result.chunks.push({
                            type: Mode.Byte,
                            bytes: byteResult.bytes,
                            text: byteResult.text
                        });
                    } else if (mode === ModeByte.Kanji) {
                        var kanjiResult = decodeKanji(stream, size);
                        result.text += kanjiResult.text;
                        (_d = result.bytes).push.apply(_d, kanjiResult.bytes);
                        result.chunks.push({
                            type: Mode.Kanji,
                            bytes: kanjiResult.bytes,
                            text: kanjiResult.text
                        });
                    }
                }
                // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker
                if (stream.available() === 0 || stream.readBits(stream.available()) === 0) return result;
            }
            exports.decode = decode;
        /***/ },
        /* 7 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            // tslint:disable:no-bitwise
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitStream = /** @class */ function() {
                function BitStream(bytes) {
                    this.byteOffset = 0;
                    this.bitOffset = 0;
                    this.bytes = bytes;
                }
                BitStream.prototype.readBits = function(numBits) {
                    if (numBits < 1 || numBits > 32 || numBits > this.available()) throw new Error("Cannot read " + numBits.toString() + " bits");
                    var result = 0;
                    // First, read remainder from current byte
                    if (this.bitOffset > 0) {
                        var bitsLeft = 8 - this.bitOffset;
                        var toRead = numBits < bitsLeft ? numBits : bitsLeft;
                        var bitsToNotRead = bitsLeft - toRead;
                        var mask = 0xFF >> 8 - toRead << bitsToNotRead;
                        result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
                        numBits -= toRead;
                        this.bitOffset += toRead;
                        if (this.bitOffset === 8) {
                            this.bitOffset = 0;
                            this.byteOffset++;
                        }
                    }
                    // Next read whole bytes
                    if (numBits > 0) {
                        while(numBits >= 8){
                            result = result << 8 | this.bytes[this.byteOffset] & 0xFF;
                            this.byteOffset++;
                            numBits -= 8;
                        }
                        // Finally read a partial byte
                        if (numBits > 0) {
                            var bitsToNotRead = 8 - numBits;
                            var mask = 0xFF >> bitsToNotRead << bitsToNotRead;
                            result = result << numBits | (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
                            this.bitOffset += numBits;
                        }
                    }
                    return result;
                };
                BitStream.prototype.available = function() {
                    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
                };
                return BitStream;
            }();
            exports.BitStream = BitStream;
        /***/ },
        /* 8 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.shiftJISTable = {
                0x20: 0x0020,
                0x21: 0x0021,
                0x22: 0x0022,
                0x23: 0x0023,
                0x24: 0x0024,
                0x25: 0x0025,
                0x26: 0x0026,
                0x27: 0x0027,
                0x28: 0x0028,
                0x29: 0x0029,
                0x2A: 0x002A,
                0x2B: 0x002B,
                0x2C: 0x002C,
                0x2D: 0x002D,
                0x2E: 0x002E,
                0x2F: 0x002F,
                0x30: 0x0030,
                0x31: 0x0031,
                0x32: 0x0032,
                0x33: 0x0033,
                0x34: 0x0034,
                0x35: 0x0035,
                0x36: 0x0036,
                0x37: 0x0037,
                0x38: 0x0038,
                0x39: 0x0039,
                0x3A: 0x003A,
                0x3B: 0x003B,
                0x3C: 0x003C,
                0x3D: 0x003D,
                0x3E: 0x003E,
                0x3F: 0x003F,
                0x40: 0x0040,
                0x41: 0x0041,
                0x42: 0x0042,
                0x43: 0x0043,
                0x44: 0x0044,
                0x45: 0x0045,
                0x46: 0x0046,
                0x47: 0x0047,
                0x48: 0x0048,
                0x49: 0x0049,
                0x4A: 0x004A,
                0x4B: 0x004B,
                0x4C: 0x004C,
                0x4D: 0x004D,
                0x4E: 0x004E,
                0x4F: 0x004F,
                0x50: 0x0050,
                0x51: 0x0051,
                0x52: 0x0052,
                0x53: 0x0053,
                0x54: 0x0054,
                0x55: 0x0055,
                0x56: 0x0056,
                0x57: 0x0057,
                0x58: 0x0058,
                0x59: 0x0059,
                0x5A: 0x005A,
                0x5B: 0x005B,
                0x5C: 0x00A5,
                0x5D: 0x005D,
                0x5E: 0x005E,
                0x5F: 0x005F,
                0x60: 0x0060,
                0x61: 0x0061,
                0x62: 0x0062,
                0x63: 0x0063,
                0x64: 0x0064,
                0x65: 0x0065,
                0x66: 0x0066,
                0x67: 0x0067,
                0x68: 0x0068,
                0x69: 0x0069,
                0x6A: 0x006A,
                0x6B: 0x006B,
                0x6C: 0x006C,
                0x6D: 0x006D,
                0x6E: 0x006E,
                0x6F: 0x006F,
                0x70: 0x0070,
                0x71: 0x0071,
                0x72: 0x0072,
                0x73: 0x0073,
                0x74: 0x0074,
                0x75: 0x0075,
                0x76: 0x0076,
                0x77: 0x0077,
                0x78: 0x0078,
                0x79: 0x0079,
                0x7A: 0x007A,
                0x7B: 0x007B,
                0x7C: 0x007C,
                0x7D: 0x007D,
                0x7E: 0x203E,
                0x8140: 0x3000,
                0x8141: 0x3001,
                0x8142: 0x3002,
                0x8143: 0xFF0C,
                0x8144: 0xFF0E,
                0x8145: 0x30FB,
                0x8146: 0xFF1A,
                0x8147: 0xFF1B,
                0x8148: 0xFF1F,
                0x8149: 0xFF01,
                0x814A: 0x309B,
                0x814B: 0x309C,
                0x814C: 0x00B4,
                0x814D: 0xFF40,
                0x814E: 0x00A8,
                0x814F: 0xFF3E,
                0x8150: 0xFFE3,
                0x8151: 0xFF3F,
                0x8152: 0x30FD,
                0x8153: 0x30FE,
                0x8154: 0x309D,
                0x8155: 0x309E,
                0x8156: 0x3003,
                0x8157: 0x4EDD,
                0x8158: 0x3005,
                0x8159: 0x3006,
                0x815A: 0x3007,
                0x815B: 0x30FC,
                0x815C: 0x2015,
                0x815D: 0x2010,
                0x815E: 0xFF0F,
                0x815F: 0x005C,
                0x8160: 0x301C,
                0x8161: 0x2016,
                0x8162: 0xFF5C,
                0x8163: 0x2026,
                0x8164: 0x2025,
                0x8165: 0x2018,
                0x8166: 0x2019,
                0x8167: 0x201C,
                0x8168: 0x201D,
                0x8169: 0xFF08,
                0x816A: 0xFF09,
                0x816B: 0x3014,
                0x816C: 0x3015,
                0x816D: 0xFF3B,
                0x816E: 0xFF3D,
                0x816F: 0xFF5B,
                0x8170: 0xFF5D,
                0x8171: 0x3008,
                0x8172: 0x3009,
                0x8173: 0x300A,
                0x8174: 0x300B,
                0x8175: 0x300C,
                0x8176: 0x300D,
                0x8177: 0x300E,
                0x8178: 0x300F,
                0x8179: 0x3010,
                0x817A: 0x3011,
                0x817B: 0xFF0B,
                0x817C: 0x2212,
                0x817D: 0x00B1,
                0x817E: 0x00D7,
                0x8180: 0x00F7,
                0x8181: 0xFF1D,
                0x8182: 0x2260,
                0x8183: 0xFF1C,
                0x8184: 0xFF1E,
                0x8185: 0x2266,
                0x8186: 0x2267,
                0x8187: 0x221E,
                0x8188: 0x2234,
                0x8189: 0x2642,
                0x818A: 0x2640,
                0x818B: 0x00B0,
                0x818C: 0x2032,
                0x818D: 0x2033,
                0x818E: 0x2103,
                0x818F: 0xFFE5,
                0x8190: 0xFF04,
                0x8191: 0x00A2,
                0x8192: 0x00A3,
                0x8193: 0xFF05,
                0x8194: 0xFF03,
                0x8195: 0xFF06,
                0x8196: 0xFF0A,
                0x8197: 0xFF20,
                0x8198: 0x00A7,
                0x8199: 0x2606,
                0x819A: 0x2605,
                0x819B: 0x25CB,
                0x819C: 0x25CF,
                0x819D: 0x25CE,
                0x819E: 0x25C7,
                0x819F: 0x25C6,
                0x81A0: 0x25A1,
                0x81A1: 0x25A0,
                0x81A2: 0x25B3,
                0x81A3: 0x25B2,
                0x81A4: 0x25BD,
                0x81A5: 0x25BC,
                0x81A6: 0x203B,
                0x81A7: 0x3012,
                0x81A8: 0x2192,
                0x81A9: 0x2190,
                0x81AA: 0x2191,
                0x81AB: 0x2193,
                0x81AC: 0x3013,
                0x81B8: 0x2208,
                0x81B9: 0x220B,
                0x81BA: 0x2286,
                0x81BB: 0x2287,
                0x81BC: 0x2282,
                0x81BD: 0x2283,
                0x81BE: 0x222A,
                0x81BF: 0x2229,
                0x81C8: 0x2227,
                0x81C9: 0x2228,
                0x81CA: 0x00AC,
                0x81CB: 0x21D2,
                0x81CC: 0x21D4,
                0x81CD: 0x2200,
                0x81CE: 0x2203,
                0x81DA: 0x2220,
                0x81DB: 0x22A5,
                0x81DC: 0x2312,
                0x81DD: 0x2202,
                0x81DE: 0x2207,
                0x81DF: 0x2261,
                0x81E0: 0x2252,
                0x81E1: 0x226A,
                0x81E2: 0x226B,
                0x81E3: 0x221A,
                0x81E4: 0x223D,
                0x81E5: 0x221D,
                0x81E6: 0x2235,
                0x81E7: 0x222B,
                0x81E8: 0x222C,
                0x81F0: 0x212B,
                0x81F1: 0x2030,
                0x81F2: 0x266F,
                0x81F3: 0x266D,
                0x81F4: 0x266A,
                0x81F5: 0x2020,
                0x81F6: 0x2021,
                0x81F7: 0x00B6,
                0x81FC: 0x25EF,
                0x824F: 0xFF10,
                0x8250: 0xFF11,
                0x8251: 0xFF12,
                0x8252: 0xFF13,
                0x8253: 0xFF14,
                0x8254: 0xFF15,
                0x8255: 0xFF16,
                0x8256: 0xFF17,
                0x8257: 0xFF18,
                0x8258: 0xFF19,
                0x8260: 0xFF21,
                0x8261: 0xFF22,
                0x8262: 0xFF23,
                0x8263: 0xFF24,
                0x8264: 0xFF25,
                0x8265: 0xFF26,
                0x8266: 0xFF27,
                0x8267: 0xFF28,
                0x8268: 0xFF29,
                0x8269: 0xFF2A,
                0x826A: 0xFF2B,
                0x826B: 0xFF2C,
                0x826C: 0xFF2D,
                0x826D: 0xFF2E,
                0x826E: 0xFF2F,
                0x826F: 0xFF30,
                0x8270: 0xFF31,
                0x8271: 0xFF32,
                0x8272: 0xFF33,
                0x8273: 0xFF34,
                0x8274: 0xFF35,
                0x8275: 0xFF36,
                0x8276: 0xFF37,
                0x8277: 0xFF38,
                0x8278: 0xFF39,
                0x8279: 0xFF3A,
                0x8281: 0xFF41,
                0x8282: 0xFF42,
                0x8283: 0xFF43,
                0x8284: 0xFF44,
                0x8285: 0xFF45,
                0x8286: 0xFF46,
                0x8287: 0xFF47,
                0x8288: 0xFF48,
                0x8289: 0xFF49,
                0x828A: 0xFF4A,
                0x828B: 0xFF4B,
                0x828C: 0xFF4C,
                0x828D: 0xFF4D,
                0x828E: 0xFF4E,
                0x828F: 0xFF4F,
                0x8290: 0xFF50,
                0x8291: 0xFF51,
                0x8292: 0xFF52,
                0x8293: 0xFF53,
                0x8294: 0xFF54,
                0x8295: 0xFF55,
                0x8296: 0xFF56,
                0x8297: 0xFF57,
                0x8298: 0xFF58,
                0x8299: 0xFF59,
                0x829A: 0xFF5A,
                0x829F: 0x3041,
                0x82A0: 0x3042,
                0x82A1: 0x3043,
                0x82A2: 0x3044,
                0x82A3: 0x3045,
                0x82A4: 0x3046,
                0x82A5: 0x3047,
                0x82A6: 0x3048,
                0x82A7: 0x3049,
                0x82A8: 0x304A,
                0x82A9: 0x304B,
                0x82AA: 0x304C,
                0x82AB: 0x304D,
                0x82AC: 0x304E,
                0x82AD: 0x304F,
                0x82AE: 0x3050,
                0x82AF: 0x3051,
                0x82B0: 0x3052,
                0x82B1: 0x3053,
                0x82B2: 0x3054,
                0x82B3: 0x3055,
                0x82B4: 0x3056,
                0x82B5: 0x3057,
                0x82B6: 0x3058,
                0x82B7: 0x3059,
                0x82B8: 0x305A,
                0x82B9: 0x305B,
                0x82BA: 0x305C,
                0x82BB: 0x305D,
                0x82BC: 0x305E,
                0x82BD: 0x305F,
                0x82BE: 0x3060,
                0x82BF: 0x3061,
                0x82C0: 0x3062,
                0x82C1: 0x3063,
                0x82C2: 0x3064,
                0x82C3: 0x3065,
                0x82C4: 0x3066,
                0x82C5: 0x3067,
                0x82C6: 0x3068,
                0x82C7: 0x3069,
                0x82C8: 0x306A,
                0x82C9: 0x306B,
                0x82CA: 0x306C,
                0x82CB: 0x306D,
                0x82CC: 0x306E,
                0x82CD: 0x306F,
                0x82CE: 0x3070,
                0x82CF: 0x3071,
                0x82D0: 0x3072,
                0x82D1: 0x3073,
                0x82D2: 0x3074,
                0x82D3: 0x3075,
                0x82D4: 0x3076,
                0x82D5: 0x3077,
                0x82D6: 0x3078,
                0x82D7: 0x3079,
                0x82D8: 0x307A,
                0x82D9: 0x307B,
                0x82DA: 0x307C,
                0x82DB: 0x307D,
                0x82DC: 0x307E,
                0x82DD: 0x307F,
                0x82DE: 0x3080,
                0x82DF: 0x3081,
                0x82E0: 0x3082,
                0x82E1: 0x3083,
                0x82E2: 0x3084,
                0x82E3: 0x3085,
                0x82E4: 0x3086,
                0x82E5: 0x3087,
                0x82E6: 0x3088,
                0x82E7: 0x3089,
                0x82E8: 0x308A,
                0x82E9: 0x308B,
                0x82EA: 0x308C,
                0x82EB: 0x308D,
                0x82EC: 0x308E,
                0x82ED: 0x308F,
                0x82EE: 0x3090,
                0x82EF: 0x3091,
                0x82F0: 0x3092,
                0x82F1: 0x3093,
                0x8340: 0x30A1,
                0x8341: 0x30A2,
                0x8342: 0x30A3,
                0x8343: 0x30A4,
                0x8344: 0x30A5,
                0x8345: 0x30A6,
                0x8346: 0x30A7,
                0x8347: 0x30A8,
                0x8348: 0x30A9,
                0x8349: 0x30AA,
                0x834A: 0x30AB,
                0x834B: 0x30AC,
                0x834C: 0x30AD,
                0x834D: 0x30AE,
                0x834E: 0x30AF,
                0x834F: 0x30B0,
                0x8350: 0x30B1,
                0x8351: 0x30B2,
                0x8352: 0x30B3,
                0x8353: 0x30B4,
                0x8354: 0x30B5,
                0x8355: 0x30B6,
                0x8356: 0x30B7,
                0x8357: 0x30B8,
                0x8358: 0x30B9,
                0x8359: 0x30BA,
                0x835A: 0x30BB,
                0x835B: 0x30BC,
                0x835C: 0x30BD,
                0x835D: 0x30BE,
                0x835E: 0x30BF,
                0x835F: 0x30C0,
                0x8360: 0x30C1,
                0x8361: 0x30C2,
                0x8362: 0x30C3,
                0x8363: 0x30C4,
                0x8364: 0x30C5,
                0x8365: 0x30C6,
                0x8366: 0x30C7,
                0x8367: 0x30C8,
                0x8368: 0x30C9,
                0x8369: 0x30CA,
                0x836A: 0x30CB,
                0x836B: 0x30CC,
                0x836C: 0x30CD,
                0x836D: 0x30CE,
                0x836E: 0x30CF,
                0x836F: 0x30D0,
                0x8370: 0x30D1,
                0x8371: 0x30D2,
                0x8372: 0x30D3,
                0x8373: 0x30D4,
                0x8374: 0x30D5,
                0x8375: 0x30D6,
                0x8376: 0x30D7,
                0x8377: 0x30D8,
                0x8378: 0x30D9,
                0x8379: 0x30DA,
                0x837A: 0x30DB,
                0x837B: 0x30DC,
                0x837C: 0x30DD,
                0x837D: 0x30DE,
                0x837E: 0x30DF,
                0x8380: 0x30E0,
                0x8381: 0x30E1,
                0x8382: 0x30E2,
                0x8383: 0x30E3,
                0x8384: 0x30E4,
                0x8385: 0x30E5,
                0x8386: 0x30E6,
                0x8387: 0x30E7,
                0x8388: 0x30E8,
                0x8389: 0x30E9,
                0x838A: 0x30EA,
                0x838B: 0x30EB,
                0x838C: 0x30EC,
                0x838D: 0x30ED,
                0x838E: 0x30EE,
                0x838F: 0x30EF,
                0x8390: 0x30F0,
                0x8391: 0x30F1,
                0x8392: 0x30F2,
                0x8393: 0x30F3,
                0x8394: 0x30F4,
                0x8395: 0x30F5,
                0x8396: 0x30F6,
                0x839F: 0x0391,
                0x83A0: 0x0392,
                0x83A1: 0x0393,
                0x83A2: 0x0394,
                0x83A3: 0x0395,
                0x83A4: 0x0396,
                0x83A5: 0x0397,
                0x83A6: 0x0398,
                0x83A7: 0x0399,
                0x83A8: 0x039A,
                0x83A9: 0x039B,
                0x83AA: 0x039C,
                0x83AB: 0x039D,
                0x83AC: 0x039E,
                0x83AD: 0x039F,
                0x83AE: 0x03A0,
                0x83AF: 0x03A1,
                0x83B0: 0x03A3,
                0x83B1: 0x03A4,
                0x83B2: 0x03A5,
                0x83B3: 0x03A6,
                0x83B4: 0x03A7,
                0x83B5: 0x03A8,
                0x83B6: 0x03A9,
                0x83BF: 0x03B1,
                0x83C0: 0x03B2,
                0x83C1: 0x03B3,
                0x83C2: 0x03B4,
                0x83C3: 0x03B5,
                0x83C4: 0x03B6,
                0x83C5: 0x03B7,
                0x83C6: 0x03B8,
                0x83C7: 0x03B9,
                0x83C8: 0x03BA,
                0x83C9: 0x03BB,
                0x83CA: 0x03BC,
                0x83CB: 0x03BD,
                0x83CC: 0x03BE,
                0x83CD: 0x03BF,
                0x83CE: 0x03C0,
                0x83CF: 0x03C1,
                0x83D0: 0x03C3,
                0x83D1: 0x03C4,
                0x83D2: 0x03C5,
                0x83D3: 0x03C6,
                0x83D4: 0x03C7,
                0x83D5: 0x03C8,
                0x83D6: 0x03C9,
                0x8440: 0x0410,
                0x8441: 0x0411,
                0x8442: 0x0412,
                0x8443: 0x0413,
                0x8444: 0x0414,
                0x8445: 0x0415,
                0x8446: 0x0401,
                0x8447: 0x0416,
                0x8448: 0x0417,
                0x8449: 0x0418,
                0x844A: 0x0419,
                0x844B: 0x041A,
                0x844C: 0x041B,
                0x844D: 0x041C,
                0x844E: 0x041D,
                0x844F: 0x041E,
                0x8450: 0x041F,
                0x8451: 0x0420,
                0x8452: 0x0421,
                0x8453: 0x0422,
                0x8454: 0x0423,
                0x8455: 0x0424,
                0x8456: 0x0425,
                0x8457: 0x0426,
                0x8458: 0x0427,
                0x8459: 0x0428,
                0x845A: 0x0429,
                0x845B: 0x042A,
                0x845C: 0x042B,
                0x845D: 0x042C,
                0x845E: 0x042D,
                0x845F: 0x042E,
                0x8460: 0x042F,
                0x8470: 0x0430,
                0x8471: 0x0431,
                0x8472: 0x0432,
                0x8473: 0x0433,
                0x8474: 0x0434,
                0x8475: 0x0435,
                0x8476: 0x0451,
                0x8477: 0x0436,
                0x8478: 0x0437,
                0x8479: 0x0438,
                0x847A: 0x0439,
                0x847B: 0x043A,
                0x847C: 0x043B,
                0x847D: 0x043C,
                0x847E: 0x043D,
                0x8480: 0x043E,
                0x8481: 0x043F,
                0x8482: 0x0440,
                0x8483: 0x0441,
                0x8484: 0x0442,
                0x8485: 0x0443,
                0x8486: 0x0444,
                0x8487: 0x0445,
                0x8488: 0x0446,
                0x8489: 0x0447,
                0x848A: 0x0448,
                0x848B: 0x0449,
                0x848C: 0x044A,
                0x848D: 0x044B,
                0x848E: 0x044C,
                0x848F: 0x044D,
                0x8490: 0x044E,
                0x8491: 0x044F,
                0x849F: 0x2500,
                0x84A0: 0x2502,
                0x84A1: 0x250C,
                0x84A2: 0x2510,
                0x84A3: 0x2518,
                0x84A4: 0x2514,
                0x84A5: 0x251C,
                0x84A6: 0x252C,
                0x84A7: 0x2524,
                0x84A8: 0x2534,
                0x84A9: 0x253C,
                0x84AA: 0x2501,
                0x84AB: 0x2503,
                0x84AC: 0x250F,
                0x84AD: 0x2513,
                0x84AE: 0x251B,
                0x84AF: 0x2517,
                0x84B0: 0x2523,
                0x84B1: 0x2533,
                0x84B2: 0x252B,
                0x84B3: 0x253B,
                0x84B4: 0x254B,
                0x84B5: 0x2520,
                0x84B6: 0x252F,
                0x84B7: 0x2528,
                0x84B8: 0x2537,
                0x84B9: 0x253F,
                0x84BA: 0x251D,
                0x84BB: 0x2530,
                0x84BC: 0x2525,
                0x84BD: 0x2538,
                0x84BE: 0x2542,
                0x889F: 0x4E9C,
                0x88A0: 0x5516,
                0x88A1: 0x5A03,
                0x88A2: 0x963F,
                0x88A3: 0x54C0,
                0x88A4: 0x611B,
                0x88A5: 0x6328,
                0x88A6: 0x59F6,
                0x88A7: 0x9022,
                0x88A8: 0x8475,
                0x88A9: 0x831C,
                0x88AA: 0x7A50,
                0x88AB: 0x60AA,
                0x88AC: 0x63E1,
                0x88AD: 0x6E25,
                0x88AE: 0x65ED,
                0x88AF: 0x8466,
                0x88B0: 0x82A6,
                0x88B1: 0x9BF5,
                0x88B2: 0x6893,
                0x88B3: 0x5727,
                0x88B4: 0x65A1,
                0x88B5: 0x6271,
                0x88B6: 0x5B9B,
                0x88B7: 0x59D0,
                0x88B8: 0x867B,
                0x88B9: 0x98F4,
                0x88BA: 0x7D62,
                0x88BB: 0x7DBE,
                0x88BC: 0x9B8E,
                0x88BD: 0x6216,
                0x88BE: 0x7C9F,
                0x88BF: 0x88B7,
                0x88C0: 0x5B89,
                0x88C1: 0x5EB5,
                0x88C2: 0x6309,
                0x88C3: 0x6697,
                0x88C4: 0x6848,
                0x88C5: 0x95C7,
                0x88C6: 0x978D,
                0x88C7: 0x674F,
                0x88C8: 0x4EE5,
                0x88C9: 0x4F0A,
                0x88CA: 0x4F4D,
                0x88CB: 0x4F9D,
                0x88CC: 0x5049,
                0x88CD: 0x56F2,
                0x88CE: 0x5937,
                0x88CF: 0x59D4,
                0x88D0: 0x5A01,
                0x88D1: 0x5C09,
                0x88D2: 0x60DF,
                0x88D3: 0x610F,
                0x88D4: 0x6170,
                0x88D5: 0x6613,
                0x88D6: 0x6905,
                0x88D7: 0x70BA,
                0x88D8: 0x754F,
                0x88D9: 0x7570,
                0x88DA: 0x79FB,
                0x88DB: 0x7DAD,
                0x88DC: 0x7DEF,
                0x88DD: 0x80C3,
                0x88DE: 0x840E,
                0x88DF: 0x8863,
                0x88E0: 0x8B02,
                0x88E1: 0x9055,
                0x88E2: 0x907A,
                0x88E3: 0x533B,
                0x88E4: 0x4E95,
                0x88E5: 0x4EA5,
                0x88E6: 0x57DF,
                0x88E7: 0x80B2,
                0x88E8: 0x90C1,
                0x88E9: 0x78EF,
                0x88EA: 0x4E00,
                0x88EB: 0x58F1,
                0x88EC: 0x6EA2,
                0x88ED: 0x9038,
                0x88EE: 0x7A32,
                0x88EF: 0x8328,
                0x88F0: 0x828B,
                0x88F1: 0x9C2F,
                0x88F2: 0x5141,
                0x88F3: 0x5370,
                0x88F4: 0x54BD,
                0x88F5: 0x54E1,
                0x88F6: 0x56E0,
                0x88F7: 0x59FB,
                0x88F8: 0x5F15,
                0x88F9: 0x98F2,
                0x88FA: 0x6DEB,
                0x88FB: 0x80E4,
                0x88FC: 0x852D,
                0x8940: 0x9662,
                0x8941: 0x9670,
                0x8942: 0x96A0,
                0x8943: 0x97FB,
                0x8944: 0x540B,
                0x8945: 0x53F3,
                0x8946: 0x5B87,
                0x8947: 0x70CF,
                0x8948: 0x7FBD,
                0x8949: 0x8FC2,
                0x894A: 0x96E8,
                0x894B: 0x536F,
                0x894C: 0x9D5C,
                0x894D: 0x7ABA,
                0x894E: 0x4E11,
                0x894F: 0x7893,
                0x8950: 0x81FC,
                0x8951: 0x6E26,
                0x8952: 0x5618,
                0x8953: 0x5504,
                0x8954: 0x6B1D,
                0x8955: 0x851A,
                0x8956: 0x9C3B,
                0x8957: 0x59E5,
                0x8958: 0x53A9,
                0x8959: 0x6D66,
                0x895A: 0x74DC,
                0x895B: 0x958F,
                0x895C: 0x5642,
                0x895D: 0x4E91,
                0x895E: 0x904B,
                0x895F: 0x96F2,
                0x8960: 0x834F,
                0x8961: 0x990C,
                0x8962: 0x53E1,
                0x8963: 0x55B6,
                0x8964: 0x5B30,
                0x8965: 0x5F71,
                0x8966: 0x6620,
                0x8967: 0x66F3,
                0x8968: 0x6804,
                0x8969: 0x6C38,
                0x896A: 0x6CF3,
                0x896B: 0x6D29,
                0x896C: 0x745B,
                0x896D: 0x76C8,
                0x896E: 0x7A4E,
                0x896F: 0x9834,
                0x8970: 0x82F1,
                0x8971: 0x885B,
                0x8972: 0x8A60,
                0x8973: 0x92ED,
                0x8974: 0x6DB2,
                0x8975: 0x75AB,
                0x8976: 0x76CA,
                0x8977: 0x99C5,
                0x8978: 0x60A6,
                0x8979: 0x8B01,
                0x897A: 0x8D8A,
                0x897B: 0x95B2,
                0x897C: 0x698E,
                0x897D: 0x53AD,
                0x897E: 0x5186,
                0x8980: 0x5712,
                0x8981: 0x5830,
                0x8982: 0x5944,
                0x8983: 0x5BB4,
                0x8984: 0x5EF6,
                0x8985: 0x6028,
                0x8986: 0x63A9,
                0x8987: 0x63F4,
                0x8988: 0x6CBF,
                0x8989: 0x6F14,
                0x898A: 0x708E,
                0x898B: 0x7114,
                0x898C: 0x7159,
                0x898D: 0x71D5,
                0x898E: 0x733F,
                0x898F: 0x7E01,
                0x8990: 0x8276,
                0x8991: 0x82D1,
                0x8992: 0x8597,
                0x8993: 0x9060,
                0x8994: 0x925B,
                0x8995: 0x9D1B,
                0x8996: 0x5869,
                0x8997: 0x65BC,
                0x8998: 0x6C5A,
                0x8999: 0x7525,
                0x899A: 0x51F9,
                0x899B: 0x592E,
                0x899C: 0x5965,
                0x899D: 0x5F80,
                0x899E: 0x5FDC,
                0x899F: 0x62BC,
                0x89A0: 0x65FA,
                0x89A1: 0x6A2A,
                0x89A2: 0x6B27,
                0x89A3: 0x6BB4,
                0x89A4: 0x738B,
                0x89A5: 0x7FC1,
                0x89A6: 0x8956,
                0x89A7: 0x9D2C,
                0x89A8: 0x9D0E,
                0x89A9: 0x9EC4,
                0x89AA: 0x5CA1,
                0x89AB: 0x6C96,
                0x89AC: 0x837B,
                0x89AD: 0x5104,
                0x89AE: 0x5C4B,
                0x89AF: 0x61B6,
                0x89B0: 0x81C6,
                0x89B1: 0x6876,
                0x89B2: 0x7261,
                0x89B3: 0x4E59,
                0x89B4: 0x4FFA,
                0x89B5: 0x5378,
                0x89B6: 0x6069,
                0x89B7: 0x6E29,
                0x89B8: 0x7A4F,
                0x89B9: 0x97F3,
                0x89BA: 0x4E0B,
                0x89BB: 0x5316,
                0x89BC: 0x4EEE,
                0x89BD: 0x4F55,
                0x89BE: 0x4F3D,
                0x89BF: 0x4FA1,
                0x89C0: 0x4F73,
                0x89C1: 0x52A0,
                0x89C2: 0x53EF,
                0x89C3: 0x5609,
                0x89C4: 0x590F,
                0x89C5: 0x5AC1,
                0x89C6: 0x5BB6,
                0x89C7: 0x5BE1,
                0x89C8: 0x79D1,
                0x89C9: 0x6687,
                0x89CA: 0x679C,
                0x89CB: 0x67B6,
                0x89CC: 0x6B4C,
                0x89CD: 0x6CB3,
                0x89CE: 0x706B,
                0x89CF: 0x73C2,
                0x89D0: 0x798D,
                0x89D1: 0x79BE,
                0x89D2: 0x7A3C,
                0x89D3: 0x7B87,
                0x89D4: 0x82B1,
                0x89D5: 0x82DB,
                0x89D6: 0x8304,
                0x89D7: 0x8377,
                0x89D8: 0x83EF,
                0x89D9: 0x83D3,
                0x89DA: 0x8766,
                0x89DB: 0x8AB2,
                0x89DC: 0x5629,
                0x89DD: 0x8CA8,
                0x89DE: 0x8FE6,
                0x89DF: 0x904E,
                0x89E0: 0x971E,
                0x89E1: 0x868A,
                0x89E2: 0x4FC4,
                0x89E3: 0x5CE8,
                0x89E4: 0x6211,
                0x89E5: 0x7259,
                0x89E6: 0x753B,
                0x89E7: 0x81E5,
                0x89E8: 0x82BD,
                0x89E9: 0x86FE,
                0x89EA: 0x8CC0,
                0x89EB: 0x96C5,
                0x89EC: 0x9913,
                0x89ED: 0x99D5,
                0x89EE: 0x4ECB,
                0x89EF: 0x4F1A,
                0x89F0: 0x89E3,
                0x89F1: 0x56DE,
                0x89F2: 0x584A,
                0x89F3: 0x58CA,
                0x89F4: 0x5EFB,
                0x89F5: 0x5FEB,
                0x89F6: 0x602A,
                0x89F7: 0x6094,
                0x89F8: 0x6062,
                0x89F9: 0x61D0,
                0x89FA: 0x6212,
                0x89FB: 0x62D0,
                0x89FC: 0x6539,
                0x8A40: 0x9B41,
                0x8A41: 0x6666,
                0x8A42: 0x68B0,
                0x8A43: 0x6D77,
                0x8A44: 0x7070,
                0x8A45: 0x754C,
                0x8A46: 0x7686,
                0x8A47: 0x7D75,
                0x8A48: 0x82A5,
                0x8A49: 0x87F9,
                0x8A4A: 0x958B,
                0x8A4B: 0x968E,
                0x8A4C: 0x8C9D,
                0x8A4D: 0x51F1,
                0x8A4E: 0x52BE,
                0x8A4F: 0x5916,
                0x8A50: 0x54B3,
                0x8A51: 0x5BB3,
                0x8A52: 0x5D16,
                0x8A53: 0x6168,
                0x8A54: 0x6982,
                0x8A55: 0x6DAF,
                0x8A56: 0x788D,
                0x8A57: 0x84CB,
                0x8A58: 0x8857,
                0x8A59: 0x8A72,
                0x8A5A: 0x93A7,
                0x8A5B: 0x9AB8,
                0x8A5C: 0x6D6C,
                0x8A5D: 0x99A8,
                0x8A5E: 0x86D9,
                0x8A5F: 0x57A3,
                0x8A60: 0x67FF,
                0x8A61: 0x86CE,
                0x8A62: 0x920E,
                0x8A63: 0x5283,
                0x8A64: 0x5687,
                0x8A65: 0x5404,
                0x8A66: 0x5ED3,
                0x8A67: 0x62E1,
                0x8A68: 0x64B9,
                0x8A69: 0x683C,
                0x8A6A: 0x6838,
                0x8A6B: 0x6BBB,
                0x8A6C: 0x7372,
                0x8A6D: 0x78BA,
                0x8A6E: 0x7A6B,
                0x8A6F: 0x899A,
                0x8A70: 0x89D2,
                0x8A71: 0x8D6B,
                0x8A72: 0x8F03,
                0x8A73: 0x90ED,
                0x8A74: 0x95A3,
                0x8A75: 0x9694,
                0x8A76: 0x9769,
                0x8A77: 0x5B66,
                0x8A78: 0x5CB3,
                0x8A79: 0x697D,
                0x8A7A: 0x984D,
                0x8A7B: 0x984E,
                0x8A7C: 0x639B,
                0x8A7D: 0x7B20,
                0x8A7E: 0x6A2B,
                0x8A80: 0x6A7F,
                0x8A81: 0x68B6,
                0x8A82: 0x9C0D,
                0x8A83: 0x6F5F,
                0x8A84: 0x5272,
                0x8A85: 0x559D,
                0x8A86: 0x6070,
                0x8A87: 0x62EC,
                0x8A88: 0x6D3B,
                0x8A89: 0x6E07,
                0x8A8A: 0x6ED1,
                0x8A8B: 0x845B,
                0x8A8C: 0x8910,
                0x8A8D: 0x8F44,
                0x8A8E: 0x4E14,
                0x8A8F: 0x9C39,
                0x8A90: 0x53F6,
                0x8A91: 0x691B,
                0x8A92: 0x6A3A,
                0x8A93: 0x9784,
                0x8A94: 0x682A,
                0x8A95: 0x515C,
                0x8A96: 0x7AC3,
                0x8A97: 0x84B2,
                0x8A98: 0x91DC,
                0x8A99: 0x938C,
                0x8A9A: 0x565B,
                0x8A9B: 0x9D28,
                0x8A9C: 0x6822,
                0x8A9D: 0x8305,
                0x8A9E: 0x8431,
                0x8A9F: 0x7CA5,
                0x8AA0: 0x5208,
                0x8AA1: 0x82C5,
                0x8AA2: 0x74E6,
                0x8AA3: 0x4E7E,
                0x8AA4: 0x4F83,
                0x8AA5: 0x51A0,
                0x8AA6: 0x5BD2,
                0x8AA7: 0x520A,
                0x8AA8: 0x52D8,
                0x8AA9: 0x52E7,
                0x8AAA: 0x5DFB,
                0x8AAB: 0x559A,
                0x8AAC: 0x582A,
                0x8AAD: 0x59E6,
                0x8AAE: 0x5B8C,
                0x8AAF: 0x5B98,
                0x8AB0: 0x5BDB,
                0x8AB1: 0x5E72,
                0x8AB2: 0x5E79,
                0x8AB3: 0x60A3,
                0x8AB4: 0x611F,
                0x8AB5: 0x6163,
                0x8AB6: 0x61BE,
                0x8AB7: 0x63DB,
                0x8AB8: 0x6562,
                0x8AB9: 0x67D1,
                0x8ABA: 0x6853,
                0x8ABB: 0x68FA,
                0x8ABC: 0x6B3E,
                0x8ABD: 0x6B53,
                0x8ABE: 0x6C57,
                0x8ABF: 0x6F22,
                0x8AC0: 0x6F97,
                0x8AC1: 0x6F45,
                0x8AC2: 0x74B0,
                0x8AC3: 0x7518,
                0x8AC4: 0x76E3,
                0x8AC5: 0x770B,
                0x8AC6: 0x7AFF,
                0x8AC7: 0x7BA1,
                0x8AC8: 0x7C21,
                0x8AC9: 0x7DE9,
                0x8ACA: 0x7F36,
                0x8ACB: 0x7FF0,
                0x8ACC: 0x809D,
                0x8ACD: 0x8266,
                0x8ACE: 0x839E,
                0x8ACF: 0x89B3,
                0x8AD0: 0x8ACC,
                0x8AD1: 0x8CAB,
                0x8AD2: 0x9084,
                0x8AD3: 0x9451,
                0x8AD4: 0x9593,
                0x8AD5: 0x9591,
                0x8AD6: 0x95A2,
                0x8AD7: 0x9665,
                0x8AD8: 0x97D3,
                0x8AD9: 0x9928,
                0x8ADA: 0x8218,
                0x8ADB: 0x4E38,
                0x8ADC: 0x542B,
                0x8ADD: 0x5CB8,
                0x8ADE: 0x5DCC,
                0x8ADF: 0x73A9,
                0x8AE0: 0x764C,
                0x8AE1: 0x773C,
                0x8AE2: 0x5CA9,
                0x8AE3: 0x7FEB,
                0x8AE4: 0x8D0B,
                0x8AE5: 0x96C1,
                0x8AE6: 0x9811,
                0x8AE7: 0x9854,
                0x8AE8: 0x9858,
                0x8AE9: 0x4F01,
                0x8AEA: 0x4F0E,
                0x8AEB: 0x5371,
                0x8AEC: 0x559C,
                0x8AED: 0x5668,
                0x8AEE: 0x57FA,
                0x8AEF: 0x5947,
                0x8AF0: 0x5B09,
                0x8AF1: 0x5BC4,
                0x8AF2: 0x5C90,
                0x8AF3: 0x5E0C,
                0x8AF4: 0x5E7E,
                0x8AF5: 0x5FCC,
                0x8AF6: 0x63EE,
                0x8AF7: 0x673A,
                0x8AF8: 0x65D7,
                0x8AF9: 0x65E2,
                0x8AFA: 0x671F,
                0x8AFB: 0x68CB,
                0x8AFC: 0x68C4,
                0x8B40: 0x6A5F,
                0x8B41: 0x5E30,
                0x8B42: 0x6BC5,
                0x8B43: 0x6C17,
                0x8B44: 0x6C7D,
                0x8B45: 0x757F,
                0x8B46: 0x7948,
                0x8B47: 0x5B63,
                0x8B48: 0x7A00,
                0x8B49: 0x7D00,
                0x8B4A: 0x5FBD,
                0x8B4B: 0x898F,
                0x8B4C: 0x8A18,
                0x8B4D: 0x8CB4,
                0x8B4E: 0x8D77,
                0x8B4F: 0x8ECC,
                0x8B50: 0x8F1D,
                0x8B51: 0x98E2,
                0x8B52: 0x9A0E,
                0x8B53: 0x9B3C,
                0x8B54: 0x4E80,
                0x8B55: 0x507D,
                0x8B56: 0x5100,
                0x8B57: 0x5993,
                0x8B58: 0x5B9C,
                0x8B59: 0x622F,
                0x8B5A: 0x6280,
                0x8B5B: 0x64EC,
                0x8B5C: 0x6B3A,
                0x8B5D: 0x72A0,
                0x8B5E: 0x7591,
                0x8B5F: 0x7947,
                0x8B60: 0x7FA9,
                0x8B61: 0x87FB,
                0x8B62: 0x8ABC,
                0x8B63: 0x8B70,
                0x8B64: 0x63AC,
                0x8B65: 0x83CA,
                0x8B66: 0x97A0,
                0x8B67: 0x5409,
                0x8B68: 0x5403,
                0x8B69: 0x55AB,
                0x8B6A: 0x6854,
                0x8B6B: 0x6A58,
                0x8B6C: 0x8A70,
                0x8B6D: 0x7827,
                0x8B6E: 0x6775,
                0x8B6F: 0x9ECD,
                0x8B70: 0x5374,
                0x8B71: 0x5BA2,
                0x8B72: 0x811A,
                0x8B73: 0x8650,
                0x8B74: 0x9006,
                0x8B75: 0x4E18,
                0x8B76: 0x4E45,
                0x8B77: 0x4EC7,
                0x8B78: 0x4F11,
                0x8B79: 0x53CA,
                0x8B7A: 0x5438,
                0x8B7B: 0x5BAE,
                0x8B7C: 0x5F13,
                0x8B7D: 0x6025,
                0x8B7E: 0x6551,
                0x8B80: 0x673D,
                0x8B81: 0x6C42,
                0x8B82: 0x6C72,
                0x8B83: 0x6CE3,
                0x8B84: 0x7078,
                0x8B85: 0x7403,
                0x8B86: 0x7A76,
                0x8B87: 0x7AAE,
                0x8B88: 0x7B08,
                0x8B89: 0x7D1A,
                0x8B8A: 0x7CFE,
                0x8B8B: 0x7D66,
                0x8B8C: 0x65E7,
                0x8B8D: 0x725B,
                0x8B8E: 0x53BB,
                0x8B8F: 0x5C45,
                0x8B90: 0x5DE8,
                0x8B91: 0x62D2,
                0x8B92: 0x62E0,
                0x8B93: 0x6319,
                0x8B94: 0x6E20,
                0x8B95: 0x865A,
                0x8B96: 0x8A31,
                0x8B97: 0x8DDD,
                0x8B98: 0x92F8,
                0x8B99: 0x6F01,
                0x8B9A: 0x79A6,
                0x8B9B: 0x9B5A,
                0x8B9C: 0x4EA8,
                0x8B9D: 0x4EAB,
                0x8B9E: 0x4EAC,
                0x8B9F: 0x4F9B,
                0x8BA0: 0x4FA0,
                0x8BA1: 0x50D1,
                0x8BA2: 0x5147,
                0x8BA3: 0x7AF6,
                0x8BA4: 0x5171,
                0x8BA5: 0x51F6,
                0x8BA6: 0x5354,
                0x8BA7: 0x5321,
                0x8BA8: 0x537F,
                0x8BA9: 0x53EB,
                0x8BAA: 0x55AC,
                0x8BAB: 0x5883,
                0x8BAC: 0x5CE1,
                0x8BAD: 0x5F37,
                0x8BAE: 0x5F4A,
                0x8BAF: 0x602F,
                0x8BB0: 0x6050,
                0x8BB1: 0x606D,
                0x8BB2: 0x631F,
                0x8BB3: 0x6559,
                0x8BB4: 0x6A4B,
                0x8BB5: 0x6CC1,
                0x8BB6: 0x72C2,
                0x8BB7: 0x72ED,
                0x8BB8: 0x77EF,
                0x8BB9: 0x80F8,
                0x8BBA: 0x8105,
                0x8BBB: 0x8208,
                0x8BBC: 0x854E,
                0x8BBD: 0x90F7,
                0x8BBE: 0x93E1,
                0x8BBF: 0x97FF,
                0x8BC0: 0x9957,
                0x8BC1: 0x9A5A,
                0x8BC2: 0x4EF0,
                0x8BC3: 0x51DD,
                0x8BC4: 0x5C2D,
                0x8BC5: 0x6681,
                0x8BC6: 0x696D,
                0x8BC7: 0x5C40,
                0x8BC8: 0x66F2,
                0x8BC9: 0x6975,
                0x8BCA: 0x7389,
                0x8BCB: 0x6850,
                0x8BCC: 0x7C81,
                0x8BCD: 0x50C5,
                0x8BCE: 0x52E4,
                0x8BCF: 0x5747,
                0x8BD0: 0x5DFE,
                0x8BD1: 0x9326,
                0x8BD2: 0x65A4,
                0x8BD3: 0x6B23,
                0x8BD4: 0x6B3D,
                0x8BD5: 0x7434,
                0x8BD6: 0x7981,
                0x8BD7: 0x79BD,
                0x8BD8: 0x7B4B,
                0x8BD9: 0x7DCA,
                0x8BDA: 0x82B9,
                0x8BDB: 0x83CC,
                0x8BDC: 0x887F,
                0x8BDD: 0x895F,
                0x8BDE: 0x8B39,
                0x8BDF: 0x8FD1,
                0x8BE0: 0x91D1,
                0x8BE1: 0x541F,
                0x8BE2: 0x9280,
                0x8BE3: 0x4E5D,
                0x8BE4: 0x5036,
                0x8BE5: 0x53E5,
                0x8BE6: 0x533A,
                0x8BE7: 0x72D7,
                0x8BE8: 0x7396,
                0x8BE9: 0x77E9,
                0x8BEA: 0x82E6,
                0x8BEB: 0x8EAF,
                0x8BEC: 0x99C6,
                0x8BED: 0x99C8,
                0x8BEE: 0x99D2,
                0x8BEF: 0x5177,
                0x8BF0: 0x611A,
                0x8BF1: 0x865E,
                0x8BF2: 0x55B0,
                0x8BF3: 0x7A7A,
                0x8BF4: 0x5076,
                0x8BF5: 0x5BD3,
                0x8BF6: 0x9047,
                0x8BF7: 0x9685,
                0x8BF8: 0x4E32,
                0x8BF9: 0x6ADB,
                0x8BFA: 0x91E7,
                0x8BFB: 0x5C51,
                0x8BFC: 0x5C48,
                0x8C40: 0x6398,
                0x8C41: 0x7A9F,
                0x8C42: 0x6C93,
                0x8C43: 0x9774,
                0x8C44: 0x8F61,
                0x8C45: 0x7AAA,
                0x8C46: 0x718A,
                0x8C47: 0x9688,
                0x8C48: 0x7C82,
                0x8C49: 0x6817,
                0x8C4A: 0x7E70,
                0x8C4B: 0x6851,
                0x8C4C: 0x936C,
                0x8C4D: 0x52F2,
                0x8C4E: 0x541B,
                0x8C4F: 0x85AB,
                0x8C50: 0x8A13,
                0x8C51: 0x7FA4,
                0x8C52: 0x8ECD,
                0x8C53: 0x90E1,
                0x8C54: 0x5366,
                0x8C55: 0x8888,
                0x8C56: 0x7941,
                0x8C57: 0x4FC2,
                0x8C58: 0x50BE,
                0x8C59: 0x5211,
                0x8C5A: 0x5144,
                0x8C5B: 0x5553,
                0x8C5C: 0x572D,
                0x8C5D: 0x73EA,
                0x8C5E: 0x578B,
                0x8C5F: 0x5951,
                0x8C60: 0x5F62,
                0x8C61: 0x5F84,
                0x8C62: 0x6075,
                0x8C63: 0x6176,
                0x8C64: 0x6167,
                0x8C65: 0x61A9,
                0x8C66: 0x63B2,
                0x8C67: 0x643A,
                0x8C68: 0x656C,
                0x8C69: 0x666F,
                0x8C6A: 0x6842,
                0x8C6B: 0x6E13,
                0x8C6C: 0x7566,
                0x8C6D: 0x7A3D,
                0x8C6E: 0x7CFB,
                0x8C6F: 0x7D4C,
                0x8C70: 0x7D99,
                0x8C71: 0x7E4B,
                0x8C72: 0x7F6B,
                0x8C73: 0x830E,
                0x8C74: 0x834A,
                0x8C75: 0x86CD,
                0x8C76: 0x8A08,
                0x8C77: 0x8A63,
                0x8C78: 0x8B66,
                0x8C79: 0x8EFD,
                0x8C7A: 0x981A,
                0x8C7B: 0x9D8F,
                0x8C7C: 0x82B8,
                0x8C7D: 0x8FCE,
                0x8C7E: 0x9BE8,
                0x8C80: 0x5287,
                0x8C81: 0x621F,
                0x8C82: 0x6483,
                0x8C83: 0x6FC0,
                0x8C84: 0x9699,
                0x8C85: 0x6841,
                0x8C86: 0x5091,
                0x8C87: 0x6B20,
                0x8C88: 0x6C7A,
                0x8C89: 0x6F54,
                0x8C8A: 0x7A74,
                0x8C8B: 0x7D50,
                0x8C8C: 0x8840,
                0x8C8D: 0x8A23,
                0x8C8E: 0x6708,
                0x8C8F: 0x4EF6,
                0x8C90: 0x5039,
                0x8C91: 0x5026,
                0x8C92: 0x5065,
                0x8C93: 0x517C,
                0x8C94: 0x5238,
                0x8C95: 0x5263,
                0x8C96: 0x55A7,
                0x8C97: 0x570F,
                0x8C98: 0x5805,
                0x8C99: 0x5ACC,
                0x8C9A: 0x5EFA,
                0x8C9B: 0x61B2,
                0x8C9C: 0x61F8,
                0x8C9D: 0x62F3,
                0x8C9E: 0x6372,
                0x8C9F: 0x691C,
                0x8CA0: 0x6A29,
                0x8CA1: 0x727D,
                0x8CA2: 0x72AC,
                0x8CA3: 0x732E,
                0x8CA4: 0x7814,
                0x8CA5: 0x786F,
                0x8CA6: 0x7D79,
                0x8CA7: 0x770C,
                0x8CA8: 0x80A9,
                0x8CA9: 0x898B,
                0x8CAA: 0x8B19,
                0x8CAB: 0x8CE2,
                0x8CAC: 0x8ED2,
                0x8CAD: 0x9063,
                0x8CAE: 0x9375,
                0x8CAF: 0x967A,
                0x8CB0: 0x9855,
                0x8CB1: 0x9A13,
                0x8CB2: 0x9E78,
                0x8CB3: 0x5143,
                0x8CB4: 0x539F,
                0x8CB5: 0x53B3,
                0x8CB6: 0x5E7B,
                0x8CB7: 0x5F26,
                0x8CB8: 0x6E1B,
                0x8CB9: 0x6E90,
                0x8CBA: 0x7384,
                0x8CBB: 0x73FE,
                0x8CBC: 0x7D43,
                0x8CBD: 0x8237,
                0x8CBE: 0x8A00,
                0x8CBF: 0x8AFA,
                0x8CC0: 0x9650,
                0x8CC1: 0x4E4E,
                0x8CC2: 0x500B,
                0x8CC3: 0x53E4,
                0x8CC4: 0x547C,
                0x8CC5: 0x56FA,
                0x8CC6: 0x59D1,
                0x8CC7: 0x5B64,
                0x8CC8: 0x5DF1,
                0x8CC9: 0x5EAB,
                0x8CCA: 0x5F27,
                0x8CCB: 0x6238,
                0x8CCC: 0x6545,
                0x8CCD: 0x67AF,
                0x8CCE: 0x6E56,
                0x8CCF: 0x72D0,
                0x8CD0: 0x7CCA,
                0x8CD1: 0x88B4,
                0x8CD2: 0x80A1,
                0x8CD3: 0x80E1,
                0x8CD4: 0x83F0,
                0x8CD5: 0x864E,
                0x8CD6: 0x8A87,
                0x8CD7: 0x8DE8,
                0x8CD8: 0x9237,
                0x8CD9: 0x96C7,
                0x8CDA: 0x9867,
                0x8CDB: 0x9F13,
                0x8CDC: 0x4E94,
                0x8CDD: 0x4E92,
                0x8CDE: 0x4F0D,
                0x8CDF: 0x5348,
                0x8CE0: 0x5449,
                0x8CE1: 0x543E,
                0x8CE2: 0x5A2F,
                0x8CE3: 0x5F8C,
                0x8CE4: 0x5FA1,
                0x8CE5: 0x609F,
                0x8CE6: 0x68A7,
                0x8CE7: 0x6A8E,
                0x8CE8: 0x745A,
                0x8CE9: 0x7881,
                0x8CEA: 0x8A9E,
                0x8CEB: 0x8AA4,
                0x8CEC: 0x8B77,
                0x8CED: 0x9190,
                0x8CEE: 0x4E5E,
                0x8CEF: 0x9BC9,
                0x8CF0: 0x4EA4,
                0x8CF1: 0x4F7C,
                0x8CF2: 0x4FAF,
                0x8CF3: 0x5019,
                0x8CF4: 0x5016,
                0x8CF5: 0x5149,
                0x8CF6: 0x516C,
                0x8CF7: 0x529F,
                0x8CF8: 0x52B9,
                0x8CF9: 0x52FE,
                0x8CFA: 0x539A,
                0x8CFB: 0x53E3,
                0x8CFC: 0x5411,
                0x8D40: 0x540E,
                0x8D41: 0x5589,
                0x8D42: 0x5751,
                0x8D43: 0x57A2,
                0x8D44: 0x597D,
                0x8D45: 0x5B54,
                0x8D46: 0x5B5D,
                0x8D47: 0x5B8F,
                0x8D48: 0x5DE5,
                0x8D49: 0x5DE7,
                0x8D4A: 0x5DF7,
                0x8D4B: 0x5E78,
                0x8D4C: 0x5E83,
                0x8D4D: 0x5E9A,
                0x8D4E: 0x5EB7,
                0x8D4F: 0x5F18,
                0x8D50: 0x6052,
                0x8D51: 0x614C,
                0x8D52: 0x6297,
                0x8D53: 0x62D8,
                0x8D54: 0x63A7,
                0x8D55: 0x653B,
                0x8D56: 0x6602,
                0x8D57: 0x6643,
                0x8D58: 0x66F4,
                0x8D59: 0x676D,
                0x8D5A: 0x6821,
                0x8D5B: 0x6897,
                0x8D5C: 0x69CB,
                0x8D5D: 0x6C5F,
                0x8D5E: 0x6D2A,
                0x8D5F: 0x6D69,
                0x8D60: 0x6E2F,
                0x8D61: 0x6E9D,
                0x8D62: 0x7532,
                0x8D63: 0x7687,
                0x8D64: 0x786C,
                0x8D65: 0x7A3F,
                0x8D66: 0x7CE0,
                0x8D67: 0x7D05,
                0x8D68: 0x7D18,
                0x8D69: 0x7D5E,
                0x8D6A: 0x7DB1,
                0x8D6B: 0x8015,
                0x8D6C: 0x8003,
                0x8D6D: 0x80AF,
                0x8D6E: 0x80B1,
                0x8D6F: 0x8154,
                0x8D70: 0x818F,
                0x8D71: 0x822A,
                0x8D72: 0x8352,
                0x8D73: 0x884C,
                0x8D74: 0x8861,
                0x8D75: 0x8B1B,
                0x8D76: 0x8CA2,
                0x8D77: 0x8CFC,
                0x8D78: 0x90CA,
                0x8D79: 0x9175,
                0x8D7A: 0x9271,
                0x8D7B: 0x783F,
                0x8D7C: 0x92FC,
                0x8D7D: 0x95A4,
                0x8D7E: 0x964D,
                0x8D80: 0x9805,
                0x8D81: 0x9999,
                0x8D82: 0x9AD8,
                0x8D83: 0x9D3B,
                0x8D84: 0x525B,
                0x8D85: 0x52AB,
                0x8D86: 0x53F7,
                0x8D87: 0x5408,
                0x8D88: 0x58D5,
                0x8D89: 0x62F7,
                0x8D8A: 0x6FE0,
                0x8D8B: 0x8C6A,
                0x8D8C: 0x8F5F,
                0x8D8D: 0x9EB9,
                0x8D8E: 0x514B,
                0x8D8F: 0x523B,
                0x8D90: 0x544A,
                0x8D91: 0x56FD,
                0x8D92: 0x7A40,
                0x8D93: 0x9177,
                0x8D94: 0x9D60,
                0x8D95: 0x9ED2,
                0x8D96: 0x7344,
                0x8D97: 0x6F09,
                0x8D98: 0x8170,
                0x8D99: 0x7511,
                0x8D9A: 0x5FFD,
                0x8D9B: 0x60DA,
                0x8D9C: 0x9AA8,
                0x8D9D: 0x72DB,
                0x8D9E: 0x8FBC,
                0x8D9F: 0x6B64,
                0x8DA0: 0x9803,
                0x8DA1: 0x4ECA,
                0x8DA2: 0x56F0,
                0x8DA3: 0x5764,
                0x8DA4: 0x58BE,
                0x8DA5: 0x5A5A,
                0x8DA6: 0x6068,
                0x8DA7: 0x61C7,
                0x8DA8: 0x660F,
                0x8DA9: 0x6606,
                0x8DAA: 0x6839,
                0x8DAB: 0x68B1,
                0x8DAC: 0x6DF7,
                0x8DAD: 0x75D5,
                0x8DAE: 0x7D3A,
                0x8DAF: 0x826E,
                0x8DB0: 0x9B42,
                0x8DB1: 0x4E9B,
                0x8DB2: 0x4F50,
                0x8DB3: 0x53C9,
                0x8DB4: 0x5506,
                0x8DB5: 0x5D6F,
                0x8DB6: 0x5DE6,
                0x8DB7: 0x5DEE,
                0x8DB8: 0x67FB,
                0x8DB9: 0x6C99,
                0x8DBA: 0x7473,
                0x8DBB: 0x7802,
                0x8DBC: 0x8A50,
                0x8DBD: 0x9396,
                0x8DBE: 0x88DF,
                0x8DBF: 0x5750,
                0x8DC0: 0x5EA7,
                0x8DC1: 0x632B,
                0x8DC2: 0x50B5,
                0x8DC3: 0x50AC,
                0x8DC4: 0x518D,
                0x8DC5: 0x6700,
                0x8DC6: 0x54C9,
                0x8DC7: 0x585E,
                0x8DC8: 0x59BB,
                0x8DC9: 0x5BB0,
                0x8DCA: 0x5F69,
                0x8DCB: 0x624D,
                0x8DCC: 0x63A1,
                0x8DCD: 0x683D,
                0x8DCE: 0x6B73,
                0x8DCF: 0x6E08,
                0x8DD0: 0x707D,
                0x8DD1: 0x91C7,
                0x8DD2: 0x7280,
                0x8DD3: 0x7815,
                0x8DD4: 0x7826,
                0x8DD5: 0x796D,
                0x8DD6: 0x658E,
                0x8DD7: 0x7D30,
                0x8DD8: 0x83DC,
                0x8DD9: 0x88C1,
                0x8DDA: 0x8F09,
                0x8DDB: 0x969B,
                0x8DDC: 0x5264,
                0x8DDD: 0x5728,
                0x8DDE: 0x6750,
                0x8DDF: 0x7F6A,
                0x8DE0: 0x8CA1,
                0x8DE1: 0x51B4,
                0x8DE2: 0x5742,
                0x8DE3: 0x962A,
                0x8DE4: 0x583A,
                0x8DE5: 0x698A,
                0x8DE6: 0x80B4,
                0x8DE7: 0x54B2,
                0x8DE8: 0x5D0E,
                0x8DE9: 0x57FC,
                0x8DEA: 0x7895,
                0x8DEB: 0x9DFA,
                0x8DEC: 0x4F5C,
                0x8DED: 0x524A,
                0x8DEE: 0x548B,
                0x8DEF: 0x643E,
                0x8DF0: 0x6628,
                0x8DF1: 0x6714,
                0x8DF2: 0x67F5,
                0x8DF3: 0x7A84,
                0x8DF4: 0x7B56,
                0x8DF5: 0x7D22,
                0x8DF6: 0x932F,
                0x8DF7: 0x685C,
                0x8DF8: 0x9BAD,
                0x8DF9: 0x7B39,
                0x8DFA: 0x5319,
                0x8DFB: 0x518A,
                0x8DFC: 0x5237,
                0x8E40: 0x5BDF,
                0x8E41: 0x62F6,
                0x8E42: 0x64AE,
                0x8E43: 0x64E6,
                0x8E44: 0x672D,
                0x8E45: 0x6BBA,
                0x8E46: 0x85A9,
                0x8E47: 0x96D1,
                0x8E48: 0x7690,
                0x8E49: 0x9BD6,
                0x8E4A: 0x634C,
                0x8E4B: 0x9306,
                0x8E4C: 0x9BAB,
                0x8E4D: 0x76BF,
                0x8E4E: 0x6652,
                0x8E4F: 0x4E09,
                0x8E50: 0x5098,
                0x8E51: 0x53C2,
                0x8E52: 0x5C71,
                0x8E53: 0x60E8,
                0x8E54: 0x6492,
                0x8E55: 0x6563,
                0x8E56: 0x685F,
                0x8E57: 0x71E6,
                0x8E58: 0x73CA,
                0x8E59: 0x7523,
                0x8E5A: 0x7B97,
                0x8E5B: 0x7E82,
                0x8E5C: 0x8695,
                0x8E5D: 0x8B83,
                0x8E5E: 0x8CDB,
                0x8E5F: 0x9178,
                0x8E60: 0x9910,
                0x8E61: 0x65AC,
                0x8E62: 0x66AB,
                0x8E63: 0x6B8B,
                0x8E64: 0x4ED5,
                0x8E65: 0x4ED4,
                0x8E66: 0x4F3A,
                0x8E67: 0x4F7F,
                0x8E68: 0x523A,
                0x8E69: 0x53F8,
                0x8E6A: 0x53F2,
                0x8E6B: 0x55E3,
                0x8E6C: 0x56DB,
                0x8E6D: 0x58EB,
                0x8E6E: 0x59CB,
                0x8E6F: 0x59C9,
                0x8E70: 0x59FF,
                0x8E71: 0x5B50,
                0x8E72: 0x5C4D,
                0x8E73: 0x5E02,
                0x8E74: 0x5E2B,
                0x8E75: 0x5FD7,
                0x8E76: 0x601D,
                0x8E77: 0x6307,
                0x8E78: 0x652F,
                0x8E79: 0x5B5C,
                0x8E7A: 0x65AF,
                0x8E7B: 0x65BD,
                0x8E7C: 0x65E8,
                0x8E7D: 0x679D,
                0x8E7E: 0x6B62,
                0x8E80: 0x6B7B,
                0x8E81: 0x6C0F,
                0x8E82: 0x7345,
                0x8E83: 0x7949,
                0x8E84: 0x79C1,
                0x8E85: 0x7CF8,
                0x8E86: 0x7D19,
                0x8E87: 0x7D2B,
                0x8E88: 0x80A2,
                0x8E89: 0x8102,
                0x8E8A: 0x81F3,
                0x8E8B: 0x8996,
                0x8E8C: 0x8A5E,
                0x8E8D: 0x8A69,
                0x8E8E: 0x8A66,
                0x8E8F: 0x8A8C,
                0x8E90: 0x8AEE,
                0x8E91: 0x8CC7,
                0x8E92: 0x8CDC,
                0x8E93: 0x96CC,
                0x8E94: 0x98FC,
                0x8E95: 0x6B6F,
                0x8E96: 0x4E8B,
                0x8E97: 0x4F3C,
                0x8E98: 0x4F8D,
                0x8E99: 0x5150,
                0x8E9A: 0x5B57,
                0x8E9B: 0x5BFA,
                0x8E9C: 0x6148,
                0x8E9D: 0x6301,
                0x8E9E: 0x6642,
                0x8E9F: 0x6B21,
                0x8EA0: 0x6ECB,
                0x8EA1: 0x6CBB,
                0x8EA2: 0x723E,
                0x8EA3: 0x74BD,
                0x8EA4: 0x75D4,
                0x8EA5: 0x78C1,
                0x8EA6: 0x793A,
                0x8EA7: 0x800C,
                0x8EA8: 0x8033,
                0x8EA9: 0x81EA,
                0x8EAA: 0x8494,
                0x8EAB: 0x8F9E,
                0x8EAC: 0x6C50,
                0x8EAD: 0x9E7F,
                0x8EAE: 0x5F0F,
                0x8EAF: 0x8B58,
                0x8EB0: 0x9D2B,
                0x8EB1: 0x7AFA,
                0x8EB2: 0x8EF8,
                0x8EB3: 0x5B8D,
                0x8EB4: 0x96EB,
                0x8EB5: 0x4E03,
                0x8EB6: 0x53F1,
                0x8EB7: 0x57F7,
                0x8EB8: 0x5931,
                0x8EB9: 0x5AC9,
                0x8EBA: 0x5BA4,
                0x8EBB: 0x6089,
                0x8EBC: 0x6E7F,
                0x8EBD: 0x6F06,
                0x8EBE: 0x75BE,
                0x8EBF: 0x8CEA,
                0x8EC0: 0x5B9F,
                0x8EC1: 0x8500,
                0x8EC2: 0x7BE0,
                0x8EC3: 0x5072,
                0x8EC4: 0x67F4,
                0x8EC5: 0x829D,
                0x8EC6: 0x5C61,
                0x8EC7: 0x854A,
                0x8EC8: 0x7E1E,
                0x8EC9: 0x820E,
                0x8ECA: 0x5199,
                0x8ECB: 0x5C04,
                0x8ECC: 0x6368,
                0x8ECD: 0x8D66,
                0x8ECE: 0x659C,
                0x8ECF: 0x716E,
                0x8ED0: 0x793E,
                0x8ED1: 0x7D17,
                0x8ED2: 0x8005,
                0x8ED3: 0x8B1D,
                0x8ED4: 0x8ECA,
                0x8ED5: 0x906E,
                0x8ED6: 0x86C7,
                0x8ED7: 0x90AA,
                0x8ED8: 0x501F,
                0x8ED9: 0x52FA,
                0x8EDA: 0x5C3A,
                0x8EDB: 0x6753,
                0x8EDC: 0x707C,
                0x8EDD: 0x7235,
                0x8EDE: 0x914C,
                0x8EDF: 0x91C8,
                0x8EE0: 0x932B,
                0x8EE1: 0x82E5,
                0x8EE2: 0x5BC2,
                0x8EE3: 0x5F31,
                0x8EE4: 0x60F9,
                0x8EE5: 0x4E3B,
                0x8EE6: 0x53D6,
                0x8EE7: 0x5B88,
                0x8EE8: 0x624B,
                0x8EE9: 0x6731,
                0x8EEA: 0x6B8A,
                0x8EEB: 0x72E9,
                0x8EEC: 0x73E0,
                0x8EED: 0x7A2E,
                0x8EEE: 0x816B,
                0x8EEF: 0x8DA3,
                0x8EF0: 0x9152,
                0x8EF1: 0x9996,
                0x8EF2: 0x5112,
                0x8EF3: 0x53D7,
                0x8EF4: 0x546A,
                0x8EF5: 0x5BFF,
                0x8EF6: 0x6388,
                0x8EF7: 0x6A39,
                0x8EF8: 0x7DAC,
                0x8EF9: 0x9700,
                0x8EFA: 0x56DA,
                0x8EFB: 0x53CE,
                0x8EFC: 0x5468,
                0x8F40: 0x5B97,
                0x8F41: 0x5C31,
                0x8F42: 0x5DDE,
                0x8F43: 0x4FEE,
                0x8F44: 0x6101,
                0x8F45: 0x62FE,
                0x8F46: 0x6D32,
                0x8F47: 0x79C0,
                0x8F48: 0x79CB,
                0x8F49: 0x7D42,
                0x8F4A: 0x7E4D,
                0x8F4B: 0x7FD2,
                0x8F4C: 0x81ED,
                0x8F4D: 0x821F,
                0x8F4E: 0x8490,
                0x8F4F: 0x8846,
                0x8F50: 0x8972,
                0x8F51: 0x8B90,
                0x8F52: 0x8E74,
                0x8F53: 0x8F2F,
                0x8F54: 0x9031,
                0x8F55: 0x914B,
                0x8F56: 0x916C,
                0x8F57: 0x96C6,
                0x8F58: 0x919C,
                0x8F59: 0x4EC0,
                0x8F5A: 0x4F4F,
                0x8F5B: 0x5145,
                0x8F5C: 0x5341,
                0x8F5D: 0x5F93,
                0x8F5E: 0x620E,
                0x8F5F: 0x67D4,
                0x8F60: 0x6C41,
                0x8F61: 0x6E0B,
                0x8F62: 0x7363,
                0x8F63: 0x7E26,
                0x8F64: 0x91CD,
                0x8F65: 0x9283,
                0x8F66: 0x53D4,
                0x8F67: 0x5919,
                0x8F68: 0x5BBF,
                0x8F69: 0x6DD1,
                0x8F6A: 0x795D,
                0x8F6B: 0x7E2E,
                0x8F6C: 0x7C9B,
                0x8F6D: 0x587E,
                0x8F6E: 0x719F,
                0x8F6F: 0x51FA,
                0x8F70: 0x8853,
                0x8F71: 0x8FF0,
                0x8F72: 0x4FCA,
                0x8F73: 0x5CFB,
                0x8F74: 0x6625,
                0x8F75: 0x77AC,
                0x8F76: 0x7AE3,
                0x8F77: 0x821C,
                0x8F78: 0x99FF,
                0x8F79: 0x51C6,
                0x8F7A: 0x5FAA,
                0x8F7B: 0x65EC,
                0x8F7C: 0x696F,
                0x8F7D: 0x6B89,
                0x8F7E: 0x6DF3,
                0x8F80: 0x6E96,
                0x8F81: 0x6F64,
                0x8F82: 0x76FE,
                0x8F83: 0x7D14,
                0x8F84: 0x5DE1,
                0x8F85: 0x9075,
                0x8F86: 0x9187,
                0x8F87: 0x9806,
                0x8F88: 0x51E6,
                0x8F89: 0x521D,
                0x8F8A: 0x6240,
                0x8F8B: 0x6691,
                0x8F8C: 0x66D9,
                0x8F8D: 0x6E1A,
                0x8F8E: 0x5EB6,
                0x8F8F: 0x7DD2,
                0x8F90: 0x7F72,
                0x8F91: 0x66F8,
                0x8F92: 0x85AF,
                0x8F93: 0x85F7,
                0x8F94: 0x8AF8,
                0x8F95: 0x52A9,
                0x8F96: 0x53D9,
                0x8F97: 0x5973,
                0x8F98: 0x5E8F,
                0x8F99: 0x5F90,
                0x8F9A: 0x6055,
                0x8F9B: 0x92E4,
                0x8F9C: 0x9664,
                0x8F9D: 0x50B7,
                0x8F9E: 0x511F,
                0x8F9F: 0x52DD,
                0x8FA0: 0x5320,
                0x8FA1: 0x5347,
                0x8FA2: 0x53EC,
                0x8FA3: 0x54E8,
                0x8FA4: 0x5546,
                0x8FA5: 0x5531,
                0x8FA6: 0x5617,
                0x8FA7: 0x5968,
                0x8FA8: 0x59BE,
                0x8FA9: 0x5A3C,
                0x8FAA: 0x5BB5,
                0x8FAB: 0x5C06,
                0x8FAC: 0x5C0F,
                0x8FAD: 0x5C11,
                0x8FAE: 0x5C1A,
                0x8FAF: 0x5E84,
                0x8FB0: 0x5E8A,
                0x8FB1: 0x5EE0,
                0x8FB2: 0x5F70,
                0x8FB3: 0x627F,
                0x8FB4: 0x6284,
                0x8FB5: 0x62DB,
                0x8FB6: 0x638C,
                0x8FB7: 0x6377,
                0x8FB8: 0x6607,
                0x8FB9: 0x660C,
                0x8FBA: 0x662D,
                0x8FBB: 0x6676,
                0x8FBC: 0x677E,
                0x8FBD: 0x68A2,
                0x8FBE: 0x6A1F,
                0x8FBF: 0x6A35,
                0x8FC0: 0x6CBC,
                0x8FC1: 0x6D88,
                0x8FC2: 0x6E09,
                0x8FC3: 0x6E58,
                0x8FC4: 0x713C,
                0x8FC5: 0x7126,
                0x8FC6: 0x7167,
                0x8FC7: 0x75C7,
                0x8FC8: 0x7701,
                0x8FC9: 0x785D,
                0x8FCA: 0x7901,
                0x8FCB: 0x7965,
                0x8FCC: 0x79F0,
                0x8FCD: 0x7AE0,
                0x8FCE: 0x7B11,
                0x8FCF: 0x7CA7,
                0x8FD0: 0x7D39,
                0x8FD1: 0x8096,
                0x8FD2: 0x83D6,
                0x8FD3: 0x848B,
                0x8FD4: 0x8549,
                0x8FD5: 0x885D,
                0x8FD6: 0x88F3,
                0x8FD7: 0x8A1F,
                0x8FD8: 0x8A3C,
                0x8FD9: 0x8A54,
                0x8FDA: 0x8A73,
                0x8FDB: 0x8C61,
                0x8FDC: 0x8CDE,
                0x8FDD: 0x91A4,
                0x8FDE: 0x9266,
                0x8FDF: 0x937E,
                0x8FE0: 0x9418,
                0x8FE1: 0x969C,
                0x8FE2: 0x9798,
                0x8FE3: 0x4E0A,
                0x8FE4: 0x4E08,
                0x8FE5: 0x4E1E,
                0x8FE6: 0x4E57,
                0x8FE7: 0x5197,
                0x8FE8: 0x5270,
                0x8FE9: 0x57CE,
                0x8FEA: 0x5834,
                0x8FEB: 0x58CC,
                0x8FEC: 0x5B22,
                0x8FED: 0x5E38,
                0x8FEE: 0x60C5,
                0x8FEF: 0x64FE,
                0x8FF0: 0x6761,
                0x8FF1: 0x6756,
                0x8FF2: 0x6D44,
                0x8FF3: 0x72B6,
                0x8FF4: 0x7573,
                0x8FF5: 0x7A63,
                0x8FF6: 0x84B8,
                0x8FF7: 0x8B72,
                0x8FF8: 0x91B8,
                0x8FF9: 0x9320,
                0x8FFA: 0x5631,
                0x8FFB: 0x57F4,
                0x8FFC: 0x98FE,
                0x9040: 0x62ED,
                0x9041: 0x690D,
                0x9042: 0x6B96,
                0x9043: 0x71ED,
                0x9044: 0x7E54,
                0x9045: 0x8077,
                0x9046: 0x8272,
                0x9047: 0x89E6,
                0x9048: 0x98DF,
                0x9049: 0x8755,
                0x904A: 0x8FB1,
                0x904B: 0x5C3B,
                0x904C: 0x4F38,
                0x904D: 0x4FE1,
                0x904E: 0x4FB5,
                0x904F: 0x5507,
                0x9050: 0x5A20,
                0x9051: 0x5BDD,
                0x9052: 0x5BE9,
                0x9053: 0x5FC3,
                0x9054: 0x614E,
                0x9055: 0x632F,
                0x9056: 0x65B0,
                0x9057: 0x664B,
                0x9058: 0x68EE,
                0x9059: 0x699B,
                0x905A: 0x6D78,
                0x905B: 0x6DF1,
                0x905C: 0x7533,
                0x905D: 0x75B9,
                0x905E: 0x771F,
                0x905F: 0x795E,
                0x9060: 0x79E6,
                0x9061: 0x7D33,
                0x9062: 0x81E3,
                0x9063: 0x82AF,
                0x9064: 0x85AA,
                0x9065: 0x89AA,
                0x9066: 0x8A3A,
                0x9067: 0x8EAB,
                0x9068: 0x8F9B,
                0x9069: 0x9032,
                0x906A: 0x91DD,
                0x906B: 0x9707,
                0x906C: 0x4EBA,
                0x906D: 0x4EC1,
                0x906E: 0x5203,
                0x906F: 0x5875,
                0x9070: 0x58EC,
                0x9071: 0x5C0B,
                0x9072: 0x751A,
                0x9073: 0x5C3D,
                0x9074: 0x814E,
                0x9075: 0x8A0A,
                0x9076: 0x8FC5,
                0x9077: 0x9663,
                0x9078: 0x976D,
                0x9079: 0x7B25,
                0x907A: 0x8ACF,
                0x907B: 0x9808,
                0x907C: 0x9162,
                0x907D: 0x56F3,
                0x907E: 0x53A8,
                0x9080: 0x9017,
                0x9081: 0x5439,
                0x9082: 0x5782,
                0x9083: 0x5E25,
                0x9084: 0x63A8,
                0x9085: 0x6C34,
                0x9086: 0x708A,
                0x9087: 0x7761,
                0x9088: 0x7C8B,
                0x9089: 0x7FE0,
                0x908A: 0x8870,
                0x908B: 0x9042,
                0x908C: 0x9154,
                0x908D: 0x9310,
                0x908E: 0x9318,
                0x908F: 0x968F,
                0x9090: 0x745E,
                0x9091: 0x9AC4,
                0x9092: 0x5D07,
                0x9093: 0x5D69,
                0x9094: 0x6570,
                0x9095: 0x67A2,
                0x9096: 0x8DA8,
                0x9097: 0x96DB,
                0x9098: 0x636E,
                0x9099: 0x6749,
                0x909A: 0x6919,
                0x909B: 0x83C5,
                0x909C: 0x9817,
                0x909D: 0x96C0,
                0x909E: 0x88FE,
                0x909F: 0x6F84,
                0x90A0: 0x647A,
                0x90A1: 0x5BF8,
                0x90A2: 0x4E16,
                0x90A3: 0x702C,
                0x90A4: 0x755D,
                0x90A5: 0x662F,
                0x90A6: 0x51C4,
                0x90A7: 0x5236,
                0x90A8: 0x52E2,
                0x90A9: 0x59D3,
                0x90AA: 0x5F81,
                0x90AB: 0x6027,
                0x90AC: 0x6210,
                0x90AD: 0x653F,
                0x90AE: 0x6574,
                0x90AF: 0x661F,
                0x90B0: 0x6674,
                0x90B1: 0x68F2,
                0x90B2: 0x6816,
                0x90B3: 0x6B63,
                0x90B4: 0x6E05,
                0x90B5: 0x7272,
                0x90B6: 0x751F,
                0x90B7: 0x76DB,
                0x90B8: 0x7CBE,
                0x90B9: 0x8056,
                0x90BA: 0x58F0,
                0x90BB: 0x88FD,
                0x90BC: 0x897F,
                0x90BD: 0x8AA0,
                0x90BE: 0x8A93,
                0x90BF: 0x8ACB,
                0x90C0: 0x901D,
                0x90C1: 0x9192,
                0x90C2: 0x9752,
                0x90C3: 0x9759,
                0x90C4: 0x6589,
                0x90C5: 0x7A0E,
                0x90C6: 0x8106,
                0x90C7: 0x96BB,
                0x90C8: 0x5E2D,
                0x90C9: 0x60DC,
                0x90CA: 0x621A,
                0x90CB: 0x65A5,
                0x90CC: 0x6614,
                0x90CD: 0x6790,
                0x90CE: 0x77F3,
                0x90CF: 0x7A4D,
                0x90D0: 0x7C4D,
                0x90D1: 0x7E3E,
                0x90D2: 0x810A,
                0x90D3: 0x8CAC,
                0x90D4: 0x8D64,
                0x90D5: 0x8DE1,
                0x90D6: 0x8E5F,
                0x90D7: 0x78A9,
                0x90D8: 0x5207,
                0x90D9: 0x62D9,
                0x90DA: 0x63A5,
                0x90DB: 0x6442,
                0x90DC: 0x6298,
                0x90DD: 0x8A2D,
                0x90DE: 0x7A83,
                0x90DF: 0x7BC0,
                0x90E0: 0x8AAC,
                0x90E1: 0x96EA,
                0x90E2: 0x7D76,
                0x90E3: 0x820C,
                0x90E4: 0x8749,
                0x90E5: 0x4ED9,
                0x90E6: 0x5148,
                0x90E7: 0x5343,
                0x90E8: 0x5360,
                0x90E9: 0x5BA3,
                0x90EA: 0x5C02,
                0x90EB: 0x5C16,
                0x90EC: 0x5DDD,
                0x90ED: 0x6226,
                0x90EE: 0x6247,
                0x90EF: 0x64B0,
                0x90F0: 0x6813,
                0x90F1: 0x6834,
                0x90F2: 0x6CC9,
                0x90F3: 0x6D45,
                0x90F4: 0x6D17,
                0x90F5: 0x67D3,
                0x90F6: 0x6F5C,
                0x90F7: 0x714E,
                0x90F8: 0x717D,
                0x90F9: 0x65CB,
                0x90FA: 0x7A7F,
                0x90FB: 0x7BAD,
                0x90FC: 0x7DDA,
                0x9140: 0x7E4A,
                0x9141: 0x7FA8,
                0x9142: 0x817A,
                0x9143: 0x821B,
                0x9144: 0x8239,
                0x9145: 0x85A6,
                0x9146: 0x8A6E,
                0x9147: 0x8CCE,
                0x9148: 0x8DF5,
                0x9149: 0x9078,
                0x914A: 0x9077,
                0x914B: 0x92AD,
                0x914C: 0x9291,
                0x914D: 0x9583,
                0x914E: 0x9BAE,
                0x914F: 0x524D,
                0x9150: 0x5584,
                0x9151: 0x6F38,
                0x9152: 0x7136,
                0x9153: 0x5168,
                0x9154: 0x7985,
                0x9155: 0x7E55,
                0x9156: 0x81B3,
                0x9157: 0x7CCE,
                0x9158: 0x564C,
                0x9159: 0x5851,
                0x915A: 0x5CA8,
                0x915B: 0x63AA,
                0x915C: 0x66FE,
                0x915D: 0x66FD,
                0x915E: 0x695A,
                0x915F: 0x72D9,
                0x9160: 0x758F,
                0x9161: 0x758E,
                0x9162: 0x790E,
                0x9163: 0x7956,
                0x9164: 0x79DF,
                0x9165: 0x7C97,
                0x9166: 0x7D20,
                0x9167: 0x7D44,
                0x9168: 0x8607,
                0x9169: 0x8A34,
                0x916A: 0x963B,
                0x916B: 0x9061,
                0x916C: 0x9F20,
                0x916D: 0x50E7,
                0x916E: 0x5275,
                0x916F: 0x53CC,
                0x9170: 0x53E2,
                0x9171: 0x5009,
                0x9172: 0x55AA,
                0x9173: 0x58EE,
                0x9174: 0x594F,
                0x9175: 0x723D,
                0x9176: 0x5B8B,
                0x9177: 0x5C64,
                0x9178: 0x531D,
                0x9179: 0x60E3,
                0x917A: 0x60F3,
                0x917B: 0x635C,
                0x917C: 0x6383,
                0x917D: 0x633F,
                0x917E: 0x63BB,
                0x9180: 0x64CD,
                0x9181: 0x65E9,
                0x9182: 0x66F9,
                0x9183: 0x5DE3,
                0x9184: 0x69CD,
                0x9185: 0x69FD,
                0x9186: 0x6F15,
                0x9187: 0x71E5,
                0x9188: 0x4E89,
                0x9189: 0x75E9,
                0x918A: 0x76F8,
                0x918B: 0x7A93,
                0x918C: 0x7CDF,
                0x918D: 0x7DCF,
                0x918E: 0x7D9C,
                0x918F: 0x8061,
                0x9190: 0x8349,
                0x9191: 0x8358,
                0x9192: 0x846C,
                0x9193: 0x84BC,
                0x9194: 0x85FB,
                0x9195: 0x88C5,
                0x9196: 0x8D70,
                0x9197: 0x9001,
                0x9198: 0x906D,
                0x9199: 0x9397,
                0x919A: 0x971C,
                0x919B: 0x9A12,
                0x919C: 0x50CF,
                0x919D: 0x5897,
                0x919E: 0x618E,
                0x919F: 0x81D3,
                0x91A0: 0x8535,
                0x91A1: 0x8D08,
                0x91A2: 0x9020,
                0x91A3: 0x4FC3,
                0x91A4: 0x5074,
                0x91A5: 0x5247,
                0x91A6: 0x5373,
                0x91A7: 0x606F,
                0x91A8: 0x6349,
                0x91A9: 0x675F,
                0x91AA: 0x6E2C,
                0x91AB: 0x8DB3,
                0x91AC: 0x901F,
                0x91AD: 0x4FD7,
                0x91AE: 0x5C5E,
                0x91AF: 0x8CCA,
                0x91B0: 0x65CF,
                0x91B1: 0x7D9A,
                0x91B2: 0x5352,
                0x91B3: 0x8896,
                0x91B4: 0x5176,
                0x91B5: 0x63C3,
                0x91B6: 0x5B58,
                0x91B7: 0x5B6B,
                0x91B8: 0x5C0A,
                0x91B9: 0x640D,
                0x91BA: 0x6751,
                0x91BB: 0x905C,
                0x91BC: 0x4ED6,
                0x91BD: 0x591A,
                0x91BE: 0x592A,
                0x91BF: 0x6C70,
                0x91C0: 0x8A51,
                0x91C1: 0x553E,
                0x91C2: 0x5815,
                0x91C3: 0x59A5,
                0x91C4: 0x60F0,
                0x91C5: 0x6253,
                0x91C6: 0x67C1,
                0x91C7: 0x8235,
                0x91C8: 0x6955,
                0x91C9: 0x9640,
                0x91CA: 0x99C4,
                0x91CB: 0x9A28,
                0x91CC: 0x4F53,
                0x91CD: 0x5806,
                0x91CE: 0x5BFE,
                0x91CF: 0x8010,
                0x91D0: 0x5CB1,
                0x91D1: 0x5E2F,
                0x91D2: 0x5F85,
                0x91D3: 0x6020,
                0x91D4: 0x614B,
                0x91D5: 0x6234,
                0x91D6: 0x66FF,
                0x91D7: 0x6CF0,
                0x91D8: 0x6EDE,
                0x91D9: 0x80CE,
                0x91DA: 0x817F,
                0x91DB: 0x82D4,
                0x91DC: 0x888B,
                0x91DD: 0x8CB8,
                0x91DE: 0x9000,
                0x91DF: 0x902E,
                0x91E0: 0x968A,
                0x91E1: 0x9EDB,
                0x91E2: 0x9BDB,
                0x91E3: 0x4EE3,
                0x91E4: 0x53F0,
                0x91E5: 0x5927,
                0x91E6: 0x7B2C,
                0x91E7: 0x918D,
                0x91E8: 0x984C,
                0x91E9: 0x9DF9,
                0x91EA: 0x6EDD,
                0x91EB: 0x7027,
                0x91EC: 0x5353,
                0x91ED: 0x5544,
                0x91EE: 0x5B85,
                0x91EF: 0x6258,
                0x91F0: 0x629E,
                0x91F1: 0x62D3,
                0x91F2: 0x6CA2,
                0x91F3: 0x6FEF,
                0x91F4: 0x7422,
                0x91F5: 0x8A17,
                0x91F6: 0x9438,
                0x91F7: 0x6FC1,
                0x91F8: 0x8AFE,
                0x91F9: 0x8338,
                0x91FA: 0x51E7,
                0x91FB: 0x86F8,
                0x91FC: 0x53EA,
                0x9240: 0x53E9,
                0x9241: 0x4F46,
                0x9242: 0x9054,
                0x9243: 0x8FB0,
                0x9244: 0x596A,
                0x9245: 0x8131,
                0x9246: 0x5DFD,
                0x9247: 0x7AEA,
                0x9248: 0x8FBF,
                0x9249: 0x68DA,
                0x924A: 0x8C37,
                0x924B: 0x72F8,
                0x924C: 0x9C48,
                0x924D: 0x6A3D,
                0x924E: 0x8AB0,
                0x924F: 0x4E39,
                0x9250: 0x5358,
                0x9251: 0x5606,
                0x9252: 0x5766,
                0x9253: 0x62C5,
                0x9254: 0x63A2,
                0x9255: 0x65E6,
                0x9256: 0x6B4E,
                0x9257: 0x6DE1,
                0x9258: 0x6E5B,
                0x9259: 0x70AD,
                0x925A: 0x77ED,
                0x925B: 0x7AEF,
                0x925C: 0x7BAA,
                0x925D: 0x7DBB,
                0x925E: 0x803D,
                0x925F: 0x80C6,
                0x9260: 0x86CB,
                0x9261: 0x8A95,
                0x9262: 0x935B,
                0x9263: 0x56E3,
                0x9264: 0x58C7,
                0x9265: 0x5F3E,
                0x9266: 0x65AD,
                0x9267: 0x6696,
                0x9268: 0x6A80,
                0x9269: 0x6BB5,
                0x926A: 0x7537,
                0x926B: 0x8AC7,
                0x926C: 0x5024,
                0x926D: 0x77E5,
                0x926E: 0x5730,
                0x926F: 0x5F1B,
                0x9270: 0x6065,
                0x9271: 0x667A,
                0x9272: 0x6C60,
                0x9273: 0x75F4,
                0x9274: 0x7A1A,
                0x9275: 0x7F6E,
                0x9276: 0x81F4,
                0x9277: 0x8718,
                0x9278: 0x9045,
                0x9279: 0x99B3,
                0x927A: 0x7BC9,
                0x927B: 0x755C,
                0x927C: 0x7AF9,
                0x927D: 0x7B51,
                0x927E: 0x84C4,
                0x9280: 0x9010,
                0x9281: 0x79E9,
                0x9282: 0x7A92,
                0x9283: 0x8336,
                0x9284: 0x5AE1,
                0x9285: 0x7740,
                0x9286: 0x4E2D,
                0x9287: 0x4EF2,
                0x9288: 0x5B99,
                0x9289: 0x5FE0,
                0x928A: 0x62BD,
                0x928B: 0x663C,
                0x928C: 0x67F1,
                0x928D: 0x6CE8,
                0x928E: 0x866B,
                0x928F: 0x8877,
                0x9290: 0x8A3B,
                0x9291: 0x914E,
                0x9292: 0x92F3,
                0x9293: 0x99D0,
                0x9294: 0x6A17,
                0x9295: 0x7026,
                0x9296: 0x732A,
                0x9297: 0x82E7,
                0x9298: 0x8457,
                0x9299: 0x8CAF,
                0x929A: 0x4E01,
                0x929B: 0x5146,
                0x929C: 0x51CB,
                0x929D: 0x558B,
                0x929E: 0x5BF5,
                0x929F: 0x5E16,
                0x92A0: 0x5E33,
                0x92A1: 0x5E81,
                0x92A2: 0x5F14,
                0x92A3: 0x5F35,
                0x92A4: 0x5F6B,
                0x92A5: 0x5FB4,
                0x92A6: 0x61F2,
                0x92A7: 0x6311,
                0x92A8: 0x66A2,
                0x92A9: 0x671D,
                0x92AA: 0x6F6E,
                0x92AB: 0x7252,
                0x92AC: 0x753A,
                0x92AD: 0x773A,
                0x92AE: 0x8074,
                0x92AF: 0x8139,
                0x92B0: 0x8178,
                0x92B1: 0x8776,
                0x92B2: 0x8ABF,
                0x92B3: 0x8ADC,
                0x92B4: 0x8D85,
                0x92B5: 0x8DF3,
                0x92B6: 0x929A,
                0x92B7: 0x9577,
                0x92B8: 0x9802,
                0x92B9: 0x9CE5,
                0x92BA: 0x52C5,
                0x92BB: 0x6357,
                0x92BC: 0x76F4,
                0x92BD: 0x6715,
                0x92BE: 0x6C88,
                0x92BF: 0x73CD,
                0x92C0: 0x8CC3,
                0x92C1: 0x93AE,
                0x92C2: 0x9673,
                0x92C3: 0x6D25,
                0x92C4: 0x589C,
                0x92C5: 0x690E,
                0x92C6: 0x69CC,
                0x92C7: 0x8FFD,
                0x92C8: 0x939A,
                0x92C9: 0x75DB,
                0x92CA: 0x901A,
                0x92CB: 0x585A,
                0x92CC: 0x6802,
                0x92CD: 0x63B4,
                0x92CE: 0x69FB,
                0x92CF: 0x4F43,
                0x92D0: 0x6F2C,
                0x92D1: 0x67D8,
                0x92D2: 0x8FBB,
                0x92D3: 0x8526,
                0x92D4: 0x7DB4,
                0x92D5: 0x9354,
                0x92D6: 0x693F,
                0x92D7: 0x6F70,
                0x92D8: 0x576A,
                0x92D9: 0x58F7,
                0x92DA: 0x5B2C,
                0x92DB: 0x7D2C,
                0x92DC: 0x722A,
                0x92DD: 0x540A,
                0x92DE: 0x91E3,
                0x92DF: 0x9DB4,
                0x92E0: 0x4EAD,
                0x92E1: 0x4F4E,
                0x92E2: 0x505C,
                0x92E3: 0x5075,
                0x92E4: 0x5243,
                0x92E5: 0x8C9E,
                0x92E6: 0x5448,
                0x92E7: 0x5824,
                0x92E8: 0x5B9A,
                0x92E9: 0x5E1D,
                0x92EA: 0x5E95,
                0x92EB: 0x5EAD,
                0x92EC: 0x5EF7,
                0x92ED: 0x5F1F,
                0x92EE: 0x608C,
                0x92EF: 0x62B5,
                0x92F0: 0x633A,
                0x92F1: 0x63D0,
                0x92F2: 0x68AF,
                0x92F3: 0x6C40,
                0x92F4: 0x7887,
                0x92F5: 0x798E,
                0x92F6: 0x7A0B,
                0x92F7: 0x7DE0,
                0x92F8: 0x8247,
                0x92F9: 0x8A02,
                0x92FA: 0x8AE6,
                0x92FB: 0x8E44,
                0x92FC: 0x9013,
                0x9340: 0x90B8,
                0x9341: 0x912D,
                0x9342: 0x91D8,
                0x9343: 0x9F0E,
                0x9344: 0x6CE5,
                0x9345: 0x6458,
                0x9346: 0x64E2,
                0x9347: 0x6575,
                0x9348: 0x6EF4,
                0x9349: 0x7684,
                0x934A: 0x7B1B,
                0x934B: 0x9069,
                0x934C: 0x93D1,
                0x934D: 0x6EBA,
                0x934E: 0x54F2,
                0x934F: 0x5FB9,
                0x9350: 0x64A4,
                0x9351: 0x8F4D,
                0x9352: 0x8FED,
                0x9353: 0x9244,
                0x9354: 0x5178,
                0x9355: 0x586B,
                0x9356: 0x5929,
                0x9357: 0x5C55,
                0x9358: 0x5E97,
                0x9359: 0x6DFB,
                0x935A: 0x7E8F,
                0x935B: 0x751C,
                0x935C: 0x8CBC,
                0x935D: 0x8EE2,
                0x935E: 0x985B,
                0x935F: 0x70B9,
                0x9360: 0x4F1D,
                0x9361: 0x6BBF,
                0x9362: 0x6FB1,
                0x9363: 0x7530,
                0x9364: 0x96FB,
                0x9365: 0x514E,
                0x9366: 0x5410,
                0x9367: 0x5835,
                0x9368: 0x5857,
                0x9369: 0x59AC,
                0x936A: 0x5C60,
                0x936B: 0x5F92,
                0x936C: 0x6597,
                0x936D: 0x675C,
                0x936E: 0x6E21,
                0x936F: 0x767B,
                0x9370: 0x83DF,
                0x9371: 0x8CED,
                0x9372: 0x9014,
                0x9373: 0x90FD,
                0x9374: 0x934D,
                0x9375: 0x7825,
                0x9376: 0x783A,
                0x9377: 0x52AA,
                0x9378: 0x5EA6,
                0x9379: 0x571F,
                0x937A: 0x5974,
                0x937B: 0x6012,
                0x937C: 0x5012,
                0x937D: 0x515A,
                0x937E: 0x51AC,
                0x9380: 0x51CD,
                0x9381: 0x5200,
                0x9382: 0x5510,
                0x9383: 0x5854,
                0x9384: 0x5858,
                0x9385: 0x5957,
                0x9386: 0x5B95,
                0x9387: 0x5CF6,
                0x9388: 0x5D8B,
                0x9389: 0x60BC,
                0x938A: 0x6295,
                0x938B: 0x642D,
                0x938C: 0x6771,
                0x938D: 0x6843,
                0x938E: 0x68BC,
                0x938F: 0x68DF,
                0x9390: 0x76D7,
                0x9391: 0x6DD8,
                0x9392: 0x6E6F,
                0x9393: 0x6D9B,
                0x9394: 0x706F,
                0x9395: 0x71C8,
                0x9396: 0x5F53,
                0x9397: 0x75D8,
                0x9398: 0x7977,
                0x9399: 0x7B49,
                0x939A: 0x7B54,
                0x939B: 0x7B52,
                0x939C: 0x7CD6,
                0x939D: 0x7D71,
                0x939E: 0x5230,
                0x939F: 0x8463,
                0x93A0: 0x8569,
                0x93A1: 0x85E4,
                0x93A2: 0x8A0E,
                0x93A3: 0x8B04,
                0x93A4: 0x8C46,
                0x93A5: 0x8E0F,
                0x93A6: 0x9003,
                0x93A7: 0x900F,
                0x93A8: 0x9419,
                0x93A9: 0x9676,
                0x93AA: 0x982D,
                0x93AB: 0x9A30,
                0x93AC: 0x95D8,
                0x93AD: 0x50CD,
                0x93AE: 0x52D5,
                0x93AF: 0x540C,
                0x93B0: 0x5802,
                0x93B1: 0x5C0E,
                0x93B2: 0x61A7,
                0x93B3: 0x649E,
                0x93B4: 0x6D1E,
                0x93B5: 0x77B3,
                0x93B6: 0x7AE5,
                0x93B7: 0x80F4,
                0x93B8: 0x8404,
                0x93B9: 0x9053,
                0x93BA: 0x9285,
                0x93BB: 0x5CE0,
                0x93BC: 0x9D07,
                0x93BD: 0x533F,
                0x93BE: 0x5F97,
                0x93BF: 0x5FB3,
                0x93C0: 0x6D9C,
                0x93C1: 0x7279,
                0x93C2: 0x7763,
                0x93C3: 0x79BF,
                0x93C4: 0x7BE4,
                0x93C5: 0x6BD2,
                0x93C6: 0x72EC,
                0x93C7: 0x8AAD,
                0x93C8: 0x6803,
                0x93C9: 0x6A61,
                0x93CA: 0x51F8,
                0x93CB: 0x7A81,
                0x93CC: 0x6934,
                0x93CD: 0x5C4A,
                0x93CE: 0x9CF6,
                0x93CF: 0x82EB,
                0x93D0: 0x5BC5,
                0x93D1: 0x9149,
                0x93D2: 0x701E,
                0x93D3: 0x5678,
                0x93D4: 0x5C6F,
                0x93D5: 0x60C7,
                0x93D6: 0x6566,
                0x93D7: 0x6C8C,
                0x93D8: 0x8C5A,
                0x93D9: 0x9041,
                0x93DA: 0x9813,
                0x93DB: 0x5451,
                0x93DC: 0x66C7,
                0x93DD: 0x920D,
                0x93DE: 0x5948,
                0x93DF: 0x90A3,
                0x93E0: 0x5185,
                0x93E1: 0x4E4D,
                0x93E2: 0x51EA,
                0x93E3: 0x8599,
                0x93E4: 0x8B0E,
                0x93E5: 0x7058,
                0x93E6: 0x637A,
                0x93E7: 0x934B,
                0x93E8: 0x6962,
                0x93E9: 0x99B4,
                0x93EA: 0x7E04,
                0x93EB: 0x7577,
                0x93EC: 0x5357,
                0x93ED: 0x6960,
                0x93EE: 0x8EDF,
                0x93EF: 0x96E3,
                0x93F0: 0x6C5D,
                0x93F1: 0x4E8C,
                0x93F2: 0x5C3C,
                0x93F3: 0x5F10,
                0x93F4: 0x8FE9,
                0x93F5: 0x5302,
                0x93F6: 0x8CD1,
                0x93F7: 0x8089,
                0x93F8: 0x8679,
                0x93F9: 0x5EFF,
                0x93FA: 0x65E5,
                0x93FB: 0x4E73,
                0x93FC: 0x5165,
                0x9440: 0x5982,
                0x9441: 0x5C3F,
                0x9442: 0x97EE,
                0x9443: 0x4EFB,
                0x9444: 0x598A,
                0x9445: 0x5FCD,
                0x9446: 0x8A8D,
                0x9447: 0x6FE1,
                0x9448: 0x79B0,
                0x9449: 0x7962,
                0x944A: 0x5BE7,
                0x944B: 0x8471,
                0x944C: 0x732B,
                0x944D: 0x71B1,
                0x944E: 0x5E74,
                0x944F: 0x5FF5,
                0x9450: 0x637B,
                0x9451: 0x649A,
                0x9452: 0x71C3,
                0x9453: 0x7C98,
                0x9454: 0x4E43,
                0x9455: 0x5EFC,
                0x9456: 0x4E4B,
                0x9457: 0x57DC,
                0x9458: 0x56A2,
                0x9459: 0x60A9,
                0x945A: 0x6FC3,
                0x945B: 0x7D0D,
                0x945C: 0x80FD,
                0x945D: 0x8133,
                0x945E: 0x81BF,
                0x945F: 0x8FB2,
                0x9460: 0x8997,
                0x9461: 0x86A4,
                0x9462: 0x5DF4,
                0x9463: 0x628A,
                0x9464: 0x64AD,
                0x9465: 0x8987,
                0x9466: 0x6777,
                0x9467: 0x6CE2,
                0x9468: 0x6D3E,
                0x9469: 0x7436,
                0x946A: 0x7834,
                0x946B: 0x5A46,
                0x946C: 0x7F75,
                0x946D: 0x82AD,
                0x946E: 0x99AC,
                0x946F: 0x4FF3,
                0x9470: 0x5EC3,
                0x9471: 0x62DD,
                0x9472: 0x6392,
                0x9473: 0x6557,
                0x9474: 0x676F,
                0x9475: 0x76C3,
                0x9476: 0x724C,
                0x9477: 0x80CC,
                0x9478: 0x80BA,
                0x9479: 0x8F29,
                0x947A: 0x914D,
                0x947B: 0x500D,
                0x947C: 0x57F9,
                0x947D: 0x5A92,
                0x947E: 0x6885,
                0x9480: 0x6973,
                0x9481: 0x7164,
                0x9482: 0x72FD,
                0x9483: 0x8CB7,
                0x9484: 0x58F2,
                0x9485: 0x8CE0,
                0x9486: 0x966A,
                0x9487: 0x9019,
                0x9488: 0x877F,
                0x9489: 0x79E4,
                0x948A: 0x77E7,
                0x948B: 0x8429,
                0x948C: 0x4F2F,
                0x948D: 0x5265,
                0x948E: 0x535A,
                0x948F: 0x62CD,
                0x9490: 0x67CF,
                0x9491: 0x6CCA,
                0x9492: 0x767D,
                0x9493: 0x7B94,
                0x9494: 0x7C95,
                0x9495: 0x8236,
                0x9496: 0x8584,
                0x9497: 0x8FEB,
                0x9498: 0x66DD,
                0x9499: 0x6F20,
                0x949A: 0x7206,
                0x949B: 0x7E1B,
                0x949C: 0x83AB,
                0x949D: 0x99C1,
                0x949E: 0x9EA6,
                0x949F: 0x51FD,
                0x94A0: 0x7BB1,
                0x94A1: 0x7872,
                0x94A2: 0x7BB8,
                0x94A3: 0x8087,
                0x94A4: 0x7B48,
                0x94A5: 0x6AE8,
                0x94A6: 0x5E61,
                0x94A7: 0x808C,
                0x94A8: 0x7551,
                0x94A9: 0x7560,
                0x94AA: 0x516B,
                0x94AB: 0x9262,
                0x94AC: 0x6E8C,
                0x94AD: 0x767A,
                0x94AE: 0x9197,
                0x94AF: 0x9AEA,
                0x94B0: 0x4F10,
                0x94B1: 0x7F70,
                0x94B2: 0x629C,
                0x94B3: 0x7B4F,
                0x94B4: 0x95A5,
                0x94B5: 0x9CE9,
                0x94B6: 0x567A,
                0x94B7: 0x5859,
                0x94B8: 0x86E4,
                0x94B9: 0x96BC,
                0x94BA: 0x4F34,
                0x94BB: 0x5224,
                0x94BC: 0x534A,
                0x94BD: 0x53CD,
                0x94BE: 0x53DB,
                0x94BF: 0x5E06,
                0x94C0: 0x642C,
                0x94C1: 0x6591,
                0x94C2: 0x677F,
                0x94C3: 0x6C3E,
                0x94C4: 0x6C4E,
                0x94C5: 0x7248,
                0x94C6: 0x72AF,
                0x94C7: 0x73ED,
                0x94C8: 0x7554,
                0x94C9: 0x7E41,
                0x94CA: 0x822C,
                0x94CB: 0x85E9,
                0x94CC: 0x8CA9,
                0x94CD: 0x7BC4,
                0x94CE: 0x91C6,
                0x94CF: 0x7169,
                0x94D0: 0x9812,
                0x94D1: 0x98EF,
                0x94D2: 0x633D,
                0x94D3: 0x6669,
                0x94D4: 0x756A,
                0x94D5: 0x76E4,
                0x94D6: 0x78D0,
                0x94D7: 0x8543,
                0x94D8: 0x86EE,
                0x94D9: 0x532A,
                0x94DA: 0x5351,
                0x94DB: 0x5426,
                0x94DC: 0x5983,
                0x94DD: 0x5E87,
                0x94DE: 0x5F7C,
                0x94DF: 0x60B2,
                0x94E0: 0x6249,
                0x94E1: 0x6279,
                0x94E2: 0x62AB,
                0x94E3: 0x6590,
                0x94E4: 0x6BD4,
                0x94E5: 0x6CCC,
                0x94E6: 0x75B2,
                0x94E7: 0x76AE,
                0x94E8: 0x7891,
                0x94E9: 0x79D8,
                0x94EA: 0x7DCB,
                0x94EB: 0x7F77,
                0x94EC: 0x80A5,
                0x94ED: 0x88AB,
                0x94EE: 0x8AB9,
                0x94EF: 0x8CBB,
                0x94F0: 0x907F,
                0x94F1: 0x975E,
                0x94F2: 0x98DB,
                0x94F3: 0x6A0B,
                0x94F4: 0x7C38,
                0x94F5: 0x5099,
                0x94F6: 0x5C3E,
                0x94F7: 0x5FAE,
                0x94F8: 0x6787,
                0x94F9: 0x6BD8,
                0x94FA: 0x7435,
                0x94FB: 0x7709,
                0x94FC: 0x7F8E,
                0x9540: 0x9F3B,
                0x9541: 0x67CA,
                0x9542: 0x7A17,
                0x9543: 0x5339,
                0x9544: 0x758B,
                0x9545: 0x9AED,
                0x9546: 0x5F66,
                0x9547: 0x819D,
                0x9548: 0x83F1,
                0x9549: 0x8098,
                0x954A: 0x5F3C,
                0x954B: 0x5FC5,
                0x954C: 0x7562,
                0x954D: 0x7B46,
                0x954E: 0x903C,
                0x954F: 0x6867,
                0x9550: 0x59EB,
                0x9551: 0x5A9B,
                0x9552: 0x7D10,
                0x9553: 0x767E,
                0x9554: 0x8B2C,
                0x9555: 0x4FF5,
                0x9556: 0x5F6A,
                0x9557: 0x6A19,
                0x9558: 0x6C37,
                0x9559: 0x6F02,
                0x955A: 0x74E2,
                0x955B: 0x7968,
                0x955C: 0x8868,
                0x955D: 0x8A55,
                0x955E: 0x8C79,
                0x955F: 0x5EDF,
                0x9560: 0x63CF,
                0x9561: 0x75C5,
                0x9562: 0x79D2,
                0x9563: 0x82D7,
                0x9564: 0x9328,
                0x9565: 0x92F2,
                0x9566: 0x849C,
                0x9567: 0x86ED,
                0x9568: 0x9C2D,
                0x9569: 0x54C1,
                0x956A: 0x5F6C,
                0x956B: 0x658C,
                0x956C: 0x6D5C,
                0x956D: 0x7015,
                0x956E: 0x8CA7,
                0x956F: 0x8CD3,
                0x9570: 0x983B,
                0x9571: 0x654F,
                0x9572: 0x74F6,
                0x9573: 0x4E0D,
                0x9574: 0x4ED8,
                0x9575: 0x57E0,
                0x9576: 0x592B,
                0x9577: 0x5A66,
                0x9578: 0x5BCC,
                0x9579: 0x51A8,
                0x957A: 0x5E03,
                0x957B: 0x5E9C,
                0x957C: 0x6016,
                0x957D: 0x6276,
                0x957E: 0x6577,
                0x9580: 0x65A7,
                0x9581: 0x666E,
                0x9582: 0x6D6E,
                0x9583: 0x7236,
                0x9584: 0x7B26,
                0x9585: 0x8150,
                0x9586: 0x819A,
                0x9587: 0x8299,
                0x9588: 0x8B5C,
                0x9589: 0x8CA0,
                0x958A: 0x8CE6,
                0x958B: 0x8D74,
                0x958C: 0x961C,
                0x958D: 0x9644,
                0x958E: 0x4FAE,
                0x958F: 0x64AB,
                0x9590: 0x6B66,
                0x9591: 0x821E,
                0x9592: 0x8461,
                0x9593: 0x856A,
                0x9594: 0x90E8,
                0x9595: 0x5C01,
                0x9596: 0x6953,
                0x9597: 0x98A8,
                0x9598: 0x847A,
                0x9599: 0x8557,
                0x959A: 0x4F0F,
                0x959B: 0x526F,
                0x959C: 0x5FA9,
                0x959D: 0x5E45,
                0x959E: 0x670D,
                0x959F: 0x798F,
                0x95A0: 0x8179,
                0x95A1: 0x8907,
                0x95A2: 0x8986,
                0x95A3: 0x6DF5,
                0x95A4: 0x5F17,
                0x95A5: 0x6255,
                0x95A6: 0x6CB8,
                0x95A7: 0x4ECF,
                0x95A8: 0x7269,
                0x95A9: 0x9B92,
                0x95AA: 0x5206,
                0x95AB: 0x543B,
                0x95AC: 0x5674,
                0x95AD: 0x58B3,
                0x95AE: 0x61A4,
                0x95AF: 0x626E,
                0x95B0: 0x711A,
                0x95B1: 0x596E,
                0x95B2: 0x7C89,
                0x95B3: 0x7CDE,
                0x95B4: 0x7D1B,
                0x95B5: 0x96F0,
                0x95B6: 0x6587,
                0x95B7: 0x805E,
                0x95B8: 0x4E19,
                0x95B9: 0x4F75,
                0x95BA: 0x5175,
                0x95BB: 0x5840,
                0x95BC: 0x5E63,
                0x95BD: 0x5E73,
                0x95BE: 0x5F0A,
                0x95BF: 0x67C4,
                0x95C0: 0x4E26,
                0x95C1: 0x853D,
                0x95C2: 0x9589,
                0x95C3: 0x965B,
                0x95C4: 0x7C73,
                0x95C5: 0x9801,
                0x95C6: 0x50FB,
                0x95C7: 0x58C1,
                0x95C8: 0x7656,
                0x95C9: 0x78A7,
                0x95CA: 0x5225,
                0x95CB: 0x77A5,
                0x95CC: 0x8511,
                0x95CD: 0x7B86,
                0x95CE: 0x504F,
                0x95CF: 0x5909,
                0x95D0: 0x7247,
                0x95D1: 0x7BC7,
                0x95D2: 0x7DE8,
                0x95D3: 0x8FBA,
                0x95D4: 0x8FD4,
                0x95D5: 0x904D,
                0x95D6: 0x4FBF,
                0x95D7: 0x52C9,
                0x95D8: 0x5A29,
                0x95D9: 0x5F01,
                0x95DA: 0x97AD,
                0x95DB: 0x4FDD,
                0x95DC: 0x8217,
                0x95DD: 0x92EA,
                0x95DE: 0x5703,
                0x95DF: 0x6355,
                0x95E0: 0x6B69,
                0x95E1: 0x752B,
                0x95E2: 0x88DC,
                0x95E3: 0x8F14,
                0x95E4: 0x7A42,
                0x95E5: 0x52DF,
                0x95E6: 0x5893,
                0x95E7: 0x6155,
                0x95E8: 0x620A,
                0x95E9: 0x66AE,
                0x95EA: 0x6BCD,
                0x95EB: 0x7C3F,
                0x95EC: 0x83E9,
                0x95ED: 0x5023,
                0x95EE: 0x4FF8,
                0x95EF: 0x5305,
                0x95F0: 0x5446,
                0x95F1: 0x5831,
                0x95F2: 0x5949,
                0x95F3: 0x5B9D,
                0x95F4: 0x5CF0,
                0x95F5: 0x5CEF,
                0x95F6: 0x5D29,
                0x95F7: 0x5E96,
                0x95F8: 0x62B1,
                0x95F9: 0x6367,
                0x95FA: 0x653E,
                0x95FB: 0x65B9,
                0x95FC: 0x670B,
                0x9640: 0x6CD5,
                0x9641: 0x6CE1,
                0x9642: 0x70F9,
                0x9643: 0x7832,
                0x9644: 0x7E2B,
                0x9645: 0x80DE,
                0x9646: 0x82B3,
                0x9647: 0x840C,
                0x9648: 0x84EC,
                0x9649: 0x8702,
                0x964A: 0x8912,
                0x964B: 0x8A2A,
                0x964C: 0x8C4A,
                0x964D: 0x90A6,
                0x964E: 0x92D2,
                0x964F: 0x98FD,
                0x9650: 0x9CF3,
                0x9651: 0x9D6C,
                0x9652: 0x4E4F,
                0x9653: 0x4EA1,
                0x9654: 0x508D,
                0x9655: 0x5256,
                0x9656: 0x574A,
                0x9657: 0x59A8,
                0x9658: 0x5E3D,
                0x9659: 0x5FD8,
                0x965A: 0x5FD9,
                0x965B: 0x623F,
                0x965C: 0x66B4,
                0x965D: 0x671B,
                0x965E: 0x67D0,
                0x965F: 0x68D2,
                0x9660: 0x5192,
                0x9661: 0x7D21,
                0x9662: 0x80AA,
                0x9663: 0x81A8,
                0x9664: 0x8B00,
                0x9665: 0x8C8C,
                0x9666: 0x8CBF,
                0x9667: 0x927E,
                0x9668: 0x9632,
                0x9669: 0x5420,
                0x966A: 0x982C,
                0x966B: 0x5317,
                0x966C: 0x50D5,
                0x966D: 0x535C,
                0x966E: 0x58A8,
                0x966F: 0x64B2,
                0x9670: 0x6734,
                0x9671: 0x7267,
                0x9672: 0x7766,
                0x9673: 0x7A46,
                0x9674: 0x91E6,
                0x9675: 0x52C3,
                0x9676: 0x6CA1,
                0x9677: 0x6B86,
                0x9678: 0x5800,
                0x9679: 0x5E4C,
                0x967A: 0x5954,
                0x967B: 0x672C,
                0x967C: 0x7FFB,
                0x967D: 0x51E1,
                0x967E: 0x76C6,
                0x9680: 0x6469,
                0x9681: 0x78E8,
                0x9682: 0x9B54,
                0x9683: 0x9EBB,
                0x9684: 0x57CB,
                0x9685: 0x59B9,
                0x9686: 0x6627,
                0x9687: 0x679A,
                0x9688: 0x6BCE,
                0x9689: 0x54E9,
                0x968A: 0x69D9,
                0x968B: 0x5E55,
                0x968C: 0x819C,
                0x968D: 0x6795,
                0x968E: 0x9BAA,
                0x968F: 0x67FE,
                0x9690: 0x9C52,
                0x9691: 0x685D,
                0x9692: 0x4EA6,
                0x9693: 0x4FE3,
                0x9694: 0x53C8,
                0x9695: 0x62B9,
                0x9696: 0x672B,
                0x9697: 0x6CAB,
                0x9698: 0x8FC4,
                0x9699: 0x4FAD,
                0x969A: 0x7E6D,
                0x969B: 0x9EBF,
                0x969C: 0x4E07,
                0x969D: 0x6162,
                0x969E: 0x6E80,
                0x969F: 0x6F2B,
                0x96A0: 0x8513,
                0x96A1: 0x5473,
                0x96A2: 0x672A,
                0x96A3: 0x9B45,
                0x96A4: 0x5DF3,
                0x96A5: 0x7B95,
                0x96A6: 0x5CAC,
                0x96A7: 0x5BC6,
                0x96A8: 0x871C,
                0x96A9: 0x6E4A,
                0x96AA: 0x84D1,
                0x96AB: 0x7A14,
                0x96AC: 0x8108,
                0x96AD: 0x5999,
                0x96AE: 0x7C8D,
                0x96AF: 0x6C11,
                0x96B0: 0x7720,
                0x96B1: 0x52D9,
                0x96B2: 0x5922,
                0x96B3: 0x7121,
                0x96B4: 0x725F,
                0x96B5: 0x77DB,
                0x96B6: 0x9727,
                0x96B7: 0x9D61,
                0x96B8: 0x690B,
                0x96B9: 0x5A7F,
                0x96BA: 0x5A18,
                0x96BB: 0x51A5,
                0x96BC: 0x540D,
                0x96BD: 0x547D,
                0x96BE: 0x660E,
                0x96BF: 0x76DF,
                0x96C0: 0x8FF7,
                0x96C1: 0x9298,
                0x96C2: 0x9CF4,
                0x96C3: 0x59EA,
                0x96C4: 0x725D,
                0x96C5: 0x6EC5,
                0x96C6: 0x514D,
                0x96C7: 0x68C9,
                0x96C8: 0x7DBF,
                0x96C9: 0x7DEC,
                0x96CA: 0x9762,
                0x96CB: 0x9EBA,
                0x96CC: 0x6478,
                0x96CD: 0x6A21,
                0x96CE: 0x8302,
                0x96CF: 0x5984,
                0x96D0: 0x5B5F,
                0x96D1: 0x6BDB,
                0x96D2: 0x731B,
                0x96D3: 0x76F2,
                0x96D4: 0x7DB2,
                0x96D5: 0x8017,
                0x96D6: 0x8499,
                0x96D7: 0x5132,
                0x96D8: 0x6728,
                0x96D9: 0x9ED9,
                0x96DA: 0x76EE,
                0x96DB: 0x6762,
                0x96DC: 0x52FF,
                0x96DD: 0x9905,
                0x96DE: 0x5C24,
                0x96DF: 0x623B,
                0x96E0: 0x7C7E,
                0x96E1: 0x8CB0,
                0x96E2: 0x554F,
                0x96E3: 0x60B6,
                0x96E4: 0x7D0B,
                0x96E5: 0x9580,
                0x96E6: 0x5301,
                0x96E7: 0x4E5F,
                0x96E8: 0x51B6,
                0x96E9: 0x591C,
                0x96EA: 0x723A,
                0x96EB: 0x8036,
                0x96EC: 0x91CE,
                0x96ED: 0x5F25,
                0x96EE: 0x77E2,
                0x96EF: 0x5384,
                0x96F0: 0x5F79,
                0x96F1: 0x7D04,
                0x96F2: 0x85AC,
                0x96F3: 0x8A33,
                0x96F4: 0x8E8D,
                0x96F5: 0x9756,
                0x96F6: 0x67F3,
                0x96F7: 0x85AE,
                0x96F8: 0x9453,
                0x96F9: 0x6109,
                0x96FA: 0x6108,
                0x96FB: 0x6CB9,
                0x96FC: 0x7652,
                0x9740: 0x8AED,
                0x9741: 0x8F38,
                0x9742: 0x552F,
                0x9743: 0x4F51,
                0x9744: 0x512A,
                0x9745: 0x52C7,
                0x9746: 0x53CB,
                0x9747: 0x5BA5,
                0x9748: 0x5E7D,
                0x9749: 0x60A0,
                0x974A: 0x6182,
                0x974B: 0x63D6,
                0x974C: 0x6709,
                0x974D: 0x67DA,
                0x974E: 0x6E67,
                0x974F: 0x6D8C,
                0x9750: 0x7336,
                0x9751: 0x7337,
                0x9752: 0x7531,
                0x9753: 0x7950,
                0x9754: 0x88D5,
                0x9755: 0x8A98,
                0x9756: 0x904A,
                0x9757: 0x9091,
                0x9758: 0x90F5,
                0x9759: 0x96C4,
                0x975A: 0x878D,
                0x975B: 0x5915,
                0x975C: 0x4E88,
                0x975D: 0x4F59,
                0x975E: 0x4E0E,
                0x975F: 0x8A89,
                0x9760: 0x8F3F,
                0x9761: 0x9810,
                0x9762: 0x50AD,
                0x9763: 0x5E7C,
                0x9764: 0x5996,
                0x9765: 0x5BB9,
                0x9766: 0x5EB8,
                0x9767: 0x63DA,
                0x9768: 0x63FA,
                0x9769: 0x64C1,
                0x976A: 0x66DC,
                0x976B: 0x694A,
                0x976C: 0x69D8,
                0x976D: 0x6D0B,
                0x976E: 0x6EB6,
                0x976F: 0x7194,
                0x9770: 0x7528,
                0x9771: 0x7AAF,
                0x9772: 0x7F8A,
                0x9773: 0x8000,
                0x9774: 0x8449,
                0x9775: 0x84C9,
                0x9776: 0x8981,
                0x9777: 0x8B21,
                0x9778: 0x8E0A,
                0x9779: 0x9065,
                0x977A: 0x967D,
                0x977B: 0x990A,
                0x977C: 0x617E,
                0x977D: 0x6291,
                0x977E: 0x6B32,
                0x9780: 0x6C83,
                0x9781: 0x6D74,
                0x9782: 0x7FCC,
                0x9783: 0x7FFC,
                0x9784: 0x6DC0,
                0x9785: 0x7F85,
                0x9786: 0x87BA,
                0x9787: 0x88F8,
                0x9788: 0x6765,
                0x9789: 0x83B1,
                0x978A: 0x983C,
                0x978B: 0x96F7,
                0x978C: 0x6D1B,
                0x978D: 0x7D61,
                0x978E: 0x843D,
                0x978F: 0x916A,
                0x9790: 0x4E71,
                0x9791: 0x5375,
                0x9792: 0x5D50,
                0x9793: 0x6B04,
                0x9794: 0x6FEB,
                0x9795: 0x85CD,
                0x9796: 0x862D,
                0x9797: 0x89A7,
                0x9798: 0x5229,
                0x9799: 0x540F,
                0x979A: 0x5C65,
                0x979B: 0x674E,
                0x979C: 0x68A8,
                0x979D: 0x7406,
                0x979E: 0x7483,
                0x979F: 0x75E2,
                0x97A0: 0x88CF,
                0x97A1: 0x88E1,
                0x97A2: 0x91CC,
                0x97A3: 0x96E2,
                0x97A4: 0x9678,
                0x97A5: 0x5F8B,
                0x97A6: 0x7387,
                0x97A7: 0x7ACB,
                0x97A8: 0x844E,
                0x97A9: 0x63A0,
                0x97AA: 0x7565,
                0x97AB: 0x5289,
                0x97AC: 0x6D41,
                0x97AD: 0x6E9C,
                0x97AE: 0x7409,
                0x97AF: 0x7559,
                0x97B0: 0x786B,
                0x97B1: 0x7C92,
                0x97B2: 0x9686,
                0x97B3: 0x7ADC,
                0x97B4: 0x9F8D,
                0x97B5: 0x4FB6,
                0x97B6: 0x616E,
                0x97B7: 0x65C5,
                0x97B8: 0x865C,
                0x97B9: 0x4E86,
                0x97BA: 0x4EAE,
                0x97BB: 0x50DA,
                0x97BC: 0x4E21,
                0x97BD: 0x51CC,
                0x97BE: 0x5BEE,
                0x97BF: 0x6599,
                0x97C0: 0x6881,
                0x97C1: 0x6DBC,
                0x97C2: 0x731F,
                0x97C3: 0x7642,
                0x97C4: 0x77AD,
                0x97C5: 0x7A1C,
                0x97C6: 0x7CE7,
                0x97C7: 0x826F,
                0x97C8: 0x8AD2,
                0x97C9: 0x907C,
                0x97CA: 0x91CF,
                0x97CB: 0x9675,
                0x97CC: 0x9818,
                0x97CD: 0x529B,
                0x97CE: 0x7DD1,
                0x97CF: 0x502B,
                0x97D0: 0x5398,
                0x97D1: 0x6797,
                0x97D2: 0x6DCB,
                0x97D3: 0x71D0,
                0x97D4: 0x7433,
                0x97D5: 0x81E8,
                0x97D6: 0x8F2A,
                0x97D7: 0x96A3,
                0x97D8: 0x9C57,
                0x97D9: 0x9E9F,
                0x97DA: 0x7460,
                0x97DB: 0x5841,
                0x97DC: 0x6D99,
                0x97DD: 0x7D2F,
                0x97DE: 0x985E,
                0x97DF: 0x4EE4,
                0x97E0: 0x4F36,
                0x97E1: 0x4F8B,
                0x97E2: 0x51B7,
                0x97E3: 0x52B1,
                0x97E4: 0x5DBA,
                0x97E5: 0x601C,
                0x97E6: 0x73B2,
                0x97E7: 0x793C,
                0x97E8: 0x82D3,
                0x97E9: 0x9234,
                0x97EA: 0x96B7,
                0x97EB: 0x96F6,
                0x97EC: 0x970A,
                0x97ED: 0x9E97,
                0x97EE: 0x9F62,
                0x97EF: 0x66A6,
                0x97F0: 0x6B74,
                0x97F1: 0x5217,
                0x97F2: 0x52A3,
                0x97F3: 0x70C8,
                0x97F4: 0x88C2,
                0x97F5: 0x5EC9,
                0x97F6: 0x604B,
                0x97F7: 0x6190,
                0x97F8: 0x6F23,
                0x97F9: 0x7149,
                0x97FA: 0x7C3E,
                0x97FB: 0x7DF4,
                0x97FC: 0x806F,
                0x9840: 0x84EE,
                0x9841: 0x9023,
                0x9842: 0x932C,
                0x9843: 0x5442,
                0x9844: 0x9B6F,
                0x9845: 0x6AD3,
                0x9846: 0x7089,
                0x9847: 0x8CC2,
                0x9848: 0x8DEF,
                0x9849: 0x9732,
                0x984A: 0x52B4,
                0x984B: 0x5A41,
                0x984C: 0x5ECA,
                0x984D: 0x5F04,
                0x984E: 0x6717,
                0x984F: 0x697C,
                0x9850: 0x6994,
                0x9851: 0x6D6A,
                0x9852: 0x6F0F,
                0x9853: 0x7262,
                0x9854: 0x72FC,
                0x9855: 0x7BED,
                0x9856: 0x8001,
                0x9857: 0x807E,
                0x9858: 0x874B,
                0x9859: 0x90CE,
                0x985A: 0x516D,
                0x985B: 0x9E93,
                0x985C: 0x7984,
                0x985D: 0x808B,
                0x985E: 0x9332,
                0x985F: 0x8AD6,
                0x9860: 0x502D,
                0x9861: 0x548C,
                0x9862: 0x8A71,
                0x9863: 0x6B6A,
                0x9864: 0x8CC4,
                0x9865: 0x8107,
                0x9866: 0x60D1,
                0x9867: 0x67A0,
                0x9868: 0x9DF2,
                0x9869: 0x4E99,
                0x986A: 0x4E98,
                0x986B: 0x9C10,
                0x986C: 0x8A6B,
                0x986D: 0x85C1,
                0x986E: 0x8568,
                0x986F: 0x6900,
                0x9870: 0x6E7E,
                0x9871: 0x7897,
                0x9872: 0x8155,
                0x989F: 0x5F0C,
                0x98A0: 0x4E10,
                0x98A1: 0x4E15,
                0x98A2: 0x4E2A,
                0x98A3: 0x4E31,
                0x98A4: 0x4E36,
                0x98A5: 0x4E3C,
                0x98A6: 0x4E3F,
                0x98A7: 0x4E42,
                0x98A8: 0x4E56,
                0x98A9: 0x4E58,
                0x98AA: 0x4E82,
                0x98AB: 0x4E85,
                0x98AC: 0x8C6B,
                0x98AD: 0x4E8A,
                0x98AE: 0x8212,
                0x98AF: 0x5F0D,
                0x98B0: 0x4E8E,
                0x98B1: 0x4E9E,
                0x98B2: 0x4E9F,
                0x98B3: 0x4EA0,
                0x98B4: 0x4EA2,
                0x98B5: 0x4EB0,
                0x98B6: 0x4EB3,
                0x98B7: 0x4EB6,
                0x98B8: 0x4ECE,
                0x98B9: 0x4ECD,
                0x98BA: 0x4EC4,
                0x98BB: 0x4EC6,
                0x98BC: 0x4EC2,
                0x98BD: 0x4ED7,
                0x98BE: 0x4EDE,
                0x98BF: 0x4EED,
                0x98C0: 0x4EDF,
                0x98C1: 0x4EF7,
                0x98C2: 0x4F09,
                0x98C3: 0x4F5A,
                0x98C4: 0x4F30,
                0x98C5: 0x4F5B,
                0x98C6: 0x4F5D,
                0x98C7: 0x4F57,
                0x98C8: 0x4F47,
                0x98C9: 0x4F76,
                0x98CA: 0x4F88,
                0x98CB: 0x4F8F,
                0x98CC: 0x4F98,
                0x98CD: 0x4F7B,
                0x98CE: 0x4F69,
                0x98CF: 0x4F70,
                0x98D0: 0x4F91,
                0x98D1: 0x4F6F,
                0x98D2: 0x4F86,
                0x98D3: 0x4F96,
                0x98D4: 0x5118,
                0x98D5: 0x4FD4,
                0x98D6: 0x4FDF,
                0x98D7: 0x4FCE,
                0x98D8: 0x4FD8,
                0x98D9: 0x4FDB,
                0x98DA: 0x4FD1,
                0x98DB: 0x4FDA,
                0x98DC: 0x4FD0,
                0x98DD: 0x4FE4,
                0x98DE: 0x4FE5,
                0x98DF: 0x501A,
                0x98E0: 0x5028,
                0x98E1: 0x5014,
                0x98E2: 0x502A,
                0x98E3: 0x5025,
                0x98E4: 0x5005,
                0x98E5: 0x4F1C,
                0x98E6: 0x4FF6,
                0x98E7: 0x5021,
                0x98E8: 0x5029,
                0x98E9: 0x502C,
                0x98EA: 0x4FFE,
                0x98EB: 0x4FEF,
                0x98EC: 0x5011,
                0x98ED: 0x5006,
                0x98EE: 0x5043,
                0x98EF: 0x5047,
                0x98F0: 0x6703,
                0x98F1: 0x5055,
                0x98F2: 0x5050,
                0x98F3: 0x5048,
                0x98F4: 0x505A,
                0x98F5: 0x5056,
                0x98F6: 0x506C,
                0x98F7: 0x5078,
                0x98F8: 0x5080,
                0x98F9: 0x509A,
                0x98FA: 0x5085,
                0x98FB: 0x50B4,
                0x98FC: 0x50B2,
                0x9940: 0x50C9,
                0x9941: 0x50CA,
                0x9942: 0x50B3,
                0x9943: 0x50C2,
                0x9944: 0x50D6,
                0x9945: 0x50DE,
                0x9946: 0x50E5,
                0x9947: 0x50ED,
                0x9948: 0x50E3,
                0x9949: 0x50EE,
                0x994A: 0x50F9,
                0x994B: 0x50F5,
                0x994C: 0x5109,
                0x994D: 0x5101,
                0x994E: 0x5102,
                0x994F: 0x5116,
                0x9950: 0x5115,
                0x9951: 0x5114,
                0x9952: 0x511A,
                0x9953: 0x5121,
                0x9954: 0x513A,
                0x9955: 0x5137,
                0x9956: 0x513C,
                0x9957: 0x513B,
                0x9958: 0x513F,
                0x9959: 0x5140,
                0x995A: 0x5152,
                0x995B: 0x514C,
                0x995C: 0x5154,
                0x995D: 0x5162,
                0x995E: 0x7AF8,
                0x995F: 0x5169,
                0x9960: 0x516A,
                0x9961: 0x516E,
                0x9962: 0x5180,
                0x9963: 0x5182,
                0x9964: 0x56D8,
                0x9965: 0x518C,
                0x9966: 0x5189,
                0x9967: 0x518F,
                0x9968: 0x5191,
                0x9969: 0x5193,
                0x996A: 0x5195,
                0x996B: 0x5196,
                0x996C: 0x51A4,
                0x996D: 0x51A6,
                0x996E: 0x51A2,
                0x996F: 0x51A9,
                0x9970: 0x51AA,
                0x9971: 0x51AB,
                0x9972: 0x51B3,
                0x9973: 0x51B1,
                0x9974: 0x51B2,
                0x9975: 0x51B0,
                0x9976: 0x51B5,
                0x9977: 0x51BD,
                0x9978: 0x51C5,
                0x9979: 0x51C9,
                0x997A: 0x51DB,
                0x997B: 0x51E0,
                0x997C: 0x8655,
                0x997D: 0x51E9,
                0x997E: 0x51ED,
                0x9980: 0x51F0,
                0x9981: 0x51F5,
                0x9982: 0x51FE,
                0x9983: 0x5204,
                0x9984: 0x520B,
                0x9985: 0x5214,
                0x9986: 0x520E,
                0x9987: 0x5227,
                0x9988: 0x522A,
                0x9989: 0x522E,
                0x998A: 0x5233,
                0x998B: 0x5239,
                0x998C: 0x524F,
                0x998D: 0x5244,
                0x998E: 0x524B,
                0x998F: 0x524C,
                0x9990: 0x525E,
                0x9991: 0x5254,
                0x9992: 0x526A,
                0x9993: 0x5274,
                0x9994: 0x5269,
                0x9995: 0x5273,
                0x9996: 0x527F,
                0x9997: 0x527D,
                0x9998: 0x528D,
                0x9999: 0x5294,
                0x999A: 0x5292,
                0x999B: 0x5271,
                0x999C: 0x5288,
                0x999D: 0x5291,
                0x999E: 0x8FA8,
                0x999F: 0x8FA7,
                0x99A0: 0x52AC,
                0x99A1: 0x52AD,
                0x99A2: 0x52BC,
                0x99A3: 0x52B5,
                0x99A4: 0x52C1,
                0x99A5: 0x52CD,
                0x99A6: 0x52D7,
                0x99A7: 0x52DE,
                0x99A8: 0x52E3,
                0x99A9: 0x52E6,
                0x99AA: 0x98ED,
                0x99AB: 0x52E0,
                0x99AC: 0x52F3,
                0x99AD: 0x52F5,
                0x99AE: 0x52F8,
                0x99AF: 0x52F9,
                0x99B0: 0x5306,
                0x99B1: 0x5308,
                0x99B2: 0x7538,
                0x99B3: 0x530D,
                0x99B4: 0x5310,
                0x99B5: 0x530F,
                0x99B6: 0x5315,
                0x99B7: 0x531A,
                0x99B8: 0x5323,
                0x99B9: 0x532F,
                0x99BA: 0x5331,
                0x99BB: 0x5333,
                0x99BC: 0x5338,
                0x99BD: 0x5340,
                0x99BE: 0x5346,
                0x99BF: 0x5345,
                0x99C0: 0x4E17,
                0x99C1: 0x5349,
                0x99C2: 0x534D,
                0x99C3: 0x51D6,
                0x99C4: 0x535E,
                0x99C5: 0x5369,
                0x99C6: 0x536E,
                0x99C7: 0x5918,
                0x99C8: 0x537B,
                0x99C9: 0x5377,
                0x99CA: 0x5382,
                0x99CB: 0x5396,
                0x99CC: 0x53A0,
                0x99CD: 0x53A6,
                0x99CE: 0x53A5,
                0x99CF: 0x53AE,
                0x99D0: 0x53B0,
                0x99D1: 0x53B6,
                0x99D2: 0x53C3,
                0x99D3: 0x7C12,
                0x99D4: 0x96D9,
                0x99D5: 0x53DF,
                0x99D6: 0x66FC,
                0x99D7: 0x71EE,
                0x99D8: 0x53EE,
                0x99D9: 0x53E8,
                0x99DA: 0x53ED,
                0x99DB: 0x53FA,
                0x99DC: 0x5401,
                0x99DD: 0x543D,
                0x99DE: 0x5440,
                0x99DF: 0x542C,
                0x99E0: 0x542D,
                0x99E1: 0x543C,
                0x99E2: 0x542E,
                0x99E3: 0x5436,
                0x99E4: 0x5429,
                0x99E5: 0x541D,
                0x99E6: 0x544E,
                0x99E7: 0x548F,
                0x99E8: 0x5475,
                0x99E9: 0x548E,
                0x99EA: 0x545F,
                0x99EB: 0x5471,
                0x99EC: 0x5477,
                0x99ED: 0x5470,
                0x99EE: 0x5492,
                0x99EF: 0x547B,
                0x99F0: 0x5480,
                0x99F1: 0x5476,
                0x99F2: 0x5484,
                0x99F3: 0x5490,
                0x99F4: 0x5486,
                0x99F5: 0x54C7,
                0x99F6: 0x54A2,
                0x99F7: 0x54B8,
                0x99F8: 0x54A5,
                0x99F9: 0x54AC,
                0x99FA: 0x54C4,
                0x99FB: 0x54C8,
                0x99FC: 0x54A8,
                0x9A40: 0x54AB,
                0x9A41: 0x54C2,
                0x9A42: 0x54A4,
                0x9A43: 0x54BE,
                0x9A44: 0x54BC,
                0x9A45: 0x54D8,
                0x9A46: 0x54E5,
                0x9A47: 0x54E6,
                0x9A48: 0x550F,
                0x9A49: 0x5514,
                0x9A4A: 0x54FD,
                0x9A4B: 0x54EE,
                0x9A4C: 0x54ED,
                0x9A4D: 0x54FA,
                0x9A4E: 0x54E2,
                0x9A4F: 0x5539,
                0x9A50: 0x5540,
                0x9A51: 0x5563,
                0x9A52: 0x554C,
                0x9A53: 0x552E,
                0x9A54: 0x555C,
                0x9A55: 0x5545,
                0x9A56: 0x5556,
                0x9A57: 0x5557,
                0x9A58: 0x5538,
                0x9A59: 0x5533,
                0x9A5A: 0x555D,
                0x9A5B: 0x5599,
                0x9A5C: 0x5580,
                0x9A5D: 0x54AF,
                0x9A5E: 0x558A,
                0x9A5F: 0x559F,
                0x9A60: 0x557B,
                0x9A61: 0x557E,
                0x9A62: 0x5598,
                0x9A63: 0x559E,
                0x9A64: 0x55AE,
                0x9A65: 0x557C,
                0x9A66: 0x5583,
                0x9A67: 0x55A9,
                0x9A68: 0x5587,
                0x9A69: 0x55A8,
                0x9A6A: 0x55DA,
                0x9A6B: 0x55C5,
                0x9A6C: 0x55DF,
                0x9A6D: 0x55C4,
                0x9A6E: 0x55DC,
                0x9A6F: 0x55E4,
                0x9A70: 0x55D4,
                0x9A71: 0x5614,
                0x9A72: 0x55F7,
                0x9A73: 0x5616,
                0x9A74: 0x55FE,
                0x9A75: 0x55FD,
                0x9A76: 0x561B,
                0x9A77: 0x55F9,
                0x9A78: 0x564E,
                0x9A79: 0x5650,
                0x9A7A: 0x71DF,
                0x9A7B: 0x5634,
                0x9A7C: 0x5636,
                0x9A7D: 0x5632,
                0x9A7E: 0x5638,
                0x9A80: 0x566B,
                0x9A81: 0x5664,
                0x9A82: 0x562F,
                0x9A83: 0x566C,
                0x9A84: 0x566A,
                0x9A85: 0x5686,
                0x9A86: 0x5680,
                0x9A87: 0x568A,
                0x9A88: 0x56A0,
                0x9A89: 0x5694,
                0x9A8A: 0x568F,
                0x9A8B: 0x56A5,
                0x9A8C: 0x56AE,
                0x9A8D: 0x56B6,
                0x9A8E: 0x56B4,
                0x9A8F: 0x56C2,
                0x9A90: 0x56BC,
                0x9A91: 0x56C1,
                0x9A92: 0x56C3,
                0x9A93: 0x56C0,
                0x9A94: 0x56C8,
                0x9A95: 0x56CE,
                0x9A96: 0x56D1,
                0x9A97: 0x56D3,
                0x9A98: 0x56D7,
                0x9A99: 0x56EE,
                0x9A9A: 0x56F9,
                0x9A9B: 0x5700,
                0x9A9C: 0x56FF,
                0x9A9D: 0x5704,
                0x9A9E: 0x5709,
                0x9A9F: 0x5708,
                0x9AA0: 0x570B,
                0x9AA1: 0x570D,
                0x9AA2: 0x5713,
                0x9AA3: 0x5718,
                0x9AA4: 0x5716,
                0x9AA5: 0x55C7,
                0x9AA6: 0x571C,
                0x9AA7: 0x5726,
                0x9AA8: 0x5737,
                0x9AA9: 0x5738,
                0x9AAA: 0x574E,
                0x9AAB: 0x573B,
                0x9AAC: 0x5740,
                0x9AAD: 0x574F,
                0x9AAE: 0x5769,
                0x9AAF: 0x57C0,
                0x9AB0: 0x5788,
                0x9AB1: 0x5761,
                0x9AB2: 0x577F,
                0x9AB3: 0x5789,
                0x9AB4: 0x5793,
                0x9AB5: 0x57A0,
                0x9AB6: 0x57B3,
                0x9AB7: 0x57A4,
                0x9AB8: 0x57AA,
                0x9AB9: 0x57B0,
                0x9ABA: 0x57C3,
                0x9ABB: 0x57C6,
                0x9ABC: 0x57D4,
                0x9ABD: 0x57D2,
                0x9ABE: 0x57D3,
                0x9ABF: 0x580A,
                0x9AC0: 0x57D6,
                0x9AC1: 0x57E3,
                0x9AC2: 0x580B,
                0x9AC3: 0x5819,
                0x9AC4: 0x581D,
                0x9AC5: 0x5872,
                0x9AC6: 0x5821,
                0x9AC7: 0x5862,
                0x9AC8: 0x584B,
                0x9AC9: 0x5870,
                0x9ACA: 0x6BC0,
                0x9ACB: 0x5852,
                0x9ACC: 0x583D,
                0x9ACD: 0x5879,
                0x9ACE: 0x5885,
                0x9ACF: 0x58B9,
                0x9AD0: 0x589F,
                0x9AD1: 0x58AB,
                0x9AD2: 0x58BA,
                0x9AD3: 0x58DE,
                0x9AD4: 0x58BB,
                0x9AD5: 0x58B8,
                0x9AD6: 0x58AE,
                0x9AD7: 0x58C5,
                0x9AD8: 0x58D3,
                0x9AD9: 0x58D1,
                0x9ADA: 0x58D7,
                0x9ADB: 0x58D9,
                0x9ADC: 0x58D8,
                0x9ADD: 0x58E5,
                0x9ADE: 0x58DC,
                0x9ADF: 0x58E4,
                0x9AE0: 0x58DF,
                0x9AE1: 0x58EF,
                0x9AE2: 0x58FA,
                0x9AE3: 0x58F9,
                0x9AE4: 0x58FB,
                0x9AE5: 0x58FC,
                0x9AE6: 0x58FD,
                0x9AE7: 0x5902,
                0x9AE8: 0x590A,
                0x9AE9: 0x5910,
                0x9AEA: 0x591B,
                0x9AEB: 0x68A6,
                0x9AEC: 0x5925,
                0x9AED: 0x592C,
                0x9AEE: 0x592D,
                0x9AEF: 0x5932,
                0x9AF0: 0x5938,
                0x9AF1: 0x593E,
                0x9AF2: 0x7AD2,
                0x9AF3: 0x5955,
                0x9AF4: 0x5950,
                0x9AF5: 0x594E,
                0x9AF6: 0x595A,
                0x9AF7: 0x5958,
                0x9AF8: 0x5962,
                0x9AF9: 0x5960,
                0x9AFA: 0x5967,
                0x9AFB: 0x596C,
                0x9AFC: 0x5969,
                0x9B40: 0x5978,
                0x9B41: 0x5981,
                0x9B42: 0x599D,
                0x9B43: 0x4F5E,
                0x9B44: 0x4FAB,
                0x9B45: 0x59A3,
                0x9B46: 0x59B2,
                0x9B47: 0x59C6,
                0x9B48: 0x59E8,
                0x9B49: 0x59DC,
                0x9B4A: 0x598D,
                0x9B4B: 0x59D9,
                0x9B4C: 0x59DA,
                0x9B4D: 0x5A25,
                0x9B4E: 0x5A1F,
                0x9B4F: 0x5A11,
                0x9B50: 0x5A1C,
                0x9B51: 0x5A09,
                0x9B52: 0x5A1A,
                0x9B53: 0x5A40,
                0x9B54: 0x5A6C,
                0x9B55: 0x5A49,
                0x9B56: 0x5A35,
                0x9B57: 0x5A36,
                0x9B58: 0x5A62,
                0x9B59: 0x5A6A,
                0x9B5A: 0x5A9A,
                0x9B5B: 0x5ABC,
                0x9B5C: 0x5ABE,
                0x9B5D: 0x5ACB,
                0x9B5E: 0x5AC2,
                0x9B5F: 0x5ABD,
                0x9B60: 0x5AE3,
                0x9B61: 0x5AD7,
                0x9B62: 0x5AE6,
                0x9B63: 0x5AE9,
                0x9B64: 0x5AD6,
                0x9B65: 0x5AFA,
                0x9B66: 0x5AFB,
                0x9B67: 0x5B0C,
                0x9B68: 0x5B0B,
                0x9B69: 0x5B16,
                0x9B6A: 0x5B32,
                0x9B6B: 0x5AD0,
                0x9B6C: 0x5B2A,
                0x9B6D: 0x5B36,
                0x9B6E: 0x5B3E,
                0x9B6F: 0x5B43,
                0x9B70: 0x5B45,
                0x9B71: 0x5B40,
                0x9B72: 0x5B51,
                0x9B73: 0x5B55,
                0x9B74: 0x5B5A,
                0x9B75: 0x5B5B,
                0x9B76: 0x5B65,
                0x9B77: 0x5B69,
                0x9B78: 0x5B70,
                0x9B79: 0x5B73,
                0x9B7A: 0x5B75,
                0x9B7B: 0x5B78,
                0x9B7C: 0x6588,
                0x9B7D: 0x5B7A,
                0x9B7E: 0x5B80,
                0x9B80: 0x5B83,
                0x9B81: 0x5BA6,
                0x9B82: 0x5BB8,
                0x9B83: 0x5BC3,
                0x9B84: 0x5BC7,
                0x9B85: 0x5BC9,
                0x9B86: 0x5BD4,
                0x9B87: 0x5BD0,
                0x9B88: 0x5BE4,
                0x9B89: 0x5BE6,
                0x9B8A: 0x5BE2,
                0x9B8B: 0x5BDE,
                0x9B8C: 0x5BE5,
                0x9B8D: 0x5BEB,
                0x9B8E: 0x5BF0,
                0x9B8F: 0x5BF6,
                0x9B90: 0x5BF3,
                0x9B91: 0x5C05,
                0x9B92: 0x5C07,
                0x9B93: 0x5C08,
                0x9B94: 0x5C0D,
                0x9B95: 0x5C13,
                0x9B96: 0x5C20,
                0x9B97: 0x5C22,
                0x9B98: 0x5C28,
                0x9B99: 0x5C38,
                0x9B9A: 0x5C39,
                0x9B9B: 0x5C41,
                0x9B9C: 0x5C46,
                0x9B9D: 0x5C4E,
                0x9B9E: 0x5C53,
                0x9B9F: 0x5C50,
                0x9BA0: 0x5C4F,
                0x9BA1: 0x5B71,
                0x9BA2: 0x5C6C,
                0x9BA3: 0x5C6E,
                0x9BA4: 0x4E62,
                0x9BA5: 0x5C76,
                0x9BA6: 0x5C79,
                0x9BA7: 0x5C8C,
                0x9BA8: 0x5C91,
                0x9BA9: 0x5C94,
                0x9BAA: 0x599B,
                0x9BAB: 0x5CAB,
                0x9BAC: 0x5CBB,
                0x9BAD: 0x5CB6,
                0x9BAE: 0x5CBC,
                0x9BAF: 0x5CB7,
                0x9BB0: 0x5CC5,
                0x9BB1: 0x5CBE,
                0x9BB2: 0x5CC7,
                0x9BB3: 0x5CD9,
                0x9BB4: 0x5CE9,
                0x9BB5: 0x5CFD,
                0x9BB6: 0x5CFA,
                0x9BB7: 0x5CED,
                0x9BB8: 0x5D8C,
                0x9BB9: 0x5CEA,
                0x9BBA: 0x5D0B,
                0x9BBB: 0x5D15,
                0x9BBC: 0x5D17,
                0x9BBD: 0x5D5C,
                0x9BBE: 0x5D1F,
                0x9BBF: 0x5D1B,
                0x9BC0: 0x5D11,
                0x9BC1: 0x5D14,
                0x9BC2: 0x5D22,
                0x9BC3: 0x5D1A,
                0x9BC4: 0x5D19,
                0x9BC5: 0x5D18,
                0x9BC6: 0x5D4C,
                0x9BC7: 0x5D52,
                0x9BC8: 0x5D4E,
                0x9BC9: 0x5D4B,
                0x9BCA: 0x5D6C,
                0x9BCB: 0x5D73,
                0x9BCC: 0x5D76,
                0x9BCD: 0x5D87,
                0x9BCE: 0x5D84,
                0x9BCF: 0x5D82,
                0x9BD0: 0x5DA2,
                0x9BD1: 0x5D9D,
                0x9BD2: 0x5DAC,
                0x9BD3: 0x5DAE,
                0x9BD4: 0x5DBD,
                0x9BD5: 0x5D90,
                0x9BD6: 0x5DB7,
                0x9BD7: 0x5DBC,
                0x9BD8: 0x5DC9,
                0x9BD9: 0x5DCD,
                0x9BDA: 0x5DD3,
                0x9BDB: 0x5DD2,
                0x9BDC: 0x5DD6,
                0x9BDD: 0x5DDB,
                0x9BDE: 0x5DEB,
                0x9BDF: 0x5DF2,
                0x9BE0: 0x5DF5,
                0x9BE1: 0x5E0B,
                0x9BE2: 0x5E1A,
                0x9BE3: 0x5E19,
                0x9BE4: 0x5E11,
                0x9BE5: 0x5E1B,
                0x9BE6: 0x5E36,
                0x9BE7: 0x5E37,
                0x9BE8: 0x5E44,
                0x9BE9: 0x5E43,
                0x9BEA: 0x5E40,
                0x9BEB: 0x5E4E,
                0x9BEC: 0x5E57,
                0x9BED: 0x5E54,
                0x9BEE: 0x5E5F,
                0x9BEF: 0x5E62,
                0x9BF0: 0x5E64,
                0x9BF1: 0x5E47,
                0x9BF2: 0x5E75,
                0x9BF3: 0x5E76,
                0x9BF4: 0x5E7A,
                0x9BF5: 0x9EBC,
                0x9BF6: 0x5E7F,
                0x9BF7: 0x5EA0,
                0x9BF8: 0x5EC1,
                0x9BF9: 0x5EC2,
                0x9BFA: 0x5EC8,
                0x9BFB: 0x5ED0,
                0x9BFC: 0x5ECF,
                0x9C40: 0x5ED6,
                0x9C41: 0x5EE3,
                0x9C42: 0x5EDD,
                0x9C43: 0x5EDA,
                0x9C44: 0x5EDB,
                0x9C45: 0x5EE2,
                0x9C46: 0x5EE1,
                0x9C47: 0x5EE8,
                0x9C48: 0x5EE9,
                0x9C49: 0x5EEC,
                0x9C4A: 0x5EF1,
                0x9C4B: 0x5EF3,
                0x9C4C: 0x5EF0,
                0x9C4D: 0x5EF4,
                0x9C4E: 0x5EF8,
                0x9C4F: 0x5EFE,
                0x9C50: 0x5F03,
                0x9C51: 0x5F09,
                0x9C52: 0x5F5D,
                0x9C53: 0x5F5C,
                0x9C54: 0x5F0B,
                0x9C55: 0x5F11,
                0x9C56: 0x5F16,
                0x9C57: 0x5F29,
                0x9C58: 0x5F2D,
                0x9C59: 0x5F38,
                0x9C5A: 0x5F41,
                0x9C5B: 0x5F48,
                0x9C5C: 0x5F4C,
                0x9C5D: 0x5F4E,
                0x9C5E: 0x5F2F,
                0x9C5F: 0x5F51,
                0x9C60: 0x5F56,
                0x9C61: 0x5F57,
                0x9C62: 0x5F59,
                0x9C63: 0x5F61,
                0x9C64: 0x5F6D,
                0x9C65: 0x5F73,
                0x9C66: 0x5F77,
                0x9C67: 0x5F83,
                0x9C68: 0x5F82,
                0x9C69: 0x5F7F,
                0x9C6A: 0x5F8A,
                0x9C6B: 0x5F88,
                0x9C6C: 0x5F91,
                0x9C6D: 0x5F87,
                0x9C6E: 0x5F9E,
                0x9C6F: 0x5F99,
                0x9C70: 0x5F98,
                0x9C71: 0x5FA0,
                0x9C72: 0x5FA8,
                0x9C73: 0x5FAD,
                0x9C74: 0x5FBC,
                0x9C75: 0x5FD6,
                0x9C76: 0x5FFB,
                0x9C77: 0x5FE4,
                0x9C78: 0x5FF8,
                0x9C79: 0x5FF1,
                0x9C7A: 0x5FDD,
                0x9C7B: 0x60B3,
                0x9C7C: 0x5FFF,
                0x9C7D: 0x6021,
                0x9C7E: 0x6060,
                0x9C80: 0x6019,
                0x9C81: 0x6010,
                0x9C82: 0x6029,
                0x9C83: 0x600E,
                0x9C84: 0x6031,
                0x9C85: 0x601B,
                0x9C86: 0x6015,
                0x9C87: 0x602B,
                0x9C88: 0x6026,
                0x9C89: 0x600F,
                0x9C8A: 0x603A,
                0x9C8B: 0x605A,
                0x9C8C: 0x6041,
                0x9C8D: 0x606A,
                0x9C8E: 0x6077,
                0x9C8F: 0x605F,
                0x9C90: 0x604A,
                0x9C91: 0x6046,
                0x9C92: 0x604D,
                0x9C93: 0x6063,
                0x9C94: 0x6043,
                0x9C95: 0x6064,
                0x9C96: 0x6042,
                0x9C97: 0x606C,
                0x9C98: 0x606B,
                0x9C99: 0x6059,
                0x9C9A: 0x6081,
                0x9C9B: 0x608D,
                0x9C9C: 0x60E7,
                0x9C9D: 0x6083,
                0x9C9E: 0x609A,
                0x9C9F: 0x6084,
                0x9CA0: 0x609B,
                0x9CA1: 0x6096,
                0x9CA2: 0x6097,
                0x9CA3: 0x6092,
                0x9CA4: 0x60A7,
                0x9CA5: 0x608B,
                0x9CA6: 0x60E1,
                0x9CA7: 0x60B8,
                0x9CA8: 0x60E0,
                0x9CA9: 0x60D3,
                0x9CAA: 0x60B4,
                0x9CAB: 0x5FF0,
                0x9CAC: 0x60BD,
                0x9CAD: 0x60C6,
                0x9CAE: 0x60B5,
                0x9CAF: 0x60D8,
                0x9CB0: 0x614D,
                0x9CB1: 0x6115,
                0x9CB2: 0x6106,
                0x9CB3: 0x60F6,
                0x9CB4: 0x60F7,
                0x9CB5: 0x6100,
                0x9CB6: 0x60F4,
                0x9CB7: 0x60FA,
                0x9CB8: 0x6103,
                0x9CB9: 0x6121,
                0x9CBA: 0x60FB,
                0x9CBB: 0x60F1,
                0x9CBC: 0x610D,
                0x9CBD: 0x610E,
                0x9CBE: 0x6147,
                0x9CBF: 0x613E,
                0x9CC0: 0x6128,
                0x9CC1: 0x6127,
                0x9CC2: 0x614A,
                0x9CC3: 0x613F,
                0x9CC4: 0x613C,
                0x9CC5: 0x612C,
                0x9CC6: 0x6134,
                0x9CC7: 0x613D,
                0x9CC8: 0x6142,
                0x9CC9: 0x6144,
                0x9CCA: 0x6173,
                0x9CCB: 0x6177,
                0x9CCC: 0x6158,
                0x9CCD: 0x6159,
                0x9CCE: 0x615A,
                0x9CCF: 0x616B,
                0x9CD0: 0x6174,
                0x9CD1: 0x616F,
                0x9CD2: 0x6165,
                0x9CD3: 0x6171,
                0x9CD4: 0x615F,
                0x9CD5: 0x615D,
                0x9CD6: 0x6153,
                0x9CD7: 0x6175,
                0x9CD8: 0x6199,
                0x9CD9: 0x6196,
                0x9CDA: 0x6187,
                0x9CDB: 0x61AC,
                0x9CDC: 0x6194,
                0x9CDD: 0x619A,
                0x9CDE: 0x618A,
                0x9CDF: 0x6191,
                0x9CE0: 0x61AB,
                0x9CE1: 0x61AE,
                0x9CE2: 0x61CC,
                0x9CE3: 0x61CA,
                0x9CE4: 0x61C9,
                0x9CE5: 0x61F7,
                0x9CE6: 0x61C8,
                0x9CE7: 0x61C3,
                0x9CE8: 0x61C6,
                0x9CE9: 0x61BA,
                0x9CEA: 0x61CB,
                0x9CEB: 0x7F79,
                0x9CEC: 0x61CD,
                0x9CED: 0x61E6,
                0x9CEE: 0x61E3,
                0x9CEF: 0x61F6,
                0x9CF0: 0x61FA,
                0x9CF1: 0x61F4,
                0x9CF2: 0x61FF,
                0x9CF3: 0x61FD,
                0x9CF4: 0x61FC,
                0x9CF5: 0x61FE,
                0x9CF6: 0x6200,
                0x9CF7: 0x6208,
                0x9CF8: 0x6209,
                0x9CF9: 0x620D,
                0x9CFA: 0x620C,
                0x9CFB: 0x6214,
                0x9CFC: 0x621B,
                0x9D40: 0x621E,
                0x9D41: 0x6221,
                0x9D42: 0x622A,
                0x9D43: 0x622E,
                0x9D44: 0x6230,
                0x9D45: 0x6232,
                0x9D46: 0x6233,
                0x9D47: 0x6241,
                0x9D48: 0x624E,
                0x9D49: 0x625E,
                0x9D4A: 0x6263,
                0x9D4B: 0x625B,
                0x9D4C: 0x6260,
                0x9D4D: 0x6268,
                0x9D4E: 0x627C,
                0x9D4F: 0x6282,
                0x9D50: 0x6289,
                0x9D51: 0x627E,
                0x9D52: 0x6292,
                0x9D53: 0x6293,
                0x9D54: 0x6296,
                0x9D55: 0x62D4,
                0x9D56: 0x6283,
                0x9D57: 0x6294,
                0x9D58: 0x62D7,
                0x9D59: 0x62D1,
                0x9D5A: 0x62BB,
                0x9D5B: 0x62CF,
                0x9D5C: 0x62FF,
                0x9D5D: 0x62C6,
                0x9D5E: 0x64D4,
                0x9D5F: 0x62C8,
                0x9D60: 0x62DC,
                0x9D61: 0x62CC,
                0x9D62: 0x62CA,
                0x9D63: 0x62C2,
                0x9D64: 0x62C7,
                0x9D65: 0x629B,
                0x9D66: 0x62C9,
                0x9D67: 0x630C,
                0x9D68: 0x62EE,
                0x9D69: 0x62F1,
                0x9D6A: 0x6327,
                0x9D6B: 0x6302,
                0x9D6C: 0x6308,
                0x9D6D: 0x62EF,
                0x9D6E: 0x62F5,
                0x9D6F: 0x6350,
                0x9D70: 0x633E,
                0x9D71: 0x634D,
                0x9D72: 0x641C,
                0x9D73: 0x634F,
                0x9D74: 0x6396,
                0x9D75: 0x638E,
                0x9D76: 0x6380,
                0x9D77: 0x63AB,
                0x9D78: 0x6376,
                0x9D79: 0x63A3,
                0x9D7A: 0x638F,
                0x9D7B: 0x6389,
                0x9D7C: 0x639F,
                0x9D7D: 0x63B5,
                0x9D7E: 0x636B,
                0x9D80: 0x6369,
                0x9D81: 0x63BE,
                0x9D82: 0x63E9,
                0x9D83: 0x63C0,
                0x9D84: 0x63C6,
                0x9D85: 0x63E3,
                0x9D86: 0x63C9,
                0x9D87: 0x63D2,
                0x9D88: 0x63F6,
                0x9D89: 0x63C4,
                0x9D8A: 0x6416,
                0x9D8B: 0x6434,
                0x9D8C: 0x6406,
                0x9D8D: 0x6413,
                0x9D8E: 0x6426,
                0x9D8F: 0x6436,
                0x9D90: 0x651D,
                0x9D91: 0x6417,
                0x9D92: 0x6428,
                0x9D93: 0x640F,
                0x9D94: 0x6467,
                0x9D95: 0x646F,
                0x9D96: 0x6476,
                0x9D97: 0x644E,
                0x9D98: 0x652A,
                0x9D99: 0x6495,
                0x9D9A: 0x6493,
                0x9D9B: 0x64A5,
                0x9D9C: 0x64A9,
                0x9D9D: 0x6488,
                0x9D9E: 0x64BC,
                0x9D9F: 0x64DA,
                0x9DA0: 0x64D2,
                0x9DA1: 0x64C5,
                0x9DA2: 0x64C7,
                0x9DA3: 0x64BB,
                0x9DA4: 0x64D8,
                0x9DA5: 0x64C2,
                0x9DA6: 0x64F1,
                0x9DA7: 0x64E7,
                0x9DA8: 0x8209,
                0x9DA9: 0x64E0,
                0x9DAA: 0x64E1,
                0x9DAB: 0x62AC,
                0x9DAC: 0x64E3,
                0x9DAD: 0x64EF,
                0x9DAE: 0x652C,
                0x9DAF: 0x64F6,
                0x9DB0: 0x64F4,
                0x9DB1: 0x64F2,
                0x9DB2: 0x64FA,
                0x9DB3: 0x6500,
                0x9DB4: 0x64FD,
                0x9DB5: 0x6518,
                0x9DB6: 0x651C,
                0x9DB7: 0x6505,
                0x9DB8: 0x6524,
                0x9DB9: 0x6523,
                0x9DBA: 0x652B,
                0x9DBB: 0x6534,
                0x9DBC: 0x6535,
                0x9DBD: 0x6537,
                0x9DBE: 0x6536,
                0x9DBF: 0x6538,
                0x9DC0: 0x754B,
                0x9DC1: 0x6548,
                0x9DC2: 0x6556,
                0x9DC3: 0x6555,
                0x9DC4: 0x654D,
                0x9DC5: 0x6558,
                0x9DC6: 0x655E,
                0x9DC7: 0x655D,
                0x9DC8: 0x6572,
                0x9DC9: 0x6578,
                0x9DCA: 0x6582,
                0x9DCB: 0x6583,
                0x9DCC: 0x8B8A,
                0x9DCD: 0x659B,
                0x9DCE: 0x659F,
                0x9DCF: 0x65AB,
                0x9DD0: 0x65B7,
                0x9DD1: 0x65C3,
                0x9DD2: 0x65C6,
                0x9DD3: 0x65C1,
                0x9DD4: 0x65C4,
                0x9DD5: 0x65CC,
                0x9DD6: 0x65D2,
                0x9DD7: 0x65DB,
                0x9DD8: 0x65D9,
                0x9DD9: 0x65E0,
                0x9DDA: 0x65E1,
                0x9DDB: 0x65F1,
                0x9DDC: 0x6772,
                0x9DDD: 0x660A,
                0x9DDE: 0x6603,
                0x9DDF: 0x65FB,
                0x9DE0: 0x6773,
                0x9DE1: 0x6635,
                0x9DE2: 0x6636,
                0x9DE3: 0x6634,
                0x9DE4: 0x661C,
                0x9DE5: 0x664F,
                0x9DE6: 0x6644,
                0x9DE7: 0x6649,
                0x9DE8: 0x6641,
                0x9DE9: 0x665E,
                0x9DEA: 0x665D,
                0x9DEB: 0x6664,
                0x9DEC: 0x6667,
                0x9DED: 0x6668,
                0x9DEE: 0x665F,
                0x9DEF: 0x6662,
                0x9DF0: 0x6670,
                0x9DF1: 0x6683,
                0x9DF2: 0x6688,
                0x9DF3: 0x668E,
                0x9DF4: 0x6689,
                0x9DF5: 0x6684,
                0x9DF6: 0x6698,
                0x9DF7: 0x669D,
                0x9DF8: 0x66C1,
                0x9DF9: 0x66B9,
                0x9DFA: 0x66C9,
                0x9DFB: 0x66BE,
                0x9DFC: 0x66BC,
                0x9E40: 0x66C4,
                0x9E41: 0x66B8,
                0x9E42: 0x66D6,
                0x9E43: 0x66DA,
                0x9E44: 0x66E0,
                0x9E45: 0x663F,
                0x9E46: 0x66E6,
                0x9E47: 0x66E9,
                0x9E48: 0x66F0,
                0x9E49: 0x66F5,
                0x9E4A: 0x66F7,
                0x9E4B: 0x670F,
                0x9E4C: 0x6716,
                0x9E4D: 0x671E,
                0x9E4E: 0x6726,
                0x9E4F: 0x6727,
                0x9E50: 0x9738,
                0x9E51: 0x672E,
                0x9E52: 0x673F,
                0x9E53: 0x6736,
                0x9E54: 0x6741,
                0x9E55: 0x6738,
                0x9E56: 0x6737,
                0x9E57: 0x6746,
                0x9E58: 0x675E,
                0x9E59: 0x6760,
                0x9E5A: 0x6759,
                0x9E5B: 0x6763,
                0x9E5C: 0x6764,
                0x9E5D: 0x6789,
                0x9E5E: 0x6770,
                0x9E5F: 0x67A9,
                0x9E60: 0x677C,
                0x9E61: 0x676A,
                0x9E62: 0x678C,
                0x9E63: 0x678B,
                0x9E64: 0x67A6,
                0x9E65: 0x67A1,
                0x9E66: 0x6785,
                0x9E67: 0x67B7,
                0x9E68: 0x67EF,
                0x9E69: 0x67B4,
                0x9E6A: 0x67EC,
                0x9E6B: 0x67B3,
                0x9E6C: 0x67E9,
                0x9E6D: 0x67B8,
                0x9E6E: 0x67E4,
                0x9E6F: 0x67DE,
                0x9E70: 0x67DD,
                0x9E71: 0x67E2,
                0x9E72: 0x67EE,
                0x9E73: 0x67B9,
                0x9E74: 0x67CE,
                0x9E75: 0x67C6,
                0x9E76: 0x67E7,
                0x9E77: 0x6A9C,
                0x9E78: 0x681E,
                0x9E79: 0x6846,
                0x9E7A: 0x6829,
                0x9E7B: 0x6840,
                0x9E7C: 0x684D,
                0x9E7D: 0x6832,
                0x9E7E: 0x684E,
                0x9E80: 0x68B3,
                0x9E81: 0x682B,
                0x9E82: 0x6859,
                0x9E83: 0x6863,
                0x9E84: 0x6877,
                0x9E85: 0x687F,
                0x9E86: 0x689F,
                0x9E87: 0x688F,
                0x9E88: 0x68AD,
                0x9E89: 0x6894,
                0x9E8A: 0x689D,
                0x9E8B: 0x689B,
                0x9E8C: 0x6883,
                0x9E8D: 0x6AAE,
                0x9E8E: 0x68B9,
                0x9E8F: 0x6874,
                0x9E90: 0x68B5,
                0x9E91: 0x68A0,
                0x9E92: 0x68BA,
                0x9E93: 0x690F,
                0x9E94: 0x688D,
                0x9E95: 0x687E,
                0x9E96: 0x6901,
                0x9E97: 0x68CA,
                0x9E98: 0x6908,
                0x9E99: 0x68D8,
                0x9E9A: 0x6922,
                0x9E9B: 0x6926,
                0x9E9C: 0x68E1,
                0x9E9D: 0x690C,
                0x9E9E: 0x68CD,
                0x9E9F: 0x68D4,
                0x9EA0: 0x68E7,
                0x9EA1: 0x68D5,
                0x9EA2: 0x6936,
                0x9EA3: 0x6912,
                0x9EA4: 0x6904,
                0x9EA5: 0x68D7,
                0x9EA6: 0x68E3,
                0x9EA7: 0x6925,
                0x9EA8: 0x68F9,
                0x9EA9: 0x68E0,
                0x9EAA: 0x68EF,
                0x9EAB: 0x6928,
                0x9EAC: 0x692A,
                0x9EAD: 0x691A,
                0x9EAE: 0x6923,
                0x9EAF: 0x6921,
                0x9EB0: 0x68C6,
                0x9EB1: 0x6979,
                0x9EB2: 0x6977,
                0x9EB3: 0x695C,
                0x9EB4: 0x6978,
                0x9EB5: 0x696B,
                0x9EB6: 0x6954,
                0x9EB7: 0x697E,
                0x9EB8: 0x696E,
                0x9EB9: 0x6939,
                0x9EBA: 0x6974,
                0x9EBB: 0x693D,
                0x9EBC: 0x6959,
                0x9EBD: 0x6930,
                0x9EBE: 0x6961,
                0x9EBF: 0x695E,
                0x9EC0: 0x695D,
                0x9EC1: 0x6981,
                0x9EC2: 0x696A,
                0x9EC3: 0x69B2,
                0x9EC4: 0x69AE,
                0x9EC5: 0x69D0,
                0x9EC6: 0x69BF,
                0x9EC7: 0x69C1,
                0x9EC8: 0x69D3,
                0x9EC9: 0x69BE,
                0x9ECA: 0x69CE,
                0x9ECB: 0x5BE8,
                0x9ECC: 0x69CA,
                0x9ECD: 0x69DD,
                0x9ECE: 0x69BB,
                0x9ECF: 0x69C3,
                0x9ED0: 0x69A7,
                0x9ED1: 0x6A2E,
                0x9ED2: 0x6991,
                0x9ED3: 0x69A0,
                0x9ED4: 0x699C,
                0x9ED5: 0x6995,
                0x9ED6: 0x69B4,
                0x9ED7: 0x69DE,
                0x9ED8: 0x69E8,
                0x9ED9: 0x6A02,
                0x9EDA: 0x6A1B,
                0x9EDB: 0x69FF,
                0x9EDC: 0x6B0A,
                0x9EDD: 0x69F9,
                0x9EDE: 0x69F2,
                0x9EDF: 0x69E7,
                0x9EE0: 0x6A05,
                0x9EE1: 0x69B1,
                0x9EE2: 0x6A1E,
                0x9EE3: 0x69ED,
                0x9EE4: 0x6A14,
                0x9EE5: 0x69EB,
                0x9EE6: 0x6A0A,
                0x9EE7: 0x6A12,
                0x9EE8: 0x6AC1,
                0x9EE9: 0x6A23,
                0x9EEA: 0x6A13,
                0x9EEB: 0x6A44,
                0x9EEC: 0x6A0C,
                0x9EED: 0x6A72,
                0x9EEE: 0x6A36,
                0x9EEF: 0x6A78,
                0x9EF0: 0x6A47,
                0x9EF1: 0x6A62,
                0x9EF2: 0x6A59,
                0x9EF3: 0x6A66,
                0x9EF4: 0x6A48,
                0x9EF5: 0x6A38,
                0x9EF6: 0x6A22,
                0x9EF7: 0x6A90,
                0x9EF8: 0x6A8D,
                0x9EF9: 0x6AA0,
                0x9EFA: 0x6A84,
                0x9EFB: 0x6AA2,
                0x9EFC: 0x6AA3,
                0x9F40: 0x6A97,
                0x9F41: 0x8617,
                0x9F42: 0x6ABB,
                0x9F43: 0x6AC3,
                0x9F44: 0x6AC2,
                0x9F45: 0x6AB8,
                0x9F46: 0x6AB3,
                0x9F47: 0x6AAC,
                0x9F48: 0x6ADE,
                0x9F49: 0x6AD1,
                0x9F4A: 0x6ADF,
                0x9F4B: 0x6AAA,
                0x9F4C: 0x6ADA,
                0x9F4D: 0x6AEA,
                0x9F4E: 0x6AFB,
                0x9F4F: 0x6B05,
                0x9F50: 0x8616,
                0x9F51: 0x6AFA,
                0x9F52: 0x6B12,
                0x9F53: 0x6B16,
                0x9F54: 0x9B31,
                0x9F55: 0x6B1F,
                0x9F56: 0x6B38,
                0x9F57: 0x6B37,
                0x9F58: 0x76DC,
                0x9F59: 0x6B39,
                0x9F5A: 0x98EE,
                0x9F5B: 0x6B47,
                0x9F5C: 0x6B43,
                0x9F5D: 0x6B49,
                0x9F5E: 0x6B50,
                0x9F5F: 0x6B59,
                0x9F60: 0x6B54,
                0x9F61: 0x6B5B,
                0x9F62: 0x6B5F,
                0x9F63: 0x6B61,
                0x9F64: 0x6B78,
                0x9F65: 0x6B79,
                0x9F66: 0x6B7F,
                0x9F67: 0x6B80,
                0x9F68: 0x6B84,
                0x9F69: 0x6B83,
                0x9F6A: 0x6B8D,
                0x9F6B: 0x6B98,
                0x9F6C: 0x6B95,
                0x9F6D: 0x6B9E,
                0x9F6E: 0x6BA4,
                0x9F6F: 0x6BAA,
                0x9F70: 0x6BAB,
                0x9F71: 0x6BAF,
                0x9F72: 0x6BB2,
                0x9F73: 0x6BB1,
                0x9F74: 0x6BB3,
                0x9F75: 0x6BB7,
                0x9F76: 0x6BBC,
                0x9F77: 0x6BC6,
                0x9F78: 0x6BCB,
                0x9F79: 0x6BD3,
                0x9F7A: 0x6BDF,
                0x9F7B: 0x6BEC,
                0x9F7C: 0x6BEB,
                0x9F7D: 0x6BF3,
                0x9F7E: 0x6BEF,
                0x9F80: 0x9EBE,
                0x9F81: 0x6C08,
                0x9F82: 0x6C13,
                0x9F83: 0x6C14,
                0x9F84: 0x6C1B,
                0x9F85: 0x6C24,
                0x9F86: 0x6C23,
                0x9F87: 0x6C5E,
                0x9F88: 0x6C55,
                0x9F89: 0x6C62,
                0x9F8A: 0x6C6A,
                0x9F8B: 0x6C82,
                0x9F8C: 0x6C8D,
                0x9F8D: 0x6C9A,
                0x9F8E: 0x6C81,
                0x9F8F: 0x6C9B,
                0x9F90: 0x6C7E,
                0x9F91: 0x6C68,
                0x9F92: 0x6C73,
                0x9F93: 0x6C92,
                0x9F94: 0x6C90,
                0x9F95: 0x6CC4,
                0x9F96: 0x6CF1,
                0x9F97: 0x6CD3,
                0x9F98: 0x6CBD,
                0x9F99: 0x6CD7,
                0x9F9A: 0x6CC5,
                0x9F9B: 0x6CDD,
                0x9F9C: 0x6CAE,
                0x9F9D: 0x6CB1,
                0x9F9E: 0x6CBE,
                0x9F9F: 0x6CBA,
                0x9FA0: 0x6CDB,
                0x9FA1: 0x6CEF,
                0x9FA2: 0x6CD9,
                0x9FA3: 0x6CEA,
                0x9FA4: 0x6D1F,
                0x9FA5: 0x884D,
                0x9FA6: 0x6D36,
                0x9FA7: 0x6D2B,
                0x9FA8: 0x6D3D,
                0x9FA9: 0x6D38,
                0x9FAA: 0x6D19,
                0x9FAB: 0x6D35,
                0x9FAC: 0x6D33,
                0x9FAD: 0x6D12,
                0x9FAE: 0x6D0C,
                0x9FAF: 0x6D63,
                0x9FB0: 0x6D93,
                0x9FB1: 0x6D64,
                0x9FB2: 0x6D5A,
                0x9FB3: 0x6D79,
                0x9FB4: 0x6D59,
                0x9FB5: 0x6D8E,
                0x9FB6: 0x6D95,
                0x9FB7: 0x6FE4,
                0x9FB8: 0x6D85,
                0x9FB9: 0x6DF9,
                0x9FBA: 0x6E15,
                0x9FBB: 0x6E0A,
                0x9FBC: 0x6DB5,
                0x9FBD: 0x6DC7,
                0x9FBE: 0x6DE6,
                0x9FBF: 0x6DB8,
                0x9FC0: 0x6DC6,
                0x9FC1: 0x6DEC,
                0x9FC2: 0x6DDE,
                0x9FC3: 0x6DCC,
                0x9FC4: 0x6DE8,
                0x9FC5: 0x6DD2,
                0x9FC6: 0x6DC5,
                0x9FC7: 0x6DFA,
                0x9FC8: 0x6DD9,
                0x9FC9: 0x6DE4,
                0x9FCA: 0x6DD5,
                0x9FCB: 0x6DEA,
                0x9FCC: 0x6DEE,
                0x9FCD: 0x6E2D,
                0x9FCE: 0x6E6E,
                0x9FCF: 0x6E2E,
                0x9FD0: 0x6E19,
                0x9FD1: 0x6E72,
                0x9FD2: 0x6E5F,
                0x9FD3: 0x6E3E,
                0x9FD4: 0x6E23,
                0x9FD5: 0x6E6B,
                0x9FD6: 0x6E2B,
                0x9FD7: 0x6E76,
                0x9FD8: 0x6E4D,
                0x9FD9: 0x6E1F,
                0x9FDA: 0x6E43,
                0x9FDB: 0x6E3A,
                0x9FDC: 0x6E4E,
                0x9FDD: 0x6E24,
                0x9FDE: 0x6EFF,
                0x9FDF: 0x6E1D,
                0x9FE0: 0x6E38,
                0x9FE1: 0x6E82,
                0x9FE2: 0x6EAA,
                0x9FE3: 0x6E98,
                0x9FE4: 0x6EC9,
                0x9FE5: 0x6EB7,
                0x9FE6: 0x6ED3,
                0x9FE7: 0x6EBD,
                0x9FE8: 0x6EAF,
                0x9FE9: 0x6EC4,
                0x9FEA: 0x6EB2,
                0x9FEB: 0x6ED4,
                0x9FEC: 0x6ED5,
                0x9FED: 0x6E8F,
                0x9FEE: 0x6EA5,
                0x9FEF: 0x6EC2,
                0x9FF0: 0x6E9F,
                0x9FF1: 0x6F41,
                0x9FF2: 0x6F11,
                0x9FF3: 0x704C,
                0x9FF4: 0x6EEC,
                0x9FF5: 0x6EF8,
                0x9FF6: 0x6EFE,
                0x9FF7: 0x6F3F,
                0x9FF8: 0x6EF2,
                0x9FF9: 0x6F31,
                0x9FFA: 0x6EEF,
                0x9FFB: 0x6F32,
                0x9FFC: 0x6ECC,
                0xA1: 0xFF61,
                0xA2: 0xFF62,
                0xA3: 0xFF63,
                0xA4: 0xFF64,
                0xA5: 0xFF65,
                0xA6: 0xFF66,
                0xA7: 0xFF67,
                0xA8: 0xFF68,
                0xA9: 0xFF69,
                0xAA: 0xFF6A,
                0xAB: 0xFF6B,
                0xAC: 0xFF6C,
                0xAD: 0xFF6D,
                0xAE: 0xFF6E,
                0xAF: 0xFF6F,
                0xB0: 0xFF70,
                0xB1: 0xFF71,
                0xB2: 0xFF72,
                0xB3: 0xFF73,
                0xB4: 0xFF74,
                0xB5: 0xFF75,
                0xB6: 0xFF76,
                0xB7: 0xFF77,
                0xB8: 0xFF78,
                0xB9: 0xFF79,
                0xBA: 0xFF7A,
                0xBB: 0xFF7B,
                0xBC: 0xFF7C,
                0xBD: 0xFF7D,
                0xBE: 0xFF7E,
                0xBF: 0xFF7F,
                0xC0: 0xFF80,
                0xC1: 0xFF81,
                0xC2: 0xFF82,
                0xC3: 0xFF83,
                0xC4: 0xFF84,
                0xC5: 0xFF85,
                0xC6: 0xFF86,
                0xC7: 0xFF87,
                0xC8: 0xFF88,
                0xC9: 0xFF89,
                0xCA: 0xFF8A,
                0xCB: 0xFF8B,
                0xCC: 0xFF8C,
                0xCD: 0xFF8D,
                0xCE: 0xFF8E,
                0xCF: 0xFF8F,
                0xD0: 0xFF90,
                0xD1: 0xFF91,
                0xD2: 0xFF92,
                0xD3: 0xFF93,
                0xD4: 0xFF94,
                0xD5: 0xFF95,
                0xD6: 0xFF96,
                0xD7: 0xFF97,
                0xD8: 0xFF98,
                0xD9: 0xFF99,
                0xDA: 0xFF9A,
                0xDB: 0xFF9B,
                0xDC: 0xFF9C,
                0xDD: 0xFF9D,
                0xDE: 0xFF9E,
                0xDF: 0xFF9F,
                0xE040: 0x6F3E,
                0xE041: 0x6F13,
                0xE042: 0x6EF7,
                0xE043: 0x6F86,
                0xE044: 0x6F7A,
                0xE045: 0x6F78,
                0xE046: 0x6F81,
                0xE047: 0x6F80,
                0xE048: 0x6F6F,
                0xE049: 0x6F5B,
                0xE04A: 0x6FF3,
                0xE04B: 0x6F6D,
                0xE04C: 0x6F82,
                0xE04D: 0x6F7C,
                0xE04E: 0x6F58,
                0xE04F: 0x6F8E,
                0xE050: 0x6F91,
                0xE051: 0x6FC2,
                0xE052: 0x6F66,
                0xE053: 0x6FB3,
                0xE054: 0x6FA3,
                0xE055: 0x6FA1,
                0xE056: 0x6FA4,
                0xE057: 0x6FB9,
                0xE058: 0x6FC6,
                0xE059: 0x6FAA,
                0xE05A: 0x6FDF,
                0xE05B: 0x6FD5,
                0xE05C: 0x6FEC,
                0xE05D: 0x6FD4,
                0xE05E: 0x6FD8,
                0xE05F: 0x6FF1,
                0xE060: 0x6FEE,
                0xE061: 0x6FDB,
                0xE062: 0x7009,
                0xE063: 0x700B,
                0xE064: 0x6FFA,
                0xE065: 0x7011,
                0xE066: 0x7001,
                0xE067: 0x700F,
                0xE068: 0x6FFE,
                0xE069: 0x701B,
                0xE06A: 0x701A,
                0xE06B: 0x6F74,
                0xE06C: 0x701D,
                0xE06D: 0x7018,
                0xE06E: 0x701F,
                0xE06F: 0x7030,
                0xE070: 0x703E,
                0xE071: 0x7032,
                0xE072: 0x7051,
                0xE073: 0x7063,
                0xE074: 0x7099,
                0xE075: 0x7092,
                0xE076: 0x70AF,
                0xE077: 0x70F1,
                0xE078: 0x70AC,
                0xE079: 0x70B8,
                0xE07A: 0x70B3,
                0xE07B: 0x70AE,
                0xE07C: 0x70DF,
                0xE07D: 0x70CB,
                0xE07E: 0x70DD,
                0xE080: 0x70D9,
                0xE081: 0x7109,
                0xE082: 0x70FD,
                0xE083: 0x711C,
                0xE084: 0x7119,
                0xE085: 0x7165,
                0xE086: 0x7155,
                0xE087: 0x7188,
                0xE088: 0x7166,
                0xE089: 0x7162,
                0xE08A: 0x714C,
                0xE08B: 0x7156,
                0xE08C: 0x716C,
                0xE08D: 0x718F,
                0xE08E: 0x71FB,
                0xE08F: 0x7184,
                0xE090: 0x7195,
                0xE091: 0x71A8,
                0xE092: 0x71AC,
                0xE093: 0x71D7,
                0xE094: 0x71B9,
                0xE095: 0x71BE,
                0xE096: 0x71D2,
                0xE097: 0x71C9,
                0xE098: 0x71D4,
                0xE099: 0x71CE,
                0xE09A: 0x71E0,
                0xE09B: 0x71EC,
                0xE09C: 0x71E7,
                0xE09D: 0x71F5,
                0xE09E: 0x71FC,
                0xE09F: 0x71F9,
                0xE0A0: 0x71FF,
                0xE0A1: 0x720D,
                0xE0A2: 0x7210,
                0xE0A3: 0x721B,
                0xE0A4: 0x7228,
                0xE0A5: 0x722D,
                0xE0A6: 0x722C,
                0xE0A7: 0x7230,
                0xE0A8: 0x7232,
                0xE0A9: 0x723B,
                0xE0AA: 0x723C,
                0xE0AB: 0x723F,
                0xE0AC: 0x7240,
                0xE0AD: 0x7246,
                0xE0AE: 0x724B,
                0xE0AF: 0x7258,
                0xE0B0: 0x7274,
                0xE0B1: 0x727E,
                0xE0B2: 0x7282,
                0xE0B3: 0x7281,
                0xE0B4: 0x7287,
                0xE0B5: 0x7292,
                0xE0B6: 0x7296,
                0xE0B7: 0x72A2,
                0xE0B8: 0x72A7,
                0xE0B9: 0x72B9,
                0xE0BA: 0x72B2,
                0xE0BB: 0x72C3,
                0xE0BC: 0x72C6,
                0xE0BD: 0x72C4,
                0xE0BE: 0x72CE,
                0xE0BF: 0x72D2,
                0xE0C0: 0x72E2,
                0xE0C1: 0x72E0,
                0xE0C2: 0x72E1,
                0xE0C3: 0x72F9,
                0xE0C4: 0x72F7,
                0xE0C5: 0x500F,
                0xE0C6: 0x7317,
                0xE0C7: 0x730A,
                0xE0C8: 0x731C,
                0xE0C9: 0x7316,
                0xE0CA: 0x731D,
                0xE0CB: 0x7334,
                0xE0CC: 0x732F,
                0xE0CD: 0x7329,
                0xE0CE: 0x7325,
                0xE0CF: 0x733E,
                0xE0D0: 0x734E,
                0xE0D1: 0x734F,
                0xE0D2: 0x9ED8,
                0xE0D3: 0x7357,
                0xE0D4: 0x736A,
                0xE0D5: 0x7368,
                0xE0D6: 0x7370,
                0xE0D7: 0x7378,
                0xE0D8: 0x7375,
                0xE0D9: 0x737B,
                0xE0DA: 0x737A,
                0xE0DB: 0x73C8,
                0xE0DC: 0x73B3,
                0xE0DD: 0x73CE,
                0xE0DE: 0x73BB,
                0xE0DF: 0x73C0,
                0xE0E0: 0x73E5,
                0xE0E1: 0x73EE,
                0xE0E2: 0x73DE,
                0xE0E3: 0x74A2,
                0xE0E4: 0x7405,
                0xE0E5: 0x746F,
                0xE0E6: 0x7425,
                0xE0E7: 0x73F8,
                0xE0E8: 0x7432,
                0xE0E9: 0x743A,
                0xE0EA: 0x7455,
                0xE0EB: 0x743F,
                0xE0EC: 0x745F,
                0xE0ED: 0x7459,
                0xE0EE: 0x7441,
                0xE0EF: 0x745C,
                0xE0F0: 0x7469,
                0xE0F1: 0x7470,
                0xE0F2: 0x7463,
                0xE0F3: 0x746A,
                0xE0F4: 0x7476,
                0xE0F5: 0x747E,
                0xE0F6: 0x748B,
                0xE0F7: 0x749E,
                0xE0F8: 0x74A7,
                0xE0F9: 0x74CA,
                0xE0FA: 0x74CF,
                0xE0FB: 0x74D4,
                0xE0FC: 0x73F1,
                0xE140: 0x74E0,
                0xE141: 0x74E3,
                0xE142: 0x74E7,
                0xE143: 0x74E9,
                0xE144: 0x74EE,
                0xE145: 0x74F2,
                0xE146: 0x74F0,
                0xE147: 0x74F1,
                0xE148: 0x74F8,
                0xE149: 0x74F7,
                0xE14A: 0x7504,
                0xE14B: 0x7503,
                0xE14C: 0x7505,
                0xE14D: 0x750C,
                0xE14E: 0x750E,
                0xE14F: 0x750D,
                0xE150: 0x7515,
                0xE151: 0x7513,
                0xE152: 0x751E,
                0xE153: 0x7526,
                0xE154: 0x752C,
                0xE155: 0x753C,
                0xE156: 0x7544,
                0xE157: 0x754D,
                0xE158: 0x754A,
                0xE159: 0x7549,
                0xE15A: 0x755B,
                0xE15B: 0x7546,
                0xE15C: 0x755A,
                0xE15D: 0x7569,
                0xE15E: 0x7564,
                0xE15F: 0x7567,
                0xE160: 0x756B,
                0xE161: 0x756D,
                0xE162: 0x7578,
                0xE163: 0x7576,
                0xE164: 0x7586,
                0xE165: 0x7587,
                0xE166: 0x7574,
                0xE167: 0x758A,
                0xE168: 0x7589,
                0xE169: 0x7582,
                0xE16A: 0x7594,
                0xE16B: 0x759A,
                0xE16C: 0x759D,
                0xE16D: 0x75A5,
                0xE16E: 0x75A3,
                0xE16F: 0x75C2,
                0xE170: 0x75B3,
                0xE171: 0x75C3,
                0xE172: 0x75B5,
                0xE173: 0x75BD,
                0xE174: 0x75B8,
                0xE175: 0x75BC,
                0xE176: 0x75B1,
                0xE177: 0x75CD,
                0xE178: 0x75CA,
                0xE179: 0x75D2,
                0xE17A: 0x75D9,
                0xE17B: 0x75E3,
                0xE17C: 0x75DE,
                0xE17D: 0x75FE,
                0xE17E: 0x75FF,
                0xE180: 0x75FC,
                0xE181: 0x7601,
                0xE182: 0x75F0,
                0xE183: 0x75FA,
                0xE184: 0x75F2,
                0xE185: 0x75F3,
                0xE186: 0x760B,
                0xE187: 0x760D,
                0xE188: 0x7609,
                0xE189: 0x761F,
                0xE18A: 0x7627,
                0xE18B: 0x7620,
                0xE18C: 0x7621,
                0xE18D: 0x7622,
                0xE18E: 0x7624,
                0xE18F: 0x7634,
                0xE190: 0x7630,
                0xE191: 0x763B,
                0xE192: 0x7647,
                0xE193: 0x7648,
                0xE194: 0x7646,
                0xE195: 0x765C,
                0xE196: 0x7658,
                0xE197: 0x7661,
                0xE198: 0x7662,
                0xE199: 0x7668,
                0xE19A: 0x7669,
                0xE19B: 0x766A,
                0xE19C: 0x7667,
                0xE19D: 0x766C,
                0xE19E: 0x7670,
                0xE19F: 0x7672,
                0xE1A0: 0x7676,
                0xE1A1: 0x7678,
                0xE1A2: 0x767C,
                0xE1A3: 0x7680,
                0xE1A4: 0x7683,
                0xE1A5: 0x7688,
                0xE1A6: 0x768B,
                0xE1A7: 0x768E,
                0xE1A8: 0x7696,
                0xE1A9: 0x7693,
                0xE1AA: 0x7699,
                0xE1AB: 0x769A,
                0xE1AC: 0x76B0,
                0xE1AD: 0x76B4,
                0xE1AE: 0x76B8,
                0xE1AF: 0x76B9,
                0xE1B0: 0x76BA,
                0xE1B1: 0x76C2,
                0xE1B2: 0x76CD,
                0xE1B3: 0x76D6,
                0xE1B4: 0x76D2,
                0xE1B5: 0x76DE,
                0xE1B6: 0x76E1,
                0xE1B7: 0x76E5,
                0xE1B8: 0x76E7,
                0xE1B9: 0x76EA,
                0xE1BA: 0x862F,
                0xE1BB: 0x76FB,
                0xE1BC: 0x7708,
                0xE1BD: 0x7707,
                0xE1BE: 0x7704,
                0xE1BF: 0x7729,
                0xE1C0: 0x7724,
                0xE1C1: 0x771E,
                0xE1C2: 0x7725,
                0xE1C3: 0x7726,
                0xE1C4: 0x771B,
                0xE1C5: 0x7737,
                0xE1C6: 0x7738,
                0xE1C7: 0x7747,
                0xE1C8: 0x775A,
                0xE1C9: 0x7768,
                0xE1CA: 0x776B,
                0xE1CB: 0x775B,
                0xE1CC: 0x7765,
                0xE1CD: 0x777F,
                0xE1CE: 0x777E,
                0xE1CF: 0x7779,
                0xE1D0: 0x778E,
                0xE1D1: 0x778B,
                0xE1D2: 0x7791,
                0xE1D3: 0x77A0,
                0xE1D4: 0x779E,
                0xE1D5: 0x77B0,
                0xE1D6: 0x77B6,
                0xE1D7: 0x77B9,
                0xE1D8: 0x77BF,
                0xE1D9: 0x77BC,
                0xE1DA: 0x77BD,
                0xE1DB: 0x77BB,
                0xE1DC: 0x77C7,
                0xE1DD: 0x77CD,
                0xE1DE: 0x77D7,
                0xE1DF: 0x77DA,
                0xE1E0: 0x77DC,
                0xE1E1: 0x77E3,
                0xE1E2: 0x77EE,
                0xE1E3: 0x77FC,
                0xE1E4: 0x780C,
                0xE1E5: 0x7812,
                0xE1E6: 0x7926,
                0xE1E7: 0x7820,
                0xE1E8: 0x792A,
                0xE1E9: 0x7845,
                0xE1EA: 0x788E,
                0xE1EB: 0x7874,
                0xE1EC: 0x7886,
                0xE1ED: 0x787C,
                0xE1EE: 0x789A,
                0xE1EF: 0x788C,
                0xE1F0: 0x78A3,
                0xE1F1: 0x78B5,
                0xE1F2: 0x78AA,
                0xE1F3: 0x78AF,
                0xE1F4: 0x78D1,
                0xE1F5: 0x78C6,
                0xE1F6: 0x78CB,
                0xE1F7: 0x78D4,
                0xE1F8: 0x78BE,
                0xE1F9: 0x78BC,
                0xE1FA: 0x78C5,
                0xE1FB: 0x78CA,
                0xE1FC: 0x78EC,
                0xE240: 0x78E7,
                0xE241: 0x78DA,
                0xE242: 0x78FD,
                0xE243: 0x78F4,
                0xE244: 0x7907,
                0xE245: 0x7912,
                0xE246: 0x7911,
                0xE247: 0x7919,
                0xE248: 0x792C,
                0xE249: 0x792B,
                0xE24A: 0x7940,
                0xE24B: 0x7960,
                0xE24C: 0x7957,
                0xE24D: 0x795F,
                0xE24E: 0x795A,
                0xE24F: 0x7955,
                0xE250: 0x7953,
                0xE251: 0x797A,
                0xE252: 0x797F,
                0xE253: 0x798A,
                0xE254: 0x799D,
                0xE255: 0x79A7,
                0xE256: 0x9F4B,
                0xE257: 0x79AA,
                0xE258: 0x79AE,
                0xE259: 0x79B3,
                0xE25A: 0x79B9,
                0xE25B: 0x79BA,
                0xE25C: 0x79C9,
                0xE25D: 0x79D5,
                0xE25E: 0x79E7,
                0xE25F: 0x79EC,
                0xE260: 0x79E1,
                0xE261: 0x79E3,
                0xE262: 0x7A08,
                0xE263: 0x7A0D,
                0xE264: 0x7A18,
                0xE265: 0x7A19,
                0xE266: 0x7A20,
                0xE267: 0x7A1F,
                0xE268: 0x7980,
                0xE269: 0x7A31,
                0xE26A: 0x7A3B,
                0xE26B: 0x7A3E,
                0xE26C: 0x7A37,
                0xE26D: 0x7A43,
                0xE26E: 0x7A57,
                0xE26F: 0x7A49,
                0xE270: 0x7A61,
                0xE271: 0x7A62,
                0xE272: 0x7A69,
                0xE273: 0x9F9D,
                0xE274: 0x7A70,
                0xE275: 0x7A79,
                0xE276: 0x7A7D,
                0xE277: 0x7A88,
                0xE278: 0x7A97,
                0xE279: 0x7A95,
                0xE27A: 0x7A98,
                0xE27B: 0x7A96,
                0xE27C: 0x7AA9,
                0xE27D: 0x7AC8,
                0xE27E: 0x7AB0,
                0xE280: 0x7AB6,
                0xE281: 0x7AC5,
                0xE282: 0x7AC4,
                0xE283: 0x7ABF,
                0xE284: 0x9083,
                0xE285: 0x7AC7,
                0xE286: 0x7ACA,
                0xE287: 0x7ACD,
                0xE288: 0x7ACF,
                0xE289: 0x7AD5,
                0xE28A: 0x7AD3,
                0xE28B: 0x7AD9,
                0xE28C: 0x7ADA,
                0xE28D: 0x7ADD,
                0xE28E: 0x7AE1,
                0xE28F: 0x7AE2,
                0xE290: 0x7AE6,
                0xE291: 0x7AED,
                0xE292: 0x7AF0,
                0xE293: 0x7B02,
                0xE294: 0x7B0F,
                0xE295: 0x7B0A,
                0xE296: 0x7B06,
                0xE297: 0x7B33,
                0xE298: 0x7B18,
                0xE299: 0x7B19,
                0xE29A: 0x7B1E,
                0xE29B: 0x7B35,
                0xE29C: 0x7B28,
                0xE29D: 0x7B36,
                0xE29E: 0x7B50,
                0xE29F: 0x7B7A,
                0xE2A0: 0x7B04,
                0xE2A1: 0x7B4D,
                0xE2A2: 0x7B0B,
                0xE2A3: 0x7B4C,
                0xE2A4: 0x7B45,
                0xE2A5: 0x7B75,
                0xE2A6: 0x7B65,
                0xE2A7: 0x7B74,
                0xE2A8: 0x7B67,
                0xE2A9: 0x7B70,
                0xE2AA: 0x7B71,
                0xE2AB: 0x7B6C,
                0xE2AC: 0x7B6E,
                0xE2AD: 0x7B9D,
                0xE2AE: 0x7B98,
                0xE2AF: 0x7B9F,
                0xE2B0: 0x7B8D,
                0xE2B1: 0x7B9C,
                0xE2B2: 0x7B9A,
                0xE2B3: 0x7B8B,
                0xE2B4: 0x7B92,
                0xE2B5: 0x7B8F,
                0xE2B6: 0x7B5D,
                0xE2B7: 0x7B99,
                0xE2B8: 0x7BCB,
                0xE2B9: 0x7BC1,
                0xE2BA: 0x7BCC,
                0xE2BB: 0x7BCF,
                0xE2BC: 0x7BB4,
                0xE2BD: 0x7BC6,
                0xE2BE: 0x7BDD,
                0xE2BF: 0x7BE9,
                0xE2C0: 0x7C11,
                0xE2C1: 0x7C14,
                0xE2C2: 0x7BE6,
                0xE2C3: 0x7BE5,
                0xE2C4: 0x7C60,
                0xE2C5: 0x7C00,
                0xE2C6: 0x7C07,
                0xE2C7: 0x7C13,
                0xE2C8: 0x7BF3,
                0xE2C9: 0x7BF7,
                0xE2CA: 0x7C17,
                0xE2CB: 0x7C0D,
                0xE2CC: 0x7BF6,
                0xE2CD: 0x7C23,
                0xE2CE: 0x7C27,
                0xE2CF: 0x7C2A,
                0xE2D0: 0x7C1F,
                0xE2D1: 0x7C37,
                0xE2D2: 0x7C2B,
                0xE2D3: 0x7C3D,
                0xE2D4: 0x7C4C,
                0xE2D5: 0x7C43,
                0xE2D6: 0x7C54,
                0xE2D7: 0x7C4F,
                0xE2D8: 0x7C40,
                0xE2D9: 0x7C50,
                0xE2DA: 0x7C58,
                0xE2DB: 0x7C5F,
                0xE2DC: 0x7C64,
                0xE2DD: 0x7C56,
                0xE2DE: 0x7C65,
                0xE2DF: 0x7C6C,
                0xE2E0: 0x7C75,
                0xE2E1: 0x7C83,
                0xE2E2: 0x7C90,
                0xE2E3: 0x7CA4,
                0xE2E4: 0x7CAD,
                0xE2E5: 0x7CA2,
                0xE2E6: 0x7CAB,
                0xE2E7: 0x7CA1,
                0xE2E8: 0x7CA8,
                0xE2E9: 0x7CB3,
                0xE2EA: 0x7CB2,
                0xE2EB: 0x7CB1,
                0xE2EC: 0x7CAE,
                0xE2ED: 0x7CB9,
                0xE2EE: 0x7CBD,
                0xE2EF: 0x7CC0,
                0xE2F0: 0x7CC5,
                0xE2F1: 0x7CC2,
                0xE2F2: 0x7CD8,
                0xE2F3: 0x7CD2,
                0xE2F4: 0x7CDC,
                0xE2F5: 0x7CE2,
                0xE2F6: 0x9B3B,
                0xE2F7: 0x7CEF,
                0xE2F8: 0x7CF2,
                0xE2F9: 0x7CF4,
                0xE2FA: 0x7CF6,
                0xE2FB: 0x7CFA,
                0xE2FC: 0x7D06,
                0xE340: 0x7D02,
                0xE341: 0x7D1C,
                0xE342: 0x7D15,
                0xE343: 0x7D0A,
                0xE344: 0x7D45,
                0xE345: 0x7D4B,
                0xE346: 0x7D2E,
                0xE347: 0x7D32,
                0xE348: 0x7D3F,
                0xE349: 0x7D35,
                0xE34A: 0x7D46,
                0xE34B: 0x7D73,
                0xE34C: 0x7D56,
                0xE34D: 0x7D4E,
                0xE34E: 0x7D72,
                0xE34F: 0x7D68,
                0xE350: 0x7D6E,
                0xE351: 0x7D4F,
                0xE352: 0x7D63,
                0xE353: 0x7D93,
                0xE354: 0x7D89,
                0xE355: 0x7D5B,
                0xE356: 0x7D8F,
                0xE357: 0x7D7D,
                0xE358: 0x7D9B,
                0xE359: 0x7DBA,
                0xE35A: 0x7DAE,
                0xE35B: 0x7DA3,
                0xE35C: 0x7DB5,
                0xE35D: 0x7DC7,
                0xE35E: 0x7DBD,
                0xE35F: 0x7DAB,
                0xE360: 0x7E3D,
                0xE361: 0x7DA2,
                0xE362: 0x7DAF,
                0xE363: 0x7DDC,
                0xE364: 0x7DB8,
                0xE365: 0x7D9F,
                0xE366: 0x7DB0,
                0xE367: 0x7DD8,
                0xE368: 0x7DDD,
                0xE369: 0x7DE4,
                0xE36A: 0x7DDE,
                0xE36B: 0x7DFB,
                0xE36C: 0x7DF2,
                0xE36D: 0x7DE1,
                0xE36E: 0x7E05,
                0xE36F: 0x7E0A,
                0xE370: 0x7E23,
                0xE371: 0x7E21,
                0xE372: 0x7E12,
                0xE373: 0x7E31,
                0xE374: 0x7E1F,
                0xE375: 0x7E09,
                0xE376: 0x7E0B,
                0xE377: 0x7E22,
                0xE378: 0x7E46,
                0xE379: 0x7E66,
                0xE37A: 0x7E3B,
                0xE37B: 0x7E35,
                0xE37C: 0x7E39,
                0xE37D: 0x7E43,
                0xE37E: 0x7E37,
                0xE380: 0x7E32,
                0xE381: 0x7E3A,
                0xE382: 0x7E67,
                0xE383: 0x7E5D,
                0xE384: 0x7E56,
                0xE385: 0x7E5E,
                0xE386: 0x7E59,
                0xE387: 0x7E5A,
                0xE388: 0x7E79,
                0xE389: 0x7E6A,
                0xE38A: 0x7E69,
                0xE38B: 0x7E7C,
                0xE38C: 0x7E7B,
                0xE38D: 0x7E83,
                0xE38E: 0x7DD5,
                0xE38F: 0x7E7D,
                0xE390: 0x8FAE,
                0xE391: 0x7E7F,
                0xE392: 0x7E88,
                0xE393: 0x7E89,
                0xE394: 0x7E8C,
                0xE395: 0x7E92,
                0xE396: 0x7E90,
                0xE397: 0x7E93,
                0xE398: 0x7E94,
                0xE399: 0x7E96,
                0xE39A: 0x7E8E,
                0xE39B: 0x7E9B,
                0xE39C: 0x7E9C,
                0xE39D: 0x7F38,
                0xE39E: 0x7F3A,
                0xE39F: 0x7F45,
                0xE3A0: 0x7F4C,
                0xE3A1: 0x7F4D,
                0xE3A2: 0x7F4E,
                0xE3A3: 0x7F50,
                0xE3A4: 0x7F51,
                0xE3A5: 0x7F55,
                0xE3A6: 0x7F54,
                0xE3A7: 0x7F58,
                0xE3A8: 0x7F5F,
                0xE3A9: 0x7F60,
                0xE3AA: 0x7F68,
                0xE3AB: 0x7F69,
                0xE3AC: 0x7F67,
                0xE3AD: 0x7F78,
                0xE3AE: 0x7F82,
                0xE3AF: 0x7F86,
                0xE3B0: 0x7F83,
                0xE3B1: 0x7F88,
                0xE3B2: 0x7F87,
                0xE3B3: 0x7F8C,
                0xE3B4: 0x7F94,
                0xE3B5: 0x7F9E,
                0xE3B6: 0x7F9D,
                0xE3B7: 0x7F9A,
                0xE3B8: 0x7FA3,
                0xE3B9: 0x7FAF,
                0xE3BA: 0x7FB2,
                0xE3BB: 0x7FB9,
                0xE3BC: 0x7FAE,
                0xE3BD: 0x7FB6,
                0xE3BE: 0x7FB8,
                0xE3BF: 0x8B71,
                0xE3C0: 0x7FC5,
                0xE3C1: 0x7FC6,
                0xE3C2: 0x7FCA,
                0xE3C3: 0x7FD5,
                0xE3C4: 0x7FD4,
                0xE3C5: 0x7FE1,
                0xE3C6: 0x7FE6,
                0xE3C7: 0x7FE9,
                0xE3C8: 0x7FF3,
                0xE3C9: 0x7FF9,
                0xE3CA: 0x98DC,
                0xE3CB: 0x8006,
                0xE3CC: 0x8004,
                0xE3CD: 0x800B,
                0xE3CE: 0x8012,
                0xE3CF: 0x8018,
                0xE3D0: 0x8019,
                0xE3D1: 0x801C,
                0xE3D2: 0x8021,
                0xE3D3: 0x8028,
                0xE3D4: 0x803F,
                0xE3D5: 0x803B,
                0xE3D6: 0x804A,
                0xE3D7: 0x8046,
                0xE3D8: 0x8052,
                0xE3D9: 0x8058,
                0xE3DA: 0x805A,
                0xE3DB: 0x805F,
                0xE3DC: 0x8062,
                0xE3DD: 0x8068,
                0xE3DE: 0x8073,
                0xE3DF: 0x8072,
                0xE3E0: 0x8070,
                0xE3E1: 0x8076,
                0xE3E2: 0x8079,
                0xE3E3: 0x807D,
                0xE3E4: 0x807F,
                0xE3E5: 0x8084,
                0xE3E6: 0x8086,
                0xE3E7: 0x8085,
                0xE3E8: 0x809B,
                0xE3E9: 0x8093,
                0xE3EA: 0x809A,
                0xE3EB: 0x80AD,
                0xE3EC: 0x5190,
                0xE3ED: 0x80AC,
                0xE3EE: 0x80DB,
                0xE3EF: 0x80E5,
                0xE3F0: 0x80D9,
                0xE3F1: 0x80DD,
                0xE3F2: 0x80C4,
                0xE3F3: 0x80DA,
                0xE3F4: 0x80D6,
                0xE3F5: 0x8109,
                0xE3F6: 0x80EF,
                0xE3F7: 0x80F1,
                0xE3F8: 0x811B,
                0xE3F9: 0x8129,
                0xE3FA: 0x8123,
                0xE3FB: 0x812F,
                0xE3FC: 0x814B,
                0xE440: 0x968B,
                0xE441: 0x8146,
                0xE442: 0x813E,
                0xE443: 0x8153,
                0xE444: 0x8151,
                0xE445: 0x80FC,
                0xE446: 0x8171,
                0xE447: 0x816E,
                0xE448: 0x8165,
                0xE449: 0x8166,
                0xE44A: 0x8174,
                0xE44B: 0x8183,
                0xE44C: 0x8188,
                0xE44D: 0x818A,
                0xE44E: 0x8180,
                0xE44F: 0x8182,
                0xE450: 0x81A0,
                0xE451: 0x8195,
                0xE452: 0x81A4,
                0xE453: 0x81A3,
                0xE454: 0x815F,
                0xE455: 0x8193,
                0xE456: 0x81A9,
                0xE457: 0x81B0,
                0xE458: 0x81B5,
                0xE459: 0x81BE,
                0xE45A: 0x81B8,
                0xE45B: 0x81BD,
                0xE45C: 0x81C0,
                0xE45D: 0x81C2,
                0xE45E: 0x81BA,
                0xE45F: 0x81C9,
                0xE460: 0x81CD,
                0xE461: 0x81D1,
                0xE462: 0x81D9,
                0xE463: 0x81D8,
                0xE464: 0x81C8,
                0xE465: 0x81DA,
                0xE466: 0x81DF,
                0xE467: 0x81E0,
                0xE468: 0x81E7,
                0xE469: 0x81FA,
                0xE46A: 0x81FB,
                0xE46B: 0x81FE,
                0xE46C: 0x8201,
                0xE46D: 0x8202,
                0xE46E: 0x8205,
                0xE46F: 0x8207,
                0xE470: 0x820A,
                0xE471: 0x820D,
                0xE472: 0x8210,
                0xE473: 0x8216,
                0xE474: 0x8229,
                0xE475: 0x822B,
                0xE476: 0x8238,
                0xE477: 0x8233,
                0xE478: 0x8240,
                0xE479: 0x8259,
                0xE47A: 0x8258,
                0xE47B: 0x825D,
                0xE47C: 0x825A,
                0xE47D: 0x825F,
                0xE47E: 0x8264,
                0xE480: 0x8262,
                0xE481: 0x8268,
                0xE482: 0x826A,
                0xE483: 0x826B,
                0xE484: 0x822E,
                0xE485: 0x8271,
                0xE486: 0x8277,
                0xE487: 0x8278,
                0xE488: 0x827E,
                0xE489: 0x828D,
                0xE48A: 0x8292,
                0xE48B: 0x82AB,
                0xE48C: 0x829F,
                0xE48D: 0x82BB,
                0xE48E: 0x82AC,
                0xE48F: 0x82E1,
                0xE490: 0x82E3,
                0xE491: 0x82DF,
                0xE492: 0x82D2,
                0xE493: 0x82F4,
                0xE494: 0x82F3,
                0xE495: 0x82FA,
                0xE496: 0x8393,
                0xE497: 0x8303,
                0xE498: 0x82FB,
                0xE499: 0x82F9,
                0xE49A: 0x82DE,
                0xE49B: 0x8306,
                0xE49C: 0x82DC,
                0xE49D: 0x8309,
                0xE49E: 0x82D9,
                0xE49F: 0x8335,
                0xE4A0: 0x8334,
                0xE4A1: 0x8316,
                0xE4A2: 0x8332,
                0xE4A3: 0x8331,
                0xE4A4: 0x8340,
                0xE4A5: 0x8339,
                0xE4A6: 0x8350,
                0xE4A7: 0x8345,
                0xE4A8: 0x832F,
                0xE4A9: 0x832B,
                0xE4AA: 0x8317,
                0xE4AB: 0x8318,
                0xE4AC: 0x8385,
                0xE4AD: 0x839A,
                0xE4AE: 0x83AA,
                0xE4AF: 0x839F,
                0xE4B0: 0x83A2,
                0xE4B1: 0x8396,
                0xE4B2: 0x8323,
                0xE4B3: 0x838E,
                0xE4B4: 0x8387,
                0xE4B5: 0x838A,
                0xE4B6: 0x837C,
                0xE4B7: 0x83B5,
                0xE4B8: 0x8373,
                0xE4B9: 0x8375,
                0xE4BA: 0x83A0,
                0xE4BB: 0x8389,
                0xE4BC: 0x83A8,
                0xE4BD: 0x83F4,
                0xE4BE: 0x8413,
                0xE4BF: 0x83EB,
                0xE4C0: 0x83CE,
                0xE4C1: 0x83FD,
                0xE4C2: 0x8403,
                0xE4C3: 0x83D8,
                0xE4C4: 0x840B,
                0xE4C5: 0x83C1,
                0xE4C6: 0x83F7,
                0xE4C7: 0x8407,
                0xE4C8: 0x83E0,
                0xE4C9: 0x83F2,
                0xE4CA: 0x840D,
                0xE4CB: 0x8422,
                0xE4CC: 0x8420,
                0xE4CD: 0x83BD,
                0xE4CE: 0x8438,
                0xE4CF: 0x8506,
                0xE4D0: 0x83FB,
                0xE4D1: 0x846D,
                0xE4D2: 0x842A,
                0xE4D3: 0x843C,
                0xE4D4: 0x855A,
                0xE4D5: 0x8484,
                0xE4D6: 0x8477,
                0xE4D7: 0x846B,
                0xE4D8: 0x84AD,
                0xE4D9: 0x846E,
                0xE4DA: 0x8482,
                0xE4DB: 0x8469,
                0xE4DC: 0x8446,
                0xE4DD: 0x842C,
                0xE4DE: 0x846F,
                0xE4DF: 0x8479,
                0xE4E0: 0x8435,
                0xE4E1: 0x84CA,
                0xE4E2: 0x8462,
                0xE4E3: 0x84B9,
                0xE4E4: 0x84BF,
                0xE4E5: 0x849F,
                0xE4E6: 0x84D9,
                0xE4E7: 0x84CD,
                0xE4E8: 0x84BB,
                0xE4E9: 0x84DA,
                0xE4EA: 0x84D0,
                0xE4EB: 0x84C1,
                0xE4EC: 0x84C6,
                0xE4ED: 0x84D6,
                0xE4EE: 0x84A1,
                0xE4EF: 0x8521,
                0xE4F0: 0x84FF,
                0xE4F1: 0x84F4,
                0xE4F2: 0x8517,
                0xE4F3: 0x8518,
                0xE4F4: 0x852C,
                0xE4F5: 0x851F,
                0xE4F6: 0x8515,
                0xE4F7: 0x8514,
                0xE4F8: 0x84FC,
                0xE4F9: 0x8540,
                0xE4FA: 0x8563,
                0xE4FB: 0x8558,
                0xE4FC: 0x8548,
                0xE540: 0x8541,
                0xE541: 0x8602,
                0xE542: 0x854B,
                0xE543: 0x8555,
                0xE544: 0x8580,
                0xE545: 0x85A4,
                0xE546: 0x8588,
                0xE547: 0x8591,
                0xE548: 0x858A,
                0xE549: 0x85A8,
                0xE54A: 0x856D,
                0xE54B: 0x8594,
                0xE54C: 0x859B,
                0xE54D: 0x85EA,
                0xE54E: 0x8587,
                0xE54F: 0x859C,
                0xE550: 0x8577,
                0xE551: 0x857E,
                0xE552: 0x8590,
                0xE553: 0x85C9,
                0xE554: 0x85BA,
                0xE555: 0x85CF,
                0xE556: 0x85B9,
                0xE557: 0x85D0,
                0xE558: 0x85D5,
                0xE559: 0x85DD,
                0xE55A: 0x85E5,
                0xE55B: 0x85DC,
                0xE55C: 0x85F9,
                0xE55D: 0x860A,
                0xE55E: 0x8613,
                0xE55F: 0x860B,
                0xE560: 0x85FE,
                0xE561: 0x85FA,
                0xE562: 0x8606,
                0xE563: 0x8622,
                0xE564: 0x861A,
                0xE565: 0x8630,
                0xE566: 0x863F,
                0xE567: 0x864D,
                0xE568: 0x4E55,
                0xE569: 0x8654,
                0xE56A: 0x865F,
                0xE56B: 0x8667,
                0xE56C: 0x8671,
                0xE56D: 0x8693,
                0xE56E: 0x86A3,
                0xE56F: 0x86A9,
                0xE570: 0x86AA,
                0xE571: 0x868B,
                0xE572: 0x868C,
                0xE573: 0x86B6,
                0xE574: 0x86AF,
                0xE575: 0x86C4,
                0xE576: 0x86C6,
                0xE577: 0x86B0,
                0xE578: 0x86C9,
                0xE579: 0x8823,
                0xE57A: 0x86AB,
                0xE57B: 0x86D4,
                0xE57C: 0x86DE,
                0xE57D: 0x86E9,
                0xE57E: 0x86EC,
                0xE580: 0x86DF,
                0xE581: 0x86DB,
                0xE582: 0x86EF,
                0xE583: 0x8712,
                0xE584: 0x8706,
                0xE585: 0x8708,
                0xE586: 0x8700,
                0xE587: 0x8703,
                0xE588: 0x86FB,
                0xE589: 0x8711,
                0xE58A: 0x8709,
                0xE58B: 0x870D,
                0xE58C: 0x86F9,
                0xE58D: 0x870A,
                0xE58E: 0x8734,
                0xE58F: 0x873F,
                0xE590: 0x8737,
                0xE591: 0x873B,
                0xE592: 0x8725,
                0xE593: 0x8729,
                0xE594: 0x871A,
                0xE595: 0x8760,
                0xE596: 0x875F,
                0xE597: 0x8778,
                0xE598: 0x874C,
                0xE599: 0x874E,
                0xE59A: 0x8774,
                0xE59B: 0x8757,
                0xE59C: 0x8768,
                0xE59D: 0x876E,
                0xE59E: 0x8759,
                0xE59F: 0x8753,
                0xE5A0: 0x8763,
                0xE5A1: 0x876A,
                0xE5A2: 0x8805,
                0xE5A3: 0x87A2,
                0xE5A4: 0x879F,
                0xE5A5: 0x8782,
                0xE5A6: 0x87AF,
                0xE5A7: 0x87CB,
                0xE5A8: 0x87BD,
                0xE5A9: 0x87C0,
                0xE5AA: 0x87D0,
                0xE5AB: 0x96D6,
                0xE5AC: 0x87AB,
                0xE5AD: 0x87C4,
                0xE5AE: 0x87B3,
                0xE5AF: 0x87C7,
                0xE5B0: 0x87C6,
                0xE5B1: 0x87BB,
                0xE5B2: 0x87EF,
                0xE5B3: 0x87F2,
                0xE5B4: 0x87E0,
                0xE5B5: 0x880F,
                0xE5B6: 0x880D,
                0xE5B7: 0x87FE,
                0xE5B8: 0x87F6,
                0xE5B9: 0x87F7,
                0xE5BA: 0x880E,
                0xE5BB: 0x87D2,
                0xE5BC: 0x8811,
                0xE5BD: 0x8816,
                0xE5BE: 0x8815,
                0xE5BF: 0x8822,
                0xE5C0: 0x8821,
                0xE5C1: 0x8831,
                0xE5C2: 0x8836,
                0xE5C3: 0x8839,
                0xE5C4: 0x8827,
                0xE5C5: 0x883B,
                0xE5C6: 0x8844,
                0xE5C7: 0x8842,
                0xE5C8: 0x8852,
                0xE5C9: 0x8859,
                0xE5CA: 0x885E,
                0xE5CB: 0x8862,
                0xE5CC: 0x886B,
                0xE5CD: 0x8881,
                0xE5CE: 0x887E,
                0xE5CF: 0x889E,
                0xE5D0: 0x8875,
                0xE5D1: 0x887D,
                0xE5D2: 0x88B5,
                0xE5D3: 0x8872,
                0xE5D4: 0x8882,
                0xE5D5: 0x8897,
                0xE5D6: 0x8892,
                0xE5D7: 0x88AE,
                0xE5D8: 0x8899,
                0xE5D9: 0x88A2,
                0xE5DA: 0x888D,
                0xE5DB: 0x88A4,
                0xE5DC: 0x88B0,
                0xE5DD: 0x88BF,
                0xE5DE: 0x88B1,
                0xE5DF: 0x88C3,
                0xE5E0: 0x88C4,
                0xE5E1: 0x88D4,
                0xE5E2: 0x88D8,
                0xE5E3: 0x88D9,
                0xE5E4: 0x88DD,
                0xE5E5: 0x88F9,
                0xE5E6: 0x8902,
                0xE5E7: 0x88FC,
                0xE5E8: 0x88F4,
                0xE5E9: 0x88E8,
                0xE5EA: 0x88F2,
                0xE5EB: 0x8904,
                0xE5EC: 0x890C,
                0xE5ED: 0x890A,
                0xE5EE: 0x8913,
                0xE5EF: 0x8943,
                0xE5F0: 0x891E,
                0xE5F1: 0x8925,
                0xE5F2: 0x892A,
                0xE5F3: 0x892B,
                0xE5F4: 0x8941,
                0xE5F5: 0x8944,
                0xE5F6: 0x893B,
                0xE5F7: 0x8936,
                0xE5F8: 0x8938,
                0xE5F9: 0x894C,
                0xE5FA: 0x891D,
                0xE5FB: 0x8960,
                0xE5FC: 0x895E,
                0xE640: 0x8966,
                0xE641: 0x8964,
                0xE642: 0x896D,
                0xE643: 0x896A,
                0xE644: 0x896F,
                0xE645: 0x8974,
                0xE646: 0x8977,
                0xE647: 0x897E,
                0xE648: 0x8983,
                0xE649: 0x8988,
                0xE64A: 0x898A,
                0xE64B: 0x8993,
                0xE64C: 0x8998,
                0xE64D: 0x89A1,
                0xE64E: 0x89A9,
                0xE64F: 0x89A6,
                0xE650: 0x89AC,
                0xE651: 0x89AF,
                0xE652: 0x89B2,
                0xE653: 0x89BA,
                0xE654: 0x89BD,
                0xE655: 0x89BF,
                0xE656: 0x89C0,
                0xE657: 0x89DA,
                0xE658: 0x89DC,
                0xE659: 0x89DD,
                0xE65A: 0x89E7,
                0xE65B: 0x89F4,
                0xE65C: 0x89F8,
                0xE65D: 0x8A03,
                0xE65E: 0x8A16,
                0xE65F: 0x8A10,
                0xE660: 0x8A0C,
                0xE661: 0x8A1B,
                0xE662: 0x8A1D,
                0xE663: 0x8A25,
                0xE664: 0x8A36,
                0xE665: 0x8A41,
                0xE666: 0x8A5B,
                0xE667: 0x8A52,
                0xE668: 0x8A46,
                0xE669: 0x8A48,
                0xE66A: 0x8A7C,
                0xE66B: 0x8A6D,
                0xE66C: 0x8A6C,
                0xE66D: 0x8A62,
                0xE66E: 0x8A85,
                0xE66F: 0x8A82,
                0xE670: 0x8A84,
                0xE671: 0x8AA8,
                0xE672: 0x8AA1,
                0xE673: 0x8A91,
                0xE674: 0x8AA5,
                0xE675: 0x8AA6,
                0xE676: 0x8A9A,
                0xE677: 0x8AA3,
                0xE678: 0x8AC4,
                0xE679: 0x8ACD,
                0xE67A: 0x8AC2,
                0xE67B: 0x8ADA,
                0xE67C: 0x8AEB,
                0xE67D: 0x8AF3,
                0xE67E: 0x8AE7,
                0xE680: 0x8AE4,
                0xE681: 0x8AF1,
                0xE682: 0x8B14,
                0xE683: 0x8AE0,
                0xE684: 0x8AE2,
                0xE685: 0x8AF7,
                0xE686: 0x8ADE,
                0xE687: 0x8ADB,
                0xE688: 0x8B0C,
                0xE689: 0x8B07,
                0xE68A: 0x8B1A,
                0xE68B: 0x8AE1,
                0xE68C: 0x8B16,
                0xE68D: 0x8B10,
                0xE68E: 0x8B17,
                0xE68F: 0x8B20,
                0xE690: 0x8B33,
                0xE691: 0x97AB,
                0xE692: 0x8B26,
                0xE693: 0x8B2B,
                0xE694: 0x8B3E,
                0xE695: 0x8B28,
                0xE696: 0x8B41,
                0xE697: 0x8B4C,
                0xE698: 0x8B4F,
                0xE699: 0x8B4E,
                0xE69A: 0x8B49,
                0xE69B: 0x8B56,
                0xE69C: 0x8B5B,
                0xE69D: 0x8B5A,
                0xE69E: 0x8B6B,
                0xE69F: 0x8B5F,
                0xE6A0: 0x8B6C,
                0xE6A1: 0x8B6F,
                0xE6A2: 0x8B74,
                0xE6A3: 0x8B7D,
                0xE6A4: 0x8B80,
                0xE6A5: 0x8B8C,
                0xE6A6: 0x8B8E,
                0xE6A7: 0x8B92,
                0xE6A8: 0x8B93,
                0xE6A9: 0x8B96,
                0xE6AA: 0x8B99,
                0xE6AB: 0x8B9A,
                0xE6AC: 0x8C3A,
                0xE6AD: 0x8C41,
                0xE6AE: 0x8C3F,
                0xE6AF: 0x8C48,
                0xE6B0: 0x8C4C,
                0xE6B1: 0x8C4E,
                0xE6B2: 0x8C50,
                0xE6B3: 0x8C55,
                0xE6B4: 0x8C62,
                0xE6B5: 0x8C6C,
                0xE6B6: 0x8C78,
                0xE6B7: 0x8C7A,
                0xE6B8: 0x8C82,
                0xE6B9: 0x8C89,
                0xE6BA: 0x8C85,
                0xE6BB: 0x8C8A,
                0xE6BC: 0x8C8D,
                0xE6BD: 0x8C8E,
                0xE6BE: 0x8C94,
                0xE6BF: 0x8C7C,
                0xE6C0: 0x8C98,
                0xE6C1: 0x621D,
                0xE6C2: 0x8CAD,
                0xE6C3: 0x8CAA,
                0xE6C4: 0x8CBD,
                0xE6C5: 0x8CB2,
                0xE6C6: 0x8CB3,
                0xE6C7: 0x8CAE,
                0xE6C8: 0x8CB6,
                0xE6C9: 0x8CC8,
                0xE6CA: 0x8CC1,
                0xE6CB: 0x8CE4,
                0xE6CC: 0x8CE3,
                0xE6CD: 0x8CDA,
                0xE6CE: 0x8CFD,
                0xE6CF: 0x8CFA,
                0xE6D0: 0x8CFB,
                0xE6D1: 0x8D04,
                0xE6D2: 0x8D05,
                0xE6D3: 0x8D0A,
                0xE6D4: 0x8D07,
                0xE6D5: 0x8D0F,
                0xE6D6: 0x8D0D,
                0xE6D7: 0x8D10,
                0xE6D8: 0x9F4E,
                0xE6D9: 0x8D13,
                0xE6DA: 0x8CCD,
                0xE6DB: 0x8D14,
                0xE6DC: 0x8D16,
                0xE6DD: 0x8D67,
                0xE6DE: 0x8D6D,
                0xE6DF: 0x8D71,
                0xE6E0: 0x8D73,
                0xE6E1: 0x8D81,
                0xE6E2: 0x8D99,
                0xE6E3: 0x8DC2,
                0xE6E4: 0x8DBE,
                0xE6E5: 0x8DBA,
                0xE6E6: 0x8DCF,
                0xE6E7: 0x8DDA,
                0xE6E8: 0x8DD6,
                0xE6E9: 0x8DCC,
                0xE6EA: 0x8DDB,
                0xE6EB: 0x8DCB,
                0xE6EC: 0x8DEA,
                0xE6ED: 0x8DEB,
                0xE6EE: 0x8DDF,
                0xE6EF: 0x8DE3,
                0xE6F0: 0x8DFC,
                0xE6F1: 0x8E08,
                0xE6F2: 0x8E09,
                0xE6F3: 0x8DFF,
                0xE6F4: 0x8E1D,
                0xE6F5: 0x8E1E,
                0xE6F6: 0x8E10,
                0xE6F7: 0x8E1F,
                0xE6F8: 0x8E42,
                0xE6F9: 0x8E35,
                0xE6FA: 0x8E30,
                0xE6FB: 0x8E34,
                0xE6FC: 0x8E4A,
                0xE740: 0x8E47,
                0xE741: 0x8E49,
                0xE742: 0x8E4C,
                0xE743: 0x8E50,
                0xE744: 0x8E48,
                0xE745: 0x8E59,
                0xE746: 0x8E64,
                0xE747: 0x8E60,
                0xE748: 0x8E2A,
                0xE749: 0x8E63,
                0xE74A: 0x8E55,
                0xE74B: 0x8E76,
                0xE74C: 0x8E72,
                0xE74D: 0x8E7C,
                0xE74E: 0x8E81,
                0xE74F: 0x8E87,
                0xE750: 0x8E85,
                0xE751: 0x8E84,
                0xE752: 0x8E8B,
                0xE753: 0x8E8A,
                0xE754: 0x8E93,
                0xE755: 0x8E91,
                0xE756: 0x8E94,
                0xE757: 0x8E99,
                0xE758: 0x8EAA,
                0xE759: 0x8EA1,
                0xE75A: 0x8EAC,
                0xE75B: 0x8EB0,
                0xE75C: 0x8EC6,
                0xE75D: 0x8EB1,
                0xE75E: 0x8EBE,
                0xE75F: 0x8EC5,
                0xE760: 0x8EC8,
                0xE761: 0x8ECB,
                0xE762: 0x8EDB,
                0xE763: 0x8EE3,
                0xE764: 0x8EFC,
                0xE765: 0x8EFB,
                0xE766: 0x8EEB,
                0xE767: 0x8EFE,
                0xE768: 0x8F0A,
                0xE769: 0x8F05,
                0xE76A: 0x8F15,
                0xE76B: 0x8F12,
                0xE76C: 0x8F19,
                0xE76D: 0x8F13,
                0xE76E: 0x8F1C,
                0xE76F: 0x8F1F,
                0xE770: 0x8F1B,
                0xE771: 0x8F0C,
                0xE772: 0x8F26,
                0xE773: 0x8F33,
                0xE774: 0x8F3B,
                0xE775: 0x8F39,
                0xE776: 0x8F45,
                0xE777: 0x8F42,
                0xE778: 0x8F3E,
                0xE779: 0x8F4C,
                0xE77A: 0x8F49,
                0xE77B: 0x8F46,
                0xE77C: 0x8F4E,
                0xE77D: 0x8F57,
                0xE77E: 0x8F5C,
                0xE780: 0x8F62,
                0xE781: 0x8F63,
                0xE782: 0x8F64,
                0xE783: 0x8F9C,
                0xE784: 0x8F9F,
                0xE785: 0x8FA3,
                0xE786: 0x8FAD,
                0xE787: 0x8FAF,
                0xE788: 0x8FB7,
                0xE789: 0x8FDA,
                0xE78A: 0x8FE5,
                0xE78B: 0x8FE2,
                0xE78C: 0x8FEA,
                0xE78D: 0x8FEF,
                0xE78E: 0x9087,
                0xE78F: 0x8FF4,
                0xE790: 0x9005,
                0xE791: 0x8FF9,
                0xE792: 0x8FFA,
                0xE793: 0x9011,
                0xE794: 0x9015,
                0xE795: 0x9021,
                0xE796: 0x900D,
                0xE797: 0x901E,
                0xE798: 0x9016,
                0xE799: 0x900B,
                0xE79A: 0x9027,
                0xE79B: 0x9036,
                0xE79C: 0x9035,
                0xE79D: 0x9039,
                0xE79E: 0x8FF8,
                0xE79F: 0x904F,
                0xE7A0: 0x9050,
                0xE7A1: 0x9051,
                0xE7A2: 0x9052,
                0xE7A3: 0x900E,
                0xE7A4: 0x9049,
                0xE7A5: 0x903E,
                0xE7A6: 0x9056,
                0xE7A7: 0x9058,
                0xE7A8: 0x905E,
                0xE7A9: 0x9068,
                0xE7AA: 0x906F,
                0xE7AB: 0x9076,
                0xE7AC: 0x96A8,
                0xE7AD: 0x9072,
                0xE7AE: 0x9082,
                0xE7AF: 0x907D,
                0xE7B0: 0x9081,
                0xE7B1: 0x9080,
                0xE7B2: 0x908A,
                0xE7B3: 0x9089,
                0xE7B4: 0x908F,
                0xE7B5: 0x90A8,
                0xE7B6: 0x90AF,
                0xE7B7: 0x90B1,
                0xE7B8: 0x90B5,
                0xE7B9: 0x90E2,
                0xE7BA: 0x90E4,
                0xE7BB: 0x6248,
                0xE7BC: 0x90DB,
                0xE7BD: 0x9102,
                0xE7BE: 0x9112,
                0xE7BF: 0x9119,
                0xE7C0: 0x9132,
                0xE7C1: 0x9130,
                0xE7C2: 0x914A,
                0xE7C3: 0x9156,
                0xE7C4: 0x9158,
                0xE7C5: 0x9163,
                0xE7C6: 0x9165,
                0xE7C7: 0x9169,
                0xE7C8: 0x9173,
                0xE7C9: 0x9172,
                0xE7CA: 0x918B,
                0xE7CB: 0x9189,
                0xE7CC: 0x9182,
                0xE7CD: 0x91A2,
                0xE7CE: 0x91AB,
                0xE7CF: 0x91AF,
                0xE7D0: 0x91AA,
                0xE7D1: 0x91B5,
                0xE7D2: 0x91B4,
                0xE7D3: 0x91BA,
                0xE7D4: 0x91C0,
                0xE7D5: 0x91C1,
                0xE7D6: 0x91C9,
                0xE7D7: 0x91CB,
                0xE7D8: 0x91D0,
                0xE7D9: 0x91D6,
                0xE7DA: 0x91DF,
                0xE7DB: 0x91E1,
                0xE7DC: 0x91DB,
                0xE7DD: 0x91FC,
                0xE7DE: 0x91F5,
                0xE7DF: 0x91F6,
                0xE7E0: 0x921E,
                0xE7E1: 0x91FF,
                0xE7E2: 0x9214,
                0xE7E3: 0x922C,
                0xE7E4: 0x9215,
                0xE7E5: 0x9211,
                0xE7E6: 0x925E,
                0xE7E7: 0x9257,
                0xE7E8: 0x9245,
                0xE7E9: 0x9249,
                0xE7EA: 0x9264,
                0xE7EB: 0x9248,
                0xE7EC: 0x9295,
                0xE7ED: 0x923F,
                0xE7EE: 0x924B,
                0xE7EF: 0x9250,
                0xE7F0: 0x929C,
                0xE7F1: 0x9296,
                0xE7F2: 0x9293,
                0xE7F3: 0x929B,
                0xE7F4: 0x925A,
                0xE7F5: 0x92CF,
                0xE7F6: 0x92B9,
                0xE7F7: 0x92B7,
                0xE7F8: 0x92E9,
                0xE7F9: 0x930F,
                0xE7FA: 0x92FA,
                0xE7FB: 0x9344,
                0xE7FC: 0x932E,
                0xE840: 0x9319,
                0xE841: 0x9322,
                0xE842: 0x931A,
                0xE843: 0x9323,
                0xE844: 0x933A,
                0xE845: 0x9335,
                0xE846: 0x933B,
                0xE847: 0x935C,
                0xE848: 0x9360,
                0xE849: 0x937C,
                0xE84A: 0x936E,
                0xE84B: 0x9356,
                0xE84C: 0x93B0,
                0xE84D: 0x93AC,
                0xE84E: 0x93AD,
                0xE84F: 0x9394,
                0xE850: 0x93B9,
                0xE851: 0x93D6,
                0xE852: 0x93D7,
                0xE853: 0x93E8,
                0xE854: 0x93E5,
                0xE855: 0x93D8,
                0xE856: 0x93C3,
                0xE857: 0x93DD,
                0xE858: 0x93D0,
                0xE859: 0x93C8,
                0xE85A: 0x93E4,
                0xE85B: 0x941A,
                0xE85C: 0x9414,
                0xE85D: 0x9413,
                0xE85E: 0x9403,
                0xE85F: 0x9407,
                0xE860: 0x9410,
                0xE861: 0x9436,
                0xE862: 0x942B,
                0xE863: 0x9435,
                0xE864: 0x9421,
                0xE865: 0x943A,
                0xE866: 0x9441,
                0xE867: 0x9452,
                0xE868: 0x9444,
                0xE869: 0x945B,
                0xE86A: 0x9460,
                0xE86B: 0x9462,
                0xE86C: 0x945E,
                0xE86D: 0x946A,
                0xE86E: 0x9229,
                0xE86F: 0x9470,
                0xE870: 0x9475,
                0xE871: 0x9477,
                0xE872: 0x947D,
                0xE873: 0x945A,
                0xE874: 0x947C,
                0xE875: 0x947E,
                0xE876: 0x9481,
                0xE877: 0x947F,
                0xE878: 0x9582,
                0xE879: 0x9587,
                0xE87A: 0x958A,
                0xE87B: 0x9594,
                0xE87C: 0x9596,
                0xE87D: 0x9598,
                0xE87E: 0x9599,
                0xE880: 0x95A0,
                0xE881: 0x95A8,
                0xE882: 0x95A7,
                0xE883: 0x95AD,
                0xE884: 0x95BC,
                0xE885: 0x95BB,
                0xE886: 0x95B9,
                0xE887: 0x95BE,
                0xE888: 0x95CA,
                0xE889: 0x6FF6,
                0xE88A: 0x95C3,
                0xE88B: 0x95CD,
                0xE88C: 0x95CC,
                0xE88D: 0x95D5,
                0xE88E: 0x95D4,
                0xE88F: 0x95D6,
                0xE890: 0x95DC,
                0xE891: 0x95E1,
                0xE892: 0x95E5,
                0xE893: 0x95E2,
                0xE894: 0x9621,
                0xE895: 0x9628,
                0xE896: 0x962E,
                0xE897: 0x962F,
                0xE898: 0x9642,
                0xE899: 0x964C,
                0xE89A: 0x964F,
                0xE89B: 0x964B,
                0xE89C: 0x9677,
                0xE89D: 0x965C,
                0xE89E: 0x965E,
                0xE89F: 0x965D,
                0xE8A0: 0x965F,
                0xE8A1: 0x9666,
                0xE8A2: 0x9672,
                0xE8A3: 0x966C,
                0xE8A4: 0x968D,
                0xE8A5: 0x9698,
                0xE8A6: 0x9695,
                0xE8A7: 0x9697,
                0xE8A8: 0x96AA,
                0xE8A9: 0x96A7,
                0xE8AA: 0x96B1,
                0xE8AB: 0x96B2,
                0xE8AC: 0x96B0,
                0xE8AD: 0x96B4,
                0xE8AE: 0x96B6,
                0xE8AF: 0x96B8,
                0xE8B0: 0x96B9,
                0xE8B1: 0x96CE,
                0xE8B2: 0x96CB,
                0xE8B3: 0x96C9,
                0xE8B4: 0x96CD,
                0xE8B5: 0x894D,
                0xE8B6: 0x96DC,
                0xE8B7: 0x970D,
                0xE8B8: 0x96D5,
                0xE8B9: 0x96F9,
                0xE8BA: 0x9704,
                0xE8BB: 0x9706,
                0xE8BC: 0x9708,
                0xE8BD: 0x9713,
                0xE8BE: 0x970E,
                0xE8BF: 0x9711,
                0xE8C0: 0x970F,
                0xE8C1: 0x9716,
                0xE8C2: 0x9719,
                0xE8C3: 0x9724,
                0xE8C4: 0x972A,
                0xE8C5: 0x9730,
                0xE8C6: 0x9739,
                0xE8C7: 0x973D,
                0xE8C8: 0x973E,
                0xE8C9: 0x9744,
                0xE8CA: 0x9746,
                0xE8CB: 0x9748,
                0xE8CC: 0x9742,
                0xE8CD: 0x9749,
                0xE8CE: 0x975C,
                0xE8CF: 0x9760,
                0xE8D0: 0x9764,
                0xE8D1: 0x9766,
                0xE8D2: 0x9768,
                0xE8D3: 0x52D2,
                0xE8D4: 0x976B,
                0xE8D5: 0x9771,
                0xE8D6: 0x9779,
                0xE8D7: 0x9785,
                0xE8D8: 0x977C,
                0xE8D9: 0x9781,
                0xE8DA: 0x977A,
                0xE8DB: 0x9786,
                0xE8DC: 0x978B,
                0xE8DD: 0x978F,
                0xE8DE: 0x9790,
                0xE8DF: 0x979C,
                0xE8E0: 0x97A8,
                0xE8E1: 0x97A6,
                0xE8E2: 0x97A3,
                0xE8E3: 0x97B3,
                0xE8E4: 0x97B4,
                0xE8E5: 0x97C3,
                0xE8E6: 0x97C6,
                0xE8E7: 0x97C8,
                0xE8E8: 0x97CB,
                0xE8E9: 0x97DC,
                0xE8EA: 0x97ED,
                0xE8EB: 0x9F4F,
                0xE8EC: 0x97F2,
                0xE8ED: 0x7ADF,
                0xE8EE: 0x97F6,
                0xE8EF: 0x97F5,
                0xE8F0: 0x980F,
                0xE8F1: 0x980C,
                0xE8F2: 0x9838,
                0xE8F3: 0x9824,
                0xE8F4: 0x9821,
                0xE8F5: 0x9837,
                0xE8F6: 0x983D,
                0xE8F7: 0x9846,
                0xE8F8: 0x984F,
                0xE8F9: 0x984B,
                0xE8FA: 0x986B,
                0xE8FB: 0x986F,
                0xE8FC: 0x9870,
                0xE940: 0x9871,
                0xE941: 0x9874,
                0xE942: 0x9873,
                0xE943: 0x98AA,
                0xE944: 0x98AF,
                0xE945: 0x98B1,
                0xE946: 0x98B6,
                0xE947: 0x98C4,
                0xE948: 0x98C3,
                0xE949: 0x98C6,
                0xE94A: 0x98E9,
                0xE94B: 0x98EB,
                0xE94C: 0x9903,
                0xE94D: 0x9909,
                0xE94E: 0x9912,
                0xE94F: 0x9914,
                0xE950: 0x9918,
                0xE951: 0x9921,
                0xE952: 0x991D,
                0xE953: 0x991E,
                0xE954: 0x9924,
                0xE955: 0x9920,
                0xE956: 0x992C,
                0xE957: 0x992E,
                0xE958: 0x993D,
                0xE959: 0x993E,
                0xE95A: 0x9942,
                0xE95B: 0x9949,
                0xE95C: 0x9945,
                0xE95D: 0x9950,
                0xE95E: 0x994B,
                0xE95F: 0x9951,
                0xE960: 0x9952,
                0xE961: 0x994C,
                0xE962: 0x9955,
                0xE963: 0x9997,
                0xE964: 0x9998,
                0xE965: 0x99A5,
                0xE966: 0x99AD,
                0xE967: 0x99AE,
                0xE968: 0x99BC,
                0xE969: 0x99DF,
                0xE96A: 0x99DB,
                0xE96B: 0x99DD,
                0xE96C: 0x99D8,
                0xE96D: 0x99D1,
                0xE96E: 0x99ED,
                0xE96F: 0x99EE,
                0xE970: 0x99F1,
                0xE971: 0x99F2,
                0xE972: 0x99FB,
                0xE973: 0x99F8,
                0xE974: 0x9A01,
                0xE975: 0x9A0F,
                0xE976: 0x9A05,
                0xE977: 0x99E2,
                0xE978: 0x9A19,
                0xE979: 0x9A2B,
                0xE97A: 0x9A37,
                0xE97B: 0x9A45,
                0xE97C: 0x9A42,
                0xE97D: 0x9A40,
                0xE97E: 0x9A43,
                0xE980: 0x9A3E,
                0xE981: 0x9A55,
                0xE982: 0x9A4D,
                0xE983: 0x9A5B,
                0xE984: 0x9A57,
                0xE985: 0x9A5F,
                0xE986: 0x9A62,
                0xE987: 0x9A65,
                0xE988: 0x9A64,
                0xE989: 0x9A69,
                0xE98A: 0x9A6B,
                0xE98B: 0x9A6A,
                0xE98C: 0x9AAD,
                0xE98D: 0x9AB0,
                0xE98E: 0x9ABC,
                0xE98F: 0x9AC0,
                0xE990: 0x9ACF,
                0xE991: 0x9AD1,
                0xE992: 0x9AD3,
                0xE993: 0x9AD4,
                0xE994: 0x9ADE,
                0xE995: 0x9ADF,
                0xE996: 0x9AE2,
                0xE997: 0x9AE3,
                0xE998: 0x9AE6,
                0xE999: 0x9AEF,
                0xE99A: 0x9AEB,
                0xE99B: 0x9AEE,
                0xE99C: 0x9AF4,
                0xE99D: 0x9AF1,
                0xE99E: 0x9AF7,
                0xE99F: 0x9AFB,
                0xE9A0: 0x9B06,
                0xE9A1: 0x9B18,
                0xE9A2: 0x9B1A,
                0xE9A3: 0x9B1F,
                0xE9A4: 0x9B22,
                0xE9A5: 0x9B23,
                0xE9A6: 0x9B25,
                0xE9A7: 0x9B27,
                0xE9A8: 0x9B28,
                0xE9A9: 0x9B29,
                0xE9AA: 0x9B2A,
                0xE9AB: 0x9B2E,
                0xE9AC: 0x9B2F,
                0xE9AD: 0x9B32,
                0xE9AE: 0x9B44,
                0xE9AF: 0x9B43,
                0xE9B0: 0x9B4F,
                0xE9B1: 0x9B4D,
                0xE9B2: 0x9B4E,
                0xE9B3: 0x9B51,
                0xE9B4: 0x9B58,
                0xE9B5: 0x9B74,
                0xE9B6: 0x9B93,
                0xE9B7: 0x9B83,
                0xE9B8: 0x9B91,
                0xE9B9: 0x9B96,
                0xE9BA: 0x9B97,
                0xE9BB: 0x9B9F,
                0xE9BC: 0x9BA0,
                0xE9BD: 0x9BA8,
                0xE9BE: 0x9BB4,
                0xE9BF: 0x9BC0,
                0xE9C0: 0x9BCA,
                0xE9C1: 0x9BB9,
                0xE9C2: 0x9BC6,
                0xE9C3: 0x9BCF,
                0xE9C4: 0x9BD1,
                0xE9C5: 0x9BD2,
                0xE9C6: 0x9BE3,
                0xE9C7: 0x9BE2,
                0xE9C8: 0x9BE4,
                0xE9C9: 0x9BD4,
                0xE9CA: 0x9BE1,
                0xE9CB: 0x9C3A,
                0xE9CC: 0x9BF2,
                0xE9CD: 0x9BF1,
                0xE9CE: 0x9BF0,
                0xE9CF: 0x9C15,
                0xE9D0: 0x9C14,
                0xE9D1: 0x9C09,
                0xE9D2: 0x9C13,
                0xE9D3: 0x9C0C,
                0xE9D4: 0x9C06,
                0xE9D5: 0x9C08,
                0xE9D6: 0x9C12,
                0xE9D7: 0x9C0A,
                0xE9D8: 0x9C04,
                0xE9D9: 0x9C2E,
                0xE9DA: 0x9C1B,
                0xE9DB: 0x9C25,
                0xE9DC: 0x9C24,
                0xE9DD: 0x9C21,
                0xE9DE: 0x9C30,
                0xE9DF: 0x9C47,
                0xE9E0: 0x9C32,
                0xE9E1: 0x9C46,
                0xE9E2: 0x9C3E,
                0xE9E3: 0x9C5A,
                0xE9E4: 0x9C60,
                0xE9E5: 0x9C67,
                0xE9E6: 0x9C76,
                0xE9E7: 0x9C78,
                0xE9E8: 0x9CE7,
                0xE9E9: 0x9CEC,
                0xE9EA: 0x9CF0,
                0xE9EB: 0x9D09,
                0xE9EC: 0x9D08,
                0xE9ED: 0x9CEB,
                0xE9EE: 0x9D03,
                0xE9EF: 0x9D06,
                0xE9F0: 0x9D2A,
                0xE9F1: 0x9D26,
                0xE9F2: 0x9DAF,
                0xE9F3: 0x9D23,
                0xE9F4: 0x9D1F,
                0xE9F5: 0x9D44,
                0xE9F6: 0x9D15,
                0xE9F7: 0x9D12,
                0xE9F8: 0x9D41,
                0xE9F9: 0x9D3F,
                0xE9FA: 0x9D3E,
                0xE9FB: 0x9D46,
                0xE9FC: 0x9D48,
                0xEA40: 0x9D5D,
                0xEA41: 0x9D5E,
                0xEA42: 0x9D64,
                0xEA43: 0x9D51,
                0xEA44: 0x9D50,
                0xEA45: 0x9D59,
                0xEA46: 0x9D72,
                0xEA47: 0x9D89,
                0xEA48: 0x9D87,
                0xEA49: 0x9DAB,
                0xEA4A: 0x9D6F,
                0xEA4B: 0x9D7A,
                0xEA4C: 0x9D9A,
                0xEA4D: 0x9DA4,
                0xEA4E: 0x9DA9,
                0xEA4F: 0x9DB2,
                0xEA50: 0x9DC4,
                0xEA51: 0x9DC1,
                0xEA52: 0x9DBB,
                0xEA53: 0x9DB8,
                0xEA54: 0x9DBA,
                0xEA55: 0x9DC6,
                0xEA56: 0x9DCF,
                0xEA57: 0x9DC2,
                0xEA58: 0x9DD9,
                0xEA59: 0x9DD3,
                0xEA5A: 0x9DF8,
                0xEA5B: 0x9DE6,
                0xEA5C: 0x9DED,
                0xEA5D: 0x9DEF,
                0xEA5E: 0x9DFD,
                0xEA5F: 0x9E1A,
                0xEA60: 0x9E1B,
                0xEA61: 0x9E1E,
                0xEA62: 0x9E75,
                0xEA63: 0x9E79,
                0xEA64: 0x9E7D,
                0xEA65: 0x9E81,
                0xEA66: 0x9E88,
                0xEA67: 0x9E8B,
                0xEA68: 0x9E8C,
                0xEA69: 0x9E92,
                0xEA6A: 0x9E95,
                0xEA6B: 0x9E91,
                0xEA6C: 0x9E9D,
                0xEA6D: 0x9EA5,
                0xEA6E: 0x9EA9,
                0xEA6F: 0x9EB8,
                0xEA70: 0x9EAA,
                0xEA71: 0x9EAD,
                0xEA72: 0x9761,
                0xEA73: 0x9ECC,
                0xEA74: 0x9ECE,
                0xEA75: 0x9ECF,
                0xEA76: 0x9ED0,
                0xEA77: 0x9ED4,
                0xEA78: 0x9EDC,
                0xEA79: 0x9EDE,
                0xEA7A: 0x9EDD,
                0xEA7B: 0x9EE0,
                0xEA7C: 0x9EE5,
                0xEA7D: 0x9EE8,
                0xEA7E: 0x9EEF,
                0xEA80: 0x9EF4,
                0xEA81: 0x9EF6,
                0xEA82: 0x9EF7,
                0xEA83: 0x9EF9,
                0xEA84: 0x9EFB,
                0xEA85: 0x9EFC,
                0xEA86: 0x9EFD,
                0xEA87: 0x9F07,
                0xEA88: 0x9F08,
                0xEA89: 0x76B7,
                0xEA8A: 0x9F15,
                0xEA8B: 0x9F21,
                0xEA8C: 0x9F2C,
                0xEA8D: 0x9F3E,
                0xEA8E: 0x9F4A,
                0xEA8F: 0x9F52,
                0xEA90: 0x9F54,
                0xEA91: 0x9F63,
                0xEA92: 0x9F5F,
                0xEA93: 0x9F60,
                0xEA94: 0x9F61,
                0xEA95: 0x9F66,
                0xEA96: 0x9F67,
                0xEA97: 0x9F6C,
                0xEA98: 0x9F6A,
                0xEA99: 0x9F77,
                0xEA9A: 0x9F72,
                0xEA9B: 0x9F76,
                0xEA9C: 0x9F95,
                0xEA9D: 0x9F9C,
                0xEA9E: 0x9FA0,
                0xEA9F: 0x582F,
                0xEAA0: 0x69C7,
                0xEAA1: 0x9059,
                0xEAA2: 0x7464,
                0xEAA3: 0x51DC,
                0xEAA4: 0x7199
            };
        /***/ },
        /* 9 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var GenericGF_1 = __webpack_require__(1);
            var GenericGFPoly_1 = __webpack_require__(2);
            function runEuclideanAlgorithm(field, a, b, R) {
                var _a;
                // Assume a's degree is >= b's
                if (a.degree() < b.degree()) _a = [
                    b,
                    a
                ], a = _a[0], b = _a[1];
                var rLast = a;
                var r = b;
                var tLast = field.zero;
                var t = field.one;
                // Run Euclidean algorithm until r's degree is less than R/2
                while(r.degree() >= R / 2){
                    var rLastLast = rLast;
                    var tLastLast = tLast;
                    rLast = r;
                    tLast = t;
                    // Divide rLastLast by rLast, with quotient in q and remainder in r
                    if (rLast.isZero()) // Euclidean algorithm already terminated?
                    return null;
                    r = rLastLast;
                    var q = field.zero;
                    var denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());
                    var dltInverse = field.inverse(denominatorLeadingTerm);
                    while(r.degree() >= rLast.degree() && !r.isZero()){
                        var degreeDiff = r.degree() - rLast.degree();
                        var scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);
                        q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));
                        r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));
                    }
                    t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);
                    if (r.degree() >= rLast.degree()) return null;
                }
                var sigmaTildeAtZero = t.getCoefficient(0);
                if (sigmaTildeAtZero === 0) return null;
                var inverse = field.inverse(sigmaTildeAtZero);
                return [
                    t.multiply(inverse),
                    r.multiply(inverse)
                ];
            }
            function findErrorLocations(field, errorLocator) {
                // This is a direct application of Chien's search
                var numErrors = errorLocator.degree();
                if (numErrors === 1) return [
                    errorLocator.getCoefficient(1)
                ];
                var result = new Array(numErrors);
                var errorCount = 0;
                for(var i = 1; i < field.size && errorCount < numErrors; i++)if (errorLocator.evaluateAt(i) === 0) {
                    result[errorCount] = field.inverse(i);
                    errorCount++;
                }
                if (errorCount !== numErrors) return null;
                return result;
            }
            function findErrorMagnitudes(field, errorEvaluator, errorLocations) {
                // This is directly applying Forney's Formula
                var s = errorLocations.length;
                var result = new Array(s);
                for(var i = 0; i < s; i++){
                    var xiInverse = field.inverse(errorLocations[i]);
                    var denominator = 1;
                    for(var j = 0; j < s; j++)if (i !== j) denominator = field.multiply(denominator, GenericGF_1.addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));
                    result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));
                    if (field.generatorBase !== 0) result[i] = field.multiply(result[i], xiInverse);
                }
                return result;
            }
            function decode(bytes, twoS) {
                var outputBytes = new Uint8ClampedArray(bytes.length);
                outputBytes.set(bytes);
                var field = new GenericGF_1.default(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1
                var poly = new GenericGFPoly_1.default(field, outputBytes);
                var syndromeCoefficients = new Uint8ClampedArray(twoS);
                var error = false;
                for(var s = 0; s < twoS; s++){
                    var evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));
                    syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;
                    if (evaluation !== 0) error = true;
                }
                if (!error) return outputBytes;
                var syndrome = new GenericGFPoly_1.default(field, syndromeCoefficients);
                var sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);
                if (sigmaOmega === null) return null;
                var errorLocations = findErrorLocations(field, sigmaOmega[0]);
                if (errorLocations == null) return null;
                var errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);
                for(var i = 0; i < errorLocations.length; i++){
                    var position = outputBytes.length - 1 - field.log(errorLocations[i]);
                    if (position < 0) return null;
                    outputBytes[position] = GenericGF_1.addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);
                }
                return outputBytes;
            }
            exports.decode = decode;
        /***/ },
        /* 10 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.VERSIONS = [
                {
                    infoBits: null,
                    versionNumber: 1,
                    alignmentPatternCenters: [],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 7,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 19
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 10,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 13,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 17,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 9
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 2,
                    alignmentPatternCenters: [
                        6,
                        18
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 10,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 34
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 16,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 28
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 22
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 3,
                    alignmentPatternCenters: [
                        6,
                        22
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 15,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 55
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 44
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 4,
                    alignmentPatternCenters: [
                        6,
                        26
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 80
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 32
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 24
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 16,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 9
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 5,
                    alignmentPatternCenters: [
                        6,
                        30
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 108
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 43
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 11
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 12
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 6,
                    alignmentPatternCenters: [
                        6,
                        34
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 68
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 16,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 27
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 19
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x07C94,
                    versionNumber: 7,
                    alignmentPatternCenters: [
                        6,
                        22,
                        38
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 78
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 31
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 13
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 14
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x085BC,
                    versionNumber: 8,
                    alignmentPatternCenters: [
                        6,
                        24,
                        42
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 97
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 38
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 39
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 18
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 19
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x09A99,
                    versionNumber: 9,
                    alignmentPatternCenters: [
                        6,
                        26,
                        46
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 36
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 37
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0A4D3,
                    versionNumber: 10,
                    alignmentPatternCenters: [
                        6,
                        28,
                        50
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 68
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 69
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 43
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 44
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 19
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 20
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0BBF6,
                    versionNumber: 11,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 81
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 50
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 51
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 23
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0C762,
                    versionNumber: 12,
                    alignmentPatternCenters: [
                        6,
                        32,
                        58
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 92
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 93
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 36
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 37
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 20
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 21
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0D847,
                    versionNumber: 13,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 107
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 37
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 38
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 20
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 21
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 11
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 12
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0E60D,
                    versionNumber: 14,
                    alignmentPatternCenters: [
                        6,
                        26,
                        46,
                        66
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 40
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 41
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0F928,
                    versionNumber: 15,
                    alignmentPatternCenters: [
                        6,
                        26,
                        48,
                        70
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 87
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 88
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 41
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 42
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x10B78,
                    versionNumber: 16,
                    alignmentPatternCenters: [
                        6,
                        26,
                        50,
                        74
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 98
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 99
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 19
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 20
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1145D,
                    versionNumber: 17,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        78
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 107
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 108
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 23
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x12A17,
                    versionNumber: 18,
                    alignmentPatternCenters: [
                        6,
                        30,
                        56,
                        82
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 120
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 121
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 9,
                                    dataCodewordsPerBlock: 43
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 44
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 23
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x13532,
                    versionNumber: 19,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 113
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 114
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 44
                                },
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 45
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 21
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 22
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 9,
                                    dataCodewordsPerBlock: 13
                                },
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 14
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x149A6,
                    versionNumber: 20,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62,
                        90
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 107
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 108
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 41
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 42
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x15683,
                    versionNumber: 21,
                    alignmentPatternCenters: [
                        6,
                        28,
                        50,
                        72,
                        94
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 116
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 117
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 42
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 23
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x168C9,
                    versionNumber: 22,
                    alignmentPatternCenters: [
                        6,
                        26,
                        50,
                        74,
                        98
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 111
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 112
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x177EC,
                    versionNumber: 23,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        74,
                        102
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 121
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 122
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x18EC4,
                    versionNumber: 24,
                    alignmentPatternCenters: [
                        6,
                        28,
                        54,
                        80,
                        106
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 117
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 118
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 30,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x191E1,
                    versionNumber: 25,
                    alignmentPatternCenters: [
                        6,
                        32,
                        58,
                        84,
                        110
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 106
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 107
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1AFAB,
                    versionNumber: 26,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86,
                        114
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 114
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 115
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 28,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 23
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 33,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1B08E,
                    versionNumber: 27,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62,
                        90,
                        118
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 122
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 123
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 23
                                },
                                {
                                    numBlocks: 26,
                                    dataCodewordsPerBlock: 24
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 28,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1CC1A,
                    versionNumber: 28,
                    alignmentPatternCenters: [
                        6,
                        26,
                        50,
                        74,
                        98,
                        122
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 117
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 118
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 31,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 31,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1D33F,
                    versionNumber: 29,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        78,
                        102,
                        126
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 116
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 117
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 21,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 23
                                },
                                {
                                    numBlocks: 37,
                                    dataCodewordsPerBlock: 24
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 26,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1ED75,
                    versionNumber: 30,
                    alignmentPatternCenters: [
                        6,
                        26,
                        52,
                        78,
                        104,
                        130
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 25,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 25,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1F250,
                    versionNumber: 31,
                    alignmentPatternCenters: [
                        6,
                        30,
                        56,
                        82,
                        108,
                        134
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 29,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 42,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 28,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x209D5,
                    versionNumber: 32,
                    alignmentPatternCenters: [
                        6,
                        34,
                        60,
                        86,
                        112,
                        138
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 115
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 35,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 35,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x216F0,
                    versionNumber: 33,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86,
                        114,
                        142
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 21,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 29,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 46,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x228BA,
                    versionNumber: 34,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62,
                        90,
                        118,
                        146
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 44,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 59,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x2379F,
                    versionNumber: 35,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        78,
                        102,
                        126,
                        150
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 121
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 122
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 26,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 39,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 41,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x24B0B,
                    versionNumber: 36,
                    alignmentPatternCenters: [
                        6,
                        24,
                        50,
                        76,
                        102,
                        128,
                        154
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 121
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 122
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 46,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 64,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x2542E,
                    versionNumber: 37,
                    alignmentPatternCenters: [
                        6,
                        28,
                        54,
                        80,
                        106,
                        132,
                        158
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 122
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 123
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 29,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 49,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 24,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 46,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x26A64,
                    versionNumber: 38,
                    alignmentPatternCenters: [
                        6,
                        32,
                        58,
                        84,
                        110,
                        136,
                        162
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 122
                                },
                                {
                                    numBlocks: 18,
                                    dataCodewordsPerBlock: 123
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 32,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 48,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 42,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 32,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x27541,
                    versionNumber: 39,
                    alignmentPatternCenters: [
                        6,
                        26,
                        54,
                        82,
                        110,
                        138,
                        166
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 20,
                                    dataCodewordsPerBlock: 117
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 118
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 40,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 43,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 67,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x28C69,
                    versionNumber: 40,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86,
                        114,
                        142,
                        170
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 118
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 119
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 18,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 31,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 20,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 61,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                }
            ];
        /***/ },
        /* 11 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix_1 = __webpack_require__(0);
            function squareToQuadrilateral(p1, p2, p3, p4) {
                var dx3 = p1.x - p2.x + p3.x - p4.x;
                var dy3 = p1.y - p2.y + p3.y - p4.y;
                if (dx3 === 0 && dy3 === 0) return {
                    a11: p2.x - p1.x,
                    a12: p2.y - p1.y,
                    a13: 0,
                    a21: p3.x - p2.x,
                    a22: p3.y - p2.y,
                    a23: 0,
                    a31: p1.x,
                    a32: p1.y,
                    a33: 1
                };
                else {
                    var dx1 = p2.x - p3.x;
                    var dx2 = p4.x - p3.x;
                    var dy1 = p2.y - p3.y;
                    var dy2 = p4.y - p3.y;
                    var denominator = dx1 * dy2 - dx2 * dy1;
                    var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;
                    var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;
                    return {
                        a11: p2.x - p1.x + a13 * p2.x,
                        a12: p2.y - p1.y + a13 * p2.y,
                        a13: a13,
                        a21: p4.x - p1.x + a23 * p4.x,
                        a22: p4.y - p1.y + a23 * p4.y,
                        a23: a23,
                        a31: p1.x,
                        a32: p1.y,
                        a33: 1
                    };
                }
            }
            function quadrilateralToSquare(p1, p2, p3, p4) {
                // Here, the adjoint serves as the inverse:
                var sToQ = squareToQuadrilateral(p1, p2, p3, p4);
                return {
                    a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,
                    a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,
                    a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,
                    a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,
                    a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,
                    a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,
                    a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,
                    a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,
                    a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21
                };
            }
            function times(a, b) {
                return {
                    a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,
                    a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,
                    a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,
                    a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,
                    a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,
                    a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,
                    a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,
                    a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,
                    a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33
                };
            }
            function extract(image, location) {
                var qToS = quadrilateralToSquare({
                    x: 3.5,
                    y: 3.5
                }, {
                    x: location.dimension - 3.5,
                    y: 3.5
                }, {
                    x: location.dimension - 6.5,
                    y: location.dimension - 6.5
                }, {
                    x: 3.5,
                    y: location.dimension - 3.5
                });
                var sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);
                var transform = times(sToQ, qToS);
                var matrix = BitMatrix_1.BitMatrix.createEmpty(location.dimension, location.dimension);
                var mappingFunction = function mappingFunction(x, y) {
                    var denominator = transform.a13 * x + transform.a23 * y + transform.a33;
                    return {
                        x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,
                        y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator
                    };
                };
                for(var y = 0; y < location.dimension; y++)for(var x = 0; x < location.dimension; x++){
                    var xValue = x + 0.5;
                    var yValue = y + 0.5;
                    var sourcePixel = mappingFunction(xValue, yValue);
                    matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));
                }
                return {
                    matrix: matrix,
                    mappingFunction: mappingFunction
                };
            }
            exports.extract = extract;
        /***/ },
        /* 12 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var MAX_FINDERPATTERNS_TO_SEARCH = 4;
            var MIN_QUAD_RATIO = 0.5;
            var MAX_QUAD_RATIO = 1.5;
            var distance = function distance(a, b) {
                return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));
            };
            function sum(values) {
                return values.reduce(function(a, b) {
                    return a + b;
                });
            }
            // Takes three finder patterns and organizes them into topLeft, topRight, etc
            function reorderFinderPatterns(pattern1, pattern2, pattern3) {
                var _a, _b, _c, _d;
                // Find distances between pattern centers
                var oneTwoDistance = distance(pattern1, pattern2);
                var twoThreeDistance = distance(pattern2, pattern3);
                var oneThreeDistance = distance(pattern1, pattern3);
                var bottomLeft;
                var topLeft;
                var topRight;
                // Assume one closest to other two is B; A and C will just be guesses at first
                if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) _a = [
                    pattern2,
                    pattern1,
                    pattern3
                ], bottomLeft = _a[0], topLeft = _a[1], topRight = _a[2];
                else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) _b = [
                    pattern1,
                    pattern2,
                    pattern3
                ], bottomLeft = _b[0], topLeft = _b[1], topRight = _b[2];
                else _c = [
                    pattern1,
                    pattern3,
                    pattern2
                ], bottomLeft = _c[0], topLeft = _c[1], topRight = _c[2];
                // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)
                // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then
                // we've got it flipped around and should swap topRight and bottomLeft.
                if ((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y) - (topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x) < 0) _d = [
                    topRight,
                    bottomLeft
                ], bottomLeft = _d[0], topRight = _d[1];
                return {
                    bottomLeft: bottomLeft,
                    topLeft: topLeft,
                    topRight: topRight
                };
            }
            // Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns
            function computeDimension(topLeft, topRight, bottomLeft, matrix) {
                var moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1
                sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 + sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 + sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;
                if (moduleSize < 1) throw new Error("Invalid module size");
                var topDimension = Math.round(distance(topLeft, topRight) / moduleSize);
                var sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);
                var dimension = Math.floor((topDimension + sideDimension) / 2) + 7;
                switch(dimension % 4){
                    case 0:
                        dimension++;
                        break;
                    case 2:
                        dimension--;
                        break;
                }
                return {
                    dimension: dimension,
                    moduleSize: moduleSize
                };
            }
            // Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.
            // Returns an array of elements, representing the pixel size of the black white run.
            // Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm
            function countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {
                var switchPoints = [
                    {
                        x: Math.floor(origin.x),
                        y: Math.floor(origin.y)
                    }
                ];
                var steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);
                var fromX;
                var fromY;
                var toX;
                var toY;
                if (steep) {
                    fromX = Math.floor(origin.y);
                    fromY = Math.floor(origin.x);
                    toX = Math.floor(end.y);
                    toY = Math.floor(end.x);
                } else {
                    fromX = Math.floor(origin.x);
                    fromY = Math.floor(origin.y);
                    toX = Math.floor(end.x);
                    toY = Math.floor(end.y);
                }
                var dx = Math.abs(toX - fromX);
                var dy = Math.abs(toY - fromY);
                var error = Math.floor(-dx / 2);
                var xStep = fromX < toX ? 1 : -1;
                var yStep = fromY < toY ? 1 : -1;
                var currentPixel = true;
                // Loop up until x == toX, but not beyond
                for(var x = fromX, y = fromY; x !== toX + xStep; x += xStep){
                    // Does current pixel mean we have moved white to black or vice versa?
                    // Scanning black in state 0,2 and white in state 1, so if we find the wrong
                    // color, advance to next state or end if we are in state 2 already
                    var realX = steep ? y : x;
                    var realY = steep ? x : y;
                    if (matrix.get(realX, realY) !== currentPixel) {
                        currentPixel = !currentPixel;
                        switchPoints.push({
                            x: realX,
                            y: realY
                        });
                        if (switchPoints.length === length + 1) break;
                    }
                    error += dy;
                    if (error > 0) {
                        if (y === toY) break;
                        y += yStep;
                        error -= dx;
                    }
                }
                var distances = [];
                for(var i = 0; i < length; i++)if (switchPoints[i] && switchPoints[i + 1]) distances.push(distance(switchPoints[i], switchPoints[i + 1]));
                else distances.push(0);
                return distances;
            }
            // Takes an origin point and an end point and counts the sizes of the black white run in the origin point
            // along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes
            // of the black white run. Takes a length which represents the number of switches from black to white to look for.
            function countBlackWhiteRun(origin, end, matrix, length) {
                var _a;
                var rise = end.y - origin.y;
                var run = end.x - origin.x;
                var towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));
                var awayFromEnd = countBlackWhiteRunTowardsPoint(origin, {
                    x: origin.x - run,
                    y: origin.y - rise
                }, matrix, Math.ceil(length / 2));
                var middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel
                return (_a = awayFromEnd.concat(middleValue)).concat.apply(_a, towardsEnd);
            }
            // Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the "error" -
            // that is the amount the run diverges from the expected ratio
            function scoreBlackWhiteRun(sequence, ratios) {
                var averageSize = sum(sequence) / sum(ratios);
                var error = 0;
                ratios.forEach(function(ratio, i) {
                    error += Math.pow(sequence[i] - ratio * averageSize, 2);
                });
                return {
                    averageSize: averageSize,
                    error: error
                };
            }
            // Takes an X,Y point and an array of sizes and scores the point against those ratios.
            // For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios
            // against that.
            function scorePattern(point, ratios, matrix) {
                try {
                    var horizontalRun = countBlackWhiteRun(point, {
                        x: -1,
                        y: point.y
                    }, matrix, ratios.length);
                    var verticalRun = countBlackWhiteRun(point, {
                        x: point.x,
                        y: -1
                    }, matrix, ratios.length);
                    var topLeftPoint = {
                        x: Math.max(0, point.x - point.y) - 1,
                        y: Math.max(0, point.y - point.x) - 1
                    };
                    var topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);
                    var bottomLeftPoint = {
                        x: Math.min(matrix.width, point.x + point.y) + 1,
                        y: Math.min(matrix.height, point.y + point.x) + 1
                    };
                    var bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);
                    var horzError = scoreBlackWhiteRun(horizontalRun, ratios);
                    var vertError = scoreBlackWhiteRun(verticalRun, ratios);
                    var diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);
                    var diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);
                    var ratioError = Math.sqrt(horzError.error * horzError.error + vertError.error * vertError.error + diagDownError.error * diagDownError.error + diagUpError.error * diagUpError.error);
                    var avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;
                    var sizeError = (Math.pow(horzError.averageSize - avgSize, 2) + Math.pow(vertError.averageSize - avgSize, 2) + Math.pow(diagDownError.averageSize - avgSize, 2) + Math.pow(diagUpError.averageSize - avgSize, 2)) / avgSize;
                    return ratioError + sizeError;
                } catch (_a) {
                    return Infinity;
                }
            }
            function recenterLocation(matrix, p) {
                var leftX = Math.round(p.x);
                while(matrix.get(leftX, Math.round(p.y)))leftX--;
                var rightX = Math.round(p.x);
                while(matrix.get(rightX, Math.round(p.y)))rightX++;
                var x = (leftX + rightX) / 2;
                var topY = Math.round(p.y);
                while(matrix.get(Math.round(x), topY))topY--;
                var bottomY = Math.round(p.y);
                while(matrix.get(Math.round(x), bottomY))bottomY++;
                var y = (topY + bottomY) / 2;
                return {
                    x: x,
                    y: y
                };
            }
            function locate(matrix) {
                var finderPatternQuads = [];
                var activeFinderPatternQuads = [];
                var alignmentPatternQuads = [];
                var activeAlignmentPatternQuads = [];
                var _loop_1 = function _loop_1(y) {
                    var length_1 = 0;
                    var lastBit = false;
                    var scans = [
                        0,
                        0,
                        0,
                        0,
                        0
                    ];
                    var _loop_2 = function _loop_2(x) {
                        var v = matrix.get(x, y);
                        if (v === lastBit) length_1++;
                        else {
                            scans = [
                                scans[1],
                                scans[2],
                                scans[3],
                                scans[4],
                                length_1
                            ];
                            length_1 = 1;
                            lastBit = v;
                            // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b
                            var averageFinderPatternBlocksize = sum(scans) / 7;
                            var validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize && Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && !v; // And make sure the current pixel is white since finder patterns are bordered in white
                            // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w
                            var averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;
                            var validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && v; // Is the current pixel black since alignment patterns are bordered in black
                            if (validFinderPattern) {
                                // Compute the start and end x values of the large center black square
                                var endX_1 = x - scans[3] - scans[4];
                                var startX_1 = endX_1 - scans[2];
                                var line = {
                                    startX: startX_1,
                                    endX: endX_1,
                                    y: y
                                };
                                // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                                // that line as the starting point.
                                var matchingQuads = activeFinderPatternQuads.filter(function(q) {
                                    return startX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX || endX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX || startX_1 <= q.bottom.startX && endX_1 >= q.bottom.endX && scans[2] / (q.bottom.endX - q.bottom.startX) < MAX_QUAD_RATIO && scans[2] / (q.bottom.endX - q.bottom.startX) > MIN_QUAD_RATIO;
                                });
                                if (matchingQuads.length > 0) matchingQuads[0].bottom = line;
                                else activeFinderPatternQuads.push({
                                    top: line,
                                    bottom: line
                                });
                            }
                            if (validAlignmentPattern) {
                                // Compute the start and end x values of the center black square
                                var endX_2 = x - scans[4];
                                var startX_2 = endX_2 - scans[3];
                                var line = {
                                    startX: startX_2,
                                    y: y,
                                    endX: endX_2
                                };
                                // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                                // that line as the starting point.
                                var matchingQuads = activeAlignmentPatternQuads.filter(function(q) {
                                    return startX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX || endX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX || startX_2 <= q.bottom.startX && endX_2 >= q.bottom.endX && scans[2] / (q.bottom.endX - q.bottom.startX) < MAX_QUAD_RATIO && scans[2] / (q.bottom.endX - q.bottom.startX) > MIN_QUAD_RATIO;
                                });
                                if (matchingQuads.length > 0) matchingQuads[0].bottom = line;
                                else activeAlignmentPatternQuads.push({
                                    top: line,
                                    bottom: line
                                });
                            }
                        }
                    };
                    for(var x = -1; x <= matrix.width; x++)_loop_2(x);
                    finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function(q) {
                        return q.bottom.y !== y && q.bottom.y - q.top.y >= 2;
                    }));
                    activeFinderPatternQuads = activeFinderPatternQuads.filter(function(q) {
                        return q.bottom.y === y;
                    });
                    alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads.filter(function(q) {
                        return q.bottom.y !== y;
                    }));
                    activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(function(q) {
                        return q.bottom.y === y;
                    });
                };
                for(var y = 0; y <= matrix.height; y++)_loop_1(y);
                finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function(q) {
                    return q.bottom.y - q.top.y >= 2;
                }));
                alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads);
                var finderPatternGroups = finderPatternQuads.filter(function(q) {
                    return q.bottom.y - q.top.y >= 2;
                }) // All quads must be at least 2px tall since the center square is larger than a block
                .map(function(q) {
                    var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
                    var y = (q.top.y + q.bottom.y + 1) / 2;
                    if (!matrix.get(Math.round(x), Math.round(y))) return;
                    var lengths = [
                        q.top.endX - q.top.startX,
                        q.bottom.endX - q.bottom.startX,
                        q.bottom.y - q.top.y + 1
                    ];
                    var size = sum(lengths) / lengths.length;
                    var score = scorePattern({
                        x: Math.round(x),
                        y: Math.round(y)
                    }, [
                        1,
                        1,
                        3,
                        1,
                        1
                    ], matrix);
                    return {
                        score: score,
                        x: x,
                        y: y,
                        size: size
                    };
                }).filter(function(q) {
                    return !!q;
                }) // Filter out any rejected quads from above
                .sort(function(a, b) {
                    return a.score - b.score;
                })// Now take the top finder pattern options and try to find 2 other options with a similar size.
                .map(function(point, i, finderPatterns) {
                    if (i > MAX_FINDERPATTERNS_TO_SEARCH) return null;
                    var otherPoints = finderPatterns.filter(function(p, ii) {
                        return i !== ii;
                    }).map(function(p) {
                        return {
                            x: p.x,
                            y: p.y,
                            score: p.score + Math.pow(p.size - point.size, 2) / point.size,
                            size: p.size
                        };
                    }).sort(function(a, b) {
                        return a.score - b.score;
                    });
                    if (otherPoints.length < 2) return null;
                    var score = point.score + otherPoints[0].score + otherPoints[1].score;
                    return {
                        points: [
                            point
                        ].concat(otherPoints.slice(0, 2)),
                        score: score
                    };
                }).filter(function(q) {
                    return !!q;
                }) // Filter out any rejected finder patterns from above
                .sort(function(a, b) {
                    return a.score - b.score;
                });
                if (finderPatternGroups.length === 0) return null;
                var _a = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]), topRight = _a.topRight, topLeft = _a.topLeft, bottomLeft = _a.bottomLeft;
                var alignment = findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft);
                var result = [];
                if (alignment) result.push({
                    alignmentPattern: {
                        x: alignment.alignmentPattern.x,
                        y: alignment.alignmentPattern.y
                    },
                    bottomLeft: {
                        x: bottomLeft.x,
                        y: bottomLeft.y
                    },
                    dimension: alignment.dimension,
                    topLeft: {
                        x: topLeft.x,
                        y: topLeft.y
                    },
                    topRight: {
                        x: topRight.x,
                        y: topRight.y
                    }
                });
                // We normally use the center of the quads as the location of the tracking points, which is optimal for most cases and will account
                // for a skew in the image. However, In some cases, a slight skew might not be real and instead be caused by image compression
                // errors and/or low resolution. For those cases, we'd be better off centering the point exactly in the middle of the black area. We
                // compute and return the location data for the naively centered points as it is little additional work and allows for multiple
                // attempts at decoding harder images.
                var midTopRight = recenterLocation(matrix, topRight);
                var midTopLeft = recenterLocation(matrix, topLeft);
                var midBottomLeft = recenterLocation(matrix, bottomLeft);
                var centeredAlignment = findAlignmentPattern(matrix, alignmentPatternQuads, midTopRight, midTopLeft, midBottomLeft);
                if (centeredAlignment) result.push({
                    alignmentPattern: {
                        x: centeredAlignment.alignmentPattern.x,
                        y: centeredAlignment.alignmentPattern.y
                    },
                    bottomLeft: {
                        x: midBottomLeft.x,
                        y: midBottomLeft.y
                    },
                    topLeft: {
                        x: midTopLeft.x,
                        y: midTopLeft.y
                    },
                    topRight: {
                        x: midTopRight.x,
                        y: midTopRight.y
                    },
                    dimension: centeredAlignment.dimension
                });
                if (result.length === 0) return null;
                return result;
            }
            exports.locate = locate;
            function findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft) {
                var _a;
                // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.
                // We'll use these to help find the alignment pattern but also later when we do the extraction.
                var dimension;
                var moduleSize;
                try {
                    _a = computeDimension(topLeft, topRight, bottomLeft, matrix), dimension = _a.dimension, moduleSize = _a.moduleSize;
                } catch (e) {
                    return null;
                }
                // Now find the alignment pattern
                var bottomRightFinderPattern = {
                    x: topRight.x - topLeft.x + bottomLeft.x,
                    y: topRight.y - topLeft.y + bottomLeft.y
                };
                var modulesBetweenFinderPatterns = (distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize;
                var correctionToTopLeft = 1 - 3 / modulesBetweenFinderPatterns;
                var expectedAlignmentPattern = {
                    x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),
                    y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y)
                };
                var alignmentPatterns = alignmentPatternQuads.map(function(q) {
                    var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
                    var y = (q.top.y + q.bottom.y + 1) / 2;
                    if (!matrix.get(Math.floor(x), Math.floor(y))) return;
                    var lengths = [
                        q.top.endX - q.top.startX,
                        q.bottom.endX - q.bottom.startX,
                        q.bottom.y - q.top.y + 1
                    ];
                    var size = sum(lengths) / lengths.length;
                    var sizeScore = scorePattern({
                        x: Math.floor(x),
                        y: Math.floor(y)
                    }, [
                        1,
                        1,
                        1
                    ], matrix);
                    var score = sizeScore + distance({
                        x: x,
                        y: y
                    }, expectedAlignmentPattern);
                    return {
                        x: x,
                        y: y,
                        score: score
                    };
                }).filter(function(v) {
                    return !!v;
                }).sort(function(a, b) {
                    return a.score - b.score;
                });
                // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern
                // so we can only use our best guess.
                var alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;
                return {
                    alignmentPattern: alignmentPattern,
                    dimension: dimension
                };
            }
        /***/ }
    ])["default"];
});


var $2b0cc46421a6d3fe$var$mediaStream;
var $2b0cc46421a6d3fe$var$video;
var $2b0cc46421a6d3fe$export$55e6c60a43cc74e2 = function stop_scan(callback) {
    document.getElementById("qr-screen").style.display = "none";
    if ($2b0cc46421a6d3fe$var$mediaStream) {
        $2b0cc46421a6d3fe$var$mediaStream.getTracks().forEach(function(track) {
            track.stop();
        });
        $2b0cc46421a6d3fe$var$mediaStream = null;
    }
    if (callback) {
        document.getElementById("qr-screen").style.display = "none";
        callback();
    }
};
var $2b0cc46421a6d3fe$export$be96fe42679d1b7e = function start_scan(callback) {
    document.getElementById("qr-screen").style.display = "block";
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) navigator.mediaDevices.getUserMedia({
        audio: false,
        video: {
            facingMode: "environment"
        }
    }).then(function(stream) {
        $2b0cc46421a6d3fe$var$mediaStream = stream; // Assign the stream to mediaStream variable
        $2b0cc46421a6d3fe$var$video = document.getElementsByTagName("video")[0];
        $2b0cc46421a6d3fe$var$video.muted = true;
        $2b0cc46421a6d3fe$var$video.playsInline = true; // Important for iOS
        $2b0cc46421a6d3fe$var$video.autoplay = true;
        $2b0cc46421a6d3fe$var$video.srcObject = stream;
        $2b0cc46421a6d3fe$var$video.onloadedmetadata = function() {
            $2b0cc46421a6d3fe$var$video.play();
            var barcodeCanvas = document.createElement("canvas");
            var barcodeContext = barcodeCanvas.getContext("2d");
            var intv = setInterval(function() {
                barcodeCanvas.width = $2b0cc46421a6d3fe$var$video.videoWidth;
                barcodeCanvas.height = $2b0cc46421a6d3fe$var$video.videoHeight;
                barcodeContext.drawImage($2b0cc46421a6d3fe$var$video, 0, 0, $2b0cc46421a6d3fe$var$video.videoWidth, $2b0cc46421a6d3fe$var$video.videoHeight);
                var imageData = barcodeContext.getImageData(0, 0, $2b0cc46421a6d3fe$var$video.videoWidth, $2b0cc46421a6d3fe$var$video.videoHeight);
                var idd = imageData.data;
                var code = (0, (/*@__PURE__*/$parcel$interopDefault($39e0152360893de3$exports)))(idd, $2b0cc46421a6d3fe$var$video.videoWidth, $2b0cc46421a6d3fe$var$video.videoHeight);
                if (code) {
                    clearInterval(intv);
                    $2b0cc46421a6d3fe$export$55e6c60a43cc74e2();
                    callback(code.data);
                }
            }, 1000);
        };
    }).catch(function(err) {
        alert("The following error occurred: " + err.name);
    });
    else alert("getUserMedia not supported");
};


var $9fbe31c6ff058869$exports = {};

var $aDbZK = parcelRequire("aDbZK");
/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/ (function(f) {
    var g;
    $9fbe31c6ff058869$exports = f();
})(function() {
    var define, module1, exports;
    return (function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = undefined;
                    if (!u && a) return a(o, !0);
                    if (i) return i(o, !0);
                    var f = new Error("Cannot find module '" + o + "'");
                    throw f.code = "MODULE_NOT_FOUND", f;
                }
                var l = n[o] = {
                    exports: {}
                };
                t[o][0].call(l.exports, function(e) {
                    var _$n = t[o][1][e];
                    return s(_$n ? _$n : e);
                }, l, l.exports, e, t, n, r);
            }
            return n[o].exports;
        }
        var i = undefined;
        for(var o = 0; o < r.length; o++)s(r[o]);
        return s;
    })({
        1: [
            function(_dereq_, module1, exports) {
                (function(global1) {
                    "use strict";
                    var Mutation = global1.MutationObserver || global1.WebKitMutationObserver;
                    var scheduleDrain;
                    if (Mutation) {
                        var called = 0;
                        var observer = new Mutation(nextTick);
                        var element = global1.document.createTextNode("");
                        observer.observe(element, {
                            characterData: true
                        });
                        scheduleDrain = function scheduleDrain() {
                            element.data = called = ++called % 2;
                        };
                    } else if (!global1.setImmediate && typeof global1.MessageChannel !== "undefined") {
                        var channel = new global1.MessageChannel();
                        channel.port1.onmessage = nextTick;
                        scheduleDrain = function scheduleDrain() {
                            channel.port2.postMessage(0);
                        };
                    } else if ("document" in global1 && "onreadystatechange" in global1.document.createElement("script")) scheduleDrain = function scheduleDrain() {
                        // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                        // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                        var scriptEl = global1.document.createElement("script");
                        scriptEl.onreadystatechange = function() {
                            nextTick();
                            scriptEl.onreadystatechange = null;
                            scriptEl.parentNode.removeChild(scriptEl);
                            scriptEl = null;
                        };
                        global1.document.documentElement.appendChild(scriptEl);
                    };
                    else scheduleDrain = function scheduleDrain() {
                        setTimeout(nextTick, 0);
                    };
                    var draining;
                    var queue = [];
                    //named nextTick for less confusing stack traces
                    function nextTick() {
                        draining = true;
                        var i, oldQueue;
                        var len = queue.length;
                        while(len){
                            oldQueue = queue;
                            queue = [];
                            i = -1;
                            while(++i < len)oldQueue[i]();
                            len = queue.length;
                        }
                        draining = false;
                    }
                    module1.exports = immediate;
                    function immediate(task) {
                        if (queue.push(task) === 1 && !draining) scheduleDrain();
                    }
                }).call(this, typeof $parcel$global !== "undefined" ? $parcel$global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {}
        ],
        2: [
            function(_dereq_, module1, exports) {
                "use strict";
                var immediate = _dereq_(1);
                /* istanbul ignore next */ function INTERNAL() {}
                var handlers = {};
                var REJECTED = [
                    "REJECTED"
                ];
                var FULFILLED = [
                    "FULFILLED"
                ];
                var PENDING = [
                    "PENDING"
                ];
                module1.exports = Promise1;
                function Promise1(resolver) {
                    if (typeof resolver !== "function") throw new TypeError("resolver must be a function");
                    this.state = PENDING;
                    this.queue = [];
                    this.outcome = void 0;
                    if (resolver !== INTERNAL) safelyResolveThenable(this, resolver);
                }
                Promise1.prototype["catch"] = function(onRejected) {
                    return this.then(null, onRejected);
                };
                Promise1.prototype.then = function(onFulfilled, onRejected) {
                    if (typeof onFulfilled !== "function" && this.state === FULFILLED || typeof onRejected !== "function" && this.state === REJECTED) return this;
                    var promise = new this.constructor(INTERNAL);
                    if (this.state !== PENDING) {
                        var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
                        unwrap(promise, resolver, this.outcome);
                    } else this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
                    return promise;
                };
                function QueueItem(promise, onFulfilled, onRejected) {
                    this.promise = promise;
                    if (typeof onFulfilled === "function") {
                        this.onFulfilled = onFulfilled;
                        this.callFulfilled = this.otherCallFulfilled;
                    }
                    if (typeof onRejected === "function") {
                        this.onRejected = onRejected;
                        this.callRejected = this.otherCallRejected;
                    }
                }
                QueueItem.prototype.callFulfilled = function(value) {
                    handlers.resolve(this.promise, value);
                };
                QueueItem.prototype.otherCallFulfilled = function(value) {
                    unwrap(this.promise, this.onFulfilled, value);
                };
                QueueItem.prototype.callRejected = function(value) {
                    handlers.reject(this.promise, value);
                };
                QueueItem.prototype.otherCallRejected = function(value) {
                    unwrap(this.promise, this.onRejected, value);
                };
                function unwrap(promise, func, value) {
                    immediate(function() {
                        var returnValue;
                        try {
                            returnValue = func(value);
                        } catch (e) {
                            return handlers.reject(promise, e);
                        }
                        if (returnValue === promise) handlers.reject(promise, new TypeError("Cannot resolve promise with itself"));
                        else handlers.resolve(promise, returnValue);
                    });
                }
                handlers.resolve = function(self1, value) {
                    var result = tryCatch(getThen, value);
                    if (result.status === "error") return handlers.reject(self1, result.value);
                    var thenable = result.value;
                    if (thenable) safelyResolveThenable(self1, thenable);
                    else {
                        self1.state = FULFILLED;
                        self1.outcome = value;
                        var i = -1;
                        var len = self1.queue.length;
                        while(++i < len)self1.queue[i].callFulfilled(value);
                    }
                    return self1;
                };
                handlers.reject = function(self1, error) {
                    self1.state = REJECTED;
                    self1.outcome = error;
                    var i = -1;
                    var len = self1.queue.length;
                    while(++i < len)self1.queue[i].callRejected(error);
                    return self1;
                };
                function getThen(obj) {
                    // Make sure we only access the accessor once as required by the spec
                    var then = obj && obj.then;
                    if (obj && (typeof obj === "object" || typeof obj === "function") && typeof then === "function") return function appyThen() {
                        then.apply(obj, arguments);
                    };
                }
                function safelyResolveThenable(self1, thenable) {
                    // Either fulfill, reject or reject with error
                    var called = false;
                    function onError(value) {
                        if (called) return;
                        called = true;
                        handlers.reject(self1, value);
                    }
                    function onSuccess(value) {
                        if (called) return;
                        called = true;
                        handlers.resolve(self1, value);
                    }
                    function tryToUnwrap() {
                        thenable(onSuccess, onError);
                    }
                    var result = tryCatch(tryToUnwrap);
                    if (result.status === "error") onError(result.value);
                }
                function tryCatch(func, value) {
                    var out = {};
                    try {
                        out.value = func(value);
                        out.status = "success";
                    } catch (e) {
                        out.status = "error";
                        out.value = e;
                    }
                    return out;
                }
                Promise1.resolve = resolve;
                function resolve(value) {
                    if (value instanceof this) return value;
                    return handlers.resolve(new this(INTERNAL), value);
                }
                Promise1.reject = reject;
                function reject(reason) {
                    var promise = new this(INTERNAL);
                    return handlers.reject(promise, reason);
                }
                Promise1.all = all;
                function all(iterable) {
                    var self1 = this;
                    if (Object.prototype.toString.call(iterable) !== "[object Array]") return this.reject(new TypeError("must be an array"));
                    var len = iterable.length;
                    var called = false;
                    if (!len) return this.resolve([]);
                    var values = new Array(len);
                    var resolved = 0;
                    var i = -1;
                    var promise = new this(INTERNAL);
                    while(++i < len)allResolver(iterable[i], i);
                    return promise;
                    function allResolver(value, i) {
                        self1.resolve(value).then(resolveFromAll, function(error) {
                            if (!called) {
                                called = true;
                                handlers.reject(promise, error);
                            }
                        });
                        function resolveFromAll(outValue) {
                            values[i] = outValue;
                            if (++resolved === len && !called) {
                                called = true;
                                handlers.resolve(promise, values);
                            }
                        }
                    }
                }
                Promise1.race = race;
                function race(iterable) {
                    var self1 = this;
                    if (Object.prototype.toString.call(iterable) !== "[object Array]") return this.reject(new TypeError("must be an array"));
                    var len = iterable.length;
                    var called = false;
                    if (!len) return this.resolve([]);
                    var i = -1;
                    var promise = new this(INTERNAL);
                    while(++i < len)resolver(iterable[i]);
                    return promise;
                    function resolver(value) {
                        self1.resolve(value).then(function(response) {
                            if (!called) {
                                called = true;
                                handlers.resolve(promise, response);
                            }
                        }, function(error) {
                            if (!called) {
                                called = true;
                                handlers.reject(promise, error);
                            }
                        });
                    }
                }
            },
            {
                "1": 1
            }
        ],
        3: [
            function(_dereq_, module1, exports) {
                (function(global1) {
                    "use strict";
                    if (typeof global1.Promise !== "function") global1.Promise = _dereq_(2);
                }).call(this, typeof $parcel$global !== "undefined" ? $parcel$global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "2": 2
            }
        ],
        4: [
            function(_dereq_, module1, exports) {
                "use strict";
                var _typeof = typeof Symbol === "function" && (0, $aDbZK._)(Symbol.iterator) === "symbol" ? function _typeof(obj) {
                    return typeof obj === "undefined" ? "undefined" : (0, $aDbZK._)(obj);
                } : function(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : (0, $aDbZK._)(obj);
                };
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }
                function getIDB() {
                    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */ try {
                        if (typeof indexedDB !== "undefined") return indexedDB;
                        if (typeof webkitIndexedDB !== "undefined") return webkitIndexedDB;
                        if (typeof mozIndexedDB !== "undefined") return mozIndexedDB;
                        if (typeof OIndexedDB !== "undefined") return OIndexedDB;
                        if (typeof msIndexedDB !== "undefined") return msIndexedDB;
                    } catch (e) {
                        return;
                    }
                }
                var idb = getIDB();
                function isIndexedDBValid() {
                    try {
                        // Initialize IndexedDB; fall back to vendor-prefixed versions
                        // if needed.
                        if (!idb || !idb.open) return false;
                        // We mimic PouchDB here;
                        //
                        // We test for openDatabase because IE Mobile identifies itself
                        // as Safari. Oh the lulz...
                        var isSafari = typeof openDatabase !== "undefined" && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);
                        var hasFetch = typeof fetch === "function" && fetch.toString().indexOf("[native code") !== -1;
                        // Safari <10.1 does not meet our requirements for IDB support
                        // (see: https://github.com/pouchdb/pouchdb/issues/5572).
                        // Safari 10.1 shipped with fetch, we can use that to detect it.
                        // Note: this creates issues with `window.fetch` polyfills and
                        // overrides; see:
                        // https://github.com/localForage/localForage/issues/856
                        return (!isSafari || hasFetch) && typeof indexedDB !== "undefined" && // some outdated implementations of IDB that appear on Samsung
                        // and HTC Android devices <4.4 are missing IDBKeyRange
                        // See: https://github.com/mozilla/localForage/issues/128
                        // See: https://github.com/mozilla/localForage/issues/272
                        typeof IDBKeyRange !== "undefined";
                    } catch (e) {
                        return false;
                    }
                }
                // Abstracts constructing a Blob object, so it also works in older
                // browsers that don't support the native Blob constructor. (i.e.
                // old QtWebKit versions, at least).
                // Abstracts constructing a Blob object, so it also works in older
                // browsers that don't support the native Blob constructor. (i.e.
                // old QtWebKit versions, at least).
                function createBlob(parts, properties) {
                    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */ parts = parts || [];
                    properties = properties || {};
                    try {
                        return new Blob(parts, properties);
                    } catch (e) {
                        if (e.name !== "TypeError") throw e;
                        var Builder = typeof BlobBuilder !== "undefined" ? BlobBuilder : typeof MSBlobBuilder !== "undefined" ? MSBlobBuilder : typeof MozBlobBuilder !== "undefined" ? MozBlobBuilder : WebKitBlobBuilder;
                        var builder = new Builder();
                        for(var i = 0; i < parts.length; i += 1)builder.append(parts[i]);
                        return builder.getBlob(properties.type);
                    }
                }
                // This is CommonJS because lie is an external dependency, so Rollup
                // can just ignore it.
                if (typeof Promise === "undefined") // In the "nopromises" build this will just throw if you don't have
                // a global promise object, but it would throw anyway later.
                _dereq_(3);
                var Promise$1 = Promise;
                function executeCallback(promise, callback) {
                    if (callback) promise.then(function(result) {
                        callback(null, result);
                    }, function(error) {
                        callback(error);
                    });
                }
                function executeTwoCallbacks(promise, callback, errorCallback) {
                    if (typeof callback === "function") promise.then(callback);
                    if (typeof errorCallback === "function") promise["catch"](errorCallback);
                }
                function normalizeKey(key) {
                    // Cast the key to a string, as that's all we can set as a key.
                    if (typeof key !== "string") {
                        console.warn(key + " used as a key, but it is not a string.");
                        key = String(key);
                    }
                    return key;
                }
                function getCallback() {
                    if (arguments.length && typeof arguments[arguments.length - 1] === "function") return arguments[arguments.length - 1];
                }
                // Some code originally from async_storage.js in
                // [Gaia](https://github.com/mozilla-b2g/gaia).
                var DETECT_BLOB_SUPPORT_STORE = "local-forage-detect-blob-support";
                var supportsBlobs = void 0;
                var dbContexts = {};
                var toString = Object.prototype.toString;
                // Transaction Modes
                var READ_ONLY = "readonly";
                var READ_WRITE = "readwrite";
                // Transform a binary string to an array buffer, because otherwise
                // weird stuff happens when you try to work with the binary string directly.
                // It is known.
                // From http://stackoverflow.com/questions/14967647/ (continues on next line)
                // encode-decode-image-with-base64-breaks-image (2013-04-21)
                function _binStringToArrayBuffer(bin) {
                    var _$length = bin.length;
                    var buf = new ArrayBuffer(_$length);
                    var arr = new Uint8Array(buf);
                    for(var i = 0; i < _$length; i++)arr[i] = bin.charCodeAt(i);
                    return buf;
                }
                //
                // Blobs are not supported in all versions of IndexedDB, notably
                // Chrome <37 and Android <5. In those versions, storing a blob will throw.
                //
                // Various other blob bugs exist in Chrome v37-42 (inclusive).
                // Detecting them is expensive and confusing to users, and Chrome 37-42
                // is at very low usage worldwide, so we do a hacky userAgent check instead.
                //
                // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
                // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
                // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
                //
                // Code borrowed from PouchDB. See:
                // https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
                //
                function _checkBlobSupportWithoutCaching(idb) {
                    return new Promise$1(function(resolve) {
                        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
                        var blob = createBlob([
                            ""
                        ]);
                        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, "key");
                        txn.onabort = function(e) {
                            // If the transaction aborts now its due to not being able to
                            // write to the database, likely due to the disk being full
                            e.preventDefault();
                            e.stopPropagation();
                            resolve(false);
                        };
                        txn.oncomplete = function() {
                            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
                            var matchedEdge = navigator.userAgent.match(/Edge\//);
                            // MS Edge pretends to be Chrome 42:
                            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
                            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
                        };
                    })["catch"](function() {
                        return false; // error, so assume unsupported
                    });
                }
                function _checkBlobSupport(idb) {
                    if (typeof supportsBlobs === "boolean") return Promise$1.resolve(supportsBlobs);
                    return _checkBlobSupportWithoutCaching(idb).then(function(value) {
                        supportsBlobs = value;
                        return supportsBlobs;
                    });
                }
                function _deferReadiness(dbInfo) {
                    var dbContext = dbContexts[dbInfo.name];
                    // Create a deferred object representing the current database operation.
                    var deferredOperation = {};
                    deferredOperation.promise = new Promise$1(function(resolve, reject) {
                        deferredOperation.resolve = resolve;
                        deferredOperation.reject = reject;
                    });
                    // Enqueue the deferred operation.
                    dbContext.deferredOperations.push(deferredOperation);
                    // Chain its promise to the database readiness.
                    if (!dbContext.dbReady) dbContext.dbReady = deferredOperation.promise;
                    else dbContext.dbReady = dbContext.dbReady.then(function() {
                        return deferredOperation.promise;
                    });
                }
                function _advanceReadiness(dbInfo) {
                    var dbContext = dbContexts[dbInfo.name];
                    // Dequeue a deferred operation.
                    var deferredOperation = dbContext.deferredOperations.pop();
                    // Resolve its promise (which is part of the database readiness
                    // chain of promises).
                    if (deferredOperation) {
                        deferredOperation.resolve();
                        return deferredOperation.promise;
                    }
                }
                function _rejectReadiness(dbInfo, err) {
                    var dbContext = dbContexts[dbInfo.name];
                    // Dequeue a deferred operation.
                    var deferredOperation = dbContext.deferredOperations.pop();
                    // Reject its promise (which is part of the database readiness
                    // chain of promises).
                    if (deferredOperation) {
                        deferredOperation.reject(err);
                        return deferredOperation.promise;
                    }
                }
                function _getConnection(dbInfo, upgradeNeeded) {
                    return new Promise$1(function(resolve, reject) {
                        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();
                        if (dbInfo.db) {
                            if (upgradeNeeded) {
                                _deferReadiness(dbInfo);
                                dbInfo.db.close();
                            } else return resolve(dbInfo.db);
                        }
                        var dbArgs = [
                            dbInfo.name
                        ];
                        if (upgradeNeeded) dbArgs.push(dbInfo.version);
                        var openreq = idb.open.apply(idb, dbArgs);
                        if (upgradeNeeded) openreq.onupgradeneeded = function(e) {
                            var db = openreq.result;
                            try {
                                db.createObjectStore(dbInfo.storeName);
                                if (e.oldVersion <= 1) // Added when support for blob shims was added
                                db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                            } catch (ex) {
                                if (ex.name === "ConstraintError") console.warn('The database "' + dbInfo.name + '"' + " has been upgraded from version " + e.oldVersion + " to version " + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                                else throw ex;
                            }
                        };
                        openreq.onerror = function(e) {
                            e.preventDefault();
                            reject(openreq.error);
                        };
                        openreq.onsuccess = function() {
                            var db = openreq.result;
                            db.onversionchange = function(e) {
                                // Triggered when the database is modified (e.g. adding an objectStore) or
                                // deleted (even when initiated by other sessions in different tabs).
                                // Closing the connection here prevents those operations from being blocked.
                                // If the database is accessed again later by this instance, the connection
                                // will be reopened or the database recreated as needed.
                                e.target.close();
                            };
                            resolve(db);
                            _advanceReadiness(dbInfo);
                        };
                    });
                }
                function _getOriginalConnection(dbInfo) {
                    return _getConnection(dbInfo, false);
                }
                function _getUpgradedConnection(dbInfo) {
                    return _getConnection(dbInfo, true);
                }
                function _isUpgradeNeeded(dbInfo, defaultVersion) {
                    if (!dbInfo.db) return true;
                    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
                    var isDowngrade = dbInfo.version < dbInfo.db.version;
                    var isUpgrade = dbInfo.version > dbInfo.db.version;
                    if (isDowngrade) {
                        // If the version is not the default one
                        // then warn for impossible downgrade.
                        if (dbInfo.version !== defaultVersion) console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + " to version " + dbInfo.version + ".");
                        // Align the versions to prevent errors.
                        dbInfo.version = dbInfo.db.version;
                    }
                    if (isUpgrade || isNewStore) {
                        // If the store is new then increment the version (if needed).
                        // This will trigger an "upgradeneeded" event which is required
                        // for creating a store.
                        if (isNewStore) {
                            var incVersion = dbInfo.db.version + 1;
                            if (incVersion > dbInfo.version) dbInfo.version = incVersion;
                        }
                        return true;
                    }
                    return false;
                }
                // encode a blob for indexeddb engines that don't support blobs
                function _encodeBlob(blob) {
                    return new Promise$1(function(resolve, reject) {
                        var reader = new FileReader();
                        reader.onerror = reject;
                        reader.onloadend = function(e) {
                            var base64 = btoa(e.target.result || "");
                            resolve({
                                __local_forage_encoded_blob: true,
                                data: base64,
                                type: blob.type
                            });
                        };
                        reader.readAsBinaryString(blob);
                    });
                }
                // decode an encoded blob
                function _decodeBlob(encodedBlob) {
                    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
                    return createBlob([
                        arrayBuff
                    ], {
                        type: encodedBlob.type
                    });
                }
                // is this one of our fancy encoded blobs?
                function _isEncodedBlob(value) {
                    return value && value.__local_forage_encoded_blob;
                }
                // Specialize the default `ready()` function by making it dependent
                // on the current database operations. Thus, the driver will be actually
                // ready when it's been initialized (default) *and* there are no pending
                // operations on the database (initiated by some other instances).
                function _fullyReady(callback) {
                    var self1 = this;
                    var promise = self1._initReady().then(function() {
                        var dbContext = dbContexts[self1._dbInfo.name];
                        if (dbContext && dbContext.dbReady) return dbContext.dbReady;
                    });
                    executeTwoCallbacks(promise, callback, callback);
                    return promise;
                }
                // Try to establish a new db connection to replace the
                // current one which is broken (i.e. experiencing
                // InvalidStateError while creating a transaction).
                function _tryReconnect(dbInfo) {
                    _deferReadiness(dbInfo);
                    var dbContext = dbContexts[dbInfo.name];
                    var forages = dbContext.forages;
                    for(var i = 0; i < forages.length; i++){
                        var forage = forages[i];
                        if (forage._dbInfo.db) {
                            forage._dbInfo.db.close();
                            forage._dbInfo.db = null;
                        }
                    }
                    dbInfo.db = null;
                    return _getOriginalConnection(dbInfo).then(function(db) {
                        dbInfo.db = db;
                        if (_isUpgradeNeeded(dbInfo)) // Reopen the database for upgrading.
                        return _getUpgradedConnection(dbInfo);
                        return db;
                    }).then(function(db) {
                        // store the latest db reference
                        // in case the db was upgraded
                        dbInfo.db = dbContext.db = db;
                        for(var i = 0; i < forages.length; i++)forages[i]._dbInfo.db = db;
                    })["catch"](function(err) {
                        _rejectReadiness(dbInfo, err);
                        throw err;
                    });
                }
                // FF doesn't like Promises (micro-tasks) and IDDB store operations,
                // so we have to do it with callbacks
                function createTransaction(dbInfo, mode, callback, retries) {
                    if (retries === undefined) retries = 1;
                    try {
                        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
                        callback(null, tx);
                    } catch (err) {
                        if (retries > 0 && (!dbInfo.db || err.name === "InvalidStateError" || err.name === "NotFoundError")) return Promise$1.resolve().then(function() {
                            if (!dbInfo.db || err.name === "NotFoundError" && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
                                // increase the db version, to create the new ObjectStore
                                if (dbInfo.db) dbInfo.version = dbInfo.db.version + 1;
                                // Reopen the database for upgrading.
                                return _getUpgradedConnection(dbInfo);
                            }
                        }).then(function() {
                            return _tryReconnect(dbInfo).then(function() {
                                createTransaction(dbInfo, mode, callback, retries - 1);
                            });
                        })["catch"](callback);
                        callback(err);
                    }
                }
                function createDbContext() {
                    return {
                        // Running localForages sharing a database.
                        forages: [],
                        // Shared database.
                        db: null,
                        // Database readiness (promise).
                        dbReady: null,
                        // Deferred operations on the database.
                        deferredOperations: []
                    };
                }
                // Open the IndexedDB database (automatically creates one if one didn't
                // previously exist), using any options set in the config.
                function _initStorage(options) {
                    var self1 = this;
                    var dbInfo = {
                        db: null
                    };
                    if (options) for(var i in options)dbInfo[i] = options[i];
                    // Get the current context of the database;
                    var dbContext = dbContexts[dbInfo.name];
                    // ...or create a new context.
                    if (!dbContext) {
                        dbContext = createDbContext();
                        // Register the new context in the global container.
                        dbContexts[dbInfo.name] = dbContext;
                    }
                    // Register itself as a running localForage in the current context.
                    dbContext.forages.push(self1);
                    // Replace the default `ready()` function with the specialized one.
                    if (!self1._initReady) {
                        self1._initReady = self1.ready;
                        self1.ready = _fullyReady;
                    }
                    // Create an array of initialization states of the related localForages.
                    var initPromises = [];
                    function ignoreErrors() {
                        // Don't handle errors here,
                        // just makes sure related localForages aren't pending.
                        return Promise$1.resolve();
                    }
                    for(var j = 0; j < dbContext.forages.length; j++){
                        var forage = dbContext.forages[j];
                        if (forage !== self1) // Don't wait for itself...
                        initPromises.push(forage._initReady()["catch"](ignoreErrors));
                    }
                    // Take a snapshot of the related localForages.
                    var forages = dbContext.forages.slice(0);
                    // Initialize the connection process only when
                    // all the related localForages aren't pending.
                    return Promise$1.all(initPromises).then(function() {
                        dbInfo.db = dbContext.db;
                        // Get the connection or open a new one without upgrade.
                        return _getOriginalConnection(dbInfo);
                    }).then(function(db) {
                        dbInfo.db = db;
                        if (_isUpgradeNeeded(dbInfo, self1._defaultConfig.version)) // Reopen the database for upgrading.
                        return _getUpgradedConnection(dbInfo);
                        return db;
                    }).then(function(db) {
                        dbInfo.db = dbContext.db = db;
                        self1._dbInfo = dbInfo;
                        // Share the final connection amongst related localForages.
                        for(var k = 0; k < forages.length; k++){
                            var forage = forages[k];
                            if (forage !== self1) {
                                // Self is already up-to-date.
                                forage._dbInfo.db = dbInfo.db;
                                forage._dbInfo.version = dbInfo.version;
                            }
                        }
                    });
                }
                function getItem(key, callback) {
                    var self1 = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            createTransaction(self1._dbInfo, READ_ONLY, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self1._dbInfo.storeName);
                                    var req = store.get(key);
                                    req.onsuccess = function() {
                                        var value = req.result;
                                        if (value === undefined) value = null;
                                        if (_isEncodedBlob(value)) value = _decodeBlob(value);
                                        resolve(value);
                                    };
                                    req.onerror = function() {
                                        reject(req.error);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Iterate over all items stored in database.
                function iterate(iterator, callback) {
                    var self1 = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            createTransaction(self1._dbInfo, READ_ONLY, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self1._dbInfo.storeName);
                                    var req = store.openCursor();
                                    var iterationNumber = 1;
                                    req.onsuccess = function() {
                                        var cursor = req.result;
                                        if (cursor) {
                                            var value = cursor.value;
                                            if (_isEncodedBlob(value)) value = _decodeBlob(value);
                                            var result = iterator(value, cursor.key, iterationNumber++);
                                            // when the iterator callback returns any
                                            // (non-`undefined`) value, then we stop
                                            // the iteration immediately
                                            if (result !== void 0) resolve(result);
                                            else cursor["continue"]();
                                        } else resolve();
                                    };
                                    req.onerror = function() {
                                        reject(req.error);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function setItem(key, value, callback) {
                    var self1 = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        var dbInfo;
                        self1.ready().then(function() {
                            dbInfo = self1._dbInfo;
                            if (toString.call(value) === "[object Blob]") return _checkBlobSupport(dbInfo.db).then(function(blobSupport) {
                                if (blobSupport) return value;
                                return _encodeBlob(value);
                            });
                            return value;
                        }).then(function(value) {
                            createTransaction(self1._dbInfo, READ_WRITE, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self1._dbInfo.storeName);
                                    // The reason we don't _save_ null is because IE 10 does
                                    // not support saving the `null` type in IndexedDB. How
                                    // ironic, given the bug below!
                                    // See: https://github.com/mozilla/localForage/issues/161
                                    if (value === null) value = undefined;
                                    var req = store.put(value, key);
                                    transaction.oncomplete = function() {
                                        // Cast to undefined so the value passed to
                                        // callback/promise is the same as what one would get out
                                        // of `getItem()` later. This leads to some weirdness
                                        // (setItem('foo', undefined) will return `null`), but
                                        // it's not my fault localStorage is our baseline and that
                                        // it's weird.
                                        if (value === undefined) value = null;
                                        resolve(value);
                                    };
                                    transaction.onabort = transaction.onerror = function() {
                                        var _$err = req.error ? req.error : req.transaction.error;
                                        reject(_$err);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function removeItem(key, callback) {
                    var self1 = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            createTransaction(self1._dbInfo, READ_WRITE, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self1._dbInfo.storeName);
                                    // We use a Grunt task to make this safe for IE and some
                                    // versions of Android (including those used by Cordova).
                                    // Normally IE won't like `.delete()` and will insist on
                                    // using `['delete']()`, but we have a build step that
                                    // fixes this for us now.
                                    var req = store["delete"](key);
                                    transaction.oncomplete = function() {
                                        resolve();
                                    };
                                    transaction.onerror = function() {
                                        reject(req.error);
                                    };
                                    // The request will be also be aborted if we've exceeded our storage
                                    // space.
                                    transaction.onabort = function() {
                                        var _$err = req.error ? req.error : req.transaction.error;
                                        reject(_$err);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function clear(callback) {
                    var self1 = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            createTransaction(self1._dbInfo, READ_WRITE, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self1._dbInfo.storeName);
                                    var req = store.clear();
                                    transaction.oncomplete = function() {
                                        resolve();
                                    };
                                    transaction.onabort = transaction.onerror = function() {
                                        var _$err = req.error ? req.error : req.transaction.error;
                                        reject(_$err);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function length(callback) {
                    var self1 = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            createTransaction(self1._dbInfo, READ_ONLY, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self1._dbInfo.storeName);
                                    var req = store.count();
                                    req.onsuccess = function() {
                                        resolve(req.result);
                                    };
                                    req.onerror = function() {
                                        reject(req.error);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function key(n, callback) {
                    var self1 = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        if (n < 0) {
                            resolve(null);
                            return;
                        }
                        self1.ready().then(function() {
                            createTransaction(self1._dbInfo, READ_ONLY, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self1._dbInfo.storeName);
                                    var advanced = false;
                                    var req = store.openKeyCursor();
                                    req.onsuccess = function() {
                                        var cursor = req.result;
                                        if (!cursor) {
                                            // this means there weren't enough keys
                                            resolve(null);
                                            return;
                                        }
                                        if (n === 0) // We have the first key, return it if that's what they
                                        // wanted.
                                        resolve(cursor.key);
                                        else if (!advanced) {
                                            // Otherwise, ask the cursor to skip ahead n
                                            // records.
                                            advanced = true;
                                            cursor.advance(n);
                                        } else // When we get here, we've got the nth key.
                                        resolve(cursor.key);
                                    };
                                    req.onerror = function() {
                                        reject(req.error);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function keys(callback) {
                    var self1 = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            createTransaction(self1._dbInfo, READ_ONLY, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self1._dbInfo.storeName);
                                    var req = store.openKeyCursor();
                                    var _$keys = [];
                                    req.onsuccess = function() {
                                        var cursor = req.result;
                                        if (!cursor) {
                                            resolve(_$keys);
                                            return;
                                        }
                                        _$keys.push(cursor.key);
                                        cursor["continue"]();
                                    };
                                    req.onerror = function() {
                                        reject(req.error);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function dropInstance(options, callback) {
                    callback = getCallback.apply(this, arguments);
                    var currentConfig = this.config();
                    options = typeof options !== "function" && options || {};
                    if (!options.name) {
                        options.name = options.name || currentConfig.name;
                        options.storeName = options.storeName || currentConfig.storeName;
                    }
                    var self1 = this;
                    var promise;
                    if (!options.name) promise = Promise$1.reject("Invalid arguments");
                    else {
                        var isCurrentDb = options.name === currentConfig.name && self1._dbInfo.db;
                        var dbPromise = isCurrentDb ? Promise$1.resolve(self1._dbInfo.db) : _getOriginalConnection(options).then(function(db) {
                            var dbContext = dbContexts[options.name];
                            var forages = dbContext.forages;
                            dbContext.db = db;
                            for(var i = 0; i < forages.length; i++)forages[i]._dbInfo.db = db;
                            return db;
                        });
                        if (!options.storeName) promise = dbPromise.then(function(db) {
                            _deferReadiness(options);
                            var dbContext = dbContexts[options.name];
                            var forages = dbContext.forages;
                            db.close();
                            for(var i = 0; i < forages.length; i++){
                                var forage = forages[i];
                                forage._dbInfo.db = null;
                            }
                            var dropDBPromise = new Promise$1(function(resolve, reject) {
                                var req = idb.deleteDatabase(options.name);
                                req.onerror = function() {
                                    var _$db = req.result;
                                    if (_$db) _$db.close();
                                    reject(req.error);
                                };
                                req.onblocked = function() {
                                    // Closing all open connections in onversionchange handler should prevent this situation, but if
                                    // we do get here, it just means the request remains pending - eventually it will succeed or error
                                    console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
                                };
                                req.onsuccess = function() {
                                    var _$db = req.result;
                                    if (_$db) _$db.close();
                                    resolve(_$db);
                                };
                            });
                            return dropDBPromise.then(function(db) {
                                dbContext.db = db;
                                for(var i = 0; i < forages.length; i++){
                                    var _forage = forages[i];
                                    _advanceReadiness(_forage._dbInfo);
                                }
                            })["catch"](function(err) {
                                (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function() {});
                                throw err;
                            });
                        });
                        else promise = dbPromise.then(function(db) {
                            if (!db.objectStoreNames.contains(options.storeName)) return;
                            var newVersion = db.version + 1;
                            _deferReadiness(options);
                            var dbContext = dbContexts[options.name];
                            var forages = dbContext.forages;
                            db.close();
                            for(var i = 0; i < forages.length; i++){
                                var forage = forages[i];
                                forage._dbInfo.db = null;
                                forage._dbInfo.version = newVersion;
                            }
                            var dropObjectPromise = new Promise$1(function(resolve, reject) {
                                var req = idb.open(options.name, newVersion);
                                req.onerror = function(err) {
                                    var _$db = req.result;
                                    _$db.close();
                                    reject(err);
                                };
                                req.onupgradeneeded = function() {
                                    var _$db = req.result;
                                    _$db.deleteObjectStore(options.storeName);
                                };
                                req.onsuccess = function() {
                                    var _$db = req.result;
                                    _$db.close();
                                    resolve(_$db);
                                };
                            });
                            return dropObjectPromise.then(function(db) {
                                dbContext.db = db;
                                for(var j = 0; j < forages.length; j++){
                                    var _forage2 = forages[j];
                                    _forage2._dbInfo.db = db;
                                    _advanceReadiness(_forage2._dbInfo);
                                }
                            })["catch"](function(err) {
                                (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function() {});
                                throw err;
                            });
                        });
                    }
                    executeCallback(promise, callback);
                    return promise;
                }
                var asyncStorage = {
                    _driver: "asyncStorage",
                    _initStorage: _initStorage,
                    _support: isIndexedDBValid(),
                    iterate: iterate,
                    getItem: getItem,
                    setItem: setItem,
                    removeItem: removeItem,
                    clear: clear,
                    length: length,
                    key: key,
                    keys: keys,
                    dropInstance: dropInstance
                };
                function isWebSQLValid() {
                    return typeof openDatabase === "function";
                }
                // Sadly, the best way to save binary data in WebSQL/localStorage is serializing
                // it to Base64, so this is how we store it to prevent very strange errors with less
                // verbose ways of binary <-> string data storage.
                var BASE_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                var BLOB_TYPE_PREFIX = "~~local_forage_type~";
                var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;
                var SERIALIZED_MARKER = "__lfsc__:";
                var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;
                // OMG the serializations!
                var TYPE_ARRAYBUFFER = "arbf";
                var TYPE_BLOB = "blob";
                var TYPE_INT8ARRAY = "si08";
                var TYPE_UINT8ARRAY = "ui08";
                var TYPE_UINT8CLAMPEDARRAY = "uic8";
                var TYPE_INT16ARRAY = "si16";
                var TYPE_INT32ARRAY = "si32";
                var TYPE_UINT16ARRAY = "ur16";
                var TYPE_UINT32ARRAY = "ui32";
                var TYPE_FLOAT32ARRAY = "fl32";
                var TYPE_FLOAT64ARRAY = "fl64";
                var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;
                var toString$1 = Object.prototype.toString;
                function stringToBuffer(serializedString) {
                    // Fill the string into a ArrayBuffer.
                    var bufferLength = serializedString.length * 0.75;
                    var len = serializedString.length;
                    var i;
                    var p = 0;
                    var encoded1, encoded2, encoded3, encoded4;
                    if (serializedString[serializedString.length - 1] === "=") {
                        bufferLength--;
                        if (serializedString[serializedString.length - 2] === "=") bufferLength--;
                    }
                    var buffer = new ArrayBuffer(bufferLength);
                    var bytes = new Uint8Array(buffer);
                    for(i = 0; i < len; i += 4){
                        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
                        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
                        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
                        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);
                        /*jslint bitwise: true */ bytes[p++] = encoded1 << 2 | encoded2 >> 4;
                        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
                        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
                    }
                    return buffer;
                }
                // Converts a buffer to a string to store, serialized, in the backend
                // storage library.
                function bufferToString(buffer) {
                    // base64-arraybuffer
                    var bytes = new Uint8Array(buffer);
                    var base64String = "";
                    var i;
                    for(i = 0; i < bytes.length; i += 3){
                        /*jslint bitwise: true */ base64String += BASE_CHARS[bytes[i] >> 2];
                        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
                        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
                        base64String += BASE_CHARS[bytes[i + 2] & 63];
                    }
                    if (bytes.length % 3 === 2) base64String = base64String.substring(0, base64String.length - 1) + "=";
                    else if (bytes.length % 3 === 1) base64String = base64String.substring(0, base64String.length - 2) + "==";
                    return base64String;
                }
                // Serialize a value, afterwards executing a callback (which usually
                // instructs the `setItem()` callback/promise to be executed). This is how
                // we store binary data with localStorage.
                function serialize(value, callback) {
                    var valueType = "";
                    if (value) valueType = toString$1.call(value);
                    // Cannot use `value instanceof ArrayBuffer` or such here, as these
                    // checks fail when running the tests using casper.js...
                    //
                    // TODO: See why those tests fail and use a better solution.
                    if (value && (valueType === "[object ArrayBuffer]" || value.buffer && toString$1.call(value.buffer) === "[object ArrayBuffer]")) {
                        // Convert binary arrays to a string and prefix the string with
                        // a special marker.
                        var buffer;
                        var marker = SERIALIZED_MARKER;
                        if (value instanceof ArrayBuffer) {
                            buffer = value;
                            marker += TYPE_ARRAYBUFFER;
                        } else {
                            buffer = value.buffer;
                            if (valueType === "[object Int8Array]") marker += TYPE_INT8ARRAY;
                            else if (valueType === "[object Uint8Array]") marker += TYPE_UINT8ARRAY;
                            else if (valueType === "[object Uint8ClampedArray]") marker += TYPE_UINT8CLAMPEDARRAY;
                            else if (valueType === "[object Int16Array]") marker += TYPE_INT16ARRAY;
                            else if (valueType === "[object Uint16Array]") marker += TYPE_UINT16ARRAY;
                            else if (valueType === "[object Int32Array]") marker += TYPE_INT32ARRAY;
                            else if (valueType === "[object Uint32Array]") marker += TYPE_UINT32ARRAY;
                            else if (valueType === "[object Float32Array]") marker += TYPE_FLOAT32ARRAY;
                            else if (valueType === "[object Float64Array]") marker += TYPE_FLOAT64ARRAY;
                            else callback(new Error("Failed to get type for BinaryArray"));
                        }
                        callback(marker + bufferToString(buffer));
                    } else if (valueType === "[object Blob]") {
                        // Conver the blob to a binaryArray and then to a string.
                        var fileReader = new FileReader();
                        fileReader.onload = function() {
                            // Backwards-compatible prefix for the blob type.
                            var str = BLOB_TYPE_PREFIX + value.type + "~" + bufferToString(this.result);
                            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
                        };
                        fileReader.readAsArrayBuffer(value);
                    } else try {
                        callback(JSON.stringify(value));
                    } catch (e) {
                        console.error("Couldn't convert value into a JSON string: ", value);
                        callback(null, e);
                    }
                }
                // Deserialize data we've inserted into a value column/field. We place
                // special markers into our strings to mark them as encoded; this isn't
                // as nice as a meta field, but it's the only sane thing we can do whilst
                // keeping localStorage support intact.
                //
                // Oftentimes this will just deserialize JSON content, but if we have a
                // special marker (SERIALIZED_MARKER, defined above), we will extract
                // some kind of arraybuffer/binary data/typed array out of the string.
                function deserialize(value) {
                    // If we haven't marked this string as being specially serialized (i.e.
                    // something other than serialized JSON), we can just return it and be
                    // done with it.
                    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) return JSON.parse(value);
                    // The following code deals with deserializing some kind of Blob or
                    // TypedArray. First we separate out the type of data we're dealing
                    // with from the data itself.
                    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
                    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);
                    var blobType;
                    // Backwards-compatible blob type serialization strategy.
                    // DBs created with older versions of localForage will simply not have the blob type.
                    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
                        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
                        blobType = matcher[1];
                        serializedString = serializedString.substring(matcher[0].length);
                    }
                    var buffer = stringToBuffer(serializedString);
                    // Return the right type based on the code/type set during
                    // serialization.
                    switch(type){
                        case TYPE_ARRAYBUFFER:
                            return buffer;
                        case TYPE_BLOB:
                            return createBlob([
                                buffer
                            ], {
                                type: blobType
                            });
                        case TYPE_INT8ARRAY:
                            return new Int8Array(buffer);
                        case TYPE_UINT8ARRAY:
                            return new Uint8Array(buffer);
                        case TYPE_UINT8CLAMPEDARRAY:
                            return new Uint8ClampedArray(buffer);
                        case TYPE_INT16ARRAY:
                            return new Int16Array(buffer);
                        case TYPE_UINT16ARRAY:
                            return new Uint16Array(buffer);
                        case TYPE_INT32ARRAY:
                            return new Int32Array(buffer);
                        case TYPE_UINT32ARRAY:
                            return new Uint32Array(buffer);
                        case TYPE_FLOAT32ARRAY:
                            return new Float32Array(buffer);
                        case TYPE_FLOAT64ARRAY:
                            return new Float64Array(buffer);
                        default:
                            throw new Error("Unkown type: " + type);
                    }
                }
                var localforageSerializer = {
                    serialize: serialize,
                    deserialize: deserialize,
                    stringToBuffer: stringToBuffer,
                    bufferToString: bufferToString
                };
                /*
 * Includes code from:
 *
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */ function createDbTable(t, dbInfo, callback, errorCallback) {
                    t.executeSql("CREATE TABLE IF NOT EXISTS " + dbInfo.storeName + " " + "(id INTEGER PRIMARY KEY, key unique, value)", [], callback, errorCallback);
                }
                // Open the WebSQL database (automatically creates one if one didn't
                // previously exist), using any options set in the config.
                function _initStorage$1(options) {
                    var self1 = this;
                    var dbInfo = {
                        db: null
                    };
                    if (options) for(var i in options)dbInfo[i] = typeof options[i] !== "string" ? options[i].toString() : options[i];
                    var dbInfoPromise = new Promise$1(function(resolve, reject) {
                        // Open the database; the openDatabase API will automatically
                        // create it for us if it doesn't exist.
                        try {
                            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
                        } catch (e) {
                            return reject(e);
                        }
                        // Create our key/value table if it doesn't exist.
                        dbInfo.db.transaction(function(t) {
                            createDbTable(t, dbInfo, function() {
                                self1._dbInfo = dbInfo;
                                resolve();
                            }, function(t, error) {
                                reject(error);
                            });
                        }, reject);
                    });
                    dbInfo.serializer = localforageSerializer;
                    return dbInfoPromise;
                }
                function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
                    t.executeSql(sqlStatement, args, callback, function(t, error) {
                        if (error.code === error.SYNTAX_ERR) t.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?", [
                            dbInfo.storeName
                        ], function(t, results) {
                            if (!results.rows.length) // if the table is missing (was deleted)
                            // re-create it table and retry
                            createDbTable(t, dbInfo, function() {
                                t.executeSql(sqlStatement, args, callback, errorCallback);
                            }, errorCallback);
                            else errorCallback(t, error);
                        }, errorCallback);
                        else errorCallback(t, error);
                    }, errorCallback);
                }
                function getItem$1(key, callback) {
                    var self1 = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            var dbInfo = self1._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "SELECT * FROM " + dbInfo.storeName + " WHERE key = ? LIMIT 1", [
                                    key
                                ], function(t, results) {
                                    var result = results.rows.length ? results.rows.item(0).value : null;
                                    // Check to see if this is serialized content we need to
                                    // unpack.
                                    if (result) result = dbInfo.serializer.deserialize(result);
                                    resolve(result);
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function iterate$1(iterator, callback) {
                    var self1 = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            var dbInfo = self1._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "SELECT * FROM " + dbInfo.storeName, [], function(t, results) {
                                    var rows = results.rows;
                                    var _$length = rows.length;
                                    for(var i = 0; i < _$length; i++){
                                        var item = rows.item(i);
                                        var result = item.value;
                                        // Check to see if this is serialized content
                                        // we need to unpack.
                                        if (result) result = dbInfo.serializer.deserialize(result);
                                        result = iterator(result, item.key, i + 1);
                                        // void(0) prevents problems with redefinition
                                        // of `undefined`.
                                        if (result !== void 0) {
                                            resolve(result);
                                            return;
                                        }
                                    }
                                    resolve();
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function _setItem(key, value, callback, retriesLeft) {
                    var self1 = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            // The localStorage API doesn't return undefined values in an
                            // "expected" way, so undefined is always cast to null in all
                            // drivers. See: https://github.com/mozilla/localForage/pull/42
                            if (value === undefined) value = null;
                            // Save the original value to pass to the callback.
                            var originalValue = value;
                            var dbInfo = self1._dbInfo;
                            dbInfo.serializer.serialize(value, function(value, error) {
                                if (error) reject(error);
                                else dbInfo.db.transaction(function(t) {
                                    tryExecuteSql(t, dbInfo, "INSERT OR REPLACE INTO " + dbInfo.storeName + " " + "(key, value) VALUES (?, ?)", [
                                        key,
                                        value
                                    ], function() {
                                        resolve(originalValue);
                                    }, function(t, error) {
                                        reject(error);
                                    });
                                }, function(sqlError) {
                                    // The transaction failed; check
                                    // to see if it's a quota error.
                                    if (sqlError.code === sqlError.QUOTA_ERR) {
                                        // We reject the callback outright for now, but
                                        // it's worth trying to re-run the transaction.
                                        // Even if the user accepts the prompt to use
                                        // more storage on Safari, this error will
                                        // be called.
                                        //
                                        // Try to re-run the transaction.
                                        if (retriesLeft > 0) {
                                            resolve(_setItem.apply(self1, [
                                                key,
                                                originalValue,
                                                callback,
                                                retriesLeft - 1
                                            ]));
                                            return;
                                        }
                                        reject(sqlError);
                                    }
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function setItem$1(key, value, callback) {
                    return _setItem.apply(this, [
                        key,
                        value,
                        callback,
                        1
                    ]);
                }
                function removeItem$1(key, callback) {
                    var self1 = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            var dbInfo = self1._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "DELETE FROM " + dbInfo.storeName + " WHERE key = ?", [
                                    key
                                ], function() {
                                    resolve();
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Deletes every item in the table.
                // TODO: Find out if this resets the AUTO_INCREMENT number.
                function clear$1(callback) {
                    var self1 = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            var dbInfo = self1._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "DELETE FROM " + dbInfo.storeName, [], function() {
                                    resolve();
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Does a simple `COUNT(key)` to get the number of items stored in
                // localForage.
                function length$1(callback) {
                    var self1 = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            var dbInfo = self1._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                // Ahhh, SQL makes this one soooooo easy.
                                tryExecuteSql(t, dbInfo, "SELECT COUNT(key) as c FROM " + dbInfo.storeName, [], function(t, results) {
                                    var result = results.rows.item(0).c;
                                    resolve(result);
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Return the key located at key index X; essentially gets the key from a
                // `WHERE id = ?`. This is the most efficient way I can think to implement
                // this rarely-used (in my experience) part of the API, but it can seem
                // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
                // the ID of each key will change every time it's updated. Perhaps a stored
                // procedure for the `setItem()` SQL would solve this problem?
                // TODO: Don't change ID on `setItem()`.
                function key$1(n, callback) {
                    var self1 = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            var dbInfo = self1._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "SELECT key FROM " + dbInfo.storeName + " WHERE id = ? LIMIT 1", [
                                    n + 1
                                ], function(t, results) {
                                    var result = results.rows.length ? results.rows.item(0).key : null;
                                    resolve(result);
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function keys$1(callback) {
                    var self1 = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self1.ready().then(function() {
                            var dbInfo = self1._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "SELECT key FROM " + dbInfo.storeName, [], function(t, results) {
                                    var _$keys = [];
                                    for(var i = 0; i < results.rows.length; i++)_$keys.push(results.rows.item(i).key);
                                    resolve(_$keys);
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // https://www.w3.org/TR/webdatabase/#databases
                // > There is no way to enumerate or delete the databases available for an origin from this API.
                function getAllStoreNames(db) {
                    return new Promise$1(function(resolve, reject) {
                        db.transaction(function(t) {
                            t.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function(t, results) {
                                var storeNames = [];
                                for(var i = 0; i < results.rows.length; i++)storeNames.push(results.rows.item(i).name);
                                resolve({
                                    db: db,
                                    storeNames: storeNames
                                });
                            }, function(t, error) {
                                reject(error);
                            });
                        }, function(sqlError) {
                            reject(sqlError);
                        });
                    });
                }
                function dropInstance$1(options, callback) {
                    callback = getCallback.apply(this, arguments);
                    var currentConfig = this.config();
                    options = typeof options !== "function" && options || {};
                    if (!options.name) {
                        options.name = options.name || currentConfig.name;
                        options.storeName = options.storeName || currentConfig.storeName;
                    }
                    var self1 = this;
                    var promise;
                    if (!options.name) promise = Promise$1.reject("Invalid arguments");
                    else promise = new Promise$1(function(resolve) {
                        var db;
                        if (options.name === currentConfig.name) // use the db reference of the current instance
                        db = self1._dbInfo.db;
                        else db = openDatabase(options.name, "", "", 0);
                        if (!options.storeName) // drop all database tables
                        resolve(getAllStoreNames(db));
                        else resolve({
                            db: db,
                            storeNames: [
                                options.storeName
                            ]
                        });
                    }).then(function(operationInfo) {
                        return new Promise$1(function(resolve, reject) {
                            operationInfo.db.transaction(function(t) {
                                function dropTable(storeName) {
                                    return new Promise$1(function(resolve, reject) {
                                        t.executeSql("DROP TABLE IF EXISTS " + storeName, [], function() {
                                            resolve();
                                        }, function(t, error) {
                                            reject(error);
                                        });
                                    });
                                }
                                var operations = [];
                                for(var i = 0, len = operationInfo.storeNames.length; i < len; i++)operations.push(dropTable(operationInfo.storeNames[i]));
                                Promise$1.all(operations).then(function() {
                                    resolve();
                                })["catch"](function(e) {
                                    reject(e);
                                });
                            }, function(sqlError) {
                                reject(sqlError);
                            });
                        });
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                var webSQLStorage = {
                    _driver: "webSQLStorage",
                    _initStorage: _initStorage$1,
                    _support: isWebSQLValid(),
                    iterate: iterate$1,
                    getItem: getItem$1,
                    setItem: setItem$1,
                    removeItem: removeItem$1,
                    clear: clear$1,
                    length: length$1,
                    key: key$1,
                    keys: keys$1,
                    dropInstance: dropInstance$1
                };
                function isLocalStorageValid() {
                    try {
                        return typeof localStorage !== "undefined" && "setItem" in localStorage && // in IE8 typeof localStorage.setItem === 'object'
                        !!localStorage.setItem;
                    } catch (e) {
                        return false;
                    }
                }
                function _getKeyPrefix(options, defaultConfig) {
                    var keyPrefix = options.name + "/";
                    if (options.storeName !== defaultConfig.storeName) keyPrefix += options.storeName + "/";
                    return keyPrefix;
                }
                // Check if localStorage throws when saving an item
                function checkIfLocalStorageThrows() {
                    var localStorageTestKey = "_localforage_support_test";
                    try {
                        localStorage.setItem(localStorageTestKey, true);
                        localStorage.removeItem(localStorageTestKey);
                        return false;
                    } catch (e) {
                        return true;
                    }
                }
                // Check if localStorage is usable and allows to save an item
                // This method checks if localStorage is usable in Safari Private Browsing
                // mode, or in any other case where the available quota for localStorage
                // is 0 and there wasn't any saved items yet.
                function _isLocalStorageUsable() {
                    return !checkIfLocalStorageThrows() || localStorage.length > 0;
                }
                // Config the localStorage backend, using options set in the config.
                function _initStorage$2(options) {
                    var self1 = this;
                    var dbInfo = {};
                    if (options) for(var i in options)dbInfo[i] = options[i];
                    dbInfo.keyPrefix = _getKeyPrefix(options, self1._defaultConfig);
                    if (!_isLocalStorageUsable()) return Promise$1.reject();
                    self1._dbInfo = dbInfo;
                    dbInfo.serializer = localforageSerializer;
                    return Promise$1.resolve();
                }
                // Remove all keys from the datastore, effectively destroying all data in
                // the app's key/value store!
                function clear$2(callback) {
                    var self1 = this;
                    var promise = self1.ready().then(function() {
                        var keyPrefix = self1._dbInfo.keyPrefix;
                        for(var i = localStorage.length - 1; i >= 0; i--){
                            var _$key = localStorage.key(i);
                            if (_$key.indexOf(keyPrefix) === 0) localStorage.removeItem(_$key);
                        }
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Retrieve an item from the store. Unlike the original async_storage
                // library in Gaia, we don't modify return values at all. If a key's value
                // is `undefined`, we pass that value to the callback function.
                function getItem$2(key, callback) {
                    var self1 = this;
                    key = normalizeKey(key);
                    var promise = self1.ready().then(function() {
                        var dbInfo = self1._dbInfo;
                        var result = localStorage.getItem(dbInfo.keyPrefix + key);
                        // If a result was found, parse it from the serialized
                        // string into a JS object. If result isn't truthy, the key
                        // is likely undefined and we'll pass it straight to the
                        // callback.
                        if (result) result = dbInfo.serializer.deserialize(result);
                        return result;
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Iterate over all items in the store.
                function iterate$2(iterator, callback) {
                    var self1 = this;
                    var promise = self1.ready().then(function() {
                        var dbInfo = self1._dbInfo;
                        var keyPrefix = dbInfo.keyPrefix;
                        var keyPrefixLength = keyPrefix.length;
                        var _$length = localStorage.length;
                        // We use a dedicated iterator instead of the `i` variable below
                        // so other keys we fetch in localStorage aren't counted in
                        // the `iterationNumber` argument passed to the `iterate()`
                        // callback.
                        //
                        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
                        var iterationNumber = 1;
                        for(var i = 0; i < _$length; i++){
                            var _$key = localStorage.key(i);
                            if (_$key.indexOf(keyPrefix) !== 0) continue;
                            var value = localStorage.getItem(_$key);
                            // If a result was found, parse it from the serialized
                            // string into a JS object. If result isn't truthy, the
                            // key is likely undefined and we'll pass it straight
                            // to the iterator.
                            if (value) value = dbInfo.serializer.deserialize(value);
                            value = iterator(value, _$key.substring(keyPrefixLength), iterationNumber++);
                            if (value !== void 0) return value;
                        }
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Same as localStorage's key() method, except takes a callback.
                function key$2(n, callback) {
                    var self1 = this;
                    var promise = self1.ready().then(function() {
                        var dbInfo = self1._dbInfo;
                        var result;
                        try {
                            result = localStorage.key(n);
                        } catch (error) {
                            result = null;
                        }
                        // Remove the prefix from the key, if a key is found.
                        if (result) result = result.substring(dbInfo.keyPrefix.length);
                        return result;
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function keys$2(callback) {
                    var self1 = this;
                    var promise = self1.ready().then(function() {
                        var dbInfo = self1._dbInfo;
                        var _$length = localStorage.length;
                        var _$keys = [];
                        for(var i = 0; i < _$length; i++){
                            var itemKey = localStorage.key(i);
                            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) _$keys.push(itemKey.substring(dbInfo.keyPrefix.length));
                        }
                        return _$keys;
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Supply the number of keys in the datastore to the callback function.
                function length$2(callback) {
                    var self1 = this;
                    var promise = self1.keys().then(function(keys) {
                        return keys.length;
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Remove an item from the store, nice and simple.
                function removeItem$2(key, callback) {
                    var self1 = this;
                    key = normalizeKey(key);
                    var promise = self1.ready().then(function() {
                        var dbInfo = self1._dbInfo;
                        localStorage.removeItem(dbInfo.keyPrefix + key);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Set a key's value and run an optional callback once the value is set.
                // Unlike Gaia's implementation, the callback function is passed the value,
                // in case you want to operate on that value only after you're sure it
                // saved, or something like that.
                function setItem$2(key, value, callback) {
                    var self1 = this;
                    key = normalizeKey(key);
                    var promise = self1.ready().then(function() {
                        // Convert undefined values to null.
                        // https://github.com/mozilla/localForage/pull/42
                        if (value === undefined) value = null;
                        // Save the original value to pass to the callback.
                        var originalValue = value;
                        return new Promise$1(function(resolve, reject) {
                            var dbInfo = self1._dbInfo;
                            dbInfo.serializer.serialize(value, function(value, error) {
                                if (error) reject(error);
                                else try {
                                    localStorage.setItem(dbInfo.keyPrefix + key, value);
                                    resolve(originalValue);
                                } catch (e) {
                                    // localStorage capacity exceeded.
                                    // TODO: Make this a specific error/event.
                                    if (e.name === "QuotaExceededError" || e.name === "NS_ERROR_DOM_QUOTA_REACHED") reject(e);
                                    reject(e);
                                }
                            });
                        });
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function dropInstance$2(options, callback) {
                    callback = getCallback.apply(this, arguments);
                    options = typeof options !== "function" && options || {};
                    if (!options.name) {
                        var currentConfig = this.config();
                        options.name = options.name || currentConfig.name;
                        options.storeName = options.storeName || currentConfig.storeName;
                    }
                    var self1 = this;
                    var promise;
                    if (!options.name) promise = Promise$1.reject("Invalid arguments");
                    else promise = new Promise$1(function(resolve) {
                        if (!options.storeName) resolve(options.name + "/");
                        else resolve(_getKeyPrefix(options, self1._defaultConfig));
                    }).then(function(keyPrefix) {
                        for(var i = localStorage.length - 1; i >= 0; i--){
                            var _$key = localStorage.key(i);
                            if (_$key.indexOf(keyPrefix) === 0) localStorage.removeItem(_$key);
                        }
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                var localStorageWrapper = {
                    _driver: "localStorageWrapper",
                    _initStorage: _initStorage$2,
                    _support: isLocalStorageValid(),
                    iterate: iterate$2,
                    getItem: getItem$2,
                    setItem: setItem$2,
                    removeItem: removeItem$2,
                    clear: clear$2,
                    length: length$2,
                    key: key$2,
                    keys: keys$2,
                    dropInstance: dropInstance$2
                };
                var sameValue = function sameValue(x, y) {
                    return x === y || typeof x === "number" && typeof y === "number" && isNaN(x) && isNaN(y);
                };
                var includes = function includes(array, searchElement) {
                    var len = array.length;
                    var i = 0;
                    while(i < len){
                        if (sameValue(array[i], searchElement)) return true;
                        i++;
                    }
                    return false;
                };
                var isArray = Array.isArray || function(arg) {
                    return Object.prototype.toString.call(arg) === "[object Array]";
                };
                // Drivers are stored here when `defineDriver()` is called.
                // They are shared across all instances of localForage.
                var DefinedDrivers = {};
                var DriverSupport = {};
                var DefaultDrivers = {
                    INDEXEDDB: asyncStorage,
                    WEBSQL: webSQLStorage,
                    LOCALSTORAGE: localStorageWrapper
                };
                var DefaultDriverOrder = [
                    DefaultDrivers.INDEXEDDB._driver,
                    DefaultDrivers.WEBSQL._driver,
                    DefaultDrivers.LOCALSTORAGE._driver
                ];
                var OptionalDriverMethods = [
                    "dropInstance"
                ];
                var LibraryMethods = [
                    "clear",
                    "getItem",
                    "iterate",
                    "key",
                    "keys",
                    "length",
                    "removeItem",
                    "setItem"
                ].concat(OptionalDriverMethods);
                var DefaultConfig = {
                    description: "",
                    driver: DefaultDriverOrder.slice(),
                    name: "localforage",
                    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
                    // we can use without a prompt.
                    size: 4980736,
                    storeName: "keyvaluepairs",
                    version: 1.0
                };
                function callWhenReady(localForageInstance, libraryMethod) {
                    localForageInstance[libraryMethod] = function() {
                        var _args = arguments;
                        return localForageInstance.ready().then(function() {
                            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
                        });
                    };
                }
                function extend() {
                    for(var i = 1; i < arguments.length; i++){
                        var arg = arguments[i];
                        if (arg) {
                            for(var _key in arg)if (arg.hasOwnProperty(_key)) {
                                if (isArray(arg[_key])) arguments[0][_key] = arg[_key].slice();
                                else arguments[0][_key] = arg[_key];
                            }
                        }
                    }
                    return arguments[0];
                }
                var LocalForage = function() {
                    function LocalForage(options) {
                        _classCallCheck(this, LocalForage);
                        for(var driverTypeKey in DefaultDrivers)if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                            var driver = DefaultDrivers[driverTypeKey];
                            var driverName = driver._driver;
                            this[driverTypeKey] = driverName;
                            if (!DefinedDrivers[driverName]) // we don't need to wait for the promise,
                            // since the default drivers can be defined
                            // in a blocking manner
                            this.defineDriver(driver);
                        }
                        this._defaultConfig = extend({}, DefaultConfig);
                        this._config = extend({}, this._defaultConfig, options);
                        this._driverSet = null;
                        this._initDriver = null;
                        this._ready = false;
                        this._dbInfo = null;
                        this._wrapLibraryMethodsWithReady();
                        this.setDriver(this._config.driver)["catch"](function() {});
                    }
                    // Set any config values for localForage; can be called anytime before
                    // the first API call (e.g. `getItem`, `setItem`).
                    // We loop through options so we don't overwrite existing config
                    // values.
                    LocalForage.prototype.config = function config(options) {
                        // If the options argument is an object, we use it to set values.
                        // Otherwise, we return either a specified config value or all
                        // config values.
                        if ((typeof options === "undefined" ? "undefined" : _typeof(options)) === "object") {
                            // If localforage is ready and fully initialized, we can't set
                            // any new configuration values. Instead, we return an error.
                            if (this._ready) return new Error("Can't call config() after localforage has been used.");
                            for(var i in options){
                                if (i === "storeName") options[i] = options[i].replace(/\W/g, "_");
                                if (i === "version" && typeof options[i] !== "number") return new Error("Database version must be a number.");
                                this._config[i] = options[i];
                            }
                            // after all config options are set and
                            // the driver option is used, try setting it
                            if ("driver" in options && options.driver) return this.setDriver(this._config.driver);
                            return true;
                        } else if (typeof options === "string") return this._config[options];
                        else return this._config;
                    };
                    // Used to define a custom driver, shared across all instances of
                    // localForage.
                    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
                        var promise = new Promise$1(function(resolve, reject) {
                            try {
                                var driverName = driverObject._driver;
                                var complianceError = new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");
                                // A driver name should be defined and not overlap with the
                                // library-defined, default drivers.
                                if (!driverObject._driver) {
                                    reject(complianceError);
                                    return;
                                }
                                var driverMethods = LibraryMethods.concat("_initStorage");
                                for(var i = 0, len = driverMethods.length; i < len; i++){
                                    var driverMethodName = driverMethods[i];
                                    // when the property is there,
                                    // it should be a method even when optional
                                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
                                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== "function") {
                                        reject(complianceError);
                                        return;
                                    }
                                }
                                var configureMissingMethods = function configureMissingMethods() {
                                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
                                        return function() {
                                            var error = new Error("Method " + methodName + " is not implemented by the current driver");
                                            var promise = Promise$1.reject(error);
                                            executeCallback(promise, arguments[arguments.length - 1]);
                                            return promise;
                                        };
                                    };
                                    for(var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++){
                                        var optionalDriverMethod = OptionalDriverMethods[_i];
                                        if (!driverObject[optionalDriverMethod]) driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
                                    }
                                };
                                configureMissingMethods();
                                var setDriverSupport = function setDriverSupport(support) {
                                    if (DefinedDrivers[driverName]) console.info("Redefining LocalForage driver: " + driverName);
                                    DefinedDrivers[driverName] = driverObject;
                                    DriverSupport[driverName] = support;
                                    // don't use a then, so that we can define
                                    // drivers that have simple _support methods
                                    // in a blocking manner
                                    resolve();
                                };
                                if ("_support" in driverObject) {
                                    if (driverObject._support && typeof driverObject._support === "function") driverObject._support().then(setDriverSupport, reject);
                                    else setDriverSupport(!!driverObject._support);
                                } else setDriverSupport(true);
                            } catch (e) {
                                reject(e);
                            }
                        });
                        executeTwoCallbacks(promise, callback, errorCallback);
                        return promise;
                    };
                    LocalForage.prototype.driver = function driver() {
                        return this._driver || null;
                    };
                    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
                        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error("Driver not found."));
                        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
                        return getDriverPromise;
                    };
                    LocalForage.prototype.getSerializer = function getSerializer(callback) {
                        var serializerPromise = Promise$1.resolve(localforageSerializer);
                        executeTwoCallbacks(serializerPromise, callback);
                        return serializerPromise;
                    };
                    LocalForage.prototype.ready = function ready(callback) {
                        var self1 = this;
                        var promise = self1._driverSet.then(function() {
                            if (self1._ready === null) self1._ready = self1._initDriver();
                            return self1._ready;
                        });
                        executeTwoCallbacks(promise, callback, callback);
                        return promise;
                    };
                    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
                        var self1 = this;
                        if (!isArray(drivers)) drivers = [
                            drivers
                        ];
                        var supportedDrivers = this._getSupportedDrivers(drivers);
                        function setDriverToConfig() {
                            self1._config.driver = self1.driver();
                        }
                        function extendSelfWithDriver(driver) {
                            self1._extend(driver);
                            setDriverToConfig();
                            self1._ready = self1._initStorage(self1._config);
                            return self1._ready;
                        }
                        function initDriver(supportedDrivers) {
                            return function() {
                                var currentDriverIndex = 0;
                                function driverPromiseLoop() {
                                    while(currentDriverIndex < supportedDrivers.length){
                                        var driverName = supportedDrivers[currentDriverIndex];
                                        currentDriverIndex++;
                                        self1._dbInfo = null;
                                        self1._ready = null;
                                        return self1.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                                    }
                                    setDriverToConfig();
                                    var error = new Error("No available storage method found.");
                                    self1._driverSet = Promise$1.reject(error);
                                    return self1._driverSet;
                                }
                                return driverPromiseLoop();
                            };
                        }
                        // There might be a driver initialization in progress
                        // so wait for it to finish in order to avoid a possible
                        // race condition to set _dbInfo
                        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function() {
                            return Promise$1.resolve();
                        }) : Promise$1.resolve();
                        this._driverSet = oldDriverSetDone.then(function() {
                            var driverName = supportedDrivers[0];
                            self1._dbInfo = null;
                            self1._ready = null;
                            return self1.getDriver(driverName).then(function(driver) {
                                self1._driver = driver._driver;
                                setDriverToConfig();
                                self1._wrapLibraryMethodsWithReady();
                                self1._initDriver = initDriver(supportedDrivers);
                            });
                        })["catch"](function() {
                            setDriverToConfig();
                            var error = new Error("No available storage method found.");
                            self1._driverSet = Promise$1.reject(error);
                            return self1._driverSet;
                        });
                        executeTwoCallbacks(this._driverSet, callback, errorCallback);
                        return this._driverSet;
                    };
                    LocalForage.prototype.supports = function supports(driverName) {
                        return !!DriverSupport[driverName];
                    };
                    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
                        extend(this, libraryMethodsAndProperties);
                    };
                    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
                        var supportedDrivers = [];
                        for(var i = 0, len = drivers.length; i < len; i++){
                            var driverName = drivers[i];
                            if (this.supports(driverName)) supportedDrivers.push(driverName);
                        }
                        return supportedDrivers;
                    };
                    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
                        // Add a stub for each driver API method that delays the call to the
                        // corresponding driver method until localForage is ready. These stubs
                        // will be replaced by the driver methods as soon as the driver is
                        // loaded, so there is no performance impact.
                        for(var i = 0, len = LibraryMethods.length; i < len; i++)callWhenReady(this, LibraryMethods[i]);
                    };
                    LocalForage.prototype.createInstance = function createInstance(options) {
                        return new LocalForage(options);
                    };
                    return LocalForage;
                }();
                // The actual localForage object that we expose as a module or via a
                // global. It's extended by pulling in one of our other libraries.
                var localforage_js = new LocalForage();
                module1.exports = localforage_js;
            },
            {
                "3": 3
            }
        ]
    }, {}, [
        4
    ])(4);
});


var $fa8308bd2c5b6d7e$exports = {};
"use strict";
var $b51300f8ed8264b6$exports = {};
"use strict";

var $hPUTp = parcelRequire("hPUTp");

$hPUTp.trust = (parcelRequire("hc09f"));

$hPUTp.fragment = (parcelRequire("uUr9B"));
$b51300f8ed8264b6$exports = $hPUTp;


var $5eb9873530869c78$exports = {};
"use strict";

var $dXPdz = parcelRequire("dXPdz");

var $fBKqb = parcelRequire("fBKqb");

$5eb9873530869c78$exports = (parcelRequire("8ohAQ"))(typeof window !== "undefined" ? window : null, $dXPdz, $fBKqb.redraw);



var $fBKqb = parcelRequire("fBKqb");
var $fa8308bd2c5b6d7e$var$m = function m() {
    return $b51300f8ed8264b6$exports.apply(this, arguments);
};
$fa8308bd2c5b6d7e$var$m.m = $b51300f8ed8264b6$exports;
$fa8308bd2c5b6d7e$var$m.trust = $b51300f8ed8264b6$exports.trust;
$fa8308bd2c5b6d7e$var$m.fragment = $b51300f8ed8264b6$exports.fragment;
$fa8308bd2c5b6d7e$var$m.Fragment = "[";
$fa8308bd2c5b6d7e$var$m.mount = $fBKqb.mount;

$fa8308bd2c5b6d7e$var$m.route = (parcelRequire("jFffZ"));

$fa8308bd2c5b6d7e$var$m.render = (parcelRequire("iHb4t"));
$fa8308bd2c5b6d7e$var$m.redraw = $fBKqb.redraw;
$fa8308bd2c5b6d7e$var$m.request = $5eb9873530869c78$exports.request;
$fa8308bd2c5b6d7e$var$m.jsonp = $5eb9873530869c78$exports.jsonp;

$fa8308bd2c5b6d7e$var$m.parseQueryString = (parcelRequire("iahK6"));

$fa8308bd2c5b6d7e$var$m.buildQueryString = (parcelRequire("6KLd1"));

$fa8308bd2c5b6d7e$var$m.parsePathname = (parcelRequire("1bhZB"));

$fa8308bd2c5b6d7e$var$m.buildPathname = (parcelRequire("bGJ5a"));

$fa8308bd2c5b6d7e$var$m.vnode = (parcelRequire("ahPL4"));

$fa8308bd2c5b6d7e$var$m.PromisePolyfill = (parcelRequire("4kqT7"));

$fa8308bd2c5b6d7e$var$m.censor = (parcelRequire("1Zud9"));
$fa8308bd2c5b6d7e$exports = $fa8308bd2c5b6d7e$var$m;


var $fc3b5a28c7651bef$exports = {};
/*
 * QRious v4.0.2
 * Copyright (C) 2017 Alasdair Mercer
 * Copyright (C) 2010 Tom Zerucha
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ (function(global, factory) {
    $fc3b5a28c7651bef$exports = factory();
})($fc3b5a28c7651bef$exports, function() {
    "use strict";
    /*
   * Copyright (C) 2017 Alasdair Mercer, !ninja
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */ /**
   * A bare-bones constructor for surrogate prototype swapping.
   *
   * @private
   * @constructor
   */ var Constructor = /* istanbul ignore next */ function Constructor() {};
    /**
   * A reference to <code>Object.prototype.hasOwnProperty</code>.
   *
   * @private
   * @type {Function}
   */ var hasOwnProperty = Object.prototype.hasOwnProperty;
    /**
   * A reference to <code>Array.prototype.slice</code>.
   *
   * @private
   * @type {Function}
   */ var slice = Array.prototype.slice;
    /**
   * Creates an object which inherits the given <code>prototype</code>.
   *
   * Optionally, the created object can be extended further with the specified <code>properties</code>.
   *
   * @param {Object} prototype - the prototype to be inherited by the created object
   * @param {Object} [properties] - the optional properties to be extended by the created object
   * @return {Object} The newly created object.
   * @private
   */ function createObject(prototype, properties) {
        var result;
        /* istanbul ignore next */ if (typeof Object.create === "function") result = Object.create(prototype);
        else {
            Constructor.prototype = prototype;
            result = new Constructor();
            Constructor.prototype = null;
        }
        if (properties) extendObject(true, result, properties);
        return result;
    }
    /**
   * Extends the constructor to which this method is associated with the <code>prototype</code> and/or
   * <code>statics</code> provided.
   *
   * If <code>name</code> is provided, it will be used as the class name and can be accessed via a special
   * <code>class_</code> property on the child constructor, otherwise the class name of the super constructor will be used
   * instead. The class name may also be used string representation for instances of the child constructor (via
   * <code>toString</code>), but this is not applicable to the <i>lite</i> version of Nevis.
   *
   * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple
   * constructor which only calls the super constructor will be used instead.
   *
   * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.
   *
   * @param {string} [name=this.class_] - the class name to be used for the child constructor
   * @param {Function} [constructor] - the constructor for the child
   * @param {Object} [prototype] - the prototype properties to be defined for the child
   * @param {Object} [statics] - the static properties to be defined for the child
   * @return {Function} The child <code>constructor</code> provided or the one created if none was given.
   * @public
   */ function extend(name, constructor, prototype, statics) {
        var superConstructor = this;
        if (typeof name !== "string") {
            statics = prototype;
            prototype = constructor;
            constructor = name;
            name = null;
        }
        if (typeof constructor !== "function") {
            statics = prototype;
            prototype = constructor;
            constructor = function constructor() {
                return superConstructor.apply(this, arguments);
            };
        }
        extendObject(false, constructor, superConstructor, statics);
        constructor.prototype = createObject(superConstructor.prototype, prototype);
        constructor.prototype.constructor = constructor;
        constructor.class_ = name || superConstructor.class_;
        constructor.super_ = superConstructor;
        return constructor;
    }
    /**
   * Extends the specified <code>target</code> object with the properties in each of the <code>sources</code> provided.
   *
   * if any source is <code>null</code> it will be ignored.
   *
   * @param {boolean} own - <code>true</code> to only copy <b>own</b> properties from <code>sources</code> onto
   * <code>target</code>; otherwise <code>false</code>
   * @param {Object} target - the target object which should be extended
   * @param {...Object} [sources] - the source objects whose properties are to be copied onto <code>target</code>
   * @return {void}
   * @private
   */ function extendObject(own, target, sources) {
        sources = slice.call(arguments, 2);
        var property;
        var source;
        for(var i = 0, length = sources.length; i < length; i++){
            source = sources[i];
            for(property in source)if (!own || hasOwnProperty.call(source, property)) target[property] = source[property];
        }
    }
    var extend_1 = extend;
    /**
   * The base class from which all others should extend.
   *
   * @public
   * @constructor
   */ function Nevis() {}
    Nevis.class_ = "Nevis";
    Nevis.super_ = Object;
    /**
   * Extends the constructor to which this method is associated with the <code>prototype</code> and/or
   * <code>statics</code> provided.
   *
   * If <code>name</code> is provided, it will be used as the class name and can be accessed via a special
   * <code>class_</code> property on the child constructor, otherwise the class name of the super constructor will be used
   * instead. The class name may also be used string representation for instances of the child constructor (via
   * <code>toString</code>), but this is not applicable to the <i>lite</i> version of Nevis.
   *
   * If <code>constructor</code> is provided, it will be used as the constructor for the child, otherwise a simple
   * constructor which only calls the super constructor will be used instead.
   *
   * The super constructor can be accessed via a special <code>super_</code> property on the child constructor.
   *
   * @param {string} [name=this.class_] - the class name to be used for the child constructor
   * @param {Function} [constructor] - the constructor for the child
   * @param {Object} [prototype] - the prototype properties to be defined for the child
   * @param {Object} [statics] - the static properties to be defined for the child
   * @return {Function} The child <code>constructor</code> provided or the one created if none was given.
   * @public
   * @static
   * @memberof Nevis
   */ Nevis.extend = extend_1;
    var nevis = Nevis;
    var lite = nevis;
    /**
   * Responsible for rendering a QR code {@link Frame} on a specific type of element.
   *
   * A renderer may be dependant on the rendering of another element, so the ordering of their execution is important.
   *
   * The rendering of a element can be deferred by disabling the renderer initially, however, any attempt get the element
   * from the renderer will result in it being immediately enabled and the element being rendered.
   *
   * @param {QRious} qrious - the {@link QRious} instance to be used
   * @param {*} element - the element onto which the QR code is to be rendered
   * @param {boolean} [enabled] - <code>true</code> this {@link Renderer} is enabled; otherwise <code>false</code>.
   * @public
   * @class
   * @extends Nevis
   */ var Renderer = lite.extend(function(qrious, element, enabled) {
        /**
     * The {@link QRious} instance.
     *
     * @protected
     * @type {QRious}
     * @memberof Renderer#
     */ this.qrious = qrious;
        /**
     * The element onto which this {@link Renderer} is rendering the QR code.
     *
     * @protected
     * @type {*}
     * @memberof Renderer#
     */ this.element = element;
        this.element.qrious = qrious;
        /**
     * Whether this {@link Renderer} is enabled.
     *
     * @protected
     * @type {boolean}
     * @memberof Renderer#
     */ this.enabled = Boolean(enabled);
    }, {
        /**
     * Draws the specified QR code <code>frame</code> on the underlying element.
     *
     * Implementations of {@link Renderer} <b>must</b> override this method with their own specific logic.
     *
     * @param {Frame} frame - the {@link Frame} to be drawn
     * @return {void}
     * @protected
     * @abstract
     * @memberof Renderer#
     */ draw: function draw(frame) {},
        /**
     * Returns the element onto which this {@link Renderer} is rendering the QR code.
     *
     * If this method is called while this {@link Renderer} is disabled, it will be immediately enabled and rendered
     * before the element is returned.
     *
     * @return {*} The element.
     * @public
     * @memberof Renderer#
     */ getElement: function getElement() {
            if (!this.enabled) {
                this.enabled = true;
                this.render();
            }
            return this.element;
        },
        /**
     * Calculates the size (in pixel units) to represent an individual module within the QR code based on the
     * <code>frame</code> provided.
     *
     * Any configured padding will be excluded from the returned size.
     *
     * The returned value will be at least one, even in cases where the size of the QR code does not fit its contents.
     * This is done so that the inevitable clipping is handled more gracefully since this way at least something is
     * displayed instead of just a blank space filled by the background color.
     *
     * @param {Frame} frame - the {@link Frame} from which the module size is to be derived
     * @return {number} The pixel size for each module in the QR code which will be no less than one.
     * @protected
     * @memberof Renderer#
     */ getModuleSize: function getModuleSize(frame) {
            var qrious = this.qrious;
            var padding = qrious.padding || 0;
            var pixels = Math.floor((qrious.size - padding * 2) / frame.width);
            return Math.max(1, pixels);
        },
        /**
     * Calculates the offset/padding (in pixel units) to be inserted before the QR code based on the <code>frame</code>
     * provided.
     *
     * The returned value will be zero if there is no available offset or if the size of the QR code does not fit its
     * contents. It will never be a negative value. This is done so that the inevitable clipping appears more naturally
     * and it is not clipped from all directions.
     *
     * @param {Frame} frame - the {@link Frame} from which the offset is to be derived
     * @return {number} The pixel offset for the QR code which will be no less than zero.
     * @protected
     * @memberof Renderer#
     */ getOffset: function getOffset(frame) {
            var qrious = this.qrious;
            var padding = qrious.padding;
            if (padding != null) return padding;
            var moduleSize = this.getModuleSize(frame);
            var offset = Math.floor((qrious.size - moduleSize * frame.width) / 2);
            return Math.max(0, offset);
        },
        /**
     * Renders a QR code on the underlying element based on the <code>frame</code> provided.
     *
     * @param {Frame} frame - the {@link Frame} to be rendered
     * @return {void}
     * @public
     * @memberof Renderer#
     */ render: function render(frame) {
            if (this.enabled) {
                this.resize();
                this.reset();
                this.draw(frame);
            }
        },
        /**
     * Resets the underlying element, effectively clearing any previously rendered QR code.
     *
     * Implementations of {@link Renderer} <b>must</b> override this method with their own specific logic.
     *
     * @return {void}
     * @protected
     * @abstract
     * @memberof Renderer#
     */ reset: function reset() {},
        /**
     * Ensures that the size of the underlying element matches that defined on the associated {@link QRious} instance.
     *
     * Implementations of {@link Renderer} <b>must</b> override this method with their own specific logic.
     *
     * @return {void}
     * @protected
     * @abstract
     * @memberof Renderer#
     */ resize: function resize() {}
    });
    var Renderer_1 = Renderer;
    /**
   * An implementation of {@link Renderer} for working with <code>canvas</code> elements.
   *
   * @public
   * @class
   * @extends Renderer
   */ var CanvasRenderer = Renderer_1.extend({
        /**
     * @override
     */ draw: function draw(frame) {
            var i, j;
            var qrious = this.qrious;
            var moduleSize = this.getModuleSize(frame);
            var offset = this.getOffset(frame);
            var context = this.element.getContext("2d");
            context.fillStyle = qrious.foreground;
            context.globalAlpha = qrious.foregroundAlpha;
            for(i = 0; i < frame.width; i++){
                for(j = 0; j < frame.width; j++)if (frame.buffer[j * frame.width + i]) context.fillRect(moduleSize * i + offset, moduleSize * j + offset, moduleSize, moduleSize);
            }
        },
        /**
     * @override
     */ reset: function reset() {
            var qrious = this.qrious;
            var context = this.element.getContext("2d");
            var size = qrious.size;
            context.lineWidth = 1;
            context.clearRect(0, 0, size, size);
            context.fillStyle = qrious.background;
            context.globalAlpha = qrious.backgroundAlpha;
            context.fillRect(0, 0, size, size);
        },
        /**
     * @override
     */ resize: function resize() {
            var element = this.element;
            element.width = element.height = this.qrious.size;
        }
    });
    var CanvasRenderer_1 = CanvasRenderer;
    /* eslint no-multi-spaces: "off" */ /**
   * Contains alignment pattern information.
   *
   * @public
   * @class
   * @extends Nevis
   */ var Alignment = lite.extend(null, {
        /**
     * The alignment pattern block.
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof Alignment
     */ BLOCK: [
            0,
            11,
            15,
            19,
            23,
            27,
            31,
            16,
            18,
            20,
            22,
            24,
            26,
            28,
            20,
            22,
            24,
            24,
            26,
            28,
            28,
            22,
            24,
            24,
            26,
            26,
            28,
            28,
            24,
            24,
            26,
            26,
            26,
            28,
            28,
            24,
            26,
            26,
            26,
            28,
            28
        ]
    });
    var Alignment_1 = Alignment;
    /* eslint no-multi-spaces: "off" */ /**
   * Contains error correction information.
   *
   * @public
   * @class
   * @extends Nevis
   */ var ErrorCorrection = lite.extend(null, {
        /**
     * The error correction blocks.
     *
     * There are four elements per version. The first two indicate the number of blocks, then the data width, and finally
     * the ECC width.
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof ErrorCorrection
     */ BLOCKS: [
            1,
            0,
            19,
            7,
            1,
            0,
            16,
            10,
            1,
            0,
            13,
            13,
            1,
            0,
            9,
            17,
            1,
            0,
            34,
            10,
            1,
            0,
            28,
            16,
            1,
            0,
            22,
            22,
            1,
            0,
            16,
            28,
            1,
            0,
            55,
            15,
            1,
            0,
            44,
            26,
            2,
            0,
            17,
            18,
            2,
            0,
            13,
            22,
            1,
            0,
            80,
            20,
            2,
            0,
            32,
            18,
            2,
            0,
            24,
            26,
            4,
            0,
            9,
            16,
            1,
            0,
            108,
            26,
            2,
            0,
            43,
            24,
            2,
            2,
            15,
            18,
            2,
            2,
            11,
            22,
            2,
            0,
            68,
            18,
            4,
            0,
            27,
            16,
            4,
            0,
            19,
            24,
            4,
            0,
            15,
            28,
            2,
            0,
            78,
            20,
            4,
            0,
            31,
            18,
            2,
            4,
            14,
            18,
            4,
            1,
            13,
            26,
            2,
            0,
            97,
            24,
            2,
            2,
            38,
            22,
            4,
            2,
            18,
            22,
            4,
            2,
            14,
            26,
            2,
            0,
            116,
            30,
            3,
            2,
            36,
            22,
            4,
            4,
            16,
            20,
            4,
            4,
            12,
            24,
            2,
            2,
            68,
            18,
            4,
            1,
            43,
            26,
            6,
            2,
            19,
            24,
            6,
            2,
            15,
            28,
            4,
            0,
            81,
            20,
            1,
            4,
            50,
            30,
            4,
            4,
            22,
            28,
            3,
            8,
            12,
            24,
            2,
            2,
            92,
            24,
            6,
            2,
            36,
            22,
            4,
            6,
            20,
            26,
            7,
            4,
            14,
            28,
            4,
            0,
            107,
            26,
            8,
            1,
            37,
            22,
            8,
            4,
            20,
            24,
            12,
            4,
            11,
            22,
            3,
            1,
            115,
            30,
            4,
            5,
            40,
            24,
            11,
            5,
            16,
            20,
            11,
            5,
            12,
            24,
            5,
            1,
            87,
            22,
            5,
            5,
            41,
            24,
            5,
            7,
            24,
            30,
            11,
            7,
            12,
            24,
            5,
            1,
            98,
            24,
            7,
            3,
            45,
            28,
            15,
            2,
            19,
            24,
            3,
            13,
            15,
            30,
            1,
            5,
            107,
            28,
            10,
            1,
            46,
            28,
            1,
            15,
            22,
            28,
            2,
            17,
            14,
            28,
            5,
            1,
            120,
            30,
            9,
            4,
            43,
            26,
            17,
            1,
            22,
            28,
            2,
            19,
            14,
            28,
            3,
            4,
            113,
            28,
            3,
            11,
            44,
            26,
            17,
            4,
            21,
            26,
            9,
            16,
            13,
            26,
            3,
            5,
            107,
            28,
            3,
            13,
            41,
            26,
            15,
            5,
            24,
            30,
            15,
            10,
            15,
            28,
            4,
            4,
            116,
            28,
            17,
            0,
            42,
            26,
            17,
            6,
            22,
            28,
            19,
            6,
            16,
            30,
            2,
            7,
            111,
            28,
            17,
            0,
            46,
            28,
            7,
            16,
            24,
            30,
            34,
            0,
            13,
            24,
            4,
            5,
            121,
            30,
            4,
            14,
            47,
            28,
            11,
            14,
            24,
            30,
            16,
            14,
            15,
            30,
            6,
            4,
            117,
            30,
            6,
            14,
            45,
            28,
            11,
            16,
            24,
            30,
            30,
            2,
            16,
            30,
            8,
            4,
            106,
            26,
            8,
            13,
            47,
            28,
            7,
            22,
            24,
            30,
            22,
            13,
            15,
            30,
            10,
            2,
            114,
            28,
            19,
            4,
            46,
            28,
            28,
            6,
            22,
            28,
            33,
            4,
            16,
            30,
            8,
            4,
            122,
            30,
            22,
            3,
            45,
            28,
            8,
            26,
            23,
            30,
            12,
            28,
            15,
            30,
            3,
            10,
            117,
            30,
            3,
            23,
            45,
            28,
            4,
            31,
            24,
            30,
            11,
            31,
            15,
            30,
            7,
            7,
            116,
            30,
            21,
            7,
            45,
            28,
            1,
            37,
            23,
            30,
            19,
            26,
            15,
            30,
            5,
            10,
            115,
            30,
            19,
            10,
            47,
            28,
            15,
            25,
            24,
            30,
            23,
            25,
            15,
            30,
            13,
            3,
            115,
            30,
            2,
            29,
            46,
            28,
            42,
            1,
            24,
            30,
            23,
            28,
            15,
            30,
            17,
            0,
            115,
            30,
            10,
            23,
            46,
            28,
            10,
            35,
            24,
            30,
            19,
            35,
            15,
            30,
            17,
            1,
            115,
            30,
            14,
            21,
            46,
            28,
            29,
            19,
            24,
            30,
            11,
            46,
            15,
            30,
            13,
            6,
            115,
            30,
            14,
            23,
            46,
            28,
            44,
            7,
            24,
            30,
            59,
            1,
            16,
            30,
            12,
            7,
            121,
            30,
            12,
            26,
            47,
            28,
            39,
            14,
            24,
            30,
            22,
            41,
            15,
            30,
            6,
            14,
            121,
            30,
            6,
            34,
            47,
            28,
            46,
            10,
            24,
            30,
            2,
            64,
            15,
            30,
            17,
            4,
            122,
            30,
            29,
            14,
            46,
            28,
            49,
            10,
            24,
            30,
            24,
            46,
            15,
            30,
            4,
            18,
            122,
            30,
            13,
            32,
            46,
            28,
            48,
            14,
            24,
            30,
            42,
            32,
            15,
            30,
            20,
            4,
            117,
            30,
            40,
            7,
            47,
            28,
            43,
            22,
            24,
            30,
            10,
            67,
            15,
            30,
            19,
            6,
            118,
            30,
            18,
            31,
            47,
            28,
            34,
            34,
            24,
            30,
            20,
            61,
            15,
            30
        ],
        /**
     * The final format bits with mask (level << 3 | mask).
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof ErrorCorrection
     */ FINAL_FORMAT: [
            // L
            0x77c4,
            0x72f3,
            0x7daa,
            0x789d,
            0x662f,
            0x6318,
            0x6c41,
            0x6976,
            // M
            0x5412,
            0x5125,
            0x5e7c,
            0x5b4b,
            0x45f9,
            0x40ce,
            0x4f97,
            0x4aa0,
            // Q
            0x355f,
            0x3068,
            0x3f31,
            0x3a06,
            0x24b4,
            0x2183,
            0x2eda,
            0x2bed,
            // H
            0x1689,
            0x13be,
            0x1ce7,
            0x19d0,
            0x0762,
            0x0255,
            0x0d0c,
            0x083b
        ],
        /**
     * A map of human-readable ECC levels.
     *
     * @public
     * @static
     * @type {Object.<string, number>}
     * @memberof ErrorCorrection
     */ LEVELS: {
            L: 1,
            M: 2,
            Q: 3,
            H: 4
        }
    });
    var ErrorCorrection_1 = ErrorCorrection;
    /**
   * Contains Galois field information.
   *
   * @public
   * @class
   * @extends Nevis
   */ var Galois = lite.extend(null, {
        /**
     * The Galois field exponent table.
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof Galois
     */ EXPONENT: [
            0x01,
            0x02,
            0x04,
            0x08,
            0x10,
            0x20,
            0x40,
            0x80,
            0x1d,
            0x3a,
            0x74,
            0xe8,
            0xcd,
            0x87,
            0x13,
            0x26,
            0x4c,
            0x98,
            0x2d,
            0x5a,
            0xb4,
            0x75,
            0xea,
            0xc9,
            0x8f,
            0x03,
            0x06,
            0x0c,
            0x18,
            0x30,
            0x60,
            0xc0,
            0x9d,
            0x27,
            0x4e,
            0x9c,
            0x25,
            0x4a,
            0x94,
            0x35,
            0x6a,
            0xd4,
            0xb5,
            0x77,
            0xee,
            0xc1,
            0x9f,
            0x23,
            0x46,
            0x8c,
            0x05,
            0x0a,
            0x14,
            0x28,
            0x50,
            0xa0,
            0x5d,
            0xba,
            0x69,
            0xd2,
            0xb9,
            0x6f,
            0xde,
            0xa1,
            0x5f,
            0xbe,
            0x61,
            0xc2,
            0x99,
            0x2f,
            0x5e,
            0xbc,
            0x65,
            0xca,
            0x89,
            0x0f,
            0x1e,
            0x3c,
            0x78,
            0xf0,
            0xfd,
            0xe7,
            0xd3,
            0xbb,
            0x6b,
            0xd6,
            0xb1,
            0x7f,
            0xfe,
            0xe1,
            0xdf,
            0xa3,
            0x5b,
            0xb6,
            0x71,
            0xe2,
            0xd9,
            0xaf,
            0x43,
            0x86,
            0x11,
            0x22,
            0x44,
            0x88,
            0x0d,
            0x1a,
            0x34,
            0x68,
            0xd0,
            0xbd,
            0x67,
            0xce,
            0x81,
            0x1f,
            0x3e,
            0x7c,
            0xf8,
            0xed,
            0xc7,
            0x93,
            0x3b,
            0x76,
            0xec,
            0xc5,
            0x97,
            0x33,
            0x66,
            0xcc,
            0x85,
            0x17,
            0x2e,
            0x5c,
            0xb8,
            0x6d,
            0xda,
            0xa9,
            0x4f,
            0x9e,
            0x21,
            0x42,
            0x84,
            0x15,
            0x2a,
            0x54,
            0xa8,
            0x4d,
            0x9a,
            0x29,
            0x52,
            0xa4,
            0x55,
            0xaa,
            0x49,
            0x92,
            0x39,
            0x72,
            0xe4,
            0xd5,
            0xb7,
            0x73,
            0xe6,
            0xd1,
            0xbf,
            0x63,
            0xc6,
            0x91,
            0x3f,
            0x7e,
            0xfc,
            0xe5,
            0xd7,
            0xb3,
            0x7b,
            0xf6,
            0xf1,
            0xff,
            0xe3,
            0xdb,
            0xab,
            0x4b,
            0x96,
            0x31,
            0x62,
            0xc4,
            0x95,
            0x37,
            0x6e,
            0xdc,
            0xa5,
            0x57,
            0xae,
            0x41,
            0x82,
            0x19,
            0x32,
            0x64,
            0xc8,
            0x8d,
            0x07,
            0x0e,
            0x1c,
            0x38,
            0x70,
            0xe0,
            0xdd,
            0xa7,
            0x53,
            0xa6,
            0x51,
            0xa2,
            0x59,
            0xb2,
            0x79,
            0xf2,
            0xf9,
            0xef,
            0xc3,
            0x9b,
            0x2b,
            0x56,
            0xac,
            0x45,
            0x8a,
            0x09,
            0x12,
            0x24,
            0x48,
            0x90,
            0x3d,
            0x7a,
            0xf4,
            0xf5,
            0xf7,
            0xf3,
            0xfb,
            0xeb,
            0xcb,
            0x8b,
            0x0b,
            0x16,
            0x2c,
            0x58,
            0xb0,
            0x7d,
            0xfa,
            0xe9,
            0xcf,
            0x83,
            0x1b,
            0x36,
            0x6c,
            0xd8,
            0xad,
            0x47,
            0x8e,
            0x00
        ],
        /**
     * The Galois field log table.
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof Galois
     */ LOG: [
            0xff,
            0x00,
            0x01,
            0x19,
            0x02,
            0x32,
            0x1a,
            0xc6,
            0x03,
            0xdf,
            0x33,
            0xee,
            0x1b,
            0x68,
            0xc7,
            0x4b,
            0x04,
            0x64,
            0xe0,
            0x0e,
            0x34,
            0x8d,
            0xef,
            0x81,
            0x1c,
            0xc1,
            0x69,
            0xf8,
            0xc8,
            0x08,
            0x4c,
            0x71,
            0x05,
            0x8a,
            0x65,
            0x2f,
            0xe1,
            0x24,
            0x0f,
            0x21,
            0x35,
            0x93,
            0x8e,
            0xda,
            0xf0,
            0x12,
            0x82,
            0x45,
            0x1d,
            0xb5,
            0xc2,
            0x7d,
            0x6a,
            0x27,
            0xf9,
            0xb9,
            0xc9,
            0x9a,
            0x09,
            0x78,
            0x4d,
            0xe4,
            0x72,
            0xa6,
            0x06,
            0xbf,
            0x8b,
            0x62,
            0x66,
            0xdd,
            0x30,
            0xfd,
            0xe2,
            0x98,
            0x25,
            0xb3,
            0x10,
            0x91,
            0x22,
            0x88,
            0x36,
            0xd0,
            0x94,
            0xce,
            0x8f,
            0x96,
            0xdb,
            0xbd,
            0xf1,
            0xd2,
            0x13,
            0x5c,
            0x83,
            0x38,
            0x46,
            0x40,
            0x1e,
            0x42,
            0xb6,
            0xa3,
            0xc3,
            0x48,
            0x7e,
            0x6e,
            0x6b,
            0x3a,
            0x28,
            0x54,
            0xfa,
            0x85,
            0xba,
            0x3d,
            0xca,
            0x5e,
            0x9b,
            0x9f,
            0x0a,
            0x15,
            0x79,
            0x2b,
            0x4e,
            0xd4,
            0xe5,
            0xac,
            0x73,
            0xf3,
            0xa7,
            0x57,
            0x07,
            0x70,
            0xc0,
            0xf7,
            0x8c,
            0x80,
            0x63,
            0x0d,
            0x67,
            0x4a,
            0xde,
            0xed,
            0x31,
            0xc5,
            0xfe,
            0x18,
            0xe3,
            0xa5,
            0x99,
            0x77,
            0x26,
            0xb8,
            0xb4,
            0x7c,
            0x11,
            0x44,
            0x92,
            0xd9,
            0x23,
            0x20,
            0x89,
            0x2e,
            0x37,
            0x3f,
            0xd1,
            0x5b,
            0x95,
            0xbc,
            0xcf,
            0xcd,
            0x90,
            0x87,
            0x97,
            0xb2,
            0xdc,
            0xfc,
            0xbe,
            0x61,
            0xf2,
            0x56,
            0xd3,
            0xab,
            0x14,
            0x2a,
            0x5d,
            0x9e,
            0x84,
            0x3c,
            0x39,
            0x53,
            0x47,
            0x6d,
            0x41,
            0xa2,
            0x1f,
            0x2d,
            0x43,
            0xd8,
            0xb7,
            0x7b,
            0xa4,
            0x76,
            0xc4,
            0x17,
            0x49,
            0xec,
            0x7f,
            0x0c,
            0x6f,
            0xf6,
            0x6c,
            0xa1,
            0x3b,
            0x52,
            0x29,
            0x9d,
            0x55,
            0xaa,
            0xfb,
            0x60,
            0x86,
            0xb1,
            0xbb,
            0xcc,
            0x3e,
            0x5a,
            0xcb,
            0x59,
            0x5f,
            0xb0,
            0x9c,
            0xa9,
            0xa0,
            0x51,
            0x0b,
            0xf5,
            0x16,
            0xeb,
            0x7a,
            0x75,
            0x2c,
            0xd7,
            0x4f,
            0xae,
            0xd5,
            0xe9,
            0xe6,
            0xe7,
            0xad,
            0xe8,
            0x74,
            0xd6,
            0xf4,
            0xea,
            0xa8,
            0x50,
            0x58,
            0xaf
        ]
    });
    var Galois_1 = Galois;
    /**
   * Contains version pattern information.
   *
   * @public
   * @class
   * @extends Nevis
   */ var Version = lite.extend(null, {
        /**
     * The version pattern block.
     *
     * @public
     * @static
     * @type {number[]}
     * @memberof Version
     */ BLOCK: [
            0xc94,
            0x5bc,
            0xa99,
            0x4d3,
            0xbf6,
            0x762,
            0x847,
            0x60d,
            0x928,
            0xb78,
            0x45d,
            0xa17,
            0x532,
            0x9a6,
            0x683,
            0x8c9,
            0x7ec,
            0xec4,
            0x1e1,
            0xfab,
            0x08e,
            0xc1a,
            0x33f,
            0xd75,
            0x250,
            0x9d5,
            0x6f0,
            0x8ba,
            0x79f,
            0xb0b,
            0x42e,
            0xa64,
            0x541,
            0xc69
        ]
    });
    var Version_1 = Version;
    /**
   * Generates information for a QR code frame based on a specific value to be encoded.
   *
   * @param {Frame~Options} options - the options to be used
   * @public
   * @class
   * @extends Nevis
   */ var Frame = lite.extend(function(options) {
        var dataBlock, eccBlock, index, neccBlock1, neccBlock2;
        var valueLength = options.value.length;
        this._badness = [];
        this._level = ErrorCorrection_1.LEVELS[options.level];
        this._polynomial = [];
        this._value = options.value;
        this._version = 0;
        this._stringBuffer = [];
        while(this._version < 40){
            this._version++;
            index = (this._level - 1) * 4 + (this._version - 1) * 16;
            neccBlock1 = ErrorCorrection_1.BLOCKS[index++];
            neccBlock2 = ErrorCorrection_1.BLOCKS[index++];
            dataBlock = ErrorCorrection_1.BLOCKS[index++];
            eccBlock = ErrorCorrection_1.BLOCKS[index];
            index = dataBlock * (neccBlock1 + neccBlock2) + neccBlock2 - 3 + (this._version <= 9);
            if (valueLength <= index) break;
        }
        this._dataBlock = dataBlock;
        this._eccBlock = eccBlock;
        this._neccBlock1 = neccBlock1;
        this._neccBlock2 = neccBlock2;
        /**
     * The data width is based on version.
     *
     * @public
     * @type {number}
     * @memberof Frame#
     */ // FIXME: Ensure that it fits instead of being truncated.
        var width = this.width = 17 + 4 * this._version;
        /**
     * The image buffer.
     *
     * @public
     * @type {number[]}
     * @memberof Frame#
     */ this.buffer = Frame._createArray(width * width);
        this._ecc = Frame._createArray(dataBlock + (dataBlock + eccBlock) * (neccBlock1 + neccBlock2) + neccBlock2);
        this._mask = Frame._createArray((width * (width + 1) + 1) / 2);
        this._insertFinders();
        this._insertAlignments();
        // Insert single foreground cell.
        this.buffer[8 + width * (width - 8)] = 1;
        this._insertTimingGap();
        this._reverseMask();
        this._insertTimingRowAndColumn();
        this._insertVersion();
        this._syncMask();
        this._convertBitStream(valueLength);
        this._calculatePolynomial();
        this._appendEccToData();
        this._interleaveBlocks();
        this._pack();
        this._finish();
    }, {
        _addAlignment: function _addAlignment(x, y) {
            var i;
            var buffer = this.buffer;
            var width = this.width;
            buffer[x + width * y] = 1;
            for(i = -2; i < 2; i++){
                buffer[x + i + width * (y - 2)] = 1;
                buffer[x - 2 + width * (y + i + 1)] = 1;
                buffer[x + 2 + width * (y + i)] = 1;
                buffer[x + i + 1 + width * (y + 2)] = 1;
            }
            for(i = 0; i < 2; i++){
                this._setMask(x - 1, y + i);
                this._setMask(x + 1, y - i);
                this._setMask(x - i, y - 1);
                this._setMask(x + i, y + 1);
            }
        },
        _appendData: function _appendData(data, dataLength, ecc, eccLength) {
            var bit, i, j;
            var polynomial = this._polynomial;
            var stringBuffer = this._stringBuffer;
            for(i = 0; i < eccLength; i++)stringBuffer[ecc + i] = 0;
            for(i = 0; i < dataLength; i++){
                bit = Galois_1.LOG[stringBuffer[data + i] ^ stringBuffer[ecc]];
                if (bit !== 255) for(j = 1; j < eccLength; j++)stringBuffer[ecc + j - 1] = stringBuffer[ecc + j] ^ Galois_1.EXPONENT[Frame._modN(bit + polynomial[eccLength - j])];
                else for(j = ecc; j < ecc + eccLength; j++)stringBuffer[j] = stringBuffer[j + 1];
                stringBuffer[ecc + eccLength - 1] = bit === 255 ? 0 : Galois_1.EXPONENT[Frame._modN(bit + polynomial[0])];
            }
        },
        _appendEccToData: function _appendEccToData() {
            var i;
            var data = 0;
            var dataBlock = this._dataBlock;
            var ecc = this._calculateMaxLength();
            var eccBlock = this._eccBlock;
            for(i = 0; i < this._neccBlock1; i++){
                this._appendData(data, dataBlock, ecc, eccBlock);
                data += dataBlock;
                ecc += eccBlock;
            }
            for(i = 0; i < this._neccBlock2; i++){
                this._appendData(data, dataBlock + 1, ecc, eccBlock);
                data += dataBlock + 1;
                ecc += eccBlock;
            }
        },
        _applyMask: function _applyMask(mask) {
            var r3x, r3y, x, y;
            var buffer = this.buffer;
            var width = this.width;
            switch(mask){
                case 0:
                    for(y = 0; y < width; y++){
                        for(x = 0; x < width; x++)if (!(x + y & 1) && !this._isMasked(x, y)) buffer[x + y * width] ^= 1;
                    }
                    break;
                case 1:
                    for(y = 0; y < width; y++){
                        for(x = 0; x < width; x++)if (!(y & 1) && !this._isMasked(x, y)) buffer[x + y * width] ^= 1;
                    }
                    break;
                case 2:
                    for(y = 0; y < width; y++)for(r3x = 0, x = 0; x < width; x++, r3x++){
                        if (r3x === 3) r3x = 0;
                        if (!r3x && !this._isMasked(x, y)) buffer[x + y * width] ^= 1;
                    }
                    break;
                case 3:
                    for(r3y = 0, y = 0; y < width; y++, r3y++){
                        if (r3y === 3) r3y = 0;
                        for(r3x = r3y, x = 0; x < width; x++, r3x++){
                            if (r3x === 3) r3x = 0;
                            if (!r3x && !this._isMasked(x, y)) buffer[x + y * width] ^= 1;
                        }
                    }
                    break;
                case 4:
                    for(y = 0; y < width; y++)for(r3x = 0, r3y = y >> 1 & 1, x = 0; x < width; x++, r3x++){
                        if (r3x === 3) {
                            r3x = 0;
                            r3y = !r3y;
                        }
                        if (!r3y && !this._isMasked(x, y)) buffer[x + y * width] ^= 1;
                    }
                    break;
                case 5:
                    for(r3y = 0, y = 0; y < width; y++, r3y++){
                        if (r3y === 3) r3y = 0;
                        for(r3x = 0, x = 0; x < width; x++, r3x++){
                            if (r3x === 3) r3x = 0;
                            if (!((x & y & 1) + !(!r3x | !r3y)) && !this._isMasked(x, y)) buffer[x + y * width] ^= 1;
                        }
                    }
                    break;
                case 6:
                    for(r3y = 0, y = 0; y < width; y++, r3y++){
                        if (r3y === 3) r3y = 0;
                        for(r3x = 0, x = 0; x < width; x++, r3x++){
                            if (r3x === 3) r3x = 0;
                            if (!((x & y & 1) + (r3x && r3x === r3y) & 1) && !this._isMasked(x, y)) buffer[x + y * width] ^= 1;
                        }
                    }
                    break;
                case 7:
                    for(r3y = 0, y = 0; y < width; y++, r3y++){
                        if (r3y === 3) r3y = 0;
                        for(r3x = 0, x = 0; x < width; x++, r3x++){
                            if (r3x === 3) r3x = 0;
                            if (!((r3x && r3x === r3y) + (x + y & 1) & 1) && !this._isMasked(x, y)) buffer[x + y * width] ^= 1;
                        }
                    }
                    break;
            }
        },
        _calculateMaxLength: function _calculateMaxLength() {
            return this._dataBlock * (this._neccBlock1 + this._neccBlock2) + this._neccBlock2;
        },
        _calculatePolynomial: function _calculatePolynomial() {
            var i, j;
            var eccBlock = this._eccBlock;
            var polynomial = this._polynomial;
            polynomial[0] = 1;
            for(i = 0; i < eccBlock; i++){
                polynomial[i + 1] = 1;
                for(j = i; j > 0; j--)polynomial[j] = polynomial[j] ? polynomial[j - 1] ^ Galois_1.EXPONENT[Frame._modN(Galois_1.LOG[polynomial[j]] + i)] : polynomial[j - 1];
                polynomial[0] = Galois_1.EXPONENT[Frame._modN(Galois_1.LOG[polynomial[0]] + i)];
            }
            // Use logs for generator polynomial to save calculation step.
            for(i = 0; i <= eccBlock; i++)polynomial[i] = Galois_1.LOG[polynomial[i]];
        },
        _checkBadness: function _checkBadness() {
            var b, b1, h, x, y;
            var bad = 0;
            var badness = this._badness;
            var buffer = this.buffer;
            var width = this.width;
            // Blocks of same colour.
            for(y = 0; y < width - 1; y++){
                for(x = 0; x < width - 1; x++)// All foreground colour.
                if (buffer[x + width * y] && buffer[x + 1 + width * y] && buffer[x + width * (y + 1)] && buffer[x + 1 + width * (y + 1)] || // All background colour.
                !(buffer[x + width * y] || buffer[x + 1 + width * y] || buffer[x + width * (y + 1)] || buffer[x + 1 + width * (y + 1)])) bad += Frame.N2;
            }
            var bw = 0;
            // X runs.
            for(y = 0; y < width; y++){
                h = 0;
                badness[0] = 0;
                for(b = 0, x = 0; x < width; x++){
                    b1 = buffer[x + width * y];
                    if (b === b1) badness[h]++;
                    else badness[++h] = 1;
                    b = b1;
                    bw += b ? 1 : -1;
                }
                bad += this._getBadness(h);
            }
            if (bw < 0) bw = -bw;
            var count = 0;
            var big = bw;
            big += big << 2;
            big <<= 1;
            while(big > width * width){
                big -= width * width;
                count++;
            }
            bad += count * Frame.N4;
            // Y runs.
            for(x = 0; x < width; x++){
                h = 0;
                badness[0] = 0;
                for(b = 0, y = 0; y < width; y++){
                    b1 = buffer[x + width * y];
                    if (b === b1) badness[h]++;
                    else badness[++h] = 1;
                    b = b1;
                }
                bad += this._getBadness(h);
            }
            return bad;
        },
        _convertBitStream: function _convertBitStream(length) {
            var bit, i;
            var ecc = this._ecc;
            var version = this._version;
            // Convert string to bit stream. 8-bit data to QR-coded 8-bit data (numeric, alphanumeric, or kanji not supported).
            for(i = 0; i < length; i++)ecc[i] = this._value.charCodeAt(i);
            var stringBuffer = this._stringBuffer = ecc.slice();
            var maxLength = this._calculateMaxLength();
            if (length >= maxLength - 2) {
                length = maxLength - 2;
                if (version > 9) length--;
            }
            // Shift and re-pack to insert length prefix.
            var index = length;
            if (version > 9) {
                stringBuffer[index + 2] = 0;
                stringBuffer[index + 3] = 0;
                while(index--){
                    bit = stringBuffer[index];
                    stringBuffer[index + 3] |= 255 & bit << 4;
                    stringBuffer[index + 2] = bit >> 4;
                }
                stringBuffer[2] |= 255 & length << 4;
                stringBuffer[1] = length >> 4;
                stringBuffer[0] = 0x40 | length >> 12;
            } else {
                stringBuffer[index + 1] = 0;
                stringBuffer[index + 2] = 0;
                while(index--){
                    bit = stringBuffer[index];
                    stringBuffer[index + 2] |= 255 & bit << 4;
                    stringBuffer[index + 1] = bit >> 4;
                }
                stringBuffer[1] |= 255 & length << 4;
                stringBuffer[0] = 0x40 | length >> 4;
            }
            // Fill to end with pad pattern.
            index = length + 3 - (version < 10);
            while(index < maxLength){
                stringBuffer[index++] = 0xec;
                stringBuffer[index++] = 0x11;
            }
        },
        _getBadness: function _getBadness(length) {
            var i;
            var badRuns = 0;
            var badness = this._badness;
            for(i = 0; i <= length; i++)if (badness[i] >= 5) badRuns += Frame.N1 + badness[i] - 5;
            // FBFFFBF as in finder.
            for(i = 3; i < length - 1; i += 2)if (badness[i - 2] === badness[i + 2] && badness[i + 2] === badness[i - 1] && badness[i - 1] === badness[i + 1] && badness[i - 1] * 3 === badness[i] && // Background around the foreground pattern? Not part of the specs.
            (badness[i - 3] === 0 || i + 3 > length || badness[i - 3] * 3 >= badness[i] * 4 || badness[i + 3] * 3 >= badness[i] * 4)) badRuns += Frame.N3;
            return badRuns;
        },
        _finish: function _finish() {
            // Save pre-mask copy of frame.
            this._stringBuffer = this.buffer.slice();
            var currentMask, i;
            var bit = 0;
            var mask = 30000;
            /*
       * Using for instead of while since in original Arduino code if an early mask was "good enough" it wouldn't try for
       * a better one since they get more complex and take longer.
       */ for(i = 0; i < 8; i++){
                // Returns foreground-background imbalance.
                this._applyMask(i);
                currentMask = this._checkBadness();
                // Is current mask better than previous best?
                if (currentMask < mask) {
                    mask = currentMask;
                    bit = i;
                }
                // Don't increment "i" to a void redoing mask.
                if (bit === 7) break;
                // Reset for next pass.
                this.buffer = this._stringBuffer.slice();
            }
            // Redo best mask as none were "good enough" (i.e. last wasn't bit).
            if (bit !== i) this._applyMask(bit);
            // Add in final mask/ECC level bytes.
            mask = ErrorCorrection_1.FINAL_FORMAT[bit + (this._level - 1 << 3)];
            var buffer = this.buffer;
            var width = this.width;
            // Low byte.
            for(i = 0; i < 8; i++, mask >>= 1)if (mask & 1) {
                buffer[width - 1 - i + width * 8] = 1;
                if (i < 6) buffer[8 + width * i] = 1;
                else buffer[8 + width * (i + 1)] = 1;
            }
            // High byte.
            for(i = 0; i < 7; i++, mask >>= 1)if (mask & 1) {
                buffer[8 + width * (width - 7 + i)] = 1;
                if (i) buffer[6 - i + width * 8] = 1;
                else buffer[7 + width * 8] = 1;
            }
        },
        _interleaveBlocks: function _interleaveBlocks() {
            var i, j;
            var dataBlock = this._dataBlock;
            var ecc = this._ecc;
            var eccBlock = this._eccBlock;
            var k = 0;
            var maxLength = this._calculateMaxLength();
            var neccBlock1 = this._neccBlock1;
            var neccBlock2 = this._neccBlock2;
            var stringBuffer = this._stringBuffer;
            for(i = 0; i < dataBlock; i++){
                for(j = 0; j < neccBlock1; j++)ecc[k++] = stringBuffer[i + j * dataBlock];
                for(j = 0; j < neccBlock2; j++)ecc[k++] = stringBuffer[neccBlock1 * dataBlock + i + j * (dataBlock + 1)];
            }
            for(j = 0; j < neccBlock2; j++)ecc[k++] = stringBuffer[neccBlock1 * dataBlock + i + j * (dataBlock + 1)];
            for(i = 0; i < eccBlock; i++)for(j = 0; j < neccBlock1 + neccBlock2; j++)ecc[k++] = stringBuffer[maxLength + i + j * eccBlock];
            this._stringBuffer = ecc;
        },
        _insertAlignments: function _insertAlignments() {
            var i, x, y;
            var version = this._version;
            var width = this.width;
            if (version > 1) {
                i = Alignment_1.BLOCK[version];
                y = width - 7;
                for(;;){
                    x = width - 7;
                    while(x > i - 3){
                        this._addAlignment(x, y);
                        if (x < i) break;
                        x -= i;
                    }
                    if (y <= i + 9) break;
                    y -= i;
                    this._addAlignment(6, y);
                    this._addAlignment(y, 6);
                }
            }
        },
        _insertFinders: function _insertFinders() {
            var i, j, x, y;
            var buffer = this.buffer;
            var width = this.width;
            for(i = 0; i < 3; i++){
                j = 0;
                y = 0;
                if (i === 1) j = width - 7;
                if (i === 2) y = width - 7;
                buffer[y + 3 + width * (j + 3)] = 1;
                for(x = 0; x < 6; x++){
                    buffer[y + x + width * j] = 1;
                    buffer[y + width * (j + x + 1)] = 1;
                    buffer[y + 6 + width * (j + x)] = 1;
                    buffer[y + x + 1 + width * (j + 6)] = 1;
                }
                for(x = 1; x < 5; x++){
                    this._setMask(y + x, j + 1);
                    this._setMask(y + 1, j + x + 1);
                    this._setMask(y + 5, j + x);
                    this._setMask(y + x + 1, j + 5);
                }
                for(x = 2; x < 4; x++){
                    buffer[y + x + width * (j + 2)] = 1;
                    buffer[y + 2 + width * (j + x + 1)] = 1;
                    buffer[y + 4 + width * (j + x)] = 1;
                    buffer[y + x + 1 + width * (j + 4)] = 1;
                }
            }
        },
        _insertTimingGap: function _insertTimingGap() {
            var x, y;
            var width = this.width;
            for(y = 0; y < 7; y++){
                this._setMask(7, y);
                this._setMask(width - 8, y);
                this._setMask(7, y + width - 7);
            }
            for(x = 0; x < 8; x++){
                this._setMask(x, 7);
                this._setMask(x + width - 8, 7);
                this._setMask(x, width - 8);
            }
        },
        _insertTimingRowAndColumn: function _insertTimingRowAndColumn() {
            var x;
            var buffer = this.buffer;
            var width = this.width;
            for(x = 0; x < width - 14; x++)if (x & 1) {
                this._setMask(8 + x, 6);
                this._setMask(6, 8 + x);
            } else {
                buffer[8 + x + width * 6] = 1;
                buffer[6 + width * (8 + x)] = 1;
            }
        },
        _insertVersion: function _insertVersion() {
            var i, j, x, y;
            var buffer = this.buffer;
            var version = this._version;
            var width = this.width;
            if (version > 6) {
                i = Version_1.BLOCK[version - 7];
                j = 17;
                for(x = 0; x < 6; x++){
                    for(y = 0; y < 3; y++, j--)if (1 & (j > 11 ? version >> j - 12 : i >> j)) {
                        buffer[5 - x + width * (2 - y + width - 11)] = 1;
                        buffer[2 - y + width - 11 + width * (5 - x)] = 1;
                    } else {
                        this._setMask(5 - x, 2 - y + width - 11);
                        this._setMask(2 - y + width - 11, 5 - x);
                    }
                }
            }
        },
        _isMasked: function _isMasked(x, y) {
            var bit = Frame._getMaskBit(x, y);
            return this._mask[bit] === 1;
        },
        _pack: function _pack() {
            var bit, i, j;
            var k = 1;
            var v = 1;
            var width = this.width;
            var x = width - 1;
            var y = width - 1;
            // Interleaved data and ECC codes.
            var length = (this._dataBlock + this._eccBlock) * (this._neccBlock1 + this._neccBlock2) + this._neccBlock2;
            for(i = 0; i < length; i++){
                bit = this._stringBuffer[i];
                for(j = 0; j < 8; j++, bit <<= 1){
                    if (0x80 & bit) this.buffer[x + width * y] = 1;
                    // Find next fill position.
                    do {
                        if (v) x--;
                        else {
                            x++;
                            if (k) {
                                if (y !== 0) y--;
                                else {
                                    x -= 2;
                                    k = !k;
                                    if (x === 6) {
                                        x--;
                                        y = 9;
                                    }
                                }
                            } else if (y !== width - 1) y++;
                            else {
                                x -= 2;
                                k = !k;
                                if (x === 6) {
                                    x--;
                                    y -= 8;
                                }
                            }
                        }
                        v = !v;
                    }while (this._isMasked(x, y));
                }
            }
        },
        _reverseMask: function _reverseMask() {
            var x, y;
            var width = this.width;
            for(x = 0; x < 9; x++)this._setMask(x, 8);
            for(x = 0; x < 8; x++){
                this._setMask(x + width - 8, 8);
                this._setMask(8, x);
            }
            for(y = 0; y < 7; y++)this._setMask(8, y + width - 7);
        },
        _setMask: function _setMask(x, y) {
            var bit = Frame._getMaskBit(x, y);
            this._mask[bit] = 1;
        },
        _syncMask: function _syncMask() {
            var x, y;
            var width = this.width;
            for(y = 0; y < width; y++){
                for(x = 0; x <= y; x++)if (this.buffer[x + width * y]) this._setMask(x, y);
            }
        }
    }, {
        _createArray: function _createArray(length) {
            var i;
            var array = [];
            for(i = 0; i < length; i++)array[i] = 0;
            return array;
        },
        _getMaskBit: function _getMaskBit(x, y) {
            var bit;
            if (x > y) {
                bit = x;
                x = y;
                y = bit;
            }
            bit = y;
            bit += y * y;
            bit >>= 1;
            bit += x;
            return bit;
        },
        _modN: function _modN(x) {
            while(x >= 255){
                x -= 255;
                x = (x >> 8) + (x & 255);
            }
            return x;
        },
        // *Badness* coefficients.
        N1: 3,
        N2: 3,
        N3: 40,
        N4: 10
    });
    var Frame_1 = Frame;
    /**
   * The options used by {@link Frame}.
   *
   * @typedef {Object} Frame~Options
   * @property {string} level - The ECC level to be used.
   * @property {string} value - The value to be encoded.
   */ /**
   * An implementation of {@link Renderer} for working with <code>img</code> elements.
   *
   * This depends on {@link CanvasRenderer} being executed first as this implementation simply applies the data URL from
   * the rendered <code>canvas</code> element as the <code>src</code> for the <code>img</code> element being rendered.
   *
   * @public
   * @class
   * @extends Renderer
   */ var ImageRenderer = Renderer_1.extend({
        /**
     * @override
     */ draw: function draw() {
            this.element.src = this.qrious.toDataURL();
        },
        /**
     * @override
     */ reset: function reset() {
            this.element.src = "";
        },
        /**
     * @override
     */ resize: function resize() {
            var element = this.element;
            element.width = element.height = this.qrious.size;
        }
    });
    var ImageRenderer_1 = ImageRenderer;
    /**
   * Defines an available option while also configuring how values are applied to the target object.
   *
   * Optionally, a default value can be specified as well a value transformer for greater control over how the option
   * value is applied.
   *
   * If no value transformer is specified, then any specified option will be applied directly. All values are maintained
   * on the target object itself as a field using the option name prefixed with a single underscore.
   *
   * When an option is specified as modifiable, the {@link OptionManager} will be required to include a setter for the
   * property that is defined on the target object that uses the option name.
   *
   * @param {string} name - the name to be used
   * @param {boolean} [modifiable] - <code>true</code> if the property defined on target objects should include a setter;
   * otherwise <code>false</code>
   * @param {*} [defaultValue] - the default value to be used
   * @param {Option~ValueTransformer} [valueTransformer] - the value transformer to be used
   * @public
   * @class
   * @extends Nevis
   */ var Option = lite.extend(function(name, modifiable, defaultValue, valueTransformer) {
        /**
     * The name for this {@link Option}.
     *
     * @public
     * @type {string}
     * @memberof Option#
     */ this.name = name;
        /**
     * Whether a setter should be included on the property defined on target objects for this {@link Option}.
     *
     * @public
     * @type {boolean}
     * @memberof Option#
     */ this.modifiable = Boolean(modifiable);
        /**
     * The default value for this {@link Option}.
     *
     * @public
     * @type {*}
     * @memberof Option#
     */ this.defaultValue = defaultValue;
        this._valueTransformer = valueTransformer;
    }, {
        /**
     * Transforms the specified <code>value</code> so that it can be applied for this {@link Option}.
     *
     * If a value transformer has been specified for this {@link Option}, it will be called upon to transform
     * <code>value</code>. Otherwise, <code>value</code> will be returned directly.
     *
     * @param {*} value - the value to be transformed
     * @return {*} The transformed value or <code>value</code> if no value transformer is specified.
     * @public
     * @memberof Option#
     */ transform: function transform(value) {
            var transformer = this._valueTransformer;
            if (typeof transformer === "function") return transformer(value, this);
            return value;
        }
    });
    var Option_1 = Option;
    /**
   * Returns a transformed value for the specified <code>value</code> to be applied for the <code>option</code> provided.
   *
   * @callback Option~ValueTransformer
   * @param {*} value - the value to be transformed
   * @param {Option} option - the {@link Option} for which <code>value</code> is being transformed
   * @return {*} The transform value.
   */ /**
   * Contains utility methods that are useful throughout the library.
   *
   * @public
   * @class
   * @extends Nevis
   */ var Utilities = lite.extend(null, {
        /**
     * Returns the absolute value of a given number.
     *
     * This method is simply a convenient shorthand for <code>Math.abs</code> while ensuring that nulls are returned as
     * <code>null</code> instead of zero.
     *
     * @param {number} value - the number whose absolute value is to be returned
     * @return {number} The absolute value of <code>value</code> or <code>null</code> if <code>value</code> is
     * <code>null</code>.
     * @public
     * @static
     * @memberof Utilities
     */ abs: function abs(value) {
            return value != null ? Math.abs(value) : null;
        },
        /**
     * Returns whether the specified <code>object</code> has a property with the specified <code>name</code> as an own
     * (not inherited) property.
     *
     * @param {Object} object - the object on which the property is to be checked
     * @param {string} name - the name of the property to be checked
     * @return {boolean} <code>true</code> if <code>object</code> has an own property with <code>name</code>.
     * @public
     * @static
     * @memberof Utilities
     */ hasOwn: function hasOwn(object, name) {
            return Object.prototype.hasOwnProperty.call(object, name);
        },
        /**
     * A non-operation method that does absolutely nothing.
     *
     * @return {void}
     * @public
     * @static
     * @memberof Utilities
     */ noop: function noop() {},
        /**
     * Transforms the specified <code>string</code> to upper case while remaining null-safe.
     *
     * @param {string} string - the string to be transformed to upper case
     * @return {string} <code>string</code> transformed to upper case if <code>string</code> is not <code>null</code>.
     * @public
     * @static
     * @memberof Utilities
     */ toUpperCase: function toUpperCase(string) {
            return string != null ? string.toUpperCase() : null;
        }
    });
    var Utilities_1 = Utilities;
    /**
   * Manages multiple {@link Option} instances that are intended to be used by multiple implementations.
   *
   * Although the option definitions are shared between targets, the values are maintained on the targets themselves.
   *
   * @param {Option[]} options - the options to be used
   * @public
   * @class
   * @extends Nevis
   */ var OptionManager = lite.extend(function(options) {
        /**
     * The available options for this {@link OptionManager}.
     *
     * @public
     * @type {Object.<string, Option>}
     * @memberof OptionManager#
     */ this.options = {};
        options.forEach(function(option) {
            this.options[option.name] = option;
        }, this);
    }, {
        /**
     * Returns whether an option with the specified <code>name</code> is available.
     *
     * @param {string} name - the name of the {@link Option} whose existence is to be checked
     * @return {boolean} <code>true</code> if an {@link Option} exists with <code>name</code>; otherwise
     * <code>false</code>.
     * @public
     * @memberof OptionManager#
     */ exists: function exists(name) {
            return this.options[name] != null;
        },
        /**
     * Returns the value of the option with the specified <code>name</code> on the <code>target</code> object provided.
     *
     * @param {string} name - the name of the {@link Option} whose value on <code>target</code> is to be returned
     * @param {Object} target - the object from which the value of the named {@link Option} is to be returned
     * @return {*} The value of the {@link Option} with <code>name</code> on <code>target</code>.
     * @public
     * @memberof OptionManager#
     */ get: function get(name, target) {
            return OptionManager._get(this.options[name], target);
        },
        /**
     * Returns a copy of all of the available options on the <code>target</code> object provided.
     *
     * @param {Object} target - the object from which the option name/value pairs are to be returned
     * @return {Object.<string, *>} A hash containing the name/value pairs of all options on <code>target</code>.
     * @public
     * @memberof OptionManager#
     */ getAll: function getAll(target) {
            var name;
            var options = this.options;
            var result = {};
            for(name in options)if (Utilities_1.hasOwn(options, name)) result[name] = OptionManager._get(options[name], target);
            return result;
        },
        /**
     * Initializes the available options for the <code>target</code> object provided and then applies the initial values
     * within the speciifed <code>options</code>.
     *
     * This method will throw an error if any of the names within <code>options</code> does not match an available option.
     *
     * This involves setting the default values and defining properties for all of the available options on
     * <code>target</code> before finally calling {@link OptionMananger#setAll} with <code>options</code> and
     * <code>target</code>. Any options that are configured to be modifiable will have a setter included in their defined
     * property that will allow its corresponding value to be modified.
     *
     * If a change handler is specified, it will be called whenever the value changes on <code>target</code> for a
     * modifiable option, but only when done so via the defined property's setter.
     *
     * @param {Object.<string, *>} options - the name/value pairs of the initial options to be set
     * @param {Object} target - the object on which the options are to be initialized
     * @param {Function} [changeHandler] - the function to be called whenever the value of an modifiable option changes on
     * <code>target</code>
     * @return {void}
     * @throws {Error} If <code>options</code> contains an invalid option name.
     * @public
     * @memberof OptionManager#
     */ init: function init(options, target, changeHandler) {
            if (typeof changeHandler !== "function") changeHandler = Utilities_1.noop;
            var name, option;
            for(name in this.options)if (Utilities_1.hasOwn(this.options, name)) {
                option = this.options[name];
                OptionManager._set(option, option.defaultValue, target);
                OptionManager._createAccessor(option, target, changeHandler);
            }
            this._setAll(options, target, true);
        },
        /**
     * Sets the value of the option with the specified <code>name</code> on the <code>target</code> object provided to
     * <code>value</code>.
     *
     * This method will throw an error if <code>name</code> does not match an available option or matches an option that
     * cannot be modified.
     *
     * If <code>value</code> is <code>null</code> and the {@link Option} has a default value configured, then that default
     * value will be used instead. If the {@link Option} also has a value transformer configured, it will be used to
     * transform whichever value was determined to be used.
     *
     * This method returns whether the value of the underlying field on <code>target</code> was changed as a result.
     *
     * @param {string} name - the name of the {@link Option} whose value is to be set
     * @param {*} value - the value to be set for the named {@link Option} on <code>target</code>
     * @param {Object} target - the object on which <code>value</code> is to be set for the named {@link Option}
     * @return {boolean} <code>true</code> if the underlying field on <code>target</code> was changed; otherwise
     * <code>false</code>.
     * @throws {Error} If <code>name</code> is invalid or is for an option that cannot be modified.
     * @public
     * @memberof OptionManager#
     */ set: function set(name, value, target) {
            return this._set(name, value, target);
        },
        /**
     * Sets all of the specified <code>options</code> on the <code>target</code> object provided to their corresponding
     * values.
     *
     * This method will throw an error if any of the names within <code>options</code> does not match an available option
     * or matches an option that cannot be modified.
     *
     * If any value within <code>options</code> is <code>null</code> and the corresponding {@link Option} has a default
     * value configured, then that default value will be used instead. If an {@link Option} also has a value transformer
     * configured, it will be used to transform whichever value was determined to be used.
     *
     * This method returns whether the value for any of the underlying fields on <code>target</code> were changed as a
     * result.
     *
     * @param {Object.<string, *>} options - the name/value pairs of options to be set
     * @param {Object} target - the object on which the options are to be set
     * @return {boolean} <code>true</code> if any of the underlying fields on <code>target</code> were changed; otherwise
     * <code>false</code>.
     * @throws {Error} If <code>options</code> contains an invalid option name or an option that cannot be modiifed.
     * @public
     * @memberof OptionManager#
     */ setAll: function setAll(options, target) {
            return this._setAll(options, target);
        },
        _set: function _set(name, value, target, allowUnmodifiable) {
            var option = this.options[name];
            if (!option) throw new Error("Invalid option: " + name);
            if (!option.modifiable && !allowUnmodifiable) throw new Error("Option cannot be modified: " + name);
            return OptionManager._set(option, value, target);
        },
        _setAll: function _setAll(options, target, allowUnmodifiable) {
            if (!options) return false;
            var name;
            var changed = false;
            for(name in options)if (Utilities_1.hasOwn(options, name) && this._set(name, options[name], target, allowUnmodifiable)) changed = true;
            return changed;
        }
    }, {
        _createAccessor: function _createAccessor(option, target, changeHandler) {
            var descriptor = {
                get: function get() {
                    return OptionManager._get(option, target);
                }
            };
            if (option.modifiable) descriptor.set = function(value) {
                if (OptionManager._set(option, value, target)) changeHandler(value, option);
            };
            Object.defineProperty(target, option.name, descriptor);
        },
        _get: function _get(option, target) {
            return target["_" + option.name];
        },
        _set: function _set(option, value, target) {
            var fieldName = "_" + option.name;
            var oldValue = target[fieldName];
            var newValue = option.transform(value != null ? value : option.defaultValue);
            target[fieldName] = newValue;
            return newValue !== oldValue;
        }
    });
    var OptionManager_1 = OptionManager;
    /**
   * Called whenever the value of a modifiable {@link Option} is changed on a target object via the defined property's
   * setter.
   *
   * @callback OptionManager~ChangeHandler
   * @param {*} value - the new value for <code>option</code> on the target object
   * @param {Option} option - the modifable {@link Option} whose value has changed on the target object.
   * @return {void}
   */ /**
   * A basic manager for {@link Service} implementations that are mapped to simple names.
   *
   * @public
   * @class
   * @extends Nevis
   */ var ServiceManager = lite.extend(function() {
        this._services = {};
    }, {
        /**
     * Returns the {@link Service} being managed with the specified <code>name</code>.
     *
     * @param {string} name - the name of the {@link Service} to be returned
     * @return {Service} The {@link Service} is being managed with <code>name</code>.
     * @throws {Error} If no {@link Service} is being managed with <code>name</code>.
     * @public
     * @memberof ServiceManager#
     */ getService: function getService(name) {
            var service = this._services[name];
            if (!service) throw new Error("Service is not being managed with name: " + name);
            return service;
        },
        /**
     * Sets the {@link Service} implementation to be managed for the specified <code>name</code> to the
     * <code>service</code> provided.
     *
     * @param {string} name - the name of the {@link Service} to be managed with <code>name</code>
     * @param {Service} service - the {@link Service} implementation to be managed
     * @return {void}
     * @throws {Error} If a {@link Service} is already being managed with the same <code>name</code>.
     * @public
     * @memberof ServiceManager#
     */ setService: function setService(name, service) {
            if (this._services[name]) throw new Error("Service is already managed with name: " + name);
            if (service) this._services[name] = service;
        }
    });
    var ServiceManager_1 = ServiceManager;
    var optionManager = new OptionManager_1([
        new Option_1("background", true, "white"),
        new Option_1("backgroundAlpha", true, 1, Utilities_1.abs),
        new Option_1("element"),
        new Option_1("foreground", true, "black"),
        new Option_1("foregroundAlpha", true, 1, Utilities_1.abs),
        new Option_1("level", true, "L", Utilities_1.toUpperCase),
        new Option_1("mime", true, "image/png"),
        new Option_1("padding", true, null, Utilities_1.abs),
        new Option_1("size", true, 100, Utilities_1.abs),
        new Option_1("value", true, "")
    ]);
    var serviceManager = new ServiceManager_1();
    /**
   * Enables configuration of a QR code generator which uses HTML5 <code>canvas</code> for rendering.
   *
   * @param {QRious~Options} [options] - the options to be used
   * @throws {Error} If any <code>options</code> are invalid.
   * @public
   * @class
   * @extends Nevis
   */ var QRious = lite.extend(function(options) {
        optionManager.init(options, this, this.update.bind(this));
        var element = optionManager.get("element", this);
        var elementService = serviceManager.getService("element");
        var canvas = element && elementService.isCanvas(element) ? element : elementService.createCanvas();
        var image = element && elementService.isImage(element) ? element : elementService.createImage();
        this._canvasRenderer = new CanvasRenderer_1(this, canvas, true);
        this._imageRenderer = new ImageRenderer_1(this, image, image === element);
        this.update();
    }, {
        /**
     * Returns all of the options configured for this {@link QRious}.
     *
     * Any changes made to the returned object will not be reflected in the options themselves or their corresponding
     * underlying fields.
     *
     * @return {Object.<string, *>} A copy of the applied options.
     * @public
     * @memberof QRious#
     */ get: function get() {
            return optionManager.getAll(this);
        },
        /**
     * Sets all of the specified <code>options</code> and automatically updates this {@link QRious} if any of the
     * underlying fields are changed as a result.
     *
     * This is the preferred method for updating multiple options at one time to avoid unnecessary updates between
     * changes.
     *
     * @param {QRious~Options} options - the options to be set
     * @return {void}
     * @throws {Error} If any <code>options</code> are invalid or cannot be modified.
     * @public
     * @memberof QRious#
     */ set: function set(options) {
            if (optionManager.setAll(options, this)) this.update();
        },
        /**
     * Returns the image data URI for the generated QR code using the <code>mime</code> provided.
     *
     * @param {string} [mime] - the MIME type for the image
     * @return {string} The image data URI for the QR code.
     * @public
     * @memberof QRious#
     */ toDataURL: function toDataURL(mime) {
            return this.canvas.toDataURL(mime || this.mime);
        },
        /**
     * Updates this {@link QRious} by generating a new {@link Frame} and re-rendering the QR code.
     *
     * @return {void}
     * @protected
     * @memberof QRious#
     */ update: function update() {
            var frame = new Frame_1({
                level: this.level,
                value: this.value
            });
            this._canvasRenderer.render(frame);
            this._imageRenderer.render(frame);
        }
    }, {
        /**
     * Configures the <code>service</code> provided to be used by all {@link QRious} instances.
     *
     * @param {Service} service - the {@link Service} to be configured
     * @return {void}
     * @throws {Error} If a {@link Service} has already been configured with the same name.
     * @public
     * @static
     * @memberof QRious
     */ use: function use(service) {
            serviceManager.setService(service.getName(), service);
        }
    });
    Object.defineProperties(QRious.prototype, {
        canvas: {
            /**
       * Returns the <code>canvas</code> element being used to render the QR code for this {@link QRious}.
       *
       * @return {*} The <code>canvas</code> element.
       * @public
       * @memberof QRious#
       * @alias canvas
       */ get: function get() {
                return this._canvasRenderer.getElement();
            }
        },
        image: {
            /**
       * Returns the <code>img</code> element being used to render the QR code for this {@link QRious}.
       *
       * @return {*} The <code>img</code> element.
       * @public
       * @memberof QRious#
       * @alias image
       */ get: function get() {
                return this._imageRenderer.getElement();
            }
        }
    });
    var QRious_1$2 = QRious;
    /**
   * The options used by {@link QRious}.
   *
   * @typedef {Object} QRious~Options
   * @property {string} [background="white"] - The background color to be applied to the QR code.
   * @property {number} [backgroundAlpha=1] - The background alpha to be applied to the QR code.
   * @property {*} [element] - The element to be used to render the QR code which may either be an <code>canvas</code> or
   * <code>img</code>. The element(s) will be created if needed.
   * @property {string} [foreground="black"] - The foreground color to be applied to the QR code.
   * @property {number} [foregroundAlpha=1] - The foreground alpha to be applied to the QR code.
   * @property {string} [level="L"] - The error correction level to be applied to the QR code.
   * @property {string} [mime="image/png"] - The MIME type to be used to render the image for the QR code.
   * @property {number} [padding] - The padding for the QR code in pixels.
   * @property {number} [size=100] - The size of the QR code in pixels.
   * @property {string} [value=""] - The value to be encoded within the QR code.
   */ var index = QRious_1$2;
    /**
   * Defines a service contract that must be met by all implementations.
   *
   * @public
   * @class
   * @extends Nevis
   */ var Service = lite.extend({
        /**
     * Returns the name of this {@link Service}.
     *
     * @return {string} The service name.
     * @public
     * @abstract
     * @memberof Service#
     */ getName: function getName() {}
    });
    var Service_1 = Service;
    /**
   * A service for working with elements.
   *
   * @public
   * @class
   * @extends Service
   */ var ElementService = Service_1.extend({
        /**
     * Creates an instance of a canvas element.
     *
     * Implementations of {@link ElementService} <b>must</b> override this method with their own specific logic.
     *
     * @return {*} The newly created canvas element.
     * @public
     * @abstract
     * @memberof ElementService#
     */ createCanvas: function createCanvas() {},
        /**
     * Creates an instance of a image element.
     *
     * Implementations of {@link ElementService} <b>must</b> override this method with their own specific logic.
     *
     * @return {*} The newly created image element.
     * @public
     * @abstract
     * @memberof ElementService#
     */ createImage: function createImage() {},
        /**
     * @override
     */ getName: function getName() {
            return "element";
        },
        /**
     * Returns whether the specified <code>element</code> is a canvas.
     *
     * Implementations of {@link ElementService} <b>must</b> override this method with their own specific logic.
     *
     * @param {*} element - the element to be checked
     * @return {boolean} <code>true</code> if <code>element</code> is a canvas; otherwise <code>false</code>.
     * @public
     * @abstract
     * @memberof ElementService#
     */ isCanvas: function isCanvas(element) {},
        /**
     * Returns whether the specified <code>element</code> is an image.
     *
     * Implementations of {@link ElementService} <b>must</b> override this method with their own specific logic.
     *
     * @param {*} element - the element to be checked
     * @return {boolean} <code>true</code> if <code>element</code> is an image; otherwise <code>false</code>.
     * @public
     * @abstract
     * @memberof ElementService#
     */ isImage: function isImage(element) {}
    });
    var ElementService_1 = ElementService;
    /**
   * An implementation of {@link ElementService} intended for use within a browser environment.
   *
   * @public
   * @class
   * @extends ElementService
   */ var BrowserElementService = ElementService_1.extend({
        /**
     * @override
     */ createCanvas: function createCanvas() {
            return document.createElement("canvas");
        },
        /**
     * @override
     */ createImage: function createImage() {
            return document.createElement("img");
        },
        /**
     * @override
     */ isCanvas: function isCanvas(element) {
            return element instanceof HTMLCanvasElement;
        },
        /**
     * @override
     */ isImage: function isImage(element) {
            return element instanceof HTMLImageElement;
        }
    });
    var BrowserElementService_1 = BrowserElementService;
    index.use(new BrowserElementService_1());
    var QRious_1 = index;
    return QRious_1;
});



var $d993ded166d3bfa4$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");
var $1d21c0755a76a852$exports = {};
"use strict";
var $1d21c0755a76a852$var$__createBinding = $1d21c0755a76a852$exports && $1d21c0755a76a852$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function get() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $1d21c0755a76a852$var$__setModuleDefault = $1d21c0755a76a852$exports && $1d21c0755a76a852$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $1d21c0755a76a852$var$__importStar = $1d21c0755a76a852$exports && $1d21c0755a76a852$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $1d21c0755a76a852$var$__createBinding(result, mod, k);
    }
    $1d21c0755a76a852$var$__setModuleDefault(result, mod);
    return result;
};
var $1d21c0755a76a852$var$__importDefault = $1d21c0755a76a852$exports && $1d21c0755a76a852$exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty($1d21c0755a76a852$exports, "__esModule", {
    value: true
});
$1d21c0755a76a852$exports.decodeXML = $1d21c0755a76a852$exports.decodeHTMLStrict = $1d21c0755a76a852$exports.decodeHTMLAttribute = $1d21c0755a76a852$exports.decodeHTML = $1d21c0755a76a852$exports.determineBranch = $1d21c0755a76a852$exports.EntityDecoder = $1d21c0755a76a852$exports.DecodingMode = $1d21c0755a76a852$exports.BinTrieFlags = $1d21c0755a76a852$exports.fromCodePoint = $1d21c0755a76a852$exports.replaceCodePoint = $1d21c0755a76a852$exports.decodeCodePoint = $1d21c0755a76a852$exports.xmlDecodeTree = $1d21c0755a76a852$exports.htmlDecodeTree = void 0;

var $1d21c0755a76a852$var$decode_data_html_js_1 = $1d21c0755a76a852$var$__importDefault((parcelRequire("cp2gL")));
$1d21c0755a76a852$exports.htmlDecodeTree = $1d21c0755a76a852$var$decode_data_html_js_1.default;

var $1d21c0755a76a852$var$decode_data_xml_js_1 = $1d21c0755a76a852$var$__importDefault((parcelRequire("jDyhq")));
$1d21c0755a76a852$exports.xmlDecodeTree = $1d21c0755a76a852$var$decode_data_xml_js_1.default;

var $1d21c0755a76a852$var$decode_codepoint_js_1 = $1d21c0755a76a852$var$__importStar((parcelRequire("eliVh")));
$1d21c0755a76a852$exports.decodeCodePoint = $1d21c0755a76a852$var$decode_codepoint_js_1.default;

Object.defineProperty($1d21c0755a76a852$exports, "replaceCodePoint", {
    enumerable: true,
    get: function get() {
        return (parcelRequire("eliVh")).replaceCodePoint;
    }
});
Object.defineProperty($1d21c0755a76a852$exports, "fromCodePoint", {
    enumerable: true,
    get: function get() {
        return (parcelRequire("eliVh")).fromCodePoint;
    }
});
var $1d21c0755a76a852$var$CharCodes;
(function(CharCodes) {
    CharCodes[CharCodes["NUM"] = 35] = "NUM";
    CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
    CharCodes[CharCodes["EQUALS"] = 61] = "EQUALS";
    CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
    CharCodes[CharCodes["NINE"] = 57] = "NINE";
    CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
    CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
    CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
    CharCodes[CharCodes["LOWER_Z"] = 122] = "LOWER_Z";
    CharCodes[CharCodes["UPPER_A"] = 65] = "UPPER_A";
    CharCodes[CharCodes["UPPER_F"] = 70] = "UPPER_F";
    CharCodes[CharCodes["UPPER_Z"] = 90] = "UPPER_Z";
})($1d21c0755a76a852$var$CharCodes || ($1d21c0755a76a852$var$CharCodes = {}));
/** Bit that needs to be set to convert an upper case ASCII character to lower case */ var $1d21c0755a76a852$var$TO_LOWER_BIT = 32;
var $1d21c0755a76a852$var$BinTrieFlags;
(function(BinTrieFlags) {
    BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
    BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
    BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})($1d21c0755a76a852$var$BinTrieFlags = $1d21c0755a76a852$exports.BinTrieFlags || ($1d21c0755a76a852$exports.BinTrieFlags = {}));
function $1d21c0755a76a852$var$isNumber(code) {
    return code >= $1d21c0755a76a852$var$CharCodes.ZERO && code <= $1d21c0755a76a852$var$CharCodes.NINE;
}
function $1d21c0755a76a852$var$isHexadecimalCharacter(code) {
    return code >= $1d21c0755a76a852$var$CharCodes.UPPER_A && code <= $1d21c0755a76a852$var$CharCodes.UPPER_F || code >= $1d21c0755a76a852$var$CharCodes.LOWER_A && code <= $1d21c0755a76a852$var$CharCodes.LOWER_F;
}
function $1d21c0755a76a852$var$isAsciiAlphaNumeric(code) {
    return code >= $1d21c0755a76a852$var$CharCodes.UPPER_A && code <= $1d21c0755a76a852$var$CharCodes.UPPER_Z || code >= $1d21c0755a76a852$var$CharCodes.LOWER_A && code <= $1d21c0755a76a852$var$CharCodes.LOWER_Z || $1d21c0755a76a852$var$isNumber(code);
}
/**
 * Checks if the given character is a valid end character for an entity in an attribute.
 *
 * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
 * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
 */ function $1d21c0755a76a852$var$isEntityInAttributeInvalidEnd(code) {
    return code === $1d21c0755a76a852$var$CharCodes.EQUALS || $1d21c0755a76a852$var$isAsciiAlphaNumeric(code);
}
var $1d21c0755a76a852$var$EntityDecoderState;
(function(EntityDecoderState) {
    EntityDecoderState[EntityDecoderState["EntityStart"] = 0] = "EntityStart";
    EntityDecoderState[EntityDecoderState["NumericStart"] = 1] = "NumericStart";
    EntityDecoderState[EntityDecoderState["NumericDecimal"] = 2] = "NumericDecimal";
    EntityDecoderState[EntityDecoderState["NumericHex"] = 3] = "NumericHex";
    EntityDecoderState[EntityDecoderState["NamedEntity"] = 4] = "NamedEntity";
})($1d21c0755a76a852$var$EntityDecoderState || ($1d21c0755a76a852$var$EntityDecoderState = {}));
var $1d21c0755a76a852$var$DecodingMode;
(function(DecodingMode) {
    /** Entities in text nodes that can end with any character. */ DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
    /** Only allow entities terminated with a semicolon. */ DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
    /** Entities in attributes have limitations on ending characters. */ DecodingMode[DecodingMode["Attribute"] = 2] = "Attribute";
})($1d21c0755a76a852$var$DecodingMode = $1d21c0755a76a852$exports.DecodingMode || ($1d21c0755a76a852$exports.DecodingMode = {}));
/**
 * Token decoder with support of writing partial entities.
 */ var $1d21c0755a76a852$var$EntityDecoder = /** @class */ function() {
    function EntityDecoder(/** The tree used to decode entities. */ decodeTree, /**
     * The function that is called when a codepoint is decoded.
     *
     * For multi-byte named entities, this will be called multiple times,
     * with the second codepoint, and the same `consumed` value.
     *
     * @param codepoint The decoded codepoint.
     * @param consumed The number of bytes consumed by the decoder.
     */ emitCodePoint, /** An object that is used to produce errors. */ errors) {
        this.decodeTree = decodeTree;
        this.emitCodePoint = emitCodePoint;
        this.errors = errors;
        /** The current state of the decoder. */ this.state = $1d21c0755a76a852$var$EntityDecoderState.EntityStart;
        /** Characters that were consumed while parsing an entity. */ this.consumed = 1;
        /**
         * The result of the entity.
         *
         * Either the result index of a numeric entity, or the codepoint of a
         * numeric entity.
         */ this.result = 0;
        /** The current index in the decode tree. */ this.treeIndex = 0;
        /** The number of characters that were consumed in excess. */ this.excess = 1;
        /** The mode in which the decoder is operating. */ this.decodeMode = $1d21c0755a76a852$var$DecodingMode.Strict;
    }
    /** Resets the instance to make it reusable. */ EntityDecoder.prototype.startEntity = function(decodeMode) {
        this.decodeMode = decodeMode;
        this.state = $1d21c0755a76a852$var$EntityDecoderState.EntityStart;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.consumed = 1;
    };
    /**
     * Write an entity to the decoder. This can be called multiple times with partial entities.
     * If the entity is incomplete, the decoder will return -1.
     *
     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
     * entity is incomplete, and resume when the next string is written.
     *
     * @param string The string containing the entity (or a continuation of the entity).
     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ EntityDecoder.prototype.write = function(str, offset) {
        switch(this.state){
            case $1d21c0755a76a852$var$EntityDecoderState.EntityStart:
                if (str.charCodeAt(offset) === $1d21c0755a76a852$var$CharCodes.NUM) {
                    this.state = $1d21c0755a76a852$var$EntityDecoderState.NumericStart;
                    this.consumed += 1;
                    return this.stateNumericStart(str, offset + 1);
                }
                this.state = $1d21c0755a76a852$var$EntityDecoderState.NamedEntity;
                return this.stateNamedEntity(str, offset);
            case $1d21c0755a76a852$var$EntityDecoderState.NumericStart:
                return this.stateNumericStart(str, offset);
            case $1d21c0755a76a852$var$EntityDecoderState.NumericDecimal:
                return this.stateNumericDecimal(str, offset);
            case $1d21c0755a76a852$var$EntityDecoderState.NumericHex:
                return this.stateNumericHex(str, offset);
            case $1d21c0755a76a852$var$EntityDecoderState.NamedEntity:
                return this.stateNamedEntity(str, offset);
        }
    };
    /**
     * Switches between the numeric decimal and hexadecimal states.
     *
     * Equivalent to the `Numeric character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ EntityDecoder.prototype.stateNumericStart = function(str, offset) {
        if (offset >= str.length) return -1;
        if ((str.charCodeAt(offset) | $1d21c0755a76a852$var$TO_LOWER_BIT) === $1d21c0755a76a852$var$CharCodes.LOWER_X) {
            this.state = $1d21c0755a76a852$var$EntityDecoderState.NumericHex;
            this.consumed += 1;
            return this.stateNumericHex(str, offset + 1);
        }
        this.state = $1d21c0755a76a852$var$EntityDecoderState.NumericDecimal;
        return this.stateNumericDecimal(str, offset);
    };
    EntityDecoder.prototype.addToNumericResult = function(str, start, end, base) {
        if (start !== end) {
            var digitCount = end - start;
            this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
            this.consumed += digitCount;
        }
    };
    /**
     * Parses a hexadecimal numeric entity.
     *
     * Equivalent to the `Hexademical character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ EntityDecoder.prototype.stateNumericHex = function(str, offset) {
        var startIdx = offset;
        while(offset < str.length){
            var char = str.charCodeAt(offset);
            if ($1d21c0755a76a852$var$isNumber(char) || $1d21c0755a76a852$var$isHexadecimalCharacter(char)) offset += 1;
            else {
                this.addToNumericResult(str, startIdx, offset, 16);
                return this.emitNumericEntity(char, 3);
            }
        }
        this.addToNumericResult(str, startIdx, offset, 16);
        return -1;
    };
    /**
     * Parses a decimal numeric entity.
     *
     * Equivalent to the `Decimal character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ EntityDecoder.prototype.stateNumericDecimal = function(str, offset) {
        var startIdx = offset;
        while(offset < str.length){
            var char = str.charCodeAt(offset);
            if ($1d21c0755a76a852$var$isNumber(char)) offset += 1;
            else {
                this.addToNumericResult(str, startIdx, offset, 10);
                return this.emitNumericEntity(char, 2);
            }
        }
        this.addToNumericResult(str, startIdx, offset, 10);
        return -1;
    };
    /**
     * Validate and emit a numeric entity.
     *
     * Implements the logic from the `Hexademical character reference start
     * state` and `Numeric character reference end state` in the HTML spec.
     *
     * @param lastCp The last code point of the entity. Used to see if the
     *               entity was terminated with a semicolon.
     * @param expectedLength The minimum number of characters that should be
     *                       consumed. Used to validate that at least one digit
     *                       was consumed.
     * @returns The number of characters that were consumed.
     */ EntityDecoder.prototype.emitNumericEntity = function(lastCp, expectedLength) {
        var _a;
        // Ensure we consumed at least one digit.
        if (this.consumed <= expectedLength) {
            (_a = this.errors) === null || _a === void 0 || _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
        }
        // Figure out if this is a legit end of the entity
        if (lastCp === $1d21c0755a76a852$var$CharCodes.SEMI) this.consumed += 1;
        else if (this.decodeMode === $1d21c0755a76a852$var$DecodingMode.Strict) return 0;
        this.emitCodePoint((0, $1d21c0755a76a852$var$decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);
        if (this.errors) {
            if (lastCp !== $1d21c0755a76a852$var$CharCodes.SEMI) this.errors.missingSemicolonAfterCharacterReference();
            this.errors.validateNumericCharacterReference(this.result);
        }
        return this.consumed;
    };
    /**
     * Parses a named entity.
     *
     * Equivalent to the `Named character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ EntityDecoder.prototype.stateNamedEntity = function(str, offset) {
        var decodeTree = this.decodeTree;
        var current = decodeTree[this.treeIndex];
        // The mask is the number of bytes of the value, including the current byte.
        var valueLength = (current & $1d21c0755a76a852$var$BinTrieFlags.VALUE_LENGTH) >> 14;
        for(; offset < str.length; offset++, this.excess++){
            var char = str.charCodeAt(offset);
            this.treeIndex = $1d21c0755a76a852$var$determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
            if (this.treeIndex < 0) return this.result === 0 || // If we are parsing an attribute
            this.decodeMode === $1d21c0755a76a852$var$DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
            (valueLength === 0 || // And there should be no invalid characters.
            $1d21c0755a76a852$var$isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
            current = decodeTree[this.treeIndex];
            valueLength = (current & $1d21c0755a76a852$var$BinTrieFlags.VALUE_LENGTH) >> 14;
            // If the branch is a value, store it and continue
            if (valueLength !== 0) {
                // If the entity is terminated by a semicolon, we are done.
                if (char === $1d21c0755a76a852$var$CharCodes.SEMI) return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.
                if (this.decodeMode !== $1d21c0755a76a852$var$DecodingMode.Strict) {
                    this.result = this.treeIndex;
                    this.consumed += this.excess;
                    this.excess = 0;
                }
            }
        }
        return -1;
    };
    /**
     * Emit a named entity that was not terminated with a semicolon.
     *
     * @returns The number of characters consumed.
     */ EntityDecoder.prototype.emitNotTerminatedNamedEntity = function() {
        var _a;
        var _b = this, result = _b.result, decodeTree = _b.decodeTree;
        var valueLength = (decodeTree[result] & $1d21c0755a76a852$var$BinTrieFlags.VALUE_LENGTH) >> 14;
        this.emitNamedEntityData(result, valueLength, this.consumed);
        (_a = this.errors) === null || _a === void 0 || _a.missingSemicolonAfterCharacterReference();
        return this.consumed;
    };
    /**
     * Emit a named entity.
     *
     * @param result The index of the entity in the decode tree.
     * @param valueLength The number of bytes in the entity.
     * @param consumed The number of characters consumed.
     *
     * @returns The number of characters consumed.
     */ EntityDecoder.prototype.emitNamedEntityData = function(result, valueLength, consumed) {
        var decodeTree = this.decodeTree;
        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~$1d21c0755a76a852$var$BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
        if (valueLength === 3) // For multi-byte values, we need to emit the second byte.
        this.emitCodePoint(decodeTree[result + 2], consumed);
        return consumed;
    };
    /**
     * Signal to the parser that the end of the input was reached.
     *
     * Remaining data will be emitted and relevant errors will be produced.
     *
     * @returns The number of characters consumed.
     */ EntityDecoder.prototype.end = function() {
        var _a;
        switch(this.state){
            case $1d21c0755a76a852$var$EntityDecoderState.NamedEntity:
                // Emit a named entity if we have one.
                return this.result !== 0 && (this.decodeMode !== $1d21c0755a76a852$var$DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
            // Otherwise, emit a numeric entity if we have one.
            case $1d21c0755a76a852$var$EntityDecoderState.NumericDecimal:
                return this.emitNumericEntity(0, 2);
            case $1d21c0755a76a852$var$EntityDecoderState.NumericHex:
                return this.emitNumericEntity(0, 3);
            case $1d21c0755a76a852$var$EntityDecoderState.NumericStart:
                (_a = this.errors) === null || _a === void 0 || _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
                return 0;
            case $1d21c0755a76a852$var$EntityDecoderState.EntityStart:
                // Return 0 if we have no entity.
                return 0;
        }
    };
    return EntityDecoder;
}();
$1d21c0755a76a852$exports.EntityDecoder = $1d21c0755a76a852$var$EntityDecoder;
/**
 * Creates a function that decodes entities in a string.
 *
 * @param decodeTree The decode tree.
 * @returns A function that decodes entities in a string.
 */ function $1d21c0755a76a852$var$getDecoder(decodeTree) {
    var ret = "";
    var decoder = new $1d21c0755a76a852$var$EntityDecoder(decodeTree, function(str) {
        return ret += (0, $1d21c0755a76a852$var$decode_codepoint_js_1.fromCodePoint)(str);
    });
    return function decodeWithTrie(str, decodeMode) {
        var lastIndex = 0;
        var offset = 0;
        while((offset = str.indexOf("&", offset)) >= 0){
            ret += str.slice(lastIndex, offset);
            decoder.startEntity(decodeMode);
            var len = decoder.write(str, // Skip the "&"
            offset + 1);
            if (len < 0) {
                lastIndex = offset + decoder.end();
                break;
            }
            lastIndex = offset + len;
            // If `len` is 0, skip the current `&` and continue.
            offset = len === 0 ? lastIndex + 1 : lastIndex;
        }
        var result = ret + str.slice(lastIndex);
        // Make sure we don't keep a reference to the final string.
        ret = "";
        return result;
    };
}
/**
 * Determines the branch of the current node that is taken given the current
 * character. This function is used to traverse the trie.
 *
 * @param decodeTree The trie.
 * @param current The current node.
 * @param nodeIdx The index right after the current node and its value.
 * @param char The current character.
 * @returns The index of the next node, or -1 if no branch is taken.
 */ function $1d21c0755a76a852$var$determineBranch(decodeTree, current, nodeIdx, char) {
    var branchCount = (current & $1d21c0755a76a852$var$BinTrieFlags.BRANCH_LENGTH) >> 7;
    var jumpOffset = current & $1d21c0755a76a852$var$BinTrieFlags.JUMP_TABLE;
    // Case 1: Single branch encoded in jump offset
    if (branchCount === 0) return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
    // Case 2: Multiple branches encoded in jump table
    if (jumpOffset) {
        var value = char - jumpOffset;
        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
    }
    // Case 3: Multiple branches encoded in dictionary
    // Binary search for the character.
    var lo = nodeIdx;
    var hi = lo + branchCount - 1;
    while(lo <= hi){
        var mid = lo + hi >>> 1;
        var midVal = decodeTree[mid];
        if (midVal < char) lo = mid + 1;
        else if (midVal > char) hi = mid - 1;
        else return decodeTree[mid + branchCount];
    }
    return -1;
}
$1d21c0755a76a852$exports.determineBranch = $1d21c0755a76a852$var$determineBranch;
var $1d21c0755a76a852$var$htmlDecoder = $1d21c0755a76a852$var$getDecoder($1d21c0755a76a852$var$decode_data_html_js_1.default);
var $1d21c0755a76a852$var$xmlDecoder = $1d21c0755a76a852$var$getDecoder($1d21c0755a76a852$var$decode_data_xml_js_1.default);
/**
 * Decodes an HTML string.
 *
 * @param str The string to decode.
 * @param mode The decoding mode.
 * @returns The decoded string.
 */ function $1d21c0755a76a852$var$decodeHTML(str, mode) {
    if (mode === void 0) mode = $1d21c0755a76a852$var$DecodingMode.Legacy;
    return $1d21c0755a76a852$var$htmlDecoder(str, mode);
}
$1d21c0755a76a852$exports.decodeHTML = $1d21c0755a76a852$var$decodeHTML;
/**
 * Decodes an HTML string in an attribute.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */ function $1d21c0755a76a852$var$decodeHTMLAttribute(str) {
    return $1d21c0755a76a852$var$htmlDecoder(str, $1d21c0755a76a852$var$DecodingMode.Attribute);
}
$1d21c0755a76a852$exports.decodeHTMLAttribute = $1d21c0755a76a852$var$decodeHTMLAttribute;
/**
 * Decodes an HTML string, requiring all entities to be terminated by a semicolon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */ function $1d21c0755a76a852$var$decodeHTMLStrict(str) {
    return $1d21c0755a76a852$var$htmlDecoder(str, $1d21c0755a76a852$var$DecodingMode.Strict);
}
$1d21c0755a76a852$exports.decodeHTMLStrict = $1d21c0755a76a852$var$decodeHTMLStrict;
/**
 * Decodes an XML string, requiring all entities to be terminated by a semicolon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */ function $1d21c0755a76a852$var$decodeXML(str) {
    return $1d21c0755a76a852$var$xmlDecoder(str, $1d21c0755a76a852$var$DecodingMode.Strict);
}
$1d21c0755a76a852$exports.decodeXML = $1d21c0755a76a852$var$decodeXML;


var $30c3ff9ff46766d4$var$CharCodes;
(function(CharCodes) {
    CharCodes[CharCodes["Tab"] = 9] = "Tab";
    CharCodes[CharCodes["NewLine"] = 10] = "NewLine";
    CharCodes[CharCodes["FormFeed"] = 12] = "FormFeed";
    CharCodes[CharCodes["CarriageReturn"] = 13] = "CarriageReturn";
    CharCodes[CharCodes["Space"] = 32] = "Space";
    CharCodes[CharCodes["ExclamationMark"] = 33] = "ExclamationMark";
    CharCodes[CharCodes["Number"] = 35] = "Number";
    CharCodes[CharCodes["Amp"] = 38] = "Amp";
    CharCodes[CharCodes["SingleQuote"] = 39] = "SingleQuote";
    CharCodes[CharCodes["DoubleQuote"] = 34] = "DoubleQuote";
    CharCodes[CharCodes["Dash"] = 45] = "Dash";
    CharCodes[CharCodes["Slash"] = 47] = "Slash";
    CharCodes[CharCodes["Zero"] = 48] = "Zero";
    CharCodes[CharCodes["Nine"] = 57] = "Nine";
    CharCodes[CharCodes["Semi"] = 59] = "Semi";
    CharCodes[CharCodes["Lt"] = 60] = "Lt";
    CharCodes[CharCodes["Eq"] = 61] = "Eq";
    CharCodes[CharCodes["Gt"] = 62] = "Gt";
    CharCodes[CharCodes["Questionmark"] = 63] = "Questionmark";
    CharCodes[CharCodes["UpperA"] = 65] = "UpperA";
    CharCodes[CharCodes["LowerA"] = 97] = "LowerA";
    CharCodes[CharCodes["UpperF"] = 70] = "UpperF";
    CharCodes[CharCodes["LowerF"] = 102] = "LowerF";
    CharCodes[CharCodes["UpperZ"] = 90] = "UpperZ";
    CharCodes[CharCodes["LowerZ"] = 122] = "LowerZ";
    CharCodes[CharCodes["LowerX"] = 120] = "LowerX";
    CharCodes[CharCodes["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
})($30c3ff9ff46766d4$var$CharCodes || ($30c3ff9ff46766d4$var$CharCodes = {}));
/** All the states the tokenizer can be in. */ var $30c3ff9ff46766d4$var$State;
(function(State) {
    State[State["Text"] = 1] = "Text";
    State[State["BeforeTagName"] = 2] = "BeforeTagName";
    State[State["InTagName"] = 3] = "InTagName";
    State[State["InSelfClosingTag"] = 4] = "InSelfClosingTag";
    State[State["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
    State[State["InClosingTagName"] = 6] = "InClosingTagName";
    State[State["AfterClosingTagName"] = 7] = "AfterClosingTagName";
    // Attributes
    State[State["BeforeAttributeName"] = 8] = "BeforeAttributeName";
    State[State["InAttributeName"] = 9] = "InAttributeName";
    State[State["AfterAttributeName"] = 10] = "AfterAttributeName";
    State[State["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
    State[State["InAttributeValueDq"] = 12] = "InAttributeValueDq";
    State[State["InAttributeValueSq"] = 13] = "InAttributeValueSq";
    State[State["InAttributeValueNq"] = 14] = "InAttributeValueNq";
    // Declarations
    State[State["BeforeDeclaration"] = 15] = "BeforeDeclaration";
    State[State["InDeclaration"] = 16] = "InDeclaration";
    // Processing instructions
    State[State["InProcessingInstruction"] = 17] = "InProcessingInstruction";
    // Comments & CDATA
    State[State["BeforeComment"] = 18] = "BeforeComment";
    State[State["CDATASequence"] = 19] = "CDATASequence";
    State[State["InSpecialComment"] = 20] = "InSpecialComment";
    State[State["InCommentLike"] = 21] = "InCommentLike";
    // Special tags
    State[State["BeforeSpecialS"] = 22] = "BeforeSpecialS";
    State[State["SpecialStartSequence"] = 23] = "SpecialStartSequence";
    State[State["InSpecialTag"] = 24] = "InSpecialTag";
    State[State["BeforeEntity"] = 25] = "BeforeEntity";
    State[State["BeforeNumericEntity"] = 26] = "BeforeNumericEntity";
    State[State["InNamedEntity"] = 27] = "InNamedEntity";
    State[State["InNumericEntity"] = 28] = "InNumericEntity";
    State[State["InHexEntity"] = 29] = "InHexEntity";
})($30c3ff9ff46766d4$var$State || ($30c3ff9ff46766d4$var$State = {}));
function $30c3ff9ff46766d4$var$isWhitespace(c) {
    return c === $30c3ff9ff46766d4$var$CharCodes.Space || c === $30c3ff9ff46766d4$var$CharCodes.NewLine || c === $30c3ff9ff46766d4$var$CharCodes.Tab || c === $30c3ff9ff46766d4$var$CharCodes.FormFeed || c === $30c3ff9ff46766d4$var$CharCodes.CarriageReturn;
}
function $30c3ff9ff46766d4$var$isEndOfTagSection(c) {
    return c === $30c3ff9ff46766d4$var$CharCodes.Slash || c === $30c3ff9ff46766d4$var$CharCodes.Gt || $30c3ff9ff46766d4$var$isWhitespace(c);
}
function $30c3ff9ff46766d4$var$isNumber(c) {
    return c >= $30c3ff9ff46766d4$var$CharCodes.Zero && c <= $30c3ff9ff46766d4$var$CharCodes.Nine;
}
function $30c3ff9ff46766d4$var$isASCIIAlpha(c) {
    return c >= $30c3ff9ff46766d4$var$CharCodes.LowerA && c <= $30c3ff9ff46766d4$var$CharCodes.LowerZ || c >= $30c3ff9ff46766d4$var$CharCodes.UpperA && c <= $30c3ff9ff46766d4$var$CharCodes.UpperZ;
}
function $30c3ff9ff46766d4$var$isHexDigit(c) {
    return c >= $30c3ff9ff46766d4$var$CharCodes.UpperA && c <= $30c3ff9ff46766d4$var$CharCodes.UpperF || c >= $30c3ff9ff46766d4$var$CharCodes.LowerA && c <= $30c3ff9ff46766d4$var$CharCodes.LowerF;
}
var $30c3ff9ff46766d4$export$cbf5509cea2ad22;
(function(QuoteType) {
    QuoteType[QuoteType["NoValue"] = 0] = "NoValue";
    QuoteType[QuoteType["Unquoted"] = 1] = "Unquoted";
    QuoteType[QuoteType["Single"] = 2] = "Single";
    QuoteType[QuoteType["Double"] = 3] = "Double";
})($30c3ff9ff46766d4$export$cbf5509cea2ad22 || ($30c3ff9ff46766d4$export$cbf5509cea2ad22 = {}));
/**
 * Sequences used to match longer strings.
 *
 * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End
 * sequences with an increased offset.
 */ var $30c3ff9ff46766d4$var$Sequences = {
    Cdata: new Uint8Array([
        0x43,
        0x44,
        0x41,
        0x54,
        0x41,
        0x5b
    ]),
    CdataEnd: new Uint8Array([
        0x5d,
        0x5d,
        0x3e
    ]),
    CommentEnd: new Uint8Array([
        0x2d,
        0x2d,
        0x3e
    ]),
    ScriptEnd: new Uint8Array([
        0x3c,
        0x2f,
        0x73,
        0x63,
        0x72,
        0x69,
        0x70,
        0x74
    ]),
    StyleEnd: new Uint8Array([
        0x3c,
        0x2f,
        0x73,
        0x74,
        0x79,
        0x6c,
        0x65
    ]),
    TitleEnd: new Uint8Array([
        0x3c,
        0x2f,
        0x74,
        0x69,
        0x74,
        0x6c,
        0x65
    ])
};
var $30c3ff9ff46766d4$export$2e2bcd8739ae039 = /*#__PURE__*/ function() {
    "use strict";
    function Tokenizer(param, cbs) {
        var _param_xmlMode = param.xmlMode, xmlMode = _param_xmlMode === void 0 ? false : _param_xmlMode, _param_decodeEntities = param.decodeEntities, decodeEntities = _param_decodeEntities === void 0 ? true : _param_decodeEntities;
        (0, $hrxTm._)(this, Tokenizer);
        this.cbs = cbs;
        /** The current state the tokenizer is in. */ this.state = $30c3ff9ff46766d4$var$State.Text;
        /** The read buffer. */ this.buffer = "";
        /** The beginning of the section that is currently being read. */ this.sectionStart = 0;
        /** The index within the buffer that we are currently looking at. */ this.index = 0;
        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */ this.baseState = $30c3ff9ff46766d4$var$State.Text;
        /** For special parsing behavior inside of script and style tags. */ this.isSpecial = false;
        /** Indicates whether the tokenizer has been paused. */ this.running = true;
        /** The offset of the current buffer. */ this.offset = 0;
        this.currentSequence = undefined;
        this.sequenceIndex = 0;
        this.trieIndex = 0;
        this.trieCurrent = 0;
        /** For named entities, the index of the value. For numeric entities, the code point. */ this.entityResult = 0;
        this.entityExcess = 0;
        this.xmlMode = xmlMode;
        this.decodeEntities = decodeEntities;
        this.entityTrie = xmlMode ? (0, $1d21c0755a76a852$exports.xmlDecodeTree) : (0, $1d21c0755a76a852$exports.htmlDecodeTree);
    }
    (0, $ggnt0._)(Tokenizer, [
        {
            key: "reset",
            value: function reset() {
                this.state = $30c3ff9ff46766d4$var$State.Text;
                this.buffer = "";
                this.sectionStart = 0;
                this.index = 0;
                this.baseState = $30c3ff9ff46766d4$var$State.Text;
                this.currentSequence = undefined;
                this.running = true;
                this.offset = 0;
            }
        },
        {
            key: "write",
            value: function write(chunk) {
                this.offset += this.buffer.length;
                this.buffer = chunk;
                this.parse();
            }
        },
        {
            key: "end",
            value: function end() {
                if (this.running) this.finish();
            }
        },
        {
            key: "pause",
            value: function pause() {
                this.running = false;
            }
        },
        {
            key: "resume",
            value: function resume() {
                this.running = true;
                if (this.index < this.buffer.length + this.offset) this.parse();
            }
        },
        {
            /**
     * The current index within all of the written data.
     */ key: "getIndex",
            value: function getIndex() {
                return this.index;
            }
        },
        {
            /**
     * The start of the current section.
     */ key: "getSectionStart",
            value: function getSectionStart() {
                return this.sectionStart;
            }
        },
        {
            key: "stateText",
            value: function stateText(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Lt || !this.decodeEntities && this.fastForwardTo($30c3ff9ff46766d4$var$CharCodes.Lt)) {
                    if (this.index > this.sectionStart) this.cbs.ontext(this.sectionStart, this.index);
                    this.state = $30c3ff9ff46766d4$var$State.BeforeTagName;
                    this.sectionStart = this.index;
                } else if (this.decodeEntities && c === $30c3ff9ff46766d4$var$CharCodes.Amp) this.state = $30c3ff9ff46766d4$var$State.BeforeEntity;
            }
        },
        {
            key: "stateSpecialStartSequence",
            value: function stateSpecialStartSequence(c) {
                var isEnd = this.sequenceIndex === this.currentSequence.length;
                var isMatch = isEnd ? $30c3ff9ff46766d4$var$isEndOfTagSection(c) : (c | 0x20) === this.currentSequence[this.sequenceIndex];
                if (!isMatch) this.isSpecial = false;
                else if (!isEnd) {
                    this.sequenceIndex++;
                    return;
                }
                this.sequenceIndex = 0;
                this.state = $30c3ff9ff46766d4$var$State.InTagName;
                this.stateInTagName(c);
            }
        },
        {
            /** Look for an end tag. For <title> tags, also decode entities. */ key: "stateInSpecialTag",
            value: function stateInSpecialTag(c) {
                if (this.sequenceIndex === this.currentSequence.length) {
                    if (c === $30c3ff9ff46766d4$var$CharCodes.Gt || $30c3ff9ff46766d4$var$isWhitespace(c)) {
                        var endOfText = this.index - this.currentSequence.length;
                        if (this.sectionStart < endOfText) {
                            // Spoof the index so that reported locations match up.
                            var actualIndex = this.index;
                            this.index = endOfText;
                            this.cbs.ontext(this.sectionStart, endOfText);
                            this.index = actualIndex;
                        }
                        this.isSpecial = false;
                        this.sectionStart = endOfText + 2; // Skip over the `</`
                        this.stateInClosingTagName(c);
                        return; // We are done; skip the rest of the function.
                    }
                    this.sequenceIndex = 0;
                }
                if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) this.sequenceIndex += 1;
                else if (this.sequenceIndex === 0) {
                    if (this.currentSequence === $30c3ff9ff46766d4$var$Sequences.TitleEnd) // We have to parse entities in <title> tags.
                    {
                        if (this.decodeEntities && c === $30c3ff9ff46766d4$var$CharCodes.Amp) this.state = $30c3ff9ff46766d4$var$State.BeforeEntity;
                    } else if (this.fastForwardTo($30c3ff9ff46766d4$var$CharCodes.Lt)) // Outside of <title> tags, we can fast-forward.
                    this.sequenceIndex = 1;
                } else // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.
                this.sequenceIndex = Number(c === $30c3ff9ff46766d4$var$CharCodes.Lt);
            }
        },
        {
            key: "stateCDATASequence",
            value: function stateCDATASequence(c) {
                if (c === $30c3ff9ff46766d4$var$Sequences.Cdata[this.sequenceIndex]) {
                    if (++this.sequenceIndex === $30c3ff9ff46766d4$var$Sequences.Cdata.length) {
                        this.state = $30c3ff9ff46766d4$var$State.InCommentLike;
                        this.currentSequence = $30c3ff9ff46766d4$var$Sequences.CdataEnd;
                        this.sequenceIndex = 0;
                        this.sectionStart = this.index + 1;
                    }
                } else {
                    this.sequenceIndex = 0;
                    this.state = $30c3ff9ff46766d4$var$State.InDeclaration;
                    this.stateInDeclaration(c); // Reconsume the character
                }
            }
        },
        {
            /**
     * When we wait for one specific character, we can speed things up
     * by skipping through the buffer until we find it.
     *
     * @returns Whether the character was found.
     */ key: "fastForwardTo",
            value: function fastForwardTo(c) {
                while(++this.index < this.buffer.length + this.offset){
                    if (this.buffer.charCodeAt(this.index - this.offset) === c) return true;
                }
                /*
         * We increment the index at the end of the `parse` loop,
         * so set it to `buffer.length - 1` here.
         *
         * TODO: Refactor `parse` to increment index before calling states.
         */ this.index = this.buffer.length + this.offset - 1;
                return false;
            }
        },
        {
            /**
     * Comments and CDATA end with `-->` and `]]>`.
     *
     * Their common qualities are:
     * - Their end sequences have a distinct character they start with.
     * - That character is then repeated, so we have to check multiple repeats.
     * - All characters but the start character of the sequence can be skipped.
     */ key: "stateInCommentLike",
            value: function stateInCommentLike(c) {
                if (c === this.currentSequence[this.sequenceIndex]) {
                    if (++this.sequenceIndex === this.currentSequence.length) {
                        if (this.currentSequence === $30c3ff9ff46766d4$var$Sequences.CdataEnd) this.cbs.oncdata(this.sectionStart, this.index, 2);
                        else this.cbs.oncomment(this.sectionStart, this.index, 2);
                        this.sequenceIndex = 0;
                        this.sectionStart = this.index + 1;
                        this.state = $30c3ff9ff46766d4$var$State.Text;
                    }
                } else if (this.sequenceIndex === 0) // Fast-forward to the first character of the sequence
                {
                    if (this.fastForwardTo(this.currentSequence[0])) this.sequenceIndex = 1;
                } else if (c !== this.currentSequence[this.sequenceIndex - 1]) // Allow long sequences, eg. --->, ]]]>
                this.sequenceIndex = 0;
            }
        },
        {
            /**
     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.
     *
     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).
     * We allow anything that wouldn't end the tag.
     */ key: "isTagStartChar",
            value: function isTagStartChar(c) {
                return this.xmlMode ? !$30c3ff9ff46766d4$var$isEndOfTagSection(c) : $30c3ff9ff46766d4$var$isASCIIAlpha(c);
            }
        },
        {
            key: "startSpecial",
            value: function startSpecial(sequence, offset) {
                this.isSpecial = true;
                this.currentSequence = sequence;
                this.sequenceIndex = offset;
                this.state = $30c3ff9ff46766d4$var$State.SpecialStartSequence;
            }
        },
        {
            key: "stateBeforeTagName",
            value: function stateBeforeTagName(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.ExclamationMark) {
                    this.state = $30c3ff9ff46766d4$var$State.BeforeDeclaration;
                    this.sectionStart = this.index + 1;
                } else if (c === $30c3ff9ff46766d4$var$CharCodes.Questionmark) {
                    this.state = $30c3ff9ff46766d4$var$State.InProcessingInstruction;
                    this.sectionStart = this.index + 1;
                } else if (this.isTagStartChar(c)) {
                    var lower = c | 0x20;
                    this.sectionStart = this.index;
                    if (!this.xmlMode && lower === $30c3ff9ff46766d4$var$Sequences.TitleEnd[2]) this.startSpecial($30c3ff9ff46766d4$var$Sequences.TitleEnd, 3);
                    else this.state = !this.xmlMode && lower === $30c3ff9ff46766d4$var$Sequences.ScriptEnd[2] ? $30c3ff9ff46766d4$var$State.BeforeSpecialS : $30c3ff9ff46766d4$var$State.InTagName;
                } else if (c === $30c3ff9ff46766d4$var$CharCodes.Slash) this.state = $30c3ff9ff46766d4$var$State.BeforeClosingTagName;
                else {
                    this.state = $30c3ff9ff46766d4$var$State.Text;
                    this.stateText(c);
                }
            }
        },
        {
            key: "stateInTagName",
            value: function stateInTagName(c) {
                if ($30c3ff9ff46766d4$var$isEndOfTagSection(c)) {
                    this.cbs.onopentagname(this.sectionStart, this.index);
                    this.sectionStart = -1;
                    this.state = $30c3ff9ff46766d4$var$State.BeforeAttributeName;
                    this.stateBeforeAttributeName(c);
                }
            }
        },
        {
            key: "stateBeforeClosingTagName",
            value: function stateBeforeClosingTagName(c) {
                if ($30c3ff9ff46766d4$var$isWhitespace(c)) ;
                else if (c === $30c3ff9ff46766d4$var$CharCodes.Gt) this.state = $30c3ff9ff46766d4$var$State.Text;
                else {
                    this.state = this.isTagStartChar(c) ? $30c3ff9ff46766d4$var$State.InClosingTagName : $30c3ff9ff46766d4$var$State.InSpecialComment;
                    this.sectionStart = this.index;
                }
            }
        },
        {
            key: "stateInClosingTagName",
            value: function stateInClosingTagName(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Gt || $30c3ff9ff46766d4$var$isWhitespace(c)) {
                    this.cbs.onclosetag(this.sectionStart, this.index);
                    this.sectionStart = -1;
                    this.state = $30c3ff9ff46766d4$var$State.AfterClosingTagName;
                    this.stateAfterClosingTagName(c);
                }
            }
        },
        {
            key: "stateAfterClosingTagName",
            value: function stateAfterClosingTagName(c) {
                // Skip everything until ">"
                if (c === $30c3ff9ff46766d4$var$CharCodes.Gt || this.fastForwardTo($30c3ff9ff46766d4$var$CharCodes.Gt)) {
                    this.state = $30c3ff9ff46766d4$var$State.Text;
                    this.baseState = $30c3ff9ff46766d4$var$State.Text;
                    this.sectionStart = this.index + 1;
                }
            }
        },
        {
            key: "stateBeforeAttributeName",
            value: function stateBeforeAttributeName(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Gt) {
                    this.cbs.onopentagend(this.index);
                    if (this.isSpecial) {
                        this.state = $30c3ff9ff46766d4$var$State.InSpecialTag;
                        this.sequenceIndex = 0;
                    } else this.state = $30c3ff9ff46766d4$var$State.Text;
                    this.baseState = this.state;
                    this.sectionStart = this.index + 1;
                } else if (c === $30c3ff9ff46766d4$var$CharCodes.Slash) this.state = $30c3ff9ff46766d4$var$State.InSelfClosingTag;
                else if (!$30c3ff9ff46766d4$var$isWhitespace(c)) {
                    this.state = $30c3ff9ff46766d4$var$State.InAttributeName;
                    this.sectionStart = this.index;
                }
            }
        },
        {
            key: "stateInSelfClosingTag",
            value: function stateInSelfClosingTag(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Gt) {
                    this.cbs.onselfclosingtag(this.index);
                    this.state = $30c3ff9ff46766d4$var$State.Text;
                    this.baseState = $30c3ff9ff46766d4$var$State.Text;
                    this.sectionStart = this.index + 1;
                    this.isSpecial = false; // Reset special state, in case of self-closing special tags
                } else if (!$30c3ff9ff46766d4$var$isWhitespace(c)) {
                    this.state = $30c3ff9ff46766d4$var$State.BeforeAttributeName;
                    this.stateBeforeAttributeName(c);
                }
            }
        },
        {
            key: "stateInAttributeName",
            value: function stateInAttributeName(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Eq || $30c3ff9ff46766d4$var$isEndOfTagSection(c)) {
                    this.cbs.onattribname(this.sectionStart, this.index);
                    this.sectionStart = -1;
                    this.state = $30c3ff9ff46766d4$var$State.AfterAttributeName;
                    this.stateAfterAttributeName(c);
                }
            }
        },
        {
            key: "stateAfterAttributeName",
            value: function stateAfterAttributeName(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Eq) this.state = $30c3ff9ff46766d4$var$State.BeforeAttributeValue;
                else if (c === $30c3ff9ff46766d4$var$CharCodes.Slash || c === $30c3ff9ff46766d4$var$CharCodes.Gt) {
                    this.cbs.onattribend($30c3ff9ff46766d4$export$cbf5509cea2ad22.NoValue, this.index);
                    this.state = $30c3ff9ff46766d4$var$State.BeforeAttributeName;
                    this.stateBeforeAttributeName(c);
                } else if (!$30c3ff9ff46766d4$var$isWhitespace(c)) {
                    this.cbs.onattribend($30c3ff9ff46766d4$export$cbf5509cea2ad22.NoValue, this.index);
                    this.state = $30c3ff9ff46766d4$var$State.InAttributeName;
                    this.sectionStart = this.index;
                }
            }
        },
        {
            key: "stateBeforeAttributeValue",
            value: function stateBeforeAttributeValue(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.DoubleQuote) {
                    this.state = $30c3ff9ff46766d4$var$State.InAttributeValueDq;
                    this.sectionStart = this.index + 1;
                } else if (c === $30c3ff9ff46766d4$var$CharCodes.SingleQuote) {
                    this.state = $30c3ff9ff46766d4$var$State.InAttributeValueSq;
                    this.sectionStart = this.index + 1;
                } else if (!$30c3ff9ff46766d4$var$isWhitespace(c)) {
                    this.sectionStart = this.index;
                    this.state = $30c3ff9ff46766d4$var$State.InAttributeValueNq;
                    this.stateInAttributeValueNoQuotes(c); // Reconsume token
                }
            }
        },
        {
            key: "handleInAttributeValue",
            value: function handleInAttributeValue(c, quote) {
                if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
                    this.cbs.onattribdata(this.sectionStart, this.index);
                    this.sectionStart = -1;
                    this.cbs.onattribend(quote === $30c3ff9ff46766d4$var$CharCodes.DoubleQuote ? $30c3ff9ff46766d4$export$cbf5509cea2ad22.Double : $30c3ff9ff46766d4$export$cbf5509cea2ad22.Single, this.index);
                    this.state = $30c3ff9ff46766d4$var$State.BeforeAttributeName;
                } else if (this.decodeEntities && c === $30c3ff9ff46766d4$var$CharCodes.Amp) {
                    this.baseState = this.state;
                    this.state = $30c3ff9ff46766d4$var$State.BeforeEntity;
                }
            }
        },
        {
            key: "stateInAttributeValueDoubleQuotes",
            value: function stateInAttributeValueDoubleQuotes(c) {
                this.handleInAttributeValue(c, $30c3ff9ff46766d4$var$CharCodes.DoubleQuote);
            }
        },
        {
            key: "stateInAttributeValueSingleQuotes",
            value: function stateInAttributeValueSingleQuotes(c) {
                this.handleInAttributeValue(c, $30c3ff9ff46766d4$var$CharCodes.SingleQuote);
            }
        },
        {
            key: "stateInAttributeValueNoQuotes",
            value: function stateInAttributeValueNoQuotes(c) {
                if ($30c3ff9ff46766d4$var$isWhitespace(c) || c === $30c3ff9ff46766d4$var$CharCodes.Gt) {
                    this.cbs.onattribdata(this.sectionStart, this.index);
                    this.sectionStart = -1;
                    this.cbs.onattribend($30c3ff9ff46766d4$export$cbf5509cea2ad22.Unquoted, this.index);
                    this.state = $30c3ff9ff46766d4$var$State.BeforeAttributeName;
                    this.stateBeforeAttributeName(c);
                } else if (this.decodeEntities && c === $30c3ff9ff46766d4$var$CharCodes.Amp) {
                    this.baseState = this.state;
                    this.state = $30c3ff9ff46766d4$var$State.BeforeEntity;
                }
            }
        },
        {
            key: "stateBeforeDeclaration",
            value: function stateBeforeDeclaration(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.OpeningSquareBracket) {
                    this.state = $30c3ff9ff46766d4$var$State.CDATASequence;
                    this.sequenceIndex = 0;
                } else this.state = c === $30c3ff9ff46766d4$var$CharCodes.Dash ? $30c3ff9ff46766d4$var$State.BeforeComment : $30c3ff9ff46766d4$var$State.InDeclaration;
            }
        },
        {
            key: "stateInDeclaration",
            value: function stateInDeclaration(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Gt || this.fastForwardTo($30c3ff9ff46766d4$var$CharCodes.Gt)) {
                    this.cbs.ondeclaration(this.sectionStart, this.index);
                    this.state = $30c3ff9ff46766d4$var$State.Text;
                    this.sectionStart = this.index + 1;
                }
            }
        },
        {
            key: "stateInProcessingInstruction",
            value: function stateInProcessingInstruction(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Gt || this.fastForwardTo($30c3ff9ff46766d4$var$CharCodes.Gt)) {
                    this.cbs.onprocessinginstruction(this.sectionStart, this.index);
                    this.state = $30c3ff9ff46766d4$var$State.Text;
                    this.sectionStart = this.index + 1;
                }
            }
        },
        {
            key: "stateBeforeComment",
            value: function stateBeforeComment(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Dash) {
                    this.state = $30c3ff9ff46766d4$var$State.InCommentLike;
                    this.currentSequence = $30c3ff9ff46766d4$var$Sequences.CommentEnd;
                    // Allow short comments (eg. <!-->)
                    this.sequenceIndex = 2;
                    this.sectionStart = this.index + 1;
                } else this.state = $30c3ff9ff46766d4$var$State.InDeclaration;
            }
        },
        {
            key: "stateInSpecialComment",
            value: function stateInSpecialComment(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Gt || this.fastForwardTo($30c3ff9ff46766d4$var$CharCodes.Gt)) {
                    this.cbs.oncomment(this.sectionStart, this.index, 0);
                    this.state = $30c3ff9ff46766d4$var$State.Text;
                    this.sectionStart = this.index + 1;
                }
            }
        },
        {
            key: "stateBeforeSpecialS",
            value: function stateBeforeSpecialS(c) {
                var lower = c | 0x20;
                if (lower === $30c3ff9ff46766d4$var$Sequences.ScriptEnd[3]) this.startSpecial($30c3ff9ff46766d4$var$Sequences.ScriptEnd, 4);
                else if (lower === $30c3ff9ff46766d4$var$Sequences.StyleEnd[3]) this.startSpecial($30c3ff9ff46766d4$var$Sequences.StyleEnd, 4);
                else {
                    this.state = $30c3ff9ff46766d4$var$State.InTagName;
                    this.stateInTagName(c); // Consume the token again
                }
            }
        },
        {
            key: "stateBeforeEntity",
            value: function stateBeforeEntity(c) {
                // Start excess with 1 to include the '&'
                this.entityExcess = 1;
                this.entityResult = 0;
                if (c === $30c3ff9ff46766d4$var$CharCodes.Number) this.state = $30c3ff9ff46766d4$var$State.BeforeNumericEntity;
                else if (c === $30c3ff9ff46766d4$var$CharCodes.Amp) ;
                else {
                    this.trieIndex = 0;
                    this.trieCurrent = this.entityTrie[0];
                    this.state = $30c3ff9ff46766d4$var$State.InNamedEntity;
                    this.stateInNamedEntity(c);
                }
            }
        },
        {
            key: "stateInNamedEntity",
            value: function stateInNamedEntity(c) {
                this.entityExcess += 1;
                this.trieIndex = (0, $1d21c0755a76a852$exports.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);
                if (this.trieIndex < 0) {
                    this.emitNamedEntity();
                    this.index--;
                    return;
                }
                this.trieCurrent = this.entityTrie[this.trieIndex];
                var masked = this.trieCurrent & (0, $1d21c0755a76a852$exports.BinTrieFlags).VALUE_LENGTH;
                // If the branch is a value, store it and continue
                if (masked) {
                    // The mask is the number of bytes of the value, including the current byte.
                    var valueLength = (masked >> 14) - 1;
                    // If we have a legacy entity while parsing strictly, just skip the number of bytes
                    if (!this.allowLegacyEntity() && c !== $30c3ff9ff46766d4$var$CharCodes.Semi) this.trieIndex += valueLength;
                    else {
                        // Add 1 as we have already incremented the excess
                        var entityStart = this.index - this.entityExcess + 1;
                        if (entityStart > this.sectionStart) this.emitPartial(this.sectionStart, entityStart);
                        // If this is a surrogate pair, consume the next two bytes
                        this.entityResult = this.trieIndex;
                        this.trieIndex += valueLength;
                        this.entityExcess = 0;
                        this.sectionStart = this.index + 1;
                        if (valueLength === 0) this.emitNamedEntity();
                    }
                }
            }
        },
        {
            key: "emitNamedEntity",
            value: function emitNamedEntity() {
                this.state = this.baseState;
                if (this.entityResult === 0) return;
                var valueLength = (this.entityTrie[this.entityResult] & (0, $1d21c0755a76a852$exports.BinTrieFlags).VALUE_LENGTH) >> 14;
                switch(valueLength){
                    case 1:
                        this.emitCodePoint(this.entityTrie[this.entityResult] & ~(0, $1d21c0755a76a852$exports.BinTrieFlags).VALUE_LENGTH);
                        break;
                    case 2:
                        this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
                        break;
                    case 3:
                        this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
                        this.emitCodePoint(this.entityTrie[this.entityResult + 2]);
                }
            }
        },
        {
            key: "stateBeforeNumericEntity",
            value: function stateBeforeNumericEntity(c) {
                if ((c | 0x20) === $30c3ff9ff46766d4$var$CharCodes.LowerX) {
                    this.entityExcess++;
                    this.state = $30c3ff9ff46766d4$var$State.InHexEntity;
                } else {
                    this.state = $30c3ff9ff46766d4$var$State.InNumericEntity;
                    this.stateInNumericEntity(c);
                }
            }
        },
        {
            key: "emitNumericEntity",
            value: function emitNumericEntity(strict) {
                var entityStart = this.index - this.entityExcess - 1;
                var numberStart = entityStart + 2 + Number(this.state === $30c3ff9ff46766d4$var$State.InHexEntity);
                if (numberStart !== this.index) {
                    // Emit leading data if any
                    if (entityStart > this.sectionStart) this.emitPartial(this.sectionStart, entityStart);
                    this.sectionStart = this.index + Number(strict);
                    this.emitCodePoint((0, $1d21c0755a76a852$exports.replaceCodePoint)(this.entityResult));
                }
                this.state = this.baseState;
            }
        },
        {
            key: "stateInNumericEntity",
            value: function stateInNumericEntity(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Semi) this.emitNumericEntity(true);
                else if ($30c3ff9ff46766d4$var$isNumber(c)) {
                    this.entityResult = this.entityResult * 10 + (c - $30c3ff9ff46766d4$var$CharCodes.Zero);
                    this.entityExcess++;
                } else {
                    if (this.allowLegacyEntity()) this.emitNumericEntity(false);
                    else this.state = this.baseState;
                    this.index--;
                }
            }
        },
        {
            key: "stateInHexEntity",
            value: function stateInHexEntity(c) {
                if (c === $30c3ff9ff46766d4$var$CharCodes.Semi) this.emitNumericEntity(true);
                else if ($30c3ff9ff46766d4$var$isNumber(c)) {
                    this.entityResult = this.entityResult * 16 + (c - $30c3ff9ff46766d4$var$CharCodes.Zero);
                    this.entityExcess++;
                } else if ($30c3ff9ff46766d4$var$isHexDigit(c)) {
                    this.entityResult = this.entityResult * 16 + ((c | 0x20) - $30c3ff9ff46766d4$var$CharCodes.LowerA + 10);
                    this.entityExcess++;
                } else {
                    if (this.allowLegacyEntity()) this.emitNumericEntity(false);
                    else this.state = this.baseState;
                    this.index--;
                }
            }
        },
        {
            key: "allowLegacyEntity",
            value: function allowLegacyEntity() {
                return !this.xmlMode && (this.baseState === $30c3ff9ff46766d4$var$State.Text || this.baseState === $30c3ff9ff46766d4$var$State.InSpecialTag);
            }
        },
        {
            /**
     * Remove data that has already been consumed from the buffer.
     */ key: "cleanup",
            value: function cleanup() {
                // If we are inside of text or attributes, emit what we already have.
                if (this.running && this.sectionStart !== this.index) {
                    if (this.state === $30c3ff9ff46766d4$var$State.Text || this.state === $30c3ff9ff46766d4$var$State.InSpecialTag && this.sequenceIndex === 0) {
                        this.cbs.ontext(this.sectionStart, this.index);
                        this.sectionStart = this.index;
                    } else if (this.state === $30c3ff9ff46766d4$var$State.InAttributeValueDq || this.state === $30c3ff9ff46766d4$var$State.InAttributeValueSq || this.state === $30c3ff9ff46766d4$var$State.InAttributeValueNq) {
                        this.cbs.onattribdata(this.sectionStart, this.index);
                        this.sectionStart = this.index;
                    }
                }
            }
        },
        {
            key: "shouldContinue",
            value: function shouldContinue() {
                return this.index < this.buffer.length + this.offset && this.running;
            }
        },
        {
            /**
     * Iterates through the buffer, calling the function corresponding to the current state.
     *
     * States that are more likely to be hit are higher up, as a performance improvement.
     */ key: "parse",
            value: function parse() {
                while(this.shouldContinue()){
                    var c = this.buffer.charCodeAt(this.index - this.offset);
                    switch(this.state){
                        case $30c3ff9ff46766d4$var$State.Text:
                            this.stateText(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.SpecialStartSequence:
                            this.stateSpecialStartSequence(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InSpecialTag:
                            this.stateInSpecialTag(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.CDATASequence:
                            this.stateCDATASequence(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InAttributeValueDq:
                            this.stateInAttributeValueDoubleQuotes(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InAttributeName:
                            this.stateInAttributeName(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InCommentLike:
                            this.stateInCommentLike(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InSpecialComment:
                            this.stateInSpecialComment(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.BeforeAttributeName:
                            this.stateBeforeAttributeName(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InTagName:
                            this.stateInTagName(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InClosingTagName:
                            this.stateInClosingTagName(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.BeforeTagName:
                            this.stateBeforeTagName(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.AfterAttributeName:
                            this.stateAfterAttributeName(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InAttributeValueSq:
                            this.stateInAttributeValueSingleQuotes(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.BeforeAttributeValue:
                            this.stateBeforeAttributeValue(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.BeforeClosingTagName:
                            this.stateBeforeClosingTagName(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.AfterClosingTagName:
                            this.stateAfterClosingTagName(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.BeforeSpecialS:
                            this.stateBeforeSpecialS(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InAttributeValueNq:
                            this.stateInAttributeValueNoQuotes(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InSelfClosingTag:
                            this.stateInSelfClosingTag(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InDeclaration:
                            this.stateInDeclaration(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.BeforeDeclaration:
                            this.stateBeforeDeclaration(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.BeforeComment:
                            this.stateBeforeComment(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InProcessingInstruction:
                            this.stateInProcessingInstruction(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InNamedEntity:
                            this.stateInNamedEntity(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.BeforeEntity:
                            this.stateBeforeEntity(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InHexEntity:
                            this.stateInHexEntity(c);
                            break;
                        case $30c3ff9ff46766d4$var$State.InNumericEntity:
                            this.stateInNumericEntity(c);
                            break;
                        default:
                            // `this._state === State.BeforeNumericEntity`
                            this.stateBeforeNumericEntity(c);
                    }
                    this.index++;
                }
                this.cleanup();
            }
        },
        {
            key: "finish",
            value: function finish() {
                if (this.state === $30c3ff9ff46766d4$var$State.InNamedEntity) this.emitNamedEntity();
                // If there is remaining data, emit it in a reasonable way
                if (this.sectionStart < this.index) this.handleTrailingData();
                this.cbs.onend();
            }
        },
        {
            /** Handle any trailing data. */ key: "handleTrailingData",
            value: function handleTrailingData() {
                var endIndex = this.buffer.length + this.offset;
                if (this.state === $30c3ff9ff46766d4$var$State.InCommentLike) {
                    if (this.currentSequence === $30c3ff9ff46766d4$var$Sequences.CdataEnd) this.cbs.oncdata(this.sectionStart, endIndex, 0);
                    else this.cbs.oncomment(this.sectionStart, endIndex, 0);
                } else if (this.state === $30c3ff9ff46766d4$var$State.InNumericEntity && this.allowLegacyEntity()) this.emitNumericEntity(false);
                else if (this.state === $30c3ff9ff46766d4$var$State.InHexEntity && this.allowLegacyEntity()) this.emitNumericEntity(false);
                else if (this.state === $30c3ff9ff46766d4$var$State.InTagName || this.state === $30c3ff9ff46766d4$var$State.BeforeAttributeName || this.state === $30c3ff9ff46766d4$var$State.BeforeAttributeValue || this.state === $30c3ff9ff46766d4$var$State.AfterAttributeName || this.state === $30c3ff9ff46766d4$var$State.InAttributeName || this.state === $30c3ff9ff46766d4$var$State.InAttributeValueSq || this.state === $30c3ff9ff46766d4$var$State.InAttributeValueDq || this.state === $30c3ff9ff46766d4$var$State.InAttributeValueNq || this.state === $30c3ff9ff46766d4$var$State.InClosingTagName) ;
                else this.cbs.ontext(this.sectionStart, endIndex);
            }
        },
        {
            key: "emitPartial",
            value: function emitPartial(start, endIndex) {
                if (this.baseState !== $30c3ff9ff46766d4$var$State.Text && this.baseState !== $30c3ff9ff46766d4$var$State.InSpecialTag) this.cbs.onattribdata(start, endIndex);
                else this.cbs.ontext(start, endIndex);
            }
        },
        {
            key: "emitCodePoint",
            value: function emitCodePoint(cp) {
                if (this.baseState !== $30c3ff9ff46766d4$var$State.Text && this.baseState !== $30c3ff9ff46766d4$var$State.InSpecialTag) this.cbs.onattribentity(cp);
                else this.cbs.ontextentity(cp);
            }
        }
    ]);
    return Tokenizer;
}();



var $dfff106617eab6a6$var$formTags = new Set([
    "input",
    "option",
    "optgroup",
    "select",
    "button",
    "datalist",
    "textarea"
]);
var $dfff106617eab6a6$var$pTag = new Set([
    "p"
]);
var $dfff106617eab6a6$var$tableSectionTags = new Set([
    "thead",
    "tbody"
]);
var $dfff106617eab6a6$var$ddtTags = new Set([
    "dd",
    "dt"
]);
var $dfff106617eab6a6$var$rtpTags = new Set([
    "rt",
    "rp"
]);
var $dfff106617eab6a6$var$openImpliesClose = new Map([
    [
        "tr",
        new Set([
            "tr",
            "th",
            "td"
        ])
    ],
    [
        "th",
        new Set([
            "th"
        ])
    ],
    [
        "td",
        new Set([
            "thead",
            "th",
            "td"
        ])
    ],
    [
        "body",
        new Set([
            "head",
            "link",
            "script"
        ])
    ],
    [
        "li",
        new Set([
            "li"
        ])
    ],
    [
        "p",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "h1",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "h2",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "h3",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "h4",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "h5",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "h6",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "select",
        $dfff106617eab6a6$var$formTags
    ],
    [
        "input",
        $dfff106617eab6a6$var$formTags
    ],
    [
        "output",
        $dfff106617eab6a6$var$formTags
    ],
    [
        "button",
        $dfff106617eab6a6$var$formTags
    ],
    [
        "datalist",
        $dfff106617eab6a6$var$formTags
    ],
    [
        "textarea",
        $dfff106617eab6a6$var$formTags
    ],
    [
        "option",
        new Set([
            "option"
        ])
    ],
    [
        "optgroup",
        new Set([
            "optgroup",
            "option"
        ])
    ],
    [
        "dd",
        $dfff106617eab6a6$var$ddtTags
    ],
    [
        "dt",
        $dfff106617eab6a6$var$ddtTags
    ],
    [
        "address",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "article",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "aside",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "blockquote",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "details",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "div",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "dl",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "fieldset",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "figcaption",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "figure",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "footer",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "form",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "header",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "hr",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "main",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "nav",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "ol",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "pre",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "section",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "table",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "ul",
        $dfff106617eab6a6$var$pTag
    ],
    [
        "rt",
        $dfff106617eab6a6$var$rtpTags
    ],
    [
        "rp",
        $dfff106617eab6a6$var$rtpTags
    ],
    [
        "tbody",
        $dfff106617eab6a6$var$tableSectionTags
    ],
    [
        "tfoot",
        $dfff106617eab6a6$var$tableSectionTags
    ]
]);
var $dfff106617eab6a6$var$voidElements = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
]);
var $dfff106617eab6a6$var$foreignContextElements = new Set([
    "math",
    "svg"
]);
var $dfff106617eab6a6$var$htmlIntegrationElements = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignobject",
    "desc",
    "title"
]);
var $dfff106617eab6a6$var$reNameEnd = /\s|\//;
var $dfff106617eab6a6$export$7acfa6ed01010e37 = /*#__PURE__*/ function() {
    "use strict";
    function Parser(cbs) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        (0, $hrxTm._)(this, Parser);
        var _a, _b, _c, _d, _e;
        this.options = options;
        /** The start index of the last event. */ this.startIndex = 0;
        /** The end index of the last event. */ this.endIndex = 0;
        /**
         * Store the start index of the current open tag,
         * so we can update the start index for attributes.
         */ this.openTagStart = 0;
        this.tagname = "";
        this.attribname = "";
        this.attribvalue = "";
        this.attribs = null;
        this.stack = [];
        this.foreignContext = [];
        this.buffers = [];
        this.bufferOffset = 0;
        /** The index of the last written buffer. Used when resuming after a `pause()`. */ this.writeIndex = 0;
        /** Indicates whether the parser has finished running / `.end` has been called. */ this.ended = false;
        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
        this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : (0, $30c3ff9ff46766d4$export$2e2bcd8739ae039))(this.options, this);
        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 || _e.call(_d, this);
    }
    (0, $ggnt0._)(Parser, [
        {
            // Tokenizer event handlers
            /** @internal */ key: "ontext",
            value: function ontext(start, endIndex) {
                var _a, _b;
                var data = this.getSlice(start, endIndex);
                this.endIndex = endIndex - 1;
                (_b = (_a = this.cbs).ontext) === null || _b === void 0 || _b.call(_a, data);
                this.startIndex = endIndex;
            }
        },
        {
            /** @internal */ key: "ontextentity",
            value: function ontextentity(cp) {
                var _a, _b;
                /*
         * Entities can be emitted on the character, or directly after.
         * We use the section start here to get accurate indices.
         */ var index = this.tokenizer.getSectionStart();
                this.endIndex = index - 1;
                (_b = (_a = this.cbs).ontext) === null || _b === void 0 || _b.call(_a, (0, $1d21c0755a76a852$exports.fromCodePoint)(cp));
                this.startIndex = index;
            }
        },
        {
            key: "isVoidElement",
            value: function isVoidElement(name) {
                return !this.options.xmlMode && $dfff106617eab6a6$var$voidElements.has(name);
            }
        },
        {
            /** @internal */ key: "onopentagname",
            value: function onopentagname(start, endIndex) {
                this.endIndex = endIndex;
                var name = this.getSlice(start, endIndex);
                if (this.lowerCaseTagNames) name = name.toLowerCase();
                this.emitOpenTag(name);
            }
        },
        {
            key: "emitOpenTag",
            value: function emitOpenTag(name) {
                var _a, _b, _c, _d;
                this.openTagStart = this.startIndex;
                this.tagname = name;
                var impliesClose = !this.options.xmlMode && $dfff106617eab6a6$var$openImpliesClose.get(name);
                if (impliesClose) while(this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])){
                    var element = this.stack.pop();
                    (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 || _b.call(_a, element, true);
                }
                if (!this.isVoidElement(name)) {
                    this.stack.push(name);
                    if ($dfff106617eab6a6$var$foreignContextElements.has(name)) this.foreignContext.push(true);
                    else if ($dfff106617eab6a6$var$htmlIntegrationElements.has(name)) this.foreignContext.push(false);
                }
                (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 || _d.call(_c, name);
                if (this.cbs.onopentag) this.attribs = {};
            }
        },
        {
            key: "endOpenTag",
            value: function endOpenTag(isImplied) {
                var _a, _b;
                this.startIndex = this.openTagStart;
                if (this.attribs) {
                    (_b = (_a = this.cbs).onopentag) === null || _b === void 0 || _b.call(_a, this.tagname, this.attribs, isImplied);
                    this.attribs = null;
                }
                if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) this.cbs.onclosetag(this.tagname, true);
                this.tagname = "";
            }
        },
        {
            /** @internal */ key: "onopentagend",
            value: function onopentagend(endIndex) {
                this.endIndex = endIndex;
                this.endOpenTag(false);
                // Set `startIndex` for next node
                this.startIndex = endIndex + 1;
            }
        },
        {
            /** @internal */ key: "onclosetag",
            value: function onclosetag(start, endIndex) {
                var _a, _b, _c, _d, _e, _f;
                this.endIndex = endIndex;
                var name = this.getSlice(start, endIndex);
                if (this.lowerCaseTagNames) name = name.toLowerCase();
                if ($dfff106617eab6a6$var$foreignContextElements.has(name) || $dfff106617eab6a6$var$htmlIntegrationElements.has(name)) this.foreignContext.pop();
                if (!this.isVoidElement(name)) {
                    var pos = this.stack.lastIndexOf(name);
                    if (pos !== -1) {
                        if (this.cbs.onclosetag) {
                            var count = this.stack.length - pos;
                            while(count--)// We know the stack has sufficient elements.
                            this.cbs.onclosetag(this.stack.pop(), count !== 0);
                        } else this.stack.length = pos;
                    } else if (!this.options.xmlMode && name === "p") {
                        // Implicit open before close
                        this.emitOpenTag("p");
                        this.closeCurrentTag(true);
                    }
                } else if (!this.options.xmlMode && name === "br") {
                    // We can't use `emitOpenTag` for implicit open, as `br` would be implicitly closed.
                    (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 || _b.call(_a, "br");
                    (_d = (_c = this.cbs).onopentag) === null || _d === void 0 || _d.call(_c, "br", {}, true);
                    (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 || _f.call(_e, "br", false);
                }
                // Set `startIndex` for next node
                this.startIndex = endIndex + 1;
            }
        },
        {
            /** @internal */ key: "onselfclosingtag",
            value: function onselfclosingtag(endIndex) {
                this.endIndex = endIndex;
                if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
                    this.closeCurrentTag(false);
                    // Set `startIndex` for next node
                    this.startIndex = endIndex + 1;
                } else // Ignore the fact that the tag is self-closing.
                this.onopentagend(endIndex);
            }
        },
        {
            key: "closeCurrentTag",
            value: function closeCurrentTag(isOpenImplied) {
                var _a, _b;
                var name = this.tagname;
                this.endOpenTag(isOpenImplied);
                // Self-closing tags will be on the top of the stack
                if (this.stack[this.stack.length - 1] === name) {
                    // If the opening tag isn't implied, the closing tag has to be implied.
                    (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 || _b.call(_a, name, !isOpenImplied);
                    this.stack.pop();
                }
            }
        },
        {
            /** @internal */ key: "onattribname",
            value: function onattribname(start, endIndex) {
                this.startIndex = start;
                var name = this.getSlice(start, endIndex);
                this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
            }
        },
        {
            /** @internal */ key: "onattribdata",
            value: function onattribdata(start, endIndex) {
                this.attribvalue += this.getSlice(start, endIndex);
            }
        },
        {
            /** @internal */ key: "onattribentity",
            value: function onattribentity(cp) {
                this.attribvalue += (0, $1d21c0755a76a852$exports.fromCodePoint)(cp);
            }
        },
        {
            /** @internal */ key: "onattribend",
            value: function onattribend(quote, endIndex) {
                var _a, _b;
                this.endIndex = endIndex;
                (_b = (_a = this.cbs).onattribute) === null || _b === void 0 || _b.call(_a, this.attribname, this.attribvalue, quote === (0, $30c3ff9ff46766d4$export$cbf5509cea2ad22).Double ? '"' : quote === (0, $30c3ff9ff46766d4$export$cbf5509cea2ad22).Single ? "'" : quote === (0, $30c3ff9ff46766d4$export$cbf5509cea2ad22).NoValue ? undefined : null);
                if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) this.attribs[this.attribname] = this.attribvalue;
                this.attribvalue = "";
            }
        },
        {
            key: "getInstructionName",
            value: function getInstructionName(value) {
                var index = value.search($dfff106617eab6a6$var$reNameEnd);
                var name = index < 0 ? value : value.substr(0, index);
                if (this.lowerCaseTagNames) name = name.toLowerCase();
                return name;
            }
        },
        {
            /** @internal */ key: "ondeclaration",
            value: function ondeclaration(start, endIndex) {
                this.endIndex = endIndex;
                var value = this.getSlice(start, endIndex);
                if (this.cbs.onprocessinginstruction) {
                    var name = this.getInstructionName(value);
                    this.cbs.onprocessinginstruction("!".concat(name), "!".concat(value));
                }
                // Set `startIndex` for next node
                this.startIndex = endIndex + 1;
            }
        },
        {
            /** @internal */ key: "onprocessinginstruction",
            value: function onprocessinginstruction(start, endIndex) {
                this.endIndex = endIndex;
                var value = this.getSlice(start, endIndex);
                if (this.cbs.onprocessinginstruction) {
                    var name = this.getInstructionName(value);
                    this.cbs.onprocessinginstruction("?".concat(name), "?".concat(value));
                }
                // Set `startIndex` for next node
                this.startIndex = endIndex + 1;
            }
        },
        {
            /** @internal */ key: "oncomment",
            value: function oncomment(start, endIndex, offset) {
                var _a, _b, _c, _d;
                this.endIndex = endIndex;
                (_b = (_a = this.cbs).oncomment) === null || _b === void 0 || _b.call(_a, this.getSlice(start, endIndex - offset));
                (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 || _d.call(_c);
                // Set `startIndex` for next node
                this.startIndex = endIndex + 1;
            }
        },
        {
            /** @internal */ key: "oncdata",
            value: function oncdata(start, endIndex, offset) {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                this.endIndex = endIndex;
                var value = this.getSlice(start, endIndex - offset);
                if (this.options.xmlMode || this.options.recognizeCDATA) {
                    (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 || _b.call(_a);
                    (_d = (_c = this.cbs).ontext) === null || _d === void 0 || _d.call(_c, value);
                    (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 || _f.call(_e);
                } else {
                    (_h = (_g = this.cbs).oncomment) === null || _h === void 0 || _h.call(_g, "[CDATA[".concat(value, "]]"));
                    (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 || _k.call(_j);
                }
                // Set `startIndex` for next node
                this.startIndex = endIndex + 1;
            }
        },
        {
            /** @internal */ key: "onend",
            value: function onend() {
                var _a, _b;
                if (this.cbs.onclosetag) {
                    // Set the end index for all remaining tags
                    this.endIndex = this.startIndex;
                    for(var index = this.stack.length; index > 0; this.cbs.onclosetag(this.stack[--index], true));
                }
                (_b = (_a = this.cbs).onend) === null || _b === void 0 || _b.call(_a);
            }
        },
        {
            /**
     * Resets the parser to a blank state, ready to parse a new HTML document
     */ key: "reset",
            value: function reset() {
                var _a, _b, _c, _d;
                (_b = (_a = this.cbs).onreset) === null || _b === void 0 || _b.call(_a);
                this.tokenizer.reset();
                this.tagname = "";
                this.attribname = "";
                this.attribs = null;
                this.stack.length = 0;
                this.startIndex = 0;
                this.endIndex = 0;
                (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 || _d.call(_c, this);
                this.buffers.length = 0;
                this.bufferOffset = 0;
                this.writeIndex = 0;
                this.ended = false;
            }
        },
        {
            /**
     * Resets the parser, then parses a complete document and
     * pushes it to the handler.
     *
     * @param data Document to parse.
     */ key: "parseComplete",
            value: function parseComplete(data) {
                this.reset();
                this.end(data);
            }
        },
        {
            key: "getSlice",
            value: function getSlice(start, end) {
                while(start - this.bufferOffset >= this.buffers[0].length)this.shiftBuffer();
                var slice = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);
                while(end - this.bufferOffset > this.buffers[0].length){
                    this.shiftBuffer();
                    slice += this.buffers[0].slice(0, end - this.bufferOffset);
                }
                return slice;
            }
        },
        {
            key: "shiftBuffer",
            value: function shiftBuffer() {
                this.bufferOffset += this.buffers[0].length;
                this.writeIndex--;
                this.buffers.shift();
            }
        },
        {
            /**
     * Parses a chunk of data and calls the corresponding callbacks.
     *
     * @param chunk Chunk to parse.
     */ key: "write",
            value: function write(chunk) {
                var _a, _b;
                if (this.ended) {
                    (_b = (_a = this.cbs).onerror) === null || _b === void 0 || _b.call(_a, new Error(".write() after done!"));
                    return;
                }
                this.buffers.push(chunk);
                if (this.tokenizer.running) {
                    this.tokenizer.write(chunk);
                    this.writeIndex++;
                }
            }
        },
        {
            /**
     * Parses the end of the buffer and clears the stack, calls onend.
     *
     * @param chunk Optional final chunk to parse.
     */ key: "end",
            value: function end(chunk) {
                var _a, _b;
                if (this.ended) {
                    (_b = (_a = this.cbs).onerror) === null || _b === void 0 || _b.call(_a, new Error(".end() after done!"));
                    return;
                }
                if (chunk) this.write(chunk);
                this.ended = true;
                this.tokenizer.end();
            }
        },
        {
            /**
     * Pauses parsing. The parser won't emit events until `resume` is called.
     */ key: "pause",
            value: function pause() {
                this.tokenizer.pause();
            }
        },
        {
            /**
     * Resumes parsing after `pause` was called.
     */ key: "resume",
            value: function resume() {
                this.tokenizer.resume();
                while(this.tokenizer.running && this.writeIndex < this.buffers.length)this.tokenizer.write(this.buffers[this.writeIndex++]);
                if (this.ended) this.tokenizer.end();
            }
        },
        {
            /**
     * Alias of `write`, for backwards compatibility.
     *
     * @param chunk Chunk to parse.
     * @deprecated
     */ key: "parseChunk",
            value: function parseChunk(chunk) {
                this.write(chunk);
            }
        },
        {
            /**
     * Alias of `end`, for backwards compatibility.
     *
     * @param chunk Optional final chunk to parse.
     * @deprecated
     */ key: "done",
            value: function done(chunk) {
                this.end(chunk);
            }
        }
    ]);
    return Parser;
}();



var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");
/** Types of elements found in htmlparser2's DOM */ var $2df14b34593b1d09$export$b992dc138d950e31;
(function(ElementType) {
    /** Type for the root element of a document */ ElementType["Root"] = "root";
    /** Type for Text */ ElementType["Text"] = "text";
    /** Type for <? ... ?> */ ElementType["Directive"] = "directive";
    /** Type for <!-- ... --> */ ElementType["Comment"] = "comment";
    /** Type for <script> tags */ ElementType["Script"] = "script";
    /** Type for <style> tags */ ElementType["Style"] = "style";
    /** Type for Any tag */ ElementType["Tag"] = "tag";
    /** Type for <![CDATA[ ... ]]> */ ElementType["CDATA"] = "cdata";
    /** Type for <!doctype ...> */ ElementType["Doctype"] = "doctype";
})($2df14b34593b1d09$export$b992dc138d950e31 || ($2df14b34593b1d09$export$b992dc138d950e31 = {}));
function $2df14b34593b1d09$export$3bf645f08efe3292(elem) {
    return elem.type === $2df14b34593b1d09$export$b992dc138d950e31.Tag || elem.type === $2df14b34593b1d09$export$b992dc138d950e31.Script || elem.type === $2df14b34593b1d09$export$b992dc138d950e31.Style;
}
var $2df14b34593b1d09$export$be92b6f5f03c0fe9 = $2df14b34593b1d09$export$b992dc138d950e31.Root;
var $2df14b34593b1d09$export$5f1af8db9871e1d6 = $2df14b34593b1d09$export$b992dc138d950e31.Text;
var $2df14b34593b1d09$export$befdefbdce210f91 = $2df14b34593b1d09$export$b992dc138d950e31.Directive;
var $2df14b34593b1d09$export$4d299b491347818a = $2df14b34593b1d09$export$b992dc138d950e31.Comment;
var $2df14b34593b1d09$export$2f8b47a141e57afc = $2df14b34593b1d09$export$b992dc138d950e31.Script;
var $2df14b34593b1d09$export$d9e45bc13d335801 = $2df14b34593b1d09$export$b992dc138d950e31.Style;
var $2df14b34593b1d09$export$3288d34c523a1192 = $2df14b34593b1d09$export$b992dc138d950e31.Tag;
var $2df14b34593b1d09$export$1f8b8f7e5c763232 = $2df14b34593b1d09$export$b992dc138d950e31.CDATA;
var $2df14b34593b1d09$export$31b44af36ff2c60f = $2df14b34593b1d09$export$b992dc138d950e31.Doctype;



var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

var $03TNp = parcelRequire("03TNp");
function $ca7b5bc57a9adfd0$export$71511d61b312f219(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}


function $1b4e013f19afac76$export$71511d61b312f219(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            (0, $ca7b5bc57a9adfd0$export$71511d61b312f219)(target, key, source[key]);
        });
    }
    return target;
}



var $jPvPr = parcelRequire("jPvPr");

var $1KZ30 = parcelRequire("1KZ30");
function $3b9ade699da38c5f$export$71511d61b312f219(Parent, args, Class) {
    if ((0, $jPvPr._)()) $3b9ade699da38c5f$export$71511d61b312f219 = Reflect.construct;
    else $3b9ade699da38c5f$export$71511d61b312f219 = function construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) (0, $1KZ30._)(instance, Class.prototype);
        return instance;
    };
    return $3b9ade699da38c5f$export$71511d61b312f219.apply(null, arguments);
}



var $hRvs7 = parcelRequire("hRvs7");
function $cce349c61f82d561$export$71511d61b312f219(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}



var $1KZ30 = parcelRequire("1KZ30");
function $092617bd76dd928a$export$71511d61b312f219(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    $092617bd76dd928a$export$71511d61b312f219 = function(Class) {
        if (Class === null || !(0, $cce349c61f82d561$export$71511d61b312f219)(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return (0, $3b9ade699da38c5f$export$71511d61b312f219)(Class, arguments, (0, $hRvs7._)(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return (0, $1KZ30._)(Wrapper, Class);
    };
    return $092617bd76dd928a$export$71511d61b312f219(Class);
}



var $13zzr = parcelRequire("13zzr");

var $4ced16ee3f3f7fb3$export$85c928794f8d04d4 = /*#__PURE__*/ function() {
    "use strict";
    function Node() {
        (0, $hrxTm._)(this, Node);
        /** Parent of the node */ this.parent = null;
        /** Previous sibling */ this.prev = null;
        /** Next sibling */ this.next = null;
        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */ this.startIndex = null;
        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */ this.endIndex = null;
    }
    (0, $ggnt0._)(Node, [
        {
            key: "parentNode",
            get: // Read-write aliases for properties
            /**
     * Same as {@link parent}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */ function get() {
                return this.parent;
            },
            set: function set(parent) {
                this.parent = parent;
            }
        },
        {
            key: "previousSibling",
            get: /**
     * Same as {@link prev}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */ function get() {
                return this.prev;
            },
            set: function set(prev) {
                this.prev = prev;
            }
        },
        {
            key: "nextSibling",
            get: /**
     * Same as {@link next}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */ function get() {
                return this.next;
            },
            set: function set(next) {
                this.next = next;
            }
        },
        {
            /**
     * Clone this node, and optionally its children.
     *
     * @param recursive Clone child nodes as well.
     * @returns A clone of the node.
     */ key: "cloneNode",
            value: function cloneNode1() {
                var recursive = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                return $4ced16ee3f3f7fb3$export$ae8e35ea29ddac22(this, recursive);
            }
        }
    ]);
    return Node;
}();
var $4ced16ee3f3f7fb3$export$c3569d91cd44d357 = /*#__PURE__*/ function(Node) {
    "use strict";
    (0, $03TNp._)(DataNode, Node);
    var _super = (0, $13zzr._)(DataNode);
    function DataNode(data) {
        (0, $hrxTm._)(this, DataNode);
        var _this;
        _this = _super.call(this);
        _this.data = data;
        return _this;
    }
    (0, $ggnt0._)(DataNode, [
        {
            key: "nodeValue",
            get: /**
     * Same as {@link data}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */ function get() {
                return this.data;
            },
            set: function set(data) {
                this.data = data;
            }
        }
    ]);
    return DataNode;
}((0, $092617bd76dd928a$export$71511d61b312f219)($4ced16ee3f3f7fb3$export$85c928794f8d04d4));
var $4ced16ee3f3f7fb3$export$5f1af8db9871e1d6 = /*#__PURE__*/ function(DataNode) {
    "use strict";
    (0, $03TNp._)(Text, DataNode);
    var _super = (0, $13zzr._)(Text);
    function Text() {
        (0, $hrxTm._)(this, Text);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        _this.type = (0, $2df14b34593b1d09$export$b992dc138d950e31).Text;
        return _this;
    }
    (0, $ggnt0._)(Text, [
        {
            key: "nodeType",
            get: function get() {
                return 3;
            }
        }
    ]);
    return Text;
}($4ced16ee3f3f7fb3$export$c3569d91cd44d357);
var $4ced16ee3f3f7fb3$export$4d299b491347818a = /*#__PURE__*/ function(DataNode) {
    "use strict";
    (0, $03TNp._)(Comment, DataNode);
    var _super = (0, $13zzr._)(Comment);
    function Comment() {
        (0, $hrxTm._)(this, Comment);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        _this.type = (0, $2df14b34593b1d09$export$b992dc138d950e31).Comment;
        return _this;
    }
    (0, $ggnt0._)(Comment, [
        {
            key: "nodeType",
            get: function get() {
                return 8;
            }
        }
    ]);
    return Comment;
}($4ced16ee3f3f7fb3$export$c3569d91cd44d357);
var $4ced16ee3f3f7fb3$export$9269dce19ee35e96 = /*#__PURE__*/ function(DataNode) {
    "use strict";
    (0, $03TNp._)(ProcessingInstruction, DataNode);
    var _super = (0, $13zzr._)(ProcessingInstruction);
    function ProcessingInstruction(name, data) {
        (0, $hrxTm._)(this, ProcessingInstruction);
        var _this;
        _this = _super.call(this, data);
        _this.name = name;
        _this.type = (0, $2df14b34593b1d09$export$b992dc138d950e31).Directive;
        return _this;
    }
    (0, $ggnt0._)(ProcessingInstruction, [
        {
            key: "nodeType",
            get: function get() {
                return 1;
            }
        }
    ]);
    return ProcessingInstruction;
}($4ced16ee3f3f7fb3$export$c3569d91cd44d357);
var $4ced16ee3f3f7fb3$export$62be934f90997196 = /*#__PURE__*/ function(Node) {
    "use strict";
    (0, $03TNp._)(NodeWithChildren, Node);
    var _super = (0, $13zzr._)(NodeWithChildren);
    function NodeWithChildren(children) {
        (0, $hrxTm._)(this, NodeWithChildren);
        var _this;
        _this = _super.call(this);
        _this.children = children;
        return _this;
    }
    (0, $ggnt0._)(NodeWithChildren, [
        {
            key: "firstChild",
            get: // Aliases
            /** First child of the node. */ function get() {
                var _a;
                return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
            }
        },
        {
            key: "lastChild",
            get: /** Last child of the node. */ function get() {
                return this.children.length > 0 ? this.children[this.children.length - 1] : null;
            }
        },
        {
            key: "childNodes",
            get: /**
     * Same as {@link children}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */ function get() {
                return this.children;
            },
            set: function set(children) {
                this.children = children;
            }
        }
    ]);
    return NodeWithChildren;
}((0, $092617bd76dd928a$export$71511d61b312f219)($4ced16ee3f3f7fb3$export$85c928794f8d04d4));
var $4ced16ee3f3f7fb3$export$1f8b8f7e5c763232 = /*#__PURE__*/ function(NodeWithChildren) {
    "use strict";
    (0, $03TNp._)(CDATA, NodeWithChildren);
    var _super = (0, $13zzr._)(CDATA);
    function CDATA() {
        (0, $hrxTm._)(this, CDATA);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        _this.type = (0, $2df14b34593b1d09$export$b992dc138d950e31).CDATA;
        return _this;
    }
    (0, $ggnt0._)(CDATA, [
        {
            key: "nodeType",
            get: function get() {
                return 4;
            }
        }
    ]);
    return CDATA;
}($4ced16ee3f3f7fb3$export$62be934f90997196);
var $4ced16ee3f3f7fb3$export$b34a105447964f9f = /*#__PURE__*/ function(NodeWithChildren) {
    "use strict";
    (0, $03TNp._)(Document, NodeWithChildren);
    var _super = (0, $13zzr._)(Document);
    function Document() {
        (0, $hrxTm._)(this, Document);
        var _this;
        _this = _super.call.apply(_super, [
            this
        ].concat(Array.prototype.slice.call(arguments)));
        _this.type = (0, $2df14b34593b1d09$export$b992dc138d950e31).Root;
        return _this;
    }
    (0, $ggnt0._)(Document, [
        {
            key: "nodeType",
            get: function get() {
                return 9;
            }
        }
    ]);
    return Document;
}($4ced16ee3f3f7fb3$export$62be934f90997196);
var $4ced16ee3f3f7fb3$export$db77ccec0bb4ccac = /*#__PURE__*/ function(NodeWithChildren) {
    "use strict";
    (0, $03TNp._)(Element, NodeWithChildren);
    var _super = (0, $13zzr._)(Element);
    function Element(name, attribs) {
        var children = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], type = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : name === "script" ? (0, $2df14b34593b1d09$export$b992dc138d950e31).Script : name === "style" ? (0, $2df14b34593b1d09$export$b992dc138d950e31).Style : (0, $2df14b34593b1d09$export$b992dc138d950e31).Tag;
        (0, $hrxTm._)(this, Element);
        var _this;
        _this = _super.call(this, children);
        _this.name = name;
        _this.attribs = attribs;
        _this.type = type;
        return _this;
    }
    (0, $ggnt0._)(Element, [
        {
            key: "nodeType",
            get: function get() {
                return 1;
            }
        },
        {
            key: "tagName",
            get: // DOM Level 1 aliases
            /**
     * Same as {@link name}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */ function get() {
                return this.name;
            },
            set: function set(name) {
                this.name = name;
            }
        },
        {
            key: "attributes",
            get: function get() {
                var _this = this;
                return Object.keys(this.attribs).map(function(name) {
                    var _a, _b;
                    return {
                        name: name,
                        value: _this.attribs[name],
                        namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
                        prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
                    };
                });
            }
        }
    ]);
    return Element;
}($4ced16ee3f3f7fb3$export$62be934f90997196);
function $4ced16ee3f3f7fb3$export$3bf645f08efe3292(node) {
    return (0, $2df14b34593b1d09$export$3bf645f08efe3292)(node);
}
function $4ced16ee3f3f7fb3$export$c2d65aed98d39b56(node) {
    return node.type === (0, $2df14b34593b1d09$export$b992dc138d950e31).CDATA;
}
function $4ced16ee3f3f7fb3$export$1879817ac5c922b7(node) {
    return node.type === (0, $2df14b34593b1d09$export$b992dc138d950e31).Text;
}
function $4ced16ee3f3f7fb3$export$3ab01370f5e64ac8(node) {
    return node.type === (0, $2df14b34593b1d09$export$b992dc138d950e31).Comment;
}
function $4ced16ee3f3f7fb3$export$4b5d79f26e0e3ad5(node) {
    return node.type === (0, $2df14b34593b1d09$export$b992dc138d950e31).Directive;
}
function $4ced16ee3f3f7fb3$export$62858bae88b53fd0(node) {
    return node.type === (0, $2df14b34593b1d09$export$b992dc138d950e31).Root;
}
function $4ced16ee3f3f7fb3$export$bd5ff50f0e53d41c(node) {
    return Object.prototype.hasOwnProperty.call(node, "children");
}
function $4ced16ee3f3f7fb3$export$ae8e35ea29ddac22(node) {
    var recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var result;
    if ($4ced16ee3f3f7fb3$export$1879817ac5c922b7(node)) result = new $4ced16ee3f3f7fb3$export$5f1af8db9871e1d6(node.data);
    else if ($4ced16ee3f3f7fb3$export$3ab01370f5e64ac8(node)) result = new $4ced16ee3f3f7fb3$export$4d299b491347818a(node.data);
    else if ($4ced16ee3f3f7fb3$export$3bf645f08efe3292(node)) {
        var children = recursive ? $4ced16ee3f3f7fb3$var$cloneChildren(node.children) : [];
        var clone = new $4ced16ee3f3f7fb3$export$db77ccec0bb4ccac(node.name, (0, $1b4e013f19afac76$export$71511d61b312f219)({}, node.attribs), children);
        children.forEach(function(child) {
            return child.parent = clone;
        });
        if (node.namespace != null) clone.namespace = node.namespace;
        if (node["x-attribsNamespace"]) clone["x-attribsNamespace"] = (0, $1b4e013f19afac76$export$71511d61b312f219)({}, node["x-attribsNamespace"]);
        if (node["x-attribsPrefix"]) clone["x-attribsPrefix"] = (0, $1b4e013f19afac76$export$71511d61b312f219)({}, node["x-attribsPrefix"]);
        result = clone;
    } else if ($4ced16ee3f3f7fb3$export$c2d65aed98d39b56(node)) {
        var children1 = recursive ? $4ced16ee3f3f7fb3$var$cloneChildren(node.children) : [];
        var clone1 = new $4ced16ee3f3f7fb3$export$1f8b8f7e5c763232(children1);
        children1.forEach(function(child) {
            return child.parent = clone1;
        });
        result = clone1;
    } else if ($4ced16ee3f3f7fb3$export$62858bae88b53fd0(node)) {
        var children2 = recursive ? $4ced16ee3f3f7fb3$var$cloneChildren(node.children) : [];
        var clone2 = new $4ced16ee3f3f7fb3$export$b34a105447964f9f(children2);
        children2.forEach(function(child) {
            return child.parent = clone2;
        });
        if (node["x-mode"]) clone2["x-mode"] = node["x-mode"];
        result = clone2;
    } else if ($4ced16ee3f3f7fb3$export$4b5d79f26e0e3ad5(node)) {
        var instruction = new $4ced16ee3f3f7fb3$export$9269dce19ee35e96(node.name, node.data);
        if (node["x-name"] != null) {
            instruction["x-name"] = node["x-name"];
            instruction["x-publicId"] = node["x-publicId"];
            instruction["x-systemId"] = node["x-systemId"];
        }
        result = instruction;
    } else throw new Error("Not implemented yet: ".concat(node.type));
    result.startIndex = node.startIndex;
    result.endIndex = node.endIndex;
    if (node.sourceCodeLocation != null) result.sourceCodeLocation = node.sourceCodeLocation;
    return result;
}
function $4ced16ee3f3f7fb3$var$cloneChildren(childs) {
    var children = childs.map(function(child) {
        return $4ced16ee3f3f7fb3$export$ae8e35ea29ddac22(child, true);
    });
    for(var i = 1; i < children.length; i++){
        children[i].prev = children[i - 1];
        children[i - 1].next = children[i];
    }
    return children;
}


// Default options
var $237df43ade998822$var$defaultOpts = {
    withStartIndices: false,
    withEndIndices: false,
    xmlMode: false
};
var $237df43ade998822$export$ff8ccbac9225de62 = /*#__PURE__*/ function() {
    "use strict";
    function DomHandler(callback, options, elementCB) {
        (0, $hrxTm._)(this, DomHandler);
        /** The elements of the DOM */ this.dom = [];
        /** The root element for the DOM */ this.root = new (0, $4ced16ee3f3f7fb3$export$b34a105447964f9f)(this.dom);
        /** Indicated whether parsing has been completed. */ this.done = false;
        /** Stack of open tags. */ this.tagStack = [
            this.root
        ];
        /** A data node that is still being written to. */ this.lastNode = null;
        /** Reference to the parser instance. Used for location information. */ this.parser = null;
        // Make it possible to skip arguments, for backwards-compatibility
        if (typeof options === "function") {
            elementCB = options;
            options = $237df43ade998822$var$defaultOpts;
        }
        if (typeof callback === "object") {
            options = callback;
            callback = undefined;
        }
        this.callback = callback !== null && callback !== void 0 ? callback : null;
        this.options = options !== null && options !== void 0 ? options : $237df43ade998822$var$defaultOpts;
        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
    }
    (0, $ggnt0._)(DomHandler, [
        {
            key: "onparserinit",
            value: function onparserinit(parser) {
                this.parser = parser;
            }
        },
        {
            // Resets the handler back to starting state
            key: "onreset",
            value: function onreset() {
                this.dom = [];
                this.root = new (0, $4ced16ee3f3f7fb3$export$b34a105447964f9f)(this.dom);
                this.done = false;
                this.tagStack = [
                    this.root
                ];
                this.lastNode = null;
                this.parser = null;
            }
        },
        {
            // Signals the handler that parsing is done
            key: "onend",
            value: function onend() {
                if (this.done) return;
                this.done = true;
                this.parser = null;
                this.handleCallback(null);
            }
        },
        {
            key: "onerror",
            value: function onerror(error) {
                this.handleCallback(error);
            }
        },
        {
            key: "onclosetag",
            value: function onclosetag() {
                this.lastNode = null;
                var elem = this.tagStack.pop();
                if (this.options.withEndIndices) elem.endIndex = this.parser.endIndex;
                if (this.elementCB) this.elementCB(elem);
            }
        },
        {
            key: "onopentag",
            value: function onopentag(name, attribs) {
                var type = this.options.xmlMode ? (0, $2df14b34593b1d09$export$b992dc138d950e31).Tag : undefined;
                var element = new (0, $4ced16ee3f3f7fb3$export$db77ccec0bb4ccac)(name, attribs, undefined, type);
                this.addNode(element);
                this.tagStack.push(element);
            }
        },
        {
            key: "ontext",
            value: function ontext(data) {
                var lastNode = this.lastNode;
                if (lastNode && lastNode.type === (0, $2df14b34593b1d09$export$b992dc138d950e31).Text) {
                    lastNode.data += data;
                    if (this.options.withEndIndices) lastNode.endIndex = this.parser.endIndex;
                } else {
                    var node = new (0, $4ced16ee3f3f7fb3$export$5f1af8db9871e1d6)(data);
                    this.addNode(node);
                    this.lastNode = node;
                }
            }
        },
        {
            key: "oncomment",
            value: function oncomment(data) {
                if (this.lastNode && this.lastNode.type === (0, $2df14b34593b1d09$export$b992dc138d950e31).Comment) {
                    this.lastNode.data += data;
                    return;
                }
                var node = new (0, $4ced16ee3f3f7fb3$export$4d299b491347818a)(data);
                this.addNode(node);
                this.lastNode = node;
            }
        },
        {
            key: "oncommentend",
            value: function oncommentend() {
                this.lastNode = null;
            }
        },
        {
            key: "oncdatastart",
            value: function oncdatastart() {
                var text = new (0, $4ced16ee3f3f7fb3$export$5f1af8db9871e1d6)("");
                var node = new (0, $4ced16ee3f3f7fb3$export$1f8b8f7e5c763232)([
                    text
                ]);
                this.addNode(node);
                text.parent = node;
                this.lastNode = text;
            }
        },
        {
            key: "oncdataend",
            value: function oncdataend() {
                this.lastNode = null;
            }
        },
        {
            key: "onprocessinginstruction",
            value: function onprocessinginstruction(name, data) {
                var node = new (0, $4ced16ee3f3f7fb3$export$9269dce19ee35e96)(name, data);
                this.addNode(node);
            }
        },
        {
            key: "handleCallback",
            value: function handleCallback(error) {
                if (typeof this.callback === "function") this.callback(error, this.dom);
                else if (error) throw error;
            }
        },
        {
            key: "addNode",
            value: function addNode(node) {
                var parent = this.tagStack[this.tagStack.length - 1];
                var previousSibling = parent.children[parent.children.length - 1];
                if (this.options.withStartIndices) node.startIndex = this.parser.startIndex;
                if (this.options.withEndIndices) node.endIndex = this.parser.endIndex;
                parent.children.push(node);
                if (previousSibling) {
                    node.prev = previousSibling;
                    previousSibling.next = node;
                }
                node.parent = parent;
                this.lastNode = null;
            }
        }
    ]);
    return DomHandler;
}();
var $237df43ade998822$export$2e2bcd8739ae039 = $237df43ade998822$export$ff8ccbac9225de62;





/*
 * Module dependencies
 */ 
function $09f2b5c72ab52c9f$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $09f2b5c72ab52c9f$export$71511d61b312f219(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    else $09f2b5c72ab52c9f$var$ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
    return target;
}




var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");
// Generated using scripts/write-decode-map.ts
var $bd7148e3fac8a725$export$2e2bcd8739ae039 = new Uint16Array(// prettier-ignore
'\u1D41<\xd5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig\u803B\xc6\u40C6P\u803B&\u4026cute\u803B\xc1\u40C1reve;\u4102\u0100iyx}rc\u803B\xc2\u40C2;\u4410r;\uC000\ud835\udd04rave\u803B\xc0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9d\xa1on;\u4104f;\uC000\ud835\udd38plyFunction;\u6061ing\u803B\xc5\u40C5\u0100cs\xbe\xc3r;\uC000\ud835\udc9cign;\u6254ilde\u803B\xc3\u40C3ml\u803B\xc4\u40C4\u0400aceforsu\xe5\xfb\xfe\u0117\u011C\u0122\u0127\u012A\u0100cr\xea\xf2kslash;\u6216\u0176\xf6\xf8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\ud835\udd05pf;\uC000\ud835\udd39eve;\u42D8c\xf2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xa9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xc7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xf2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\ud835\udc9ep\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\ud835\udd07\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\ud835\udd3b\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xec\u0239o\u0274\u0379\0\0\u037B\xbb\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xe5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\ud835\udc9frok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xd0\u40D0cute\u803B\xc9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xca\u40CA;\u442Dot;\u4116r;\uC000\ud835\udd08rave\u803B\xc8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\ud835\udd3csilon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xcb\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\ud835\udd09lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\ud835\udd3dAll;\u6200riertrf;\u6131c\xf2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\ud835\udd0a;\u62D9pf;\uC000\ud835\udd3eeater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\ud835\udca2;\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xf2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xf0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xcd\u40CD\u0100iy\u0713\u0718rc\u803B\xce\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xcc\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xf3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\ud835\udd40a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xcf\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\ud835\udd0dpf;\uC000\ud835\udd41\u01E3\u07C7\0\u07CCr;\uC000\ud835\udca5rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\ud835\udd0epf;\uC000\ud835\udd42cr;\uC000\ud835\udca6\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xe1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\ud835\udd0f\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xe1\u03BFight\xe1\u03CAf;\uC000\ud835\udd43er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xf2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\ud835\udd10nusPlus;\u6213pf;\uC000\ud835\udd44c\xf2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xeb\u0AD9eryThi\xee\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xf2\u0673essLes\xf3\u0A48Line;\u400Ar;\uC000\ud835\udd11\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\ud835\udca9ilde\u803B\xd1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xd3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xd4\u40D4;\u441Eblac;\u4150r;\uC000\ud835\udd12rave\u803B\xd2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\ud835\udd46enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\ud835\udcaaash\u803B\xd8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xd5\u40D5es;\u6A37ml\u803B\xd6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\ud835\udd13i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xe5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\ud835\udcab;\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\ud835\udd14pf;\u611Acr;\uC000\ud835\udcac\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xae\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xbb\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\ud835\udd16ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xbb\u041EeftArrow\xbb\u089AightArrow\xbb\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\ud835\udd4a\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\ud835\udcaear;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xe1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xbb\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xde\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\ud835\udd17\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\ud835\udd4bipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\ud835\udcafrok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xda\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xdb\u40DB;\u4423blac;\u4170r;\uC000\ud835\udd18rave\u803B\xd9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\ud835\udd4c\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xe1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\ud835\udcb0ilde;\u4168ml\u803B\xdc\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\ud835\udd19pf;\uC000\ud835\udd4dcr;\uC000\ud835\udcb1dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\ud835\udd1apf;\uC000\ud835\udd4ecr;\uC000\ud835\udcb2\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\ud835\udd1b;\u439Epf;\uC000\ud835\udd4fcr;\uC000\ud835\udcb3\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xdd\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\ud835\udd1cpf;\uC000\ud835\udd50cr;\uC000\ud835\udcb4ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xe8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\ud835\udcb5\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xe1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xe2\u40E2te\u80BB\xb4\u0306;\u4430lig\u803B\xe6\u40E6\u0100;r\xb2\u15BA;\uC000\ud835\udd1erave\u803B\xe0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xe8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xbb\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xbb\xb9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\ud835\udd52\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xf1\u1683ing\u803B\xe5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\ud835\udcb6;\u402Amp\u0100;e\u12C1\u16AF\xf1\u0288ilde\u803B\xe3\u40E3ml\u803B\xe4\u40E4\u0100ci\u16C2\u16C8onin\xf4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xbb\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xe9\u170Cno\xf5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\ud835\udd1fg\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xf0\u0760rc;\u65EFp\xbb\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xe5\u1444\xe5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\ud835\udd53\u0100;t\u13CB\u1863om\xbb\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xa6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\ud835\udcb7mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xbb\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xee\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xe7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xb8\u01ADptyv;\u69B2t\u8100\xa2;e\u1A2D\u1A2E\u40A2r\xe4\u01B2r;\uC000\ud835\udd20\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xbb\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xbb\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xbb\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xc7\xc6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xee\u1160e\u0100mx\u1AF1\u1AF6ent\xbb\u1AE9e\xf3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xf4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\ud835\udd54o\xe4\u0254\u8100\xa9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\ud835\udcb8\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xe3\u1B73u\xe3\u1B75ee;\u62CEedge;\u62CFen\u803B\xa4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xbb\u1B80ight\xbb\u1BBDe\xe4\u1BDD\u0100ci\u1C01\u1C07onin\xf4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xf2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xf2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xbb\u090A\u016B\u1C61\u1C67arow;\u690Fa\xe3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xb0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\ud835\udd21ar\u0100lr\u1CB3\u1CB5\xbb\u08DC\xbb\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xf7;o\u1CE7\u1CF0ntimes;\u62C7n\xf8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\ud835\udd55\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xe5\xfan\u0180adh\u112E\u1D5D\u1D67ownarrow\xf3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xf4\u1CB4igh\xf4\u1CB6\u0162\u1D7F\u1D85karo\xf7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\ud835\udcb9;\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xf2\u0429a\xf2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xf4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xe9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xea\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\ud835\udd22\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xe8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xbb\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\ud835\udd56\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xbb\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xbb\u1E2E\u0269\u1EF9\0\0\u1EFB\xed\u0548ant\u0100gl\u1F02\u1F06tr\xbb\u1E5Dess\xbb\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xf4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xf0\u40F0\u0100mr\u1F53\u1F57l\u803B\xeb\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xf4\u056E\u0100eo\u1F6C\u1F74ctatio\xee\u0559nential\xe5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xf1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\ud835\udd23lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\ud835\udd57\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xbd\u40BD;\u6153\u803B\xbc\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xbe\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\ud835\udcbb\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xf4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\ud835\udd24\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xbb\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\ud835\udd58\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xf8\u209Er;\u6978q\u0100lq\u063F\u2196les\xf3\u2088i\xed\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xc5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xf2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xf0\u1484f\xbb\u2024il\xf4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xbb\u220Alip;\u6026con;\u62B9r;\uC000\ud835\udd25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\ud835\udd59bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\ud835\udcbdas\xe8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xbb\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xed\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xee\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xa1\u40A1\u0100fr\u039F\u22C9;\uC000\ud835\udd26rave\u803B\xec\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xe5\u078Ear\xf4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xf4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xf3\u1563\xe3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\ud835\udd5aa;\u43B9uest\u803B\xbf\u40BF\u0100ci\u238A\u238Fr;\uC000\ud835\udcben\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xef\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\ud835\udd27ath;\u4237pf;\uC000\ud835\udd5b\u01E3\u23EC\0\u23F1r;\uC000\ud835\udcbfrcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\ud835\udd28reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\ud835\udd5ccr;\uC000\ud835\udcc0\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xf2\u09C6\xf2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xee\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xe5\u088E;\u6A85uo\u803B\xab\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xeb\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xec\u08B0\xe2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xe9\u24F6arpoon\u0100du\u25AF\u25B4own\xbb\u045Ap\xbb\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xf3\u0F98quigarro\xf7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xf4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xf8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xf4\u0989gt\xf2\u248C\xf4\u099Bi\xed\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\ud835\udd29\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xf2\u25C1orne\xf2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xbb\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xbb\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xeb\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xe1\u09F2apsto;\u67FCight\xe1\u09FDparrow\u0100lr\u2725\u2729ef\xf4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\ud835\udd5dus;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xe1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xbb\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xf2\u08A8orne\xf2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\ud835\udcc1m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xe5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xc5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xaf\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xbb\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xee\u048Cef\xf4\u090F\xf0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xbb\u1626r;\uC000\ud835\udd2ao;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xb5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xf4\u16A7ir;\u6AF0ot\u80BB\xb7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xf2\u2212\xf0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\ud835\udd5e\u0100ct\u28F8\u28FDr;\uC000\ud835\udcc2pos\xbb\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xbb\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xf8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xa0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xf6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xed\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\ud835\udd2b\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xf4\u0BE2i\xed\u0BEA\u0100;r\u0BB6\u2A81\xbb\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xf2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xf2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xf7\u2AC1ightarro\xf7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xf4\u0C55\u0100;s\u0C55\u2AF4\xbb\u0C36i\xed\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xe4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\ud835\udd5f\u8180\xac;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xec\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xe5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xf1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xf2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xbb\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xe5\u0D45;\uC000\ud835\udcc3ort\u026D\u2B05\0\0\u2BD6ar\xe1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xe5\u0CF8\xe5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xf1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xec\u0BD7lde\u803B\xf1\u40F1\xe7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xf1\u0C26ight\u0100;e\u0CCB\u2C65\xf1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xf3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xf4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\ud835\udd2c\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xf2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xf2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xe5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\ud835\udd60\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xf2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xbb\u2DFF\u803B\xaa\u40AA\u803B\xba\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xf2\u2E01ash\u803B\xf8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xf5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xf6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xb6;l\u2E6D\u2E6E\u40B6le\xec\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\ud835\udd2d\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xf4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xbb\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xf6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xb1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\ud835\udd61nd\u803B\xa3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xe5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xf8\u2F43urlye\xf1\u0ED9\xf1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xed\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xf0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xef\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\ud835\udcc5;\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\ud835\udd2epf;\uC000\ud835\udd62rime;\u6057cr;\uC000\ud835\udcc6\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xf3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xf1\u1F19\xf4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xf2\u10B3\xf2\u03DDail;\u691Car\xf2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xe3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xe5\u0FD1uo\u803B\xbb\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xeb\u225D\xf0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xf3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xf2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xec\u0FF2\xe2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xe5\u10BBar\xf4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\ud835\udd2f\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xbb\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xe9\u30C8arpoon\u0100du\u31BB\u31BFow\xee\u317Ep\xbb\u1092eft\u0100ah\u31CA\u31D0rrow\xf3\u0FEAarpoon\xf3\u0551ightarrows;\u61C9quigarro\xf7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xf1\u1F32\u0180ahm\u320D\u3210\u3213r\xf2\u0FEAa\xf2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xbb\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xeb\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\ud835\udd63us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xf2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\ud835\udcc7\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xe5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xef\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xe5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xed\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xeb\u2228\u0100;o\u0A36\u0A34t\u803B\xa7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xf0nu\xf3\xf1t;\u6736r\u0100;o\u3376\u2055\uC000\ud835\udd30\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xe4\u1464ara\xec\u2E6F\u803B\xad\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xf2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xe9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\ud835\udd64a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xbb\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xf1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xf1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xbb\u117Car\xf2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\ud835\udcc8tm\xee\xf1i\xec\u3415ar\xe6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xee\u1EE0h\xe9\u2EAFs\xbb\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xf8\u32FAurlye\xf1\u11FE\xf1\u11F3\u0180aes\u3582\u3588\u331Bppro\xf8\u331Aq\xf1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xb9\u40B9\u803B\xb2\u40B2\u803B\xb3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xeb\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xdf\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xeb\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\ud835\udd31\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xf8\u12C1im\xbb\u12ACs\xf0\u129E\u0100as\u36BA\u36AE\xf0\u12C1rn\u803B\xfe\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xd7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xe1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\ud835\udd65rk;\u6ADA\xe1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xe5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xbb\u1DBBeft\u0100;e\u2800\u373E\xf1\u092E;\u625Cight\u0100;e\u32AA\u374B\xf1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\ud835\udcc9;\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xf4\u1777head\u0100lr\u3797\u37A0eftarro\xf7\u084Fightarrow\xbb\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xf2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xfa\u40FA\xf2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xfb\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xf2\u13ADlac;\u4171a\xf2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\ud835\udd32rave\u803B\xf9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xbb\u0957\xbb\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xbb\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xa8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\ud835\udd66\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xe1\u13B3arpoon\u0100lr\u3888\u388Cef\xf4\u382Digh\xf4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xbb\u13FAon\xbb\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xbb\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\ud835\udcca\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xbb\u1813\u0100am\u38EF\u38F2r\xf2\u38A8l\u803B\xfc\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xf2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xe8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xe1\u2415othin\xe7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xf4\u2FB5\u0100;h\u13B7\u3962\xef\u318D\u0100iu\u3969\u396Dgm\xe1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xe1\u369Ciangle\u0100lr\u39AA\u39AFeft\xbb\u0925ight\xbb\u1051y;\u4432ash\xbb\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xf2\u1469r;\uC000\ud835\udd33tr\xe9\u39AEsu\u0100bp\u39EF\u39F1\xbb\u0D1C\xbb\u0D59pf;\uC000\ud835\udd67ro\xf0\u0EFBtr\xe9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\ud835\udccb\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xbb\u397En\u0100Ee\u3992\u3A1E\xbb\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\ud835\udd34pf;\uC000\ud835\udd68\u0100;e\u1479\u3A66at\xe8\u1479cr;\uC000\ud835\udccc\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xe9\u17D1r;\uC000\ud835\udd35\u0100Aa\u3A94\u3A97r\xf2\u03C3r\xf2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xf2\u03B8r\xf2\u09EBa\xf0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\ud835\udd69im\xe5\u17B2\u0100Aa\u3AC7\u3ACAr\xf2\u03CEr\xf2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\ud835\udccd\u0100pt\u17D6\u3ADCr\xe9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xfd\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xa5\u40A5r;\uC000\ud835\udd36cy;\u4457pf;\uC000\ud835\udd6acr;\uC000\ud835\udcce\u0100cm\u3B26\u3B29y;\u444El\u803B\xff\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xe6\u155Fa;\u43B6r;\uC000\ud835\udd37cy;\u4436grarr;\u61DDpf;\uC000\ud835\udd6bcr;\uC000\ud835\udccf\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map(function(c) {
    return c.charCodeAt(0);
}));


// Generated using scripts/write-decode-map.ts
var $634ee3b5b0725689$export$2e2bcd8739ae039 = new Uint16Array(// prettier-ignore
"\u0200aglq	\x15\x18\x1b\u026D\x0f\0\0\x12p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map(function(c) {
    return c.charCodeAt(0);
}));


// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
var $1851579b6702e4bc$var$_a;
var $1851579b6702e4bc$var$decodeMap = new Map([
    [
        0,
        65533
    ],
    // C1 Unicode control character reference replacements
    [
        128,
        8364
    ],
    [
        130,
        8218
    ],
    [
        131,
        402
    ],
    [
        132,
        8222
    ],
    [
        133,
        8230
    ],
    [
        134,
        8224
    ],
    [
        135,
        8225
    ],
    [
        136,
        710
    ],
    [
        137,
        8240
    ],
    [
        138,
        352
    ],
    [
        139,
        8249
    ],
    [
        140,
        338
    ],
    [
        142,
        381
    ],
    [
        145,
        8216
    ],
    [
        146,
        8217
    ],
    [
        147,
        8220
    ],
    [
        148,
        8221
    ],
    [
        149,
        8226
    ],
    [
        150,
        8211
    ],
    [
        151,
        8212
    ],
    [
        152,
        732
    ],
    [
        153,
        8482
    ],
    [
        154,
        353
    ],
    [
        155,
        8250
    ],
    [
        156,
        339
    ],
    [
        158,
        382
    ],
    [
        159,
        376
    ]
]);
var $1851579b6702e4bc$export$73bfc63873071f74 = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
($1851579b6702e4bc$var$_a = String.fromCodePoint) !== null && $1851579b6702e4bc$var$_a !== void 0 ? $1851579b6702e4bc$var$_a : function fromCodePoint(codePoint) {
    var output = "";
    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
        codePoint = 0xdc00 | codePoint & 0x3ff;
    }
    output += String.fromCharCode(codePoint);
    return output;
};
function $1851579b6702e4bc$export$b978ab756102108a(codePoint) {
    var _a;
    if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) return 0xfffd;
    return (_a = $1851579b6702e4bc$var$decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
}
function $1851579b6702e4bc$export$2e2bcd8739ae039(codePoint) {
    return $1851579b6702e4bc$export$73bfc63873071f74($1851579b6702e4bc$export$b978ab756102108a(codePoint));
}


var $54deb1694831d8f1$var$CharCodes;
(function(CharCodes) {
    CharCodes[CharCodes["NUM"] = 35] = "NUM";
    CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
    CharCodes[CharCodes["EQUALS"] = 61] = "EQUALS";
    CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
    CharCodes[CharCodes["NINE"] = 57] = "NINE";
    CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
    CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
    CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
    CharCodes[CharCodes["LOWER_Z"] = 122] = "LOWER_Z";
    CharCodes[CharCodes["UPPER_A"] = 65] = "UPPER_A";
    CharCodes[CharCodes["UPPER_F"] = 70] = "UPPER_F";
    CharCodes[CharCodes["UPPER_Z"] = 90] = "UPPER_Z";
})($54deb1694831d8f1$var$CharCodes || ($54deb1694831d8f1$var$CharCodes = {}));
/** Bit that needs to be set to convert an upper case ASCII character to lower case */ var $54deb1694831d8f1$var$TO_LOWER_BIT = 32;
var $54deb1694831d8f1$export$6a4325c613e0faec;
(function(BinTrieFlags) {
    BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
    BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
    BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})($54deb1694831d8f1$export$6a4325c613e0faec || ($54deb1694831d8f1$export$6a4325c613e0faec = {}));
function $54deb1694831d8f1$var$isNumber(code) {
    return code >= $54deb1694831d8f1$var$CharCodes.ZERO && code <= $54deb1694831d8f1$var$CharCodes.NINE;
}
function $54deb1694831d8f1$var$isHexadecimalCharacter(code) {
    return code >= $54deb1694831d8f1$var$CharCodes.UPPER_A && code <= $54deb1694831d8f1$var$CharCodes.UPPER_F || code >= $54deb1694831d8f1$var$CharCodes.LOWER_A && code <= $54deb1694831d8f1$var$CharCodes.LOWER_F;
}
function $54deb1694831d8f1$var$isAsciiAlphaNumeric(code) {
    return code >= $54deb1694831d8f1$var$CharCodes.UPPER_A && code <= $54deb1694831d8f1$var$CharCodes.UPPER_Z || code >= $54deb1694831d8f1$var$CharCodes.LOWER_A && code <= $54deb1694831d8f1$var$CharCodes.LOWER_Z || $54deb1694831d8f1$var$isNumber(code);
}
/**
 * Checks if the given character is a valid end character for an entity in an attribute.
 *
 * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
 * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
 */ function $54deb1694831d8f1$var$isEntityInAttributeInvalidEnd(code) {
    return code === $54deb1694831d8f1$var$CharCodes.EQUALS || $54deb1694831d8f1$var$isAsciiAlphaNumeric(code);
}
var $54deb1694831d8f1$var$EntityDecoderState;
(function(EntityDecoderState) {
    EntityDecoderState[EntityDecoderState["EntityStart"] = 0] = "EntityStart";
    EntityDecoderState[EntityDecoderState["NumericStart"] = 1] = "NumericStart";
    EntityDecoderState[EntityDecoderState["NumericDecimal"] = 2] = "NumericDecimal";
    EntityDecoderState[EntityDecoderState["NumericHex"] = 3] = "NumericHex";
    EntityDecoderState[EntityDecoderState["NamedEntity"] = 4] = "NamedEntity";
})($54deb1694831d8f1$var$EntityDecoderState || ($54deb1694831d8f1$var$EntityDecoderState = {}));
var $54deb1694831d8f1$export$8c8f129ce60f53c;
(function(DecodingMode) {
    /** Entities in text nodes that can end with any character. */ DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
    /** Only allow entities terminated with a semicolon. */ DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
    /** Entities in attributes have limitations on ending characters. */ DecodingMode[DecodingMode["Attribute"] = 2] = "Attribute";
})($54deb1694831d8f1$export$8c8f129ce60f53c || ($54deb1694831d8f1$export$8c8f129ce60f53c = {}));
var $54deb1694831d8f1$export$15263a93ff7ec8ba = /*#__PURE__*/ function() {
    "use strict";
    function EntityDecoder(/** The tree used to decode entities. */ decodeTree, /**
     * The function that is called when a codepoint is decoded.
     *
     * For multi-byte named entities, this will be called multiple times,
     * with the second codepoint, and the same `consumed` value.
     *
     * @param codepoint The decoded codepoint.
     * @param consumed The number of bytes consumed by the decoder.
     */ emitCodePoint, /** An object that is used to produce errors. */ errors) {
        (0, $hrxTm._)(this, EntityDecoder);
        this.decodeTree = decodeTree;
        this.emitCodePoint = emitCodePoint;
        this.errors = errors;
        /** The current state of the decoder. */ this.state = $54deb1694831d8f1$var$EntityDecoderState.EntityStart;
        /** Characters that were consumed while parsing an entity. */ this.consumed = 1;
        /**
         * The result of the entity.
         *
         * Either the result index of a numeric entity, or the codepoint of a
         * numeric entity.
         */ this.result = 0;
        /** The current index in the decode tree. */ this.treeIndex = 0;
        /** The number of characters that were consumed in excess. */ this.excess = 1;
        /** The mode in which the decoder is operating. */ this.decodeMode = $54deb1694831d8f1$export$8c8f129ce60f53c.Strict;
    }
    (0, $ggnt0._)(EntityDecoder, [
        {
            /** Resets the instance to make it reusable. */ key: "startEntity",
            value: function startEntity(decodeMode) {
                this.decodeMode = decodeMode;
                this.state = $54deb1694831d8f1$var$EntityDecoderState.EntityStart;
                this.result = 0;
                this.treeIndex = 0;
                this.excess = 1;
                this.consumed = 1;
            }
        },
        {
            /**
     * Write an entity to the decoder. This can be called multiple times with partial entities.
     * If the entity is incomplete, the decoder will return -1.
     *
     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
     * entity is incomplete, and resume when the next string is written.
     *
     * @param string The string containing the entity (or a continuation of the entity).
     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ key: "write",
            value: function write(str, offset) {
                switch(this.state){
                    case $54deb1694831d8f1$var$EntityDecoderState.EntityStart:
                        if (str.charCodeAt(offset) === $54deb1694831d8f1$var$CharCodes.NUM) {
                            this.state = $54deb1694831d8f1$var$EntityDecoderState.NumericStart;
                            this.consumed += 1;
                            return this.stateNumericStart(str, offset + 1);
                        }
                        this.state = $54deb1694831d8f1$var$EntityDecoderState.NamedEntity;
                        return this.stateNamedEntity(str, offset);
                    case $54deb1694831d8f1$var$EntityDecoderState.NumericStart:
                        return this.stateNumericStart(str, offset);
                    case $54deb1694831d8f1$var$EntityDecoderState.NumericDecimal:
                        return this.stateNumericDecimal(str, offset);
                    case $54deb1694831d8f1$var$EntityDecoderState.NumericHex:
                        return this.stateNumericHex(str, offset);
                    case $54deb1694831d8f1$var$EntityDecoderState.NamedEntity:
                        return this.stateNamedEntity(str, offset);
                }
            }
        },
        {
            /**
     * Switches between the numeric decimal and hexadecimal states.
     *
     * Equivalent to the `Numeric character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ key: "stateNumericStart",
            value: function stateNumericStart(str, offset) {
                if (offset >= str.length) return -1;
                if ((str.charCodeAt(offset) | $54deb1694831d8f1$var$TO_LOWER_BIT) === $54deb1694831d8f1$var$CharCodes.LOWER_X) {
                    this.state = $54deb1694831d8f1$var$EntityDecoderState.NumericHex;
                    this.consumed += 1;
                    return this.stateNumericHex(str, offset + 1);
                }
                this.state = $54deb1694831d8f1$var$EntityDecoderState.NumericDecimal;
                return this.stateNumericDecimal(str, offset);
            }
        },
        {
            key: "addToNumericResult",
            value: function addToNumericResult(str, start, end, base) {
                if (start !== end) {
                    var digitCount = end - start;
                    this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
                    this.consumed += digitCount;
                }
            }
        },
        {
            /**
     * Parses a hexadecimal numeric entity.
     *
     * Equivalent to the `Hexademical character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ key: "stateNumericHex",
            value: function stateNumericHex(str, offset) {
                var startIdx = offset;
                while(offset < str.length){
                    var char = str.charCodeAt(offset);
                    if ($54deb1694831d8f1$var$isNumber(char) || $54deb1694831d8f1$var$isHexadecimalCharacter(char)) offset += 1;
                    else {
                        this.addToNumericResult(str, startIdx, offset, 16);
                        return this.emitNumericEntity(char, 3);
                    }
                }
                this.addToNumericResult(str, startIdx, offset, 16);
                return -1;
            }
        },
        {
            /**
     * Parses a decimal numeric entity.
     *
     * Equivalent to the `Decimal character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ key: "stateNumericDecimal",
            value: function stateNumericDecimal(str, offset) {
                var startIdx = offset;
                while(offset < str.length){
                    var char = str.charCodeAt(offset);
                    if ($54deb1694831d8f1$var$isNumber(char)) offset += 1;
                    else {
                        this.addToNumericResult(str, startIdx, offset, 10);
                        return this.emitNumericEntity(char, 2);
                    }
                }
                this.addToNumericResult(str, startIdx, offset, 10);
                return -1;
            }
        },
        {
            /**
     * Validate and emit a numeric entity.
     *
     * Implements the logic from the `Hexademical character reference start
     * state` and `Numeric character reference end state` in the HTML spec.
     *
     * @param lastCp The last code point of the entity. Used to see if the
     *               entity was terminated with a semicolon.
     * @param expectedLength The minimum number of characters that should be
     *                       consumed. Used to validate that at least one digit
     *                       was consumed.
     * @returns The number of characters that were consumed.
     */ key: "emitNumericEntity",
            value: function emitNumericEntity(lastCp, expectedLength) {
                var _a;
                // Ensure we consumed at least one digit.
                if (this.consumed <= expectedLength) {
                    (_a = this.errors) === null || _a === void 0 || _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
                    return 0;
                }
                // Figure out if this is a legit end of the entity
                if (lastCp === $54deb1694831d8f1$var$CharCodes.SEMI) this.consumed += 1;
                else if (this.decodeMode === $54deb1694831d8f1$export$8c8f129ce60f53c.Strict) return 0;
                this.emitCodePoint((0, $1851579b6702e4bc$export$b978ab756102108a)(this.result), this.consumed);
                if (this.errors) {
                    if (lastCp !== $54deb1694831d8f1$var$CharCodes.SEMI) this.errors.missingSemicolonAfterCharacterReference();
                    this.errors.validateNumericCharacterReference(this.result);
                }
                return this.consumed;
            }
        },
        {
            /**
     * Parses a named entity.
     *
     * Equivalent to the `Named character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ key: "stateNamedEntity",
            value: function stateNamedEntity(str, offset) {
                var decodeTree = this.decodeTree;
                var current = decodeTree[this.treeIndex];
                // The mask is the number of bytes of the value, including the current byte.
                var valueLength = (current & $54deb1694831d8f1$export$6a4325c613e0faec.VALUE_LENGTH) >> 14;
                for(; offset < str.length; offset++, this.excess++){
                    var char = str.charCodeAt(offset);
                    this.treeIndex = $54deb1694831d8f1$export$44c08d99945e6276(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
                    if (this.treeIndex < 0) return this.result === 0 || // If we are parsing an attribute
                    this.decodeMode === $54deb1694831d8f1$export$8c8f129ce60f53c.Attribute && // We shouldn't have consumed any characters after the entity,
                    (valueLength === 0 || // And there should be no invalid characters.
                    $54deb1694831d8f1$var$isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
                    current = decodeTree[this.treeIndex];
                    valueLength = (current & $54deb1694831d8f1$export$6a4325c613e0faec.VALUE_LENGTH) >> 14;
                    // If the branch is a value, store it and continue
                    if (valueLength !== 0) {
                        // If the entity is terminated by a semicolon, we are done.
                        if (char === $54deb1694831d8f1$var$CharCodes.SEMI) return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
                        // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.
                        if (this.decodeMode !== $54deb1694831d8f1$export$8c8f129ce60f53c.Strict) {
                            this.result = this.treeIndex;
                            this.consumed += this.excess;
                            this.excess = 0;
                        }
                    }
                }
                return -1;
            }
        },
        {
            /**
     * Emit a named entity that was not terminated with a semicolon.
     *
     * @returns The number of characters consumed.
     */ key: "emitNotTerminatedNamedEntity",
            value: function emitNotTerminatedNamedEntity() {
                var _a;
                var _this = this, result = _this.result, decodeTree = _this.decodeTree;
                var valueLength = (decodeTree[result] & $54deb1694831d8f1$export$6a4325c613e0faec.VALUE_LENGTH) >> 14;
                this.emitNamedEntityData(result, valueLength, this.consumed);
                (_a = this.errors) === null || _a === void 0 || _a.missingSemicolonAfterCharacterReference();
                return this.consumed;
            }
        },
        {
            /**
     * Emit a named entity.
     *
     * @param result The index of the entity in the decode tree.
     * @param valueLength The number of bytes in the entity.
     * @param consumed The number of characters consumed.
     *
     * @returns The number of characters consumed.
     */ key: "emitNamedEntityData",
            value: function emitNamedEntityData(result, valueLength, consumed) {
                var decodeTree = this.decodeTree;
                this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~$54deb1694831d8f1$export$6a4325c613e0faec.VALUE_LENGTH : decodeTree[result + 1], consumed);
                if (valueLength === 3) // For multi-byte values, we need to emit the second byte.
                this.emitCodePoint(decodeTree[result + 2], consumed);
                return consumed;
            }
        },
        {
            /**
     * Signal to the parser that the end of the input was reached.
     *
     * Remaining data will be emitted and relevant errors will be produced.
     *
     * @returns The number of characters consumed.
     */ key: "end",
            value: function end() {
                var _a;
                switch(this.state){
                    case $54deb1694831d8f1$var$EntityDecoderState.NamedEntity:
                        // Emit a named entity if we have one.
                        return this.result !== 0 && (this.decodeMode !== $54deb1694831d8f1$export$8c8f129ce60f53c.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
                    // Otherwise, emit a numeric entity if we have one.
                    case $54deb1694831d8f1$var$EntityDecoderState.NumericDecimal:
                        return this.emitNumericEntity(0, 2);
                    case $54deb1694831d8f1$var$EntityDecoderState.NumericHex:
                        return this.emitNumericEntity(0, 3);
                    case $54deb1694831d8f1$var$EntityDecoderState.NumericStart:
                        (_a = this.errors) === null || _a === void 0 || _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
                        return 0;
                    case $54deb1694831d8f1$var$EntityDecoderState.EntityStart:
                        // Return 0 if we have no entity.
                        return 0;
                }
            }
        }
    ]);
    return EntityDecoder;
}();
/**
 * Creates a function that decodes entities in a string.
 *
 * @param decodeTree The decode tree.
 * @returns A function that decodes entities in a string.
 */ function $54deb1694831d8f1$var$getDecoder(decodeTree) {
    var ret = "";
    var decoder = new $54deb1694831d8f1$export$15263a93ff7ec8ba(decodeTree, function(str) {
        return ret += (0, $1851579b6702e4bc$export$73bfc63873071f74)(str);
    });
    return function decodeWithTrie(str, decodeMode) {
        var lastIndex = 0;
        var offset = 0;
        while((offset = str.indexOf("&", offset)) >= 0){
            ret += str.slice(lastIndex, offset);
            decoder.startEntity(decodeMode);
            var len = decoder.write(str, // Skip the "&"
            offset + 1);
            if (len < 0) {
                lastIndex = offset + decoder.end();
                break;
            }
            lastIndex = offset + len;
            // If `len` is 0, skip the current `&` and continue.
            offset = len === 0 ? lastIndex + 1 : lastIndex;
        }
        var result = ret + str.slice(lastIndex);
        // Make sure we don't keep a reference to the final string.
        ret = "";
        return result;
    };
}
function $54deb1694831d8f1$export$44c08d99945e6276(decodeTree, current, nodeIdx, char) {
    var branchCount = (current & $54deb1694831d8f1$export$6a4325c613e0faec.BRANCH_LENGTH) >> 7;
    var jumpOffset = current & $54deb1694831d8f1$export$6a4325c613e0faec.JUMP_TABLE;
    // Case 1: Single branch encoded in jump offset
    if (branchCount === 0) return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
    // Case 2: Multiple branches encoded in jump table
    if (jumpOffset) {
        var value = char - jumpOffset;
        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
    }
    // Case 3: Multiple branches encoded in dictionary
    // Binary search for the character.
    var lo = nodeIdx;
    var hi = lo + branchCount - 1;
    while(lo <= hi){
        var mid = lo + hi >>> 1;
        var midVal = decodeTree[mid];
        if (midVal < char) lo = mid + 1;
        else if (midVal > char) hi = mid - 1;
        else return decodeTree[mid + branchCount];
    }
    return -1;
}
var $54deb1694831d8f1$var$htmlDecoder = $54deb1694831d8f1$var$getDecoder((0, $bd7148e3fac8a725$export$2e2bcd8739ae039));
var $54deb1694831d8f1$var$xmlDecoder = $54deb1694831d8f1$var$getDecoder((0, $634ee3b5b0725689$export$2e2bcd8739ae039));
function $54deb1694831d8f1$export$f045cb747ce77a19(str) {
    var mode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : $54deb1694831d8f1$export$8c8f129ce60f53c.Legacy;
    return $54deb1694831d8f1$var$htmlDecoder(str, mode);
}
function $54deb1694831d8f1$export$49f5e8089adb006a(str) {
    return $54deb1694831d8f1$var$htmlDecoder(str, $54deb1694831d8f1$export$8c8f129ce60f53c.Attribute);
}
function $54deb1694831d8f1$export$da52f4371b3f37de(str) {
    return $54deb1694831d8f1$var$htmlDecoder(str, $54deb1694831d8f1$export$8c8f129ce60f53c.Strict);
}
function $54deb1694831d8f1$export$88e3b9643a8bd06e(str) {
    return $54deb1694831d8f1$var$xmlDecoder(str, $54deb1694831d8f1$export$8c8f129ce60f53c.Strict);
}


// Generated using scripts/write-encode-map.ts
function $e4c4abac05298d0b$var$restoreDiff(arr) {
    for(var i = 1; i < arr.length; i++)arr[i][0] += arr[i - 1][0] + 1;
    return arr;
}
var // prettier-ignore
$e4c4abac05298d0b$export$2e2bcd8739ae039 = new Map(/* #__PURE__ */ $e4c4abac05298d0b$var$restoreDiff([
    [
        9,
        "&Tab;"
    ],
    [
        0,
        "&NewLine;"
    ],
    [
        22,
        "&excl;"
    ],
    [
        0,
        "&quot;"
    ],
    [
        0,
        "&num;"
    ],
    [
        0,
        "&dollar;"
    ],
    [
        0,
        "&percnt;"
    ],
    [
        0,
        "&amp;"
    ],
    [
        0,
        "&apos;"
    ],
    [
        0,
        "&lpar;"
    ],
    [
        0,
        "&rpar;"
    ],
    [
        0,
        "&ast;"
    ],
    [
        0,
        "&plus;"
    ],
    [
        0,
        "&comma;"
    ],
    [
        1,
        "&period;"
    ],
    [
        0,
        "&sol;"
    ],
    [
        10,
        "&colon;"
    ],
    [
        0,
        "&semi;"
    ],
    [
        0,
        {
            v: "&lt;",
            n: 8402,
            o: "&nvlt;"
        }
    ],
    [
        0,
        {
            v: "&equals;",
            n: 8421,
            o: "&bne;"
        }
    ],
    [
        0,
        {
            v: "&gt;",
            n: 8402,
            o: "&nvgt;"
        }
    ],
    [
        0,
        "&quest;"
    ],
    [
        0,
        "&commat;"
    ],
    [
        26,
        "&lbrack;"
    ],
    [
        0,
        "&bsol;"
    ],
    [
        0,
        "&rbrack;"
    ],
    [
        0,
        "&Hat;"
    ],
    [
        0,
        "&lowbar;"
    ],
    [
        0,
        "&DiacriticalGrave;"
    ],
    [
        5,
        {
            n: 106,
            o: "&fjlig;"
        }
    ],
    [
        20,
        "&lbrace;"
    ],
    [
        0,
        "&verbar;"
    ],
    [
        0,
        "&rbrace;"
    ],
    [
        34,
        "&nbsp;"
    ],
    [
        0,
        "&iexcl;"
    ],
    [
        0,
        "&cent;"
    ],
    [
        0,
        "&pound;"
    ],
    [
        0,
        "&curren;"
    ],
    [
        0,
        "&yen;"
    ],
    [
        0,
        "&brvbar;"
    ],
    [
        0,
        "&sect;"
    ],
    [
        0,
        "&die;"
    ],
    [
        0,
        "&copy;"
    ],
    [
        0,
        "&ordf;"
    ],
    [
        0,
        "&laquo;"
    ],
    [
        0,
        "&not;"
    ],
    [
        0,
        "&shy;"
    ],
    [
        0,
        "&circledR;"
    ],
    [
        0,
        "&macr;"
    ],
    [
        0,
        "&deg;"
    ],
    [
        0,
        "&PlusMinus;"
    ],
    [
        0,
        "&sup2;"
    ],
    [
        0,
        "&sup3;"
    ],
    [
        0,
        "&acute;"
    ],
    [
        0,
        "&micro;"
    ],
    [
        0,
        "&para;"
    ],
    [
        0,
        "&centerdot;"
    ],
    [
        0,
        "&cedil;"
    ],
    [
        0,
        "&sup1;"
    ],
    [
        0,
        "&ordm;"
    ],
    [
        0,
        "&raquo;"
    ],
    [
        0,
        "&frac14;"
    ],
    [
        0,
        "&frac12;"
    ],
    [
        0,
        "&frac34;"
    ],
    [
        0,
        "&iquest;"
    ],
    [
        0,
        "&Agrave;"
    ],
    [
        0,
        "&Aacute;"
    ],
    [
        0,
        "&Acirc;"
    ],
    [
        0,
        "&Atilde;"
    ],
    [
        0,
        "&Auml;"
    ],
    [
        0,
        "&angst;"
    ],
    [
        0,
        "&AElig;"
    ],
    [
        0,
        "&Ccedil;"
    ],
    [
        0,
        "&Egrave;"
    ],
    [
        0,
        "&Eacute;"
    ],
    [
        0,
        "&Ecirc;"
    ],
    [
        0,
        "&Euml;"
    ],
    [
        0,
        "&Igrave;"
    ],
    [
        0,
        "&Iacute;"
    ],
    [
        0,
        "&Icirc;"
    ],
    [
        0,
        "&Iuml;"
    ],
    [
        0,
        "&ETH;"
    ],
    [
        0,
        "&Ntilde;"
    ],
    [
        0,
        "&Ograve;"
    ],
    [
        0,
        "&Oacute;"
    ],
    [
        0,
        "&Ocirc;"
    ],
    [
        0,
        "&Otilde;"
    ],
    [
        0,
        "&Ouml;"
    ],
    [
        0,
        "&times;"
    ],
    [
        0,
        "&Oslash;"
    ],
    [
        0,
        "&Ugrave;"
    ],
    [
        0,
        "&Uacute;"
    ],
    [
        0,
        "&Ucirc;"
    ],
    [
        0,
        "&Uuml;"
    ],
    [
        0,
        "&Yacute;"
    ],
    [
        0,
        "&THORN;"
    ],
    [
        0,
        "&szlig;"
    ],
    [
        0,
        "&agrave;"
    ],
    [
        0,
        "&aacute;"
    ],
    [
        0,
        "&acirc;"
    ],
    [
        0,
        "&atilde;"
    ],
    [
        0,
        "&auml;"
    ],
    [
        0,
        "&aring;"
    ],
    [
        0,
        "&aelig;"
    ],
    [
        0,
        "&ccedil;"
    ],
    [
        0,
        "&egrave;"
    ],
    [
        0,
        "&eacute;"
    ],
    [
        0,
        "&ecirc;"
    ],
    [
        0,
        "&euml;"
    ],
    [
        0,
        "&igrave;"
    ],
    [
        0,
        "&iacute;"
    ],
    [
        0,
        "&icirc;"
    ],
    [
        0,
        "&iuml;"
    ],
    [
        0,
        "&eth;"
    ],
    [
        0,
        "&ntilde;"
    ],
    [
        0,
        "&ograve;"
    ],
    [
        0,
        "&oacute;"
    ],
    [
        0,
        "&ocirc;"
    ],
    [
        0,
        "&otilde;"
    ],
    [
        0,
        "&ouml;"
    ],
    [
        0,
        "&div;"
    ],
    [
        0,
        "&oslash;"
    ],
    [
        0,
        "&ugrave;"
    ],
    [
        0,
        "&uacute;"
    ],
    [
        0,
        "&ucirc;"
    ],
    [
        0,
        "&uuml;"
    ],
    [
        0,
        "&yacute;"
    ],
    [
        0,
        "&thorn;"
    ],
    [
        0,
        "&yuml;"
    ],
    [
        0,
        "&Amacr;"
    ],
    [
        0,
        "&amacr;"
    ],
    [
        0,
        "&Abreve;"
    ],
    [
        0,
        "&abreve;"
    ],
    [
        0,
        "&Aogon;"
    ],
    [
        0,
        "&aogon;"
    ],
    [
        0,
        "&Cacute;"
    ],
    [
        0,
        "&cacute;"
    ],
    [
        0,
        "&Ccirc;"
    ],
    [
        0,
        "&ccirc;"
    ],
    [
        0,
        "&Cdot;"
    ],
    [
        0,
        "&cdot;"
    ],
    [
        0,
        "&Ccaron;"
    ],
    [
        0,
        "&ccaron;"
    ],
    [
        0,
        "&Dcaron;"
    ],
    [
        0,
        "&dcaron;"
    ],
    [
        0,
        "&Dstrok;"
    ],
    [
        0,
        "&dstrok;"
    ],
    [
        0,
        "&Emacr;"
    ],
    [
        0,
        "&emacr;"
    ],
    [
        2,
        "&Edot;"
    ],
    [
        0,
        "&edot;"
    ],
    [
        0,
        "&Eogon;"
    ],
    [
        0,
        "&eogon;"
    ],
    [
        0,
        "&Ecaron;"
    ],
    [
        0,
        "&ecaron;"
    ],
    [
        0,
        "&Gcirc;"
    ],
    [
        0,
        "&gcirc;"
    ],
    [
        0,
        "&Gbreve;"
    ],
    [
        0,
        "&gbreve;"
    ],
    [
        0,
        "&Gdot;"
    ],
    [
        0,
        "&gdot;"
    ],
    [
        0,
        "&Gcedil;"
    ],
    [
        1,
        "&Hcirc;"
    ],
    [
        0,
        "&hcirc;"
    ],
    [
        0,
        "&Hstrok;"
    ],
    [
        0,
        "&hstrok;"
    ],
    [
        0,
        "&Itilde;"
    ],
    [
        0,
        "&itilde;"
    ],
    [
        0,
        "&Imacr;"
    ],
    [
        0,
        "&imacr;"
    ],
    [
        2,
        "&Iogon;"
    ],
    [
        0,
        "&iogon;"
    ],
    [
        0,
        "&Idot;"
    ],
    [
        0,
        "&imath;"
    ],
    [
        0,
        "&IJlig;"
    ],
    [
        0,
        "&ijlig;"
    ],
    [
        0,
        "&Jcirc;"
    ],
    [
        0,
        "&jcirc;"
    ],
    [
        0,
        "&Kcedil;"
    ],
    [
        0,
        "&kcedil;"
    ],
    [
        0,
        "&kgreen;"
    ],
    [
        0,
        "&Lacute;"
    ],
    [
        0,
        "&lacute;"
    ],
    [
        0,
        "&Lcedil;"
    ],
    [
        0,
        "&lcedil;"
    ],
    [
        0,
        "&Lcaron;"
    ],
    [
        0,
        "&lcaron;"
    ],
    [
        0,
        "&Lmidot;"
    ],
    [
        0,
        "&lmidot;"
    ],
    [
        0,
        "&Lstrok;"
    ],
    [
        0,
        "&lstrok;"
    ],
    [
        0,
        "&Nacute;"
    ],
    [
        0,
        "&nacute;"
    ],
    [
        0,
        "&Ncedil;"
    ],
    [
        0,
        "&ncedil;"
    ],
    [
        0,
        "&Ncaron;"
    ],
    [
        0,
        "&ncaron;"
    ],
    [
        0,
        "&napos;"
    ],
    [
        0,
        "&ENG;"
    ],
    [
        0,
        "&eng;"
    ],
    [
        0,
        "&Omacr;"
    ],
    [
        0,
        "&omacr;"
    ],
    [
        2,
        "&Odblac;"
    ],
    [
        0,
        "&odblac;"
    ],
    [
        0,
        "&OElig;"
    ],
    [
        0,
        "&oelig;"
    ],
    [
        0,
        "&Racute;"
    ],
    [
        0,
        "&racute;"
    ],
    [
        0,
        "&Rcedil;"
    ],
    [
        0,
        "&rcedil;"
    ],
    [
        0,
        "&Rcaron;"
    ],
    [
        0,
        "&rcaron;"
    ],
    [
        0,
        "&Sacute;"
    ],
    [
        0,
        "&sacute;"
    ],
    [
        0,
        "&Scirc;"
    ],
    [
        0,
        "&scirc;"
    ],
    [
        0,
        "&Scedil;"
    ],
    [
        0,
        "&scedil;"
    ],
    [
        0,
        "&Scaron;"
    ],
    [
        0,
        "&scaron;"
    ],
    [
        0,
        "&Tcedil;"
    ],
    [
        0,
        "&tcedil;"
    ],
    [
        0,
        "&Tcaron;"
    ],
    [
        0,
        "&tcaron;"
    ],
    [
        0,
        "&Tstrok;"
    ],
    [
        0,
        "&tstrok;"
    ],
    [
        0,
        "&Utilde;"
    ],
    [
        0,
        "&utilde;"
    ],
    [
        0,
        "&Umacr;"
    ],
    [
        0,
        "&umacr;"
    ],
    [
        0,
        "&Ubreve;"
    ],
    [
        0,
        "&ubreve;"
    ],
    [
        0,
        "&Uring;"
    ],
    [
        0,
        "&uring;"
    ],
    [
        0,
        "&Udblac;"
    ],
    [
        0,
        "&udblac;"
    ],
    [
        0,
        "&Uogon;"
    ],
    [
        0,
        "&uogon;"
    ],
    [
        0,
        "&Wcirc;"
    ],
    [
        0,
        "&wcirc;"
    ],
    [
        0,
        "&Ycirc;"
    ],
    [
        0,
        "&ycirc;"
    ],
    [
        0,
        "&Yuml;"
    ],
    [
        0,
        "&Zacute;"
    ],
    [
        0,
        "&zacute;"
    ],
    [
        0,
        "&Zdot;"
    ],
    [
        0,
        "&zdot;"
    ],
    [
        0,
        "&Zcaron;"
    ],
    [
        0,
        "&zcaron;"
    ],
    [
        19,
        "&fnof;"
    ],
    [
        34,
        "&imped;"
    ],
    [
        63,
        "&gacute;"
    ],
    [
        65,
        "&jmath;"
    ],
    [
        142,
        "&circ;"
    ],
    [
        0,
        "&caron;"
    ],
    [
        16,
        "&breve;"
    ],
    [
        0,
        "&DiacriticalDot;"
    ],
    [
        0,
        "&ring;"
    ],
    [
        0,
        "&ogon;"
    ],
    [
        0,
        "&DiacriticalTilde;"
    ],
    [
        0,
        "&dblac;"
    ],
    [
        51,
        "&DownBreve;"
    ],
    [
        127,
        "&Alpha;"
    ],
    [
        0,
        "&Beta;"
    ],
    [
        0,
        "&Gamma;"
    ],
    [
        0,
        "&Delta;"
    ],
    [
        0,
        "&Epsilon;"
    ],
    [
        0,
        "&Zeta;"
    ],
    [
        0,
        "&Eta;"
    ],
    [
        0,
        "&Theta;"
    ],
    [
        0,
        "&Iota;"
    ],
    [
        0,
        "&Kappa;"
    ],
    [
        0,
        "&Lambda;"
    ],
    [
        0,
        "&Mu;"
    ],
    [
        0,
        "&Nu;"
    ],
    [
        0,
        "&Xi;"
    ],
    [
        0,
        "&Omicron;"
    ],
    [
        0,
        "&Pi;"
    ],
    [
        0,
        "&Rho;"
    ],
    [
        1,
        "&Sigma;"
    ],
    [
        0,
        "&Tau;"
    ],
    [
        0,
        "&Upsilon;"
    ],
    [
        0,
        "&Phi;"
    ],
    [
        0,
        "&Chi;"
    ],
    [
        0,
        "&Psi;"
    ],
    [
        0,
        "&ohm;"
    ],
    [
        7,
        "&alpha;"
    ],
    [
        0,
        "&beta;"
    ],
    [
        0,
        "&gamma;"
    ],
    [
        0,
        "&delta;"
    ],
    [
        0,
        "&epsi;"
    ],
    [
        0,
        "&zeta;"
    ],
    [
        0,
        "&eta;"
    ],
    [
        0,
        "&theta;"
    ],
    [
        0,
        "&iota;"
    ],
    [
        0,
        "&kappa;"
    ],
    [
        0,
        "&lambda;"
    ],
    [
        0,
        "&mu;"
    ],
    [
        0,
        "&nu;"
    ],
    [
        0,
        "&xi;"
    ],
    [
        0,
        "&omicron;"
    ],
    [
        0,
        "&pi;"
    ],
    [
        0,
        "&rho;"
    ],
    [
        0,
        "&sigmaf;"
    ],
    [
        0,
        "&sigma;"
    ],
    [
        0,
        "&tau;"
    ],
    [
        0,
        "&upsi;"
    ],
    [
        0,
        "&phi;"
    ],
    [
        0,
        "&chi;"
    ],
    [
        0,
        "&psi;"
    ],
    [
        0,
        "&omega;"
    ],
    [
        7,
        "&thetasym;"
    ],
    [
        0,
        "&Upsi;"
    ],
    [
        2,
        "&phiv;"
    ],
    [
        0,
        "&piv;"
    ],
    [
        5,
        "&Gammad;"
    ],
    [
        0,
        "&digamma;"
    ],
    [
        18,
        "&kappav;"
    ],
    [
        0,
        "&rhov;"
    ],
    [
        3,
        "&epsiv;"
    ],
    [
        0,
        "&backepsilon;"
    ],
    [
        10,
        "&IOcy;"
    ],
    [
        0,
        "&DJcy;"
    ],
    [
        0,
        "&GJcy;"
    ],
    [
        0,
        "&Jukcy;"
    ],
    [
        0,
        "&DScy;"
    ],
    [
        0,
        "&Iukcy;"
    ],
    [
        0,
        "&YIcy;"
    ],
    [
        0,
        "&Jsercy;"
    ],
    [
        0,
        "&LJcy;"
    ],
    [
        0,
        "&NJcy;"
    ],
    [
        0,
        "&TSHcy;"
    ],
    [
        0,
        "&KJcy;"
    ],
    [
        1,
        "&Ubrcy;"
    ],
    [
        0,
        "&DZcy;"
    ],
    [
        0,
        "&Acy;"
    ],
    [
        0,
        "&Bcy;"
    ],
    [
        0,
        "&Vcy;"
    ],
    [
        0,
        "&Gcy;"
    ],
    [
        0,
        "&Dcy;"
    ],
    [
        0,
        "&IEcy;"
    ],
    [
        0,
        "&ZHcy;"
    ],
    [
        0,
        "&Zcy;"
    ],
    [
        0,
        "&Icy;"
    ],
    [
        0,
        "&Jcy;"
    ],
    [
        0,
        "&Kcy;"
    ],
    [
        0,
        "&Lcy;"
    ],
    [
        0,
        "&Mcy;"
    ],
    [
        0,
        "&Ncy;"
    ],
    [
        0,
        "&Ocy;"
    ],
    [
        0,
        "&Pcy;"
    ],
    [
        0,
        "&Rcy;"
    ],
    [
        0,
        "&Scy;"
    ],
    [
        0,
        "&Tcy;"
    ],
    [
        0,
        "&Ucy;"
    ],
    [
        0,
        "&Fcy;"
    ],
    [
        0,
        "&KHcy;"
    ],
    [
        0,
        "&TScy;"
    ],
    [
        0,
        "&CHcy;"
    ],
    [
        0,
        "&SHcy;"
    ],
    [
        0,
        "&SHCHcy;"
    ],
    [
        0,
        "&HARDcy;"
    ],
    [
        0,
        "&Ycy;"
    ],
    [
        0,
        "&SOFTcy;"
    ],
    [
        0,
        "&Ecy;"
    ],
    [
        0,
        "&YUcy;"
    ],
    [
        0,
        "&YAcy;"
    ],
    [
        0,
        "&acy;"
    ],
    [
        0,
        "&bcy;"
    ],
    [
        0,
        "&vcy;"
    ],
    [
        0,
        "&gcy;"
    ],
    [
        0,
        "&dcy;"
    ],
    [
        0,
        "&iecy;"
    ],
    [
        0,
        "&zhcy;"
    ],
    [
        0,
        "&zcy;"
    ],
    [
        0,
        "&icy;"
    ],
    [
        0,
        "&jcy;"
    ],
    [
        0,
        "&kcy;"
    ],
    [
        0,
        "&lcy;"
    ],
    [
        0,
        "&mcy;"
    ],
    [
        0,
        "&ncy;"
    ],
    [
        0,
        "&ocy;"
    ],
    [
        0,
        "&pcy;"
    ],
    [
        0,
        "&rcy;"
    ],
    [
        0,
        "&scy;"
    ],
    [
        0,
        "&tcy;"
    ],
    [
        0,
        "&ucy;"
    ],
    [
        0,
        "&fcy;"
    ],
    [
        0,
        "&khcy;"
    ],
    [
        0,
        "&tscy;"
    ],
    [
        0,
        "&chcy;"
    ],
    [
        0,
        "&shcy;"
    ],
    [
        0,
        "&shchcy;"
    ],
    [
        0,
        "&hardcy;"
    ],
    [
        0,
        "&ycy;"
    ],
    [
        0,
        "&softcy;"
    ],
    [
        0,
        "&ecy;"
    ],
    [
        0,
        "&yucy;"
    ],
    [
        0,
        "&yacy;"
    ],
    [
        1,
        "&iocy;"
    ],
    [
        0,
        "&djcy;"
    ],
    [
        0,
        "&gjcy;"
    ],
    [
        0,
        "&jukcy;"
    ],
    [
        0,
        "&dscy;"
    ],
    [
        0,
        "&iukcy;"
    ],
    [
        0,
        "&yicy;"
    ],
    [
        0,
        "&jsercy;"
    ],
    [
        0,
        "&ljcy;"
    ],
    [
        0,
        "&njcy;"
    ],
    [
        0,
        "&tshcy;"
    ],
    [
        0,
        "&kjcy;"
    ],
    [
        1,
        "&ubrcy;"
    ],
    [
        0,
        "&dzcy;"
    ],
    [
        7074,
        "&ensp;"
    ],
    [
        0,
        "&emsp;"
    ],
    [
        0,
        "&emsp13;"
    ],
    [
        0,
        "&emsp14;"
    ],
    [
        1,
        "&numsp;"
    ],
    [
        0,
        "&puncsp;"
    ],
    [
        0,
        "&ThinSpace;"
    ],
    [
        0,
        "&hairsp;"
    ],
    [
        0,
        "&NegativeMediumSpace;"
    ],
    [
        0,
        "&zwnj;"
    ],
    [
        0,
        "&zwj;"
    ],
    [
        0,
        "&lrm;"
    ],
    [
        0,
        "&rlm;"
    ],
    [
        0,
        "&dash;"
    ],
    [
        2,
        "&ndash;"
    ],
    [
        0,
        "&mdash;"
    ],
    [
        0,
        "&horbar;"
    ],
    [
        0,
        "&Verbar;"
    ],
    [
        1,
        "&lsquo;"
    ],
    [
        0,
        "&CloseCurlyQuote;"
    ],
    [
        0,
        "&lsquor;"
    ],
    [
        1,
        "&ldquo;"
    ],
    [
        0,
        "&CloseCurlyDoubleQuote;"
    ],
    [
        0,
        "&bdquo;"
    ],
    [
        1,
        "&dagger;"
    ],
    [
        0,
        "&Dagger;"
    ],
    [
        0,
        "&bull;"
    ],
    [
        2,
        "&nldr;"
    ],
    [
        0,
        "&hellip;"
    ],
    [
        9,
        "&permil;"
    ],
    [
        0,
        "&pertenk;"
    ],
    [
        0,
        "&prime;"
    ],
    [
        0,
        "&Prime;"
    ],
    [
        0,
        "&tprime;"
    ],
    [
        0,
        "&backprime;"
    ],
    [
        3,
        "&lsaquo;"
    ],
    [
        0,
        "&rsaquo;"
    ],
    [
        3,
        "&oline;"
    ],
    [
        2,
        "&caret;"
    ],
    [
        1,
        "&hybull;"
    ],
    [
        0,
        "&frasl;"
    ],
    [
        10,
        "&bsemi;"
    ],
    [
        7,
        "&qprime;"
    ],
    [
        7,
        {
            v: "&MediumSpace;",
            n: 8202,
            o: "&ThickSpace;"
        }
    ],
    [
        0,
        "&NoBreak;"
    ],
    [
        0,
        "&af;"
    ],
    [
        0,
        "&InvisibleTimes;"
    ],
    [
        0,
        "&ic;"
    ],
    [
        72,
        "&euro;"
    ],
    [
        46,
        "&tdot;"
    ],
    [
        0,
        "&DotDot;"
    ],
    [
        37,
        "&complexes;"
    ],
    [
        2,
        "&incare;"
    ],
    [
        4,
        "&gscr;"
    ],
    [
        0,
        "&hamilt;"
    ],
    [
        0,
        "&Hfr;"
    ],
    [
        0,
        "&Hopf;"
    ],
    [
        0,
        "&planckh;"
    ],
    [
        0,
        "&hbar;"
    ],
    [
        0,
        "&imagline;"
    ],
    [
        0,
        "&Ifr;"
    ],
    [
        0,
        "&lagran;"
    ],
    [
        0,
        "&ell;"
    ],
    [
        1,
        "&naturals;"
    ],
    [
        0,
        "&numero;"
    ],
    [
        0,
        "&copysr;"
    ],
    [
        0,
        "&weierp;"
    ],
    [
        0,
        "&Popf;"
    ],
    [
        0,
        "&Qopf;"
    ],
    [
        0,
        "&realine;"
    ],
    [
        0,
        "&real;"
    ],
    [
        0,
        "&reals;"
    ],
    [
        0,
        "&rx;"
    ],
    [
        3,
        "&trade;"
    ],
    [
        1,
        "&integers;"
    ],
    [
        2,
        "&mho;"
    ],
    [
        0,
        "&zeetrf;"
    ],
    [
        0,
        "&iiota;"
    ],
    [
        2,
        "&bernou;"
    ],
    [
        0,
        "&Cayleys;"
    ],
    [
        1,
        "&escr;"
    ],
    [
        0,
        "&Escr;"
    ],
    [
        0,
        "&Fouriertrf;"
    ],
    [
        1,
        "&Mellintrf;"
    ],
    [
        0,
        "&order;"
    ],
    [
        0,
        "&alefsym;"
    ],
    [
        0,
        "&beth;"
    ],
    [
        0,
        "&gimel;"
    ],
    [
        0,
        "&daleth;"
    ],
    [
        12,
        "&CapitalDifferentialD;"
    ],
    [
        0,
        "&dd;"
    ],
    [
        0,
        "&ee;"
    ],
    [
        0,
        "&ii;"
    ],
    [
        10,
        "&frac13;"
    ],
    [
        0,
        "&frac23;"
    ],
    [
        0,
        "&frac15;"
    ],
    [
        0,
        "&frac25;"
    ],
    [
        0,
        "&frac35;"
    ],
    [
        0,
        "&frac45;"
    ],
    [
        0,
        "&frac16;"
    ],
    [
        0,
        "&frac56;"
    ],
    [
        0,
        "&frac18;"
    ],
    [
        0,
        "&frac38;"
    ],
    [
        0,
        "&frac58;"
    ],
    [
        0,
        "&frac78;"
    ],
    [
        49,
        "&larr;"
    ],
    [
        0,
        "&ShortUpArrow;"
    ],
    [
        0,
        "&rarr;"
    ],
    [
        0,
        "&darr;"
    ],
    [
        0,
        "&harr;"
    ],
    [
        0,
        "&updownarrow;"
    ],
    [
        0,
        "&nwarr;"
    ],
    [
        0,
        "&nearr;"
    ],
    [
        0,
        "&LowerRightArrow;"
    ],
    [
        0,
        "&LowerLeftArrow;"
    ],
    [
        0,
        "&nlarr;"
    ],
    [
        0,
        "&nrarr;"
    ],
    [
        1,
        {
            v: "&rarrw;",
            n: 824,
            o: "&nrarrw;"
        }
    ],
    [
        0,
        "&Larr;"
    ],
    [
        0,
        "&Uarr;"
    ],
    [
        0,
        "&Rarr;"
    ],
    [
        0,
        "&Darr;"
    ],
    [
        0,
        "&larrtl;"
    ],
    [
        0,
        "&rarrtl;"
    ],
    [
        0,
        "&LeftTeeArrow;"
    ],
    [
        0,
        "&mapstoup;"
    ],
    [
        0,
        "&map;"
    ],
    [
        0,
        "&DownTeeArrow;"
    ],
    [
        1,
        "&hookleftarrow;"
    ],
    [
        0,
        "&hookrightarrow;"
    ],
    [
        0,
        "&larrlp;"
    ],
    [
        0,
        "&looparrowright;"
    ],
    [
        0,
        "&harrw;"
    ],
    [
        0,
        "&nharr;"
    ],
    [
        1,
        "&lsh;"
    ],
    [
        0,
        "&rsh;"
    ],
    [
        0,
        "&ldsh;"
    ],
    [
        0,
        "&rdsh;"
    ],
    [
        1,
        "&crarr;"
    ],
    [
        0,
        "&cularr;"
    ],
    [
        0,
        "&curarr;"
    ],
    [
        2,
        "&circlearrowleft;"
    ],
    [
        0,
        "&circlearrowright;"
    ],
    [
        0,
        "&leftharpoonup;"
    ],
    [
        0,
        "&DownLeftVector;"
    ],
    [
        0,
        "&RightUpVector;"
    ],
    [
        0,
        "&LeftUpVector;"
    ],
    [
        0,
        "&rharu;"
    ],
    [
        0,
        "&DownRightVector;"
    ],
    [
        0,
        "&dharr;"
    ],
    [
        0,
        "&dharl;"
    ],
    [
        0,
        "&RightArrowLeftArrow;"
    ],
    [
        0,
        "&udarr;"
    ],
    [
        0,
        "&LeftArrowRightArrow;"
    ],
    [
        0,
        "&leftleftarrows;"
    ],
    [
        0,
        "&upuparrows;"
    ],
    [
        0,
        "&rightrightarrows;"
    ],
    [
        0,
        "&ddarr;"
    ],
    [
        0,
        "&leftrightharpoons;"
    ],
    [
        0,
        "&Equilibrium;"
    ],
    [
        0,
        "&nlArr;"
    ],
    [
        0,
        "&nhArr;"
    ],
    [
        0,
        "&nrArr;"
    ],
    [
        0,
        "&DoubleLeftArrow;"
    ],
    [
        0,
        "&DoubleUpArrow;"
    ],
    [
        0,
        "&DoubleRightArrow;"
    ],
    [
        0,
        "&dArr;"
    ],
    [
        0,
        "&DoubleLeftRightArrow;"
    ],
    [
        0,
        "&DoubleUpDownArrow;"
    ],
    [
        0,
        "&nwArr;"
    ],
    [
        0,
        "&neArr;"
    ],
    [
        0,
        "&seArr;"
    ],
    [
        0,
        "&swArr;"
    ],
    [
        0,
        "&lAarr;"
    ],
    [
        0,
        "&rAarr;"
    ],
    [
        1,
        "&zigrarr;"
    ],
    [
        6,
        "&larrb;"
    ],
    [
        0,
        "&rarrb;"
    ],
    [
        15,
        "&DownArrowUpArrow;"
    ],
    [
        7,
        "&loarr;"
    ],
    [
        0,
        "&roarr;"
    ],
    [
        0,
        "&hoarr;"
    ],
    [
        0,
        "&forall;"
    ],
    [
        0,
        "&comp;"
    ],
    [
        0,
        {
            v: "&part;",
            n: 824,
            o: "&npart;"
        }
    ],
    [
        0,
        "&exist;"
    ],
    [
        0,
        "&nexist;"
    ],
    [
        0,
        "&empty;"
    ],
    [
        1,
        "&Del;"
    ],
    [
        0,
        "&Element;"
    ],
    [
        0,
        "&NotElement;"
    ],
    [
        1,
        "&ni;"
    ],
    [
        0,
        "&notni;"
    ],
    [
        2,
        "&prod;"
    ],
    [
        0,
        "&coprod;"
    ],
    [
        0,
        "&sum;"
    ],
    [
        0,
        "&minus;"
    ],
    [
        0,
        "&MinusPlus;"
    ],
    [
        0,
        "&dotplus;"
    ],
    [
        1,
        "&Backslash;"
    ],
    [
        0,
        "&lowast;"
    ],
    [
        0,
        "&compfn;"
    ],
    [
        1,
        "&radic;"
    ],
    [
        2,
        "&prop;"
    ],
    [
        0,
        "&infin;"
    ],
    [
        0,
        "&angrt;"
    ],
    [
        0,
        {
            v: "&ang;",
            n: 8402,
            o: "&nang;"
        }
    ],
    [
        0,
        "&angmsd;"
    ],
    [
        0,
        "&angsph;"
    ],
    [
        0,
        "&mid;"
    ],
    [
        0,
        "&nmid;"
    ],
    [
        0,
        "&DoubleVerticalBar;"
    ],
    [
        0,
        "&NotDoubleVerticalBar;"
    ],
    [
        0,
        "&and;"
    ],
    [
        0,
        "&or;"
    ],
    [
        0,
        {
            v: "&cap;",
            n: 65024,
            o: "&caps;"
        }
    ],
    [
        0,
        {
            v: "&cup;",
            n: 65024,
            o: "&cups;"
        }
    ],
    [
        0,
        "&int;"
    ],
    [
        0,
        "&Int;"
    ],
    [
        0,
        "&iiint;"
    ],
    [
        0,
        "&conint;"
    ],
    [
        0,
        "&Conint;"
    ],
    [
        0,
        "&Cconint;"
    ],
    [
        0,
        "&cwint;"
    ],
    [
        0,
        "&ClockwiseContourIntegral;"
    ],
    [
        0,
        "&awconint;"
    ],
    [
        0,
        "&there4;"
    ],
    [
        0,
        "&becaus;"
    ],
    [
        0,
        "&ratio;"
    ],
    [
        0,
        "&Colon;"
    ],
    [
        0,
        "&dotminus;"
    ],
    [
        1,
        "&mDDot;"
    ],
    [
        0,
        "&homtht;"
    ],
    [
        0,
        {
            v: "&sim;",
            n: 8402,
            o: "&nvsim;"
        }
    ],
    [
        0,
        {
            v: "&backsim;",
            n: 817,
            o: "&race;"
        }
    ],
    [
        0,
        {
            v: "&ac;",
            n: 819,
            o: "&acE;"
        }
    ],
    [
        0,
        "&acd;"
    ],
    [
        0,
        "&VerticalTilde;"
    ],
    [
        0,
        "&NotTilde;"
    ],
    [
        0,
        {
            v: "&eqsim;",
            n: 824,
            o: "&nesim;"
        }
    ],
    [
        0,
        "&sime;"
    ],
    [
        0,
        "&NotTildeEqual;"
    ],
    [
        0,
        "&cong;"
    ],
    [
        0,
        "&simne;"
    ],
    [
        0,
        "&ncong;"
    ],
    [
        0,
        "&ap;"
    ],
    [
        0,
        "&nap;"
    ],
    [
        0,
        "&ape;"
    ],
    [
        0,
        {
            v: "&apid;",
            n: 824,
            o: "&napid;"
        }
    ],
    [
        0,
        "&backcong;"
    ],
    [
        0,
        {
            v: "&asympeq;",
            n: 8402,
            o: "&nvap;"
        }
    ],
    [
        0,
        {
            v: "&bump;",
            n: 824,
            o: "&nbump;"
        }
    ],
    [
        0,
        {
            v: "&bumpe;",
            n: 824,
            o: "&nbumpe;"
        }
    ],
    [
        0,
        {
            v: "&doteq;",
            n: 824,
            o: "&nedot;"
        }
    ],
    [
        0,
        "&doteqdot;"
    ],
    [
        0,
        "&efDot;"
    ],
    [
        0,
        "&erDot;"
    ],
    [
        0,
        "&Assign;"
    ],
    [
        0,
        "&ecolon;"
    ],
    [
        0,
        "&ecir;"
    ],
    [
        0,
        "&circeq;"
    ],
    [
        1,
        "&wedgeq;"
    ],
    [
        0,
        "&veeeq;"
    ],
    [
        1,
        "&triangleq;"
    ],
    [
        2,
        "&equest;"
    ],
    [
        0,
        "&ne;"
    ],
    [
        0,
        {
            v: "&Congruent;",
            n: 8421,
            o: "&bnequiv;"
        }
    ],
    [
        0,
        "&nequiv;"
    ],
    [
        1,
        {
            v: "&le;",
            n: 8402,
            o: "&nvle;"
        }
    ],
    [
        0,
        {
            v: "&ge;",
            n: 8402,
            o: "&nvge;"
        }
    ],
    [
        0,
        {
            v: "&lE;",
            n: 824,
            o: "&nlE;"
        }
    ],
    [
        0,
        {
            v: "&gE;",
            n: 824,
            o: "&ngE;"
        }
    ],
    [
        0,
        {
            v: "&lnE;",
            n: 65024,
            o: "&lvertneqq;"
        }
    ],
    [
        0,
        {
            v: "&gnE;",
            n: 65024,
            o: "&gvertneqq;"
        }
    ],
    [
        0,
        {
            v: "&ll;",
            n: new Map(/* #__PURE__ */ $e4c4abac05298d0b$var$restoreDiff([
                [
                    824,
                    "&nLtv;"
                ],
                [
                    7577,
                    "&nLt;"
                ]
            ]))
        }
    ],
    [
        0,
        {
            v: "&gg;",
            n: new Map(/* #__PURE__ */ $e4c4abac05298d0b$var$restoreDiff([
                [
                    824,
                    "&nGtv;"
                ],
                [
                    7577,
                    "&nGt;"
                ]
            ]))
        }
    ],
    [
        0,
        "&between;"
    ],
    [
        0,
        "&NotCupCap;"
    ],
    [
        0,
        "&nless;"
    ],
    [
        0,
        "&ngt;"
    ],
    [
        0,
        "&nle;"
    ],
    [
        0,
        "&nge;"
    ],
    [
        0,
        "&lesssim;"
    ],
    [
        0,
        "&GreaterTilde;"
    ],
    [
        0,
        "&nlsim;"
    ],
    [
        0,
        "&ngsim;"
    ],
    [
        0,
        "&LessGreater;"
    ],
    [
        0,
        "&gl;"
    ],
    [
        0,
        "&NotLessGreater;"
    ],
    [
        0,
        "&NotGreaterLess;"
    ],
    [
        0,
        "&pr;"
    ],
    [
        0,
        "&sc;"
    ],
    [
        0,
        "&prcue;"
    ],
    [
        0,
        "&sccue;"
    ],
    [
        0,
        "&PrecedesTilde;"
    ],
    [
        0,
        {
            v: "&scsim;",
            n: 824,
            o: "&NotSucceedsTilde;"
        }
    ],
    [
        0,
        "&NotPrecedes;"
    ],
    [
        0,
        "&NotSucceeds;"
    ],
    [
        0,
        {
            v: "&sub;",
            n: 8402,
            o: "&NotSubset;"
        }
    ],
    [
        0,
        {
            v: "&sup;",
            n: 8402,
            o: "&NotSuperset;"
        }
    ],
    [
        0,
        "&nsub;"
    ],
    [
        0,
        "&nsup;"
    ],
    [
        0,
        "&sube;"
    ],
    [
        0,
        "&supe;"
    ],
    [
        0,
        "&NotSubsetEqual;"
    ],
    [
        0,
        "&NotSupersetEqual;"
    ],
    [
        0,
        {
            v: "&subne;",
            n: 65024,
            o: "&varsubsetneq;"
        }
    ],
    [
        0,
        {
            v: "&supne;",
            n: 65024,
            o: "&varsupsetneq;"
        }
    ],
    [
        1,
        "&cupdot;"
    ],
    [
        0,
        "&UnionPlus;"
    ],
    [
        0,
        {
            v: "&sqsub;",
            n: 824,
            o: "&NotSquareSubset;"
        }
    ],
    [
        0,
        {
            v: "&sqsup;",
            n: 824,
            o: "&NotSquareSuperset;"
        }
    ],
    [
        0,
        "&sqsube;"
    ],
    [
        0,
        "&sqsupe;"
    ],
    [
        0,
        {
            v: "&sqcap;",
            n: 65024,
            o: "&sqcaps;"
        }
    ],
    [
        0,
        {
            v: "&sqcup;",
            n: 65024,
            o: "&sqcups;"
        }
    ],
    [
        0,
        "&CirclePlus;"
    ],
    [
        0,
        "&CircleMinus;"
    ],
    [
        0,
        "&CircleTimes;"
    ],
    [
        0,
        "&osol;"
    ],
    [
        0,
        "&CircleDot;"
    ],
    [
        0,
        "&circledcirc;"
    ],
    [
        0,
        "&circledast;"
    ],
    [
        1,
        "&circleddash;"
    ],
    [
        0,
        "&boxplus;"
    ],
    [
        0,
        "&boxminus;"
    ],
    [
        0,
        "&boxtimes;"
    ],
    [
        0,
        "&dotsquare;"
    ],
    [
        0,
        "&RightTee;"
    ],
    [
        0,
        "&dashv;"
    ],
    [
        0,
        "&DownTee;"
    ],
    [
        0,
        "&bot;"
    ],
    [
        1,
        "&models;"
    ],
    [
        0,
        "&DoubleRightTee;"
    ],
    [
        0,
        "&Vdash;"
    ],
    [
        0,
        "&Vvdash;"
    ],
    [
        0,
        "&VDash;"
    ],
    [
        0,
        "&nvdash;"
    ],
    [
        0,
        "&nvDash;"
    ],
    [
        0,
        "&nVdash;"
    ],
    [
        0,
        "&nVDash;"
    ],
    [
        0,
        "&prurel;"
    ],
    [
        1,
        "&LeftTriangle;"
    ],
    [
        0,
        "&RightTriangle;"
    ],
    [
        0,
        {
            v: "&LeftTriangleEqual;",
            n: 8402,
            o: "&nvltrie;"
        }
    ],
    [
        0,
        {
            v: "&RightTriangleEqual;",
            n: 8402,
            o: "&nvrtrie;"
        }
    ],
    [
        0,
        "&origof;"
    ],
    [
        0,
        "&imof;"
    ],
    [
        0,
        "&multimap;"
    ],
    [
        0,
        "&hercon;"
    ],
    [
        0,
        "&intcal;"
    ],
    [
        0,
        "&veebar;"
    ],
    [
        1,
        "&barvee;"
    ],
    [
        0,
        "&angrtvb;"
    ],
    [
        0,
        "&lrtri;"
    ],
    [
        0,
        "&bigwedge;"
    ],
    [
        0,
        "&bigvee;"
    ],
    [
        0,
        "&bigcap;"
    ],
    [
        0,
        "&bigcup;"
    ],
    [
        0,
        "&diam;"
    ],
    [
        0,
        "&sdot;"
    ],
    [
        0,
        "&sstarf;"
    ],
    [
        0,
        "&divideontimes;"
    ],
    [
        0,
        "&bowtie;"
    ],
    [
        0,
        "&ltimes;"
    ],
    [
        0,
        "&rtimes;"
    ],
    [
        0,
        "&leftthreetimes;"
    ],
    [
        0,
        "&rightthreetimes;"
    ],
    [
        0,
        "&backsimeq;"
    ],
    [
        0,
        "&curlyvee;"
    ],
    [
        0,
        "&curlywedge;"
    ],
    [
        0,
        "&Sub;"
    ],
    [
        0,
        "&Sup;"
    ],
    [
        0,
        "&Cap;"
    ],
    [
        0,
        "&Cup;"
    ],
    [
        0,
        "&fork;"
    ],
    [
        0,
        "&epar;"
    ],
    [
        0,
        "&lessdot;"
    ],
    [
        0,
        "&gtdot;"
    ],
    [
        0,
        {
            v: "&Ll;",
            n: 824,
            o: "&nLl;"
        }
    ],
    [
        0,
        {
            v: "&Gg;",
            n: 824,
            o: "&nGg;"
        }
    ],
    [
        0,
        {
            v: "&leg;",
            n: 65024,
            o: "&lesg;"
        }
    ],
    [
        0,
        {
            v: "&gel;",
            n: 65024,
            o: "&gesl;"
        }
    ],
    [
        2,
        "&cuepr;"
    ],
    [
        0,
        "&cuesc;"
    ],
    [
        0,
        "&NotPrecedesSlantEqual;"
    ],
    [
        0,
        "&NotSucceedsSlantEqual;"
    ],
    [
        0,
        "&NotSquareSubsetEqual;"
    ],
    [
        0,
        "&NotSquareSupersetEqual;"
    ],
    [
        2,
        "&lnsim;"
    ],
    [
        0,
        "&gnsim;"
    ],
    [
        0,
        "&precnsim;"
    ],
    [
        0,
        "&scnsim;"
    ],
    [
        0,
        "&nltri;"
    ],
    [
        0,
        "&NotRightTriangle;"
    ],
    [
        0,
        "&nltrie;"
    ],
    [
        0,
        "&NotRightTriangleEqual;"
    ],
    [
        0,
        "&vellip;"
    ],
    [
        0,
        "&ctdot;"
    ],
    [
        0,
        "&utdot;"
    ],
    [
        0,
        "&dtdot;"
    ],
    [
        0,
        "&disin;"
    ],
    [
        0,
        "&isinsv;"
    ],
    [
        0,
        "&isins;"
    ],
    [
        0,
        {
            v: "&isindot;",
            n: 824,
            o: "&notindot;"
        }
    ],
    [
        0,
        "&notinvc;"
    ],
    [
        0,
        "&notinvb;"
    ],
    [
        1,
        {
            v: "&isinE;",
            n: 824,
            o: "&notinE;"
        }
    ],
    [
        0,
        "&nisd;"
    ],
    [
        0,
        "&xnis;"
    ],
    [
        0,
        "&nis;"
    ],
    [
        0,
        "&notnivc;"
    ],
    [
        0,
        "&notnivb;"
    ],
    [
        6,
        "&barwed;"
    ],
    [
        0,
        "&Barwed;"
    ],
    [
        1,
        "&lceil;"
    ],
    [
        0,
        "&rceil;"
    ],
    [
        0,
        "&LeftFloor;"
    ],
    [
        0,
        "&rfloor;"
    ],
    [
        0,
        "&drcrop;"
    ],
    [
        0,
        "&dlcrop;"
    ],
    [
        0,
        "&urcrop;"
    ],
    [
        0,
        "&ulcrop;"
    ],
    [
        0,
        "&bnot;"
    ],
    [
        1,
        "&profline;"
    ],
    [
        0,
        "&profsurf;"
    ],
    [
        1,
        "&telrec;"
    ],
    [
        0,
        "&target;"
    ],
    [
        5,
        "&ulcorn;"
    ],
    [
        0,
        "&urcorn;"
    ],
    [
        0,
        "&dlcorn;"
    ],
    [
        0,
        "&drcorn;"
    ],
    [
        2,
        "&frown;"
    ],
    [
        0,
        "&smile;"
    ],
    [
        9,
        "&cylcty;"
    ],
    [
        0,
        "&profalar;"
    ],
    [
        7,
        "&topbot;"
    ],
    [
        6,
        "&ovbar;"
    ],
    [
        1,
        "&solbar;"
    ],
    [
        60,
        "&angzarr;"
    ],
    [
        51,
        "&lmoustache;"
    ],
    [
        0,
        "&rmoustache;"
    ],
    [
        2,
        "&OverBracket;"
    ],
    [
        0,
        "&bbrk;"
    ],
    [
        0,
        "&bbrktbrk;"
    ],
    [
        37,
        "&OverParenthesis;"
    ],
    [
        0,
        "&UnderParenthesis;"
    ],
    [
        0,
        "&OverBrace;"
    ],
    [
        0,
        "&UnderBrace;"
    ],
    [
        2,
        "&trpezium;"
    ],
    [
        4,
        "&elinters;"
    ],
    [
        59,
        "&blank;"
    ],
    [
        164,
        "&circledS;"
    ],
    [
        55,
        "&boxh;"
    ],
    [
        1,
        "&boxv;"
    ],
    [
        9,
        "&boxdr;"
    ],
    [
        3,
        "&boxdl;"
    ],
    [
        3,
        "&boxur;"
    ],
    [
        3,
        "&boxul;"
    ],
    [
        3,
        "&boxvr;"
    ],
    [
        7,
        "&boxvl;"
    ],
    [
        7,
        "&boxhd;"
    ],
    [
        7,
        "&boxhu;"
    ],
    [
        7,
        "&boxvh;"
    ],
    [
        19,
        "&boxH;"
    ],
    [
        0,
        "&boxV;"
    ],
    [
        0,
        "&boxdR;"
    ],
    [
        0,
        "&boxDr;"
    ],
    [
        0,
        "&boxDR;"
    ],
    [
        0,
        "&boxdL;"
    ],
    [
        0,
        "&boxDl;"
    ],
    [
        0,
        "&boxDL;"
    ],
    [
        0,
        "&boxuR;"
    ],
    [
        0,
        "&boxUr;"
    ],
    [
        0,
        "&boxUR;"
    ],
    [
        0,
        "&boxuL;"
    ],
    [
        0,
        "&boxUl;"
    ],
    [
        0,
        "&boxUL;"
    ],
    [
        0,
        "&boxvR;"
    ],
    [
        0,
        "&boxVr;"
    ],
    [
        0,
        "&boxVR;"
    ],
    [
        0,
        "&boxvL;"
    ],
    [
        0,
        "&boxVl;"
    ],
    [
        0,
        "&boxVL;"
    ],
    [
        0,
        "&boxHd;"
    ],
    [
        0,
        "&boxhD;"
    ],
    [
        0,
        "&boxHD;"
    ],
    [
        0,
        "&boxHu;"
    ],
    [
        0,
        "&boxhU;"
    ],
    [
        0,
        "&boxHU;"
    ],
    [
        0,
        "&boxvH;"
    ],
    [
        0,
        "&boxVh;"
    ],
    [
        0,
        "&boxVH;"
    ],
    [
        19,
        "&uhblk;"
    ],
    [
        3,
        "&lhblk;"
    ],
    [
        3,
        "&block;"
    ],
    [
        8,
        "&blk14;"
    ],
    [
        0,
        "&blk12;"
    ],
    [
        0,
        "&blk34;"
    ],
    [
        13,
        "&square;"
    ],
    [
        8,
        "&blacksquare;"
    ],
    [
        0,
        "&EmptyVerySmallSquare;"
    ],
    [
        1,
        "&rect;"
    ],
    [
        0,
        "&marker;"
    ],
    [
        2,
        "&fltns;"
    ],
    [
        1,
        "&bigtriangleup;"
    ],
    [
        0,
        "&blacktriangle;"
    ],
    [
        0,
        "&triangle;"
    ],
    [
        2,
        "&blacktriangleright;"
    ],
    [
        0,
        "&rtri;"
    ],
    [
        3,
        "&bigtriangledown;"
    ],
    [
        0,
        "&blacktriangledown;"
    ],
    [
        0,
        "&dtri;"
    ],
    [
        2,
        "&blacktriangleleft;"
    ],
    [
        0,
        "&ltri;"
    ],
    [
        6,
        "&loz;"
    ],
    [
        0,
        "&cir;"
    ],
    [
        32,
        "&tridot;"
    ],
    [
        2,
        "&bigcirc;"
    ],
    [
        8,
        "&ultri;"
    ],
    [
        0,
        "&urtri;"
    ],
    [
        0,
        "&lltri;"
    ],
    [
        0,
        "&EmptySmallSquare;"
    ],
    [
        0,
        "&FilledSmallSquare;"
    ],
    [
        8,
        "&bigstar;"
    ],
    [
        0,
        "&star;"
    ],
    [
        7,
        "&phone;"
    ],
    [
        49,
        "&female;"
    ],
    [
        1,
        "&male;"
    ],
    [
        29,
        "&spades;"
    ],
    [
        2,
        "&clubs;"
    ],
    [
        1,
        "&hearts;"
    ],
    [
        0,
        "&diamondsuit;"
    ],
    [
        3,
        "&sung;"
    ],
    [
        2,
        "&flat;"
    ],
    [
        0,
        "&natural;"
    ],
    [
        0,
        "&sharp;"
    ],
    [
        163,
        "&check;"
    ],
    [
        3,
        "&cross;"
    ],
    [
        8,
        "&malt;"
    ],
    [
        21,
        "&sext;"
    ],
    [
        33,
        "&VerticalSeparator;"
    ],
    [
        25,
        "&lbbrk;"
    ],
    [
        0,
        "&rbbrk;"
    ],
    [
        84,
        "&bsolhsub;"
    ],
    [
        0,
        "&suphsol;"
    ],
    [
        28,
        "&LeftDoubleBracket;"
    ],
    [
        0,
        "&RightDoubleBracket;"
    ],
    [
        0,
        "&lang;"
    ],
    [
        0,
        "&rang;"
    ],
    [
        0,
        "&Lang;"
    ],
    [
        0,
        "&Rang;"
    ],
    [
        0,
        "&loang;"
    ],
    [
        0,
        "&roang;"
    ],
    [
        7,
        "&longleftarrow;"
    ],
    [
        0,
        "&longrightarrow;"
    ],
    [
        0,
        "&longleftrightarrow;"
    ],
    [
        0,
        "&DoubleLongLeftArrow;"
    ],
    [
        0,
        "&DoubleLongRightArrow;"
    ],
    [
        0,
        "&DoubleLongLeftRightArrow;"
    ],
    [
        1,
        "&longmapsto;"
    ],
    [
        2,
        "&dzigrarr;"
    ],
    [
        258,
        "&nvlArr;"
    ],
    [
        0,
        "&nvrArr;"
    ],
    [
        0,
        "&nvHarr;"
    ],
    [
        0,
        "&Map;"
    ],
    [
        6,
        "&lbarr;"
    ],
    [
        0,
        "&bkarow;"
    ],
    [
        0,
        "&lBarr;"
    ],
    [
        0,
        "&dbkarow;"
    ],
    [
        0,
        "&drbkarow;"
    ],
    [
        0,
        "&DDotrahd;"
    ],
    [
        0,
        "&UpArrowBar;"
    ],
    [
        0,
        "&DownArrowBar;"
    ],
    [
        2,
        "&Rarrtl;"
    ],
    [
        2,
        "&latail;"
    ],
    [
        0,
        "&ratail;"
    ],
    [
        0,
        "&lAtail;"
    ],
    [
        0,
        "&rAtail;"
    ],
    [
        0,
        "&larrfs;"
    ],
    [
        0,
        "&rarrfs;"
    ],
    [
        0,
        "&larrbfs;"
    ],
    [
        0,
        "&rarrbfs;"
    ],
    [
        2,
        "&nwarhk;"
    ],
    [
        0,
        "&nearhk;"
    ],
    [
        0,
        "&hksearow;"
    ],
    [
        0,
        "&hkswarow;"
    ],
    [
        0,
        "&nwnear;"
    ],
    [
        0,
        "&nesear;"
    ],
    [
        0,
        "&seswar;"
    ],
    [
        0,
        "&swnwar;"
    ],
    [
        8,
        {
            v: "&rarrc;",
            n: 824,
            o: "&nrarrc;"
        }
    ],
    [
        1,
        "&cudarrr;"
    ],
    [
        0,
        "&ldca;"
    ],
    [
        0,
        "&rdca;"
    ],
    [
        0,
        "&cudarrl;"
    ],
    [
        0,
        "&larrpl;"
    ],
    [
        2,
        "&curarrm;"
    ],
    [
        0,
        "&cularrp;"
    ],
    [
        7,
        "&rarrpl;"
    ],
    [
        2,
        "&harrcir;"
    ],
    [
        0,
        "&Uarrocir;"
    ],
    [
        0,
        "&lurdshar;"
    ],
    [
        0,
        "&ldrushar;"
    ],
    [
        2,
        "&LeftRightVector;"
    ],
    [
        0,
        "&RightUpDownVector;"
    ],
    [
        0,
        "&DownLeftRightVector;"
    ],
    [
        0,
        "&LeftUpDownVector;"
    ],
    [
        0,
        "&LeftVectorBar;"
    ],
    [
        0,
        "&RightVectorBar;"
    ],
    [
        0,
        "&RightUpVectorBar;"
    ],
    [
        0,
        "&RightDownVectorBar;"
    ],
    [
        0,
        "&DownLeftVectorBar;"
    ],
    [
        0,
        "&DownRightVectorBar;"
    ],
    [
        0,
        "&LeftUpVectorBar;"
    ],
    [
        0,
        "&LeftDownVectorBar;"
    ],
    [
        0,
        "&LeftTeeVector;"
    ],
    [
        0,
        "&RightTeeVector;"
    ],
    [
        0,
        "&RightUpTeeVector;"
    ],
    [
        0,
        "&RightDownTeeVector;"
    ],
    [
        0,
        "&DownLeftTeeVector;"
    ],
    [
        0,
        "&DownRightTeeVector;"
    ],
    [
        0,
        "&LeftUpTeeVector;"
    ],
    [
        0,
        "&LeftDownTeeVector;"
    ],
    [
        0,
        "&lHar;"
    ],
    [
        0,
        "&uHar;"
    ],
    [
        0,
        "&rHar;"
    ],
    [
        0,
        "&dHar;"
    ],
    [
        0,
        "&luruhar;"
    ],
    [
        0,
        "&ldrdhar;"
    ],
    [
        0,
        "&ruluhar;"
    ],
    [
        0,
        "&rdldhar;"
    ],
    [
        0,
        "&lharul;"
    ],
    [
        0,
        "&llhard;"
    ],
    [
        0,
        "&rharul;"
    ],
    [
        0,
        "&lrhard;"
    ],
    [
        0,
        "&udhar;"
    ],
    [
        0,
        "&duhar;"
    ],
    [
        0,
        "&RoundImplies;"
    ],
    [
        0,
        "&erarr;"
    ],
    [
        0,
        "&simrarr;"
    ],
    [
        0,
        "&larrsim;"
    ],
    [
        0,
        "&rarrsim;"
    ],
    [
        0,
        "&rarrap;"
    ],
    [
        0,
        "&ltlarr;"
    ],
    [
        1,
        "&gtrarr;"
    ],
    [
        0,
        "&subrarr;"
    ],
    [
        1,
        "&suplarr;"
    ],
    [
        0,
        "&lfisht;"
    ],
    [
        0,
        "&rfisht;"
    ],
    [
        0,
        "&ufisht;"
    ],
    [
        0,
        "&dfisht;"
    ],
    [
        5,
        "&lopar;"
    ],
    [
        0,
        "&ropar;"
    ],
    [
        4,
        "&lbrke;"
    ],
    [
        0,
        "&rbrke;"
    ],
    [
        0,
        "&lbrkslu;"
    ],
    [
        0,
        "&rbrksld;"
    ],
    [
        0,
        "&lbrksld;"
    ],
    [
        0,
        "&rbrkslu;"
    ],
    [
        0,
        "&langd;"
    ],
    [
        0,
        "&rangd;"
    ],
    [
        0,
        "&lparlt;"
    ],
    [
        0,
        "&rpargt;"
    ],
    [
        0,
        "&gtlPar;"
    ],
    [
        0,
        "&ltrPar;"
    ],
    [
        3,
        "&vzigzag;"
    ],
    [
        1,
        "&vangrt;"
    ],
    [
        0,
        "&angrtvbd;"
    ],
    [
        6,
        "&ange;"
    ],
    [
        0,
        "&range;"
    ],
    [
        0,
        "&dwangle;"
    ],
    [
        0,
        "&uwangle;"
    ],
    [
        0,
        "&angmsdaa;"
    ],
    [
        0,
        "&angmsdab;"
    ],
    [
        0,
        "&angmsdac;"
    ],
    [
        0,
        "&angmsdad;"
    ],
    [
        0,
        "&angmsdae;"
    ],
    [
        0,
        "&angmsdaf;"
    ],
    [
        0,
        "&angmsdag;"
    ],
    [
        0,
        "&angmsdah;"
    ],
    [
        0,
        "&bemptyv;"
    ],
    [
        0,
        "&demptyv;"
    ],
    [
        0,
        "&cemptyv;"
    ],
    [
        0,
        "&raemptyv;"
    ],
    [
        0,
        "&laemptyv;"
    ],
    [
        0,
        "&ohbar;"
    ],
    [
        0,
        "&omid;"
    ],
    [
        0,
        "&opar;"
    ],
    [
        1,
        "&operp;"
    ],
    [
        1,
        "&olcross;"
    ],
    [
        0,
        "&odsold;"
    ],
    [
        1,
        "&olcir;"
    ],
    [
        0,
        "&ofcir;"
    ],
    [
        0,
        "&olt;"
    ],
    [
        0,
        "&ogt;"
    ],
    [
        0,
        "&cirscir;"
    ],
    [
        0,
        "&cirE;"
    ],
    [
        0,
        "&solb;"
    ],
    [
        0,
        "&bsolb;"
    ],
    [
        3,
        "&boxbox;"
    ],
    [
        3,
        "&trisb;"
    ],
    [
        0,
        "&rtriltri;"
    ],
    [
        0,
        {
            v: "&LeftTriangleBar;",
            n: 824,
            o: "&NotLeftTriangleBar;"
        }
    ],
    [
        0,
        {
            v: "&RightTriangleBar;",
            n: 824,
            o: "&NotRightTriangleBar;"
        }
    ],
    [
        11,
        "&iinfin;"
    ],
    [
        0,
        "&infintie;"
    ],
    [
        0,
        "&nvinfin;"
    ],
    [
        4,
        "&eparsl;"
    ],
    [
        0,
        "&smeparsl;"
    ],
    [
        0,
        "&eqvparsl;"
    ],
    [
        5,
        "&blacklozenge;"
    ],
    [
        8,
        "&RuleDelayed;"
    ],
    [
        1,
        "&dsol;"
    ],
    [
        9,
        "&bigodot;"
    ],
    [
        0,
        "&bigoplus;"
    ],
    [
        0,
        "&bigotimes;"
    ],
    [
        1,
        "&biguplus;"
    ],
    [
        1,
        "&bigsqcup;"
    ],
    [
        5,
        "&iiiint;"
    ],
    [
        0,
        "&fpartint;"
    ],
    [
        2,
        "&cirfnint;"
    ],
    [
        0,
        "&awint;"
    ],
    [
        0,
        "&rppolint;"
    ],
    [
        0,
        "&scpolint;"
    ],
    [
        0,
        "&npolint;"
    ],
    [
        0,
        "&pointint;"
    ],
    [
        0,
        "&quatint;"
    ],
    [
        0,
        "&intlarhk;"
    ],
    [
        10,
        "&pluscir;"
    ],
    [
        0,
        "&plusacir;"
    ],
    [
        0,
        "&simplus;"
    ],
    [
        0,
        "&plusdu;"
    ],
    [
        0,
        "&plussim;"
    ],
    [
        0,
        "&plustwo;"
    ],
    [
        1,
        "&mcomma;"
    ],
    [
        0,
        "&minusdu;"
    ],
    [
        2,
        "&loplus;"
    ],
    [
        0,
        "&roplus;"
    ],
    [
        0,
        "&Cross;"
    ],
    [
        0,
        "&timesd;"
    ],
    [
        0,
        "&timesbar;"
    ],
    [
        1,
        "&smashp;"
    ],
    [
        0,
        "&lotimes;"
    ],
    [
        0,
        "&rotimes;"
    ],
    [
        0,
        "&otimesas;"
    ],
    [
        0,
        "&Otimes;"
    ],
    [
        0,
        "&odiv;"
    ],
    [
        0,
        "&triplus;"
    ],
    [
        0,
        "&triminus;"
    ],
    [
        0,
        "&tritime;"
    ],
    [
        0,
        "&intprod;"
    ],
    [
        2,
        "&amalg;"
    ],
    [
        0,
        "&capdot;"
    ],
    [
        1,
        "&ncup;"
    ],
    [
        0,
        "&ncap;"
    ],
    [
        0,
        "&capand;"
    ],
    [
        0,
        "&cupor;"
    ],
    [
        0,
        "&cupcap;"
    ],
    [
        0,
        "&capcup;"
    ],
    [
        0,
        "&cupbrcap;"
    ],
    [
        0,
        "&capbrcup;"
    ],
    [
        0,
        "&cupcup;"
    ],
    [
        0,
        "&capcap;"
    ],
    [
        0,
        "&ccups;"
    ],
    [
        0,
        "&ccaps;"
    ],
    [
        2,
        "&ccupssm;"
    ],
    [
        2,
        "&And;"
    ],
    [
        0,
        "&Or;"
    ],
    [
        0,
        "&andand;"
    ],
    [
        0,
        "&oror;"
    ],
    [
        0,
        "&orslope;"
    ],
    [
        0,
        "&andslope;"
    ],
    [
        1,
        "&andv;"
    ],
    [
        0,
        "&orv;"
    ],
    [
        0,
        "&andd;"
    ],
    [
        0,
        "&ord;"
    ],
    [
        1,
        "&wedbar;"
    ],
    [
        6,
        "&sdote;"
    ],
    [
        3,
        "&simdot;"
    ],
    [
        2,
        {
            v: "&congdot;",
            n: 824,
            o: "&ncongdot;"
        }
    ],
    [
        0,
        "&easter;"
    ],
    [
        0,
        "&apacir;"
    ],
    [
        0,
        {
            v: "&apE;",
            n: 824,
            o: "&napE;"
        }
    ],
    [
        0,
        "&eplus;"
    ],
    [
        0,
        "&pluse;"
    ],
    [
        0,
        "&Esim;"
    ],
    [
        0,
        "&Colone;"
    ],
    [
        0,
        "&Equal;"
    ],
    [
        1,
        "&ddotseq;"
    ],
    [
        0,
        "&equivDD;"
    ],
    [
        0,
        "&ltcir;"
    ],
    [
        0,
        "&gtcir;"
    ],
    [
        0,
        "&ltquest;"
    ],
    [
        0,
        "&gtquest;"
    ],
    [
        0,
        {
            v: "&leqslant;",
            n: 824,
            o: "&nleqslant;"
        }
    ],
    [
        0,
        {
            v: "&geqslant;",
            n: 824,
            o: "&ngeqslant;"
        }
    ],
    [
        0,
        "&lesdot;"
    ],
    [
        0,
        "&gesdot;"
    ],
    [
        0,
        "&lesdoto;"
    ],
    [
        0,
        "&gesdoto;"
    ],
    [
        0,
        "&lesdotor;"
    ],
    [
        0,
        "&gesdotol;"
    ],
    [
        0,
        "&lap;"
    ],
    [
        0,
        "&gap;"
    ],
    [
        0,
        "&lne;"
    ],
    [
        0,
        "&gne;"
    ],
    [
        0,
        "&lnap;"
    ],
    [
        0,
        "&gnap;"
    ],
    [
        0,
        "&lEg;"
    ],
    [
        0,
        "&gEl;"
    ],
    [
        0,
        "&lsime;"
    ],
    [
        0,
        "&gsime;"
    ],
    [
        0,
        "&lsimg;"
    ],
    [
        0,
        "&gsiml;"
    ],
    [
        0,
        "&lgE;"
    ],
    [
        0,
        "&glE;"
    ],
    [
        0,
        "&lesges;"
    ],
    [
        0,
        "&gesles;"
    ],
    [
        0,
        "&els;"
    ],
    [
        0,
        "&egs;"
    ],
    [
        0,
        "&elsdot;"
    ],
    [
        0,
        "&egsdot;"
    ],
    [
        0,
        "&el;"
    ],
    [
        0,
        "&eg;"
    ],
    [
        2,
        "&siml;"
    ],
    [
        0,
        "&simg;"
    ],
    [
        0,
        "&simlE;"
    ],
    [
        0,
        "&simgE;"
    ],
    [
        0,
        {
            v: "&LessLess;",
            n: 824,
            o: "&NotNestedLessLess;"
        }
    ],
    [
        0,
        {
            v: "&GreaterGreater;",
            n: 824,
            o: "&NotNestedGreaterGreater;"
        }
    ],
    [
        1,
        "&glj;"
    ],
    [
        0,
        "&gla;"
    ],
    [
        0,
        "&ltcc;"
    ],
    [
        0,
        "&gtcc;"
    ],
    [
        0,
        "&lescc;"
    ],
    [
        0,
        "&gescc;"
    ],
    [
        0,
        "&smt;"
    ],
    [
        0,
        "&lat;"
    ],
    [
        0,
        {
            v: "&smte;",
            n: 65024,
            o: "&smtes;"
        }
    ],
    [
        0,
        {
            v: "&late;",
            n: 65024,
            o: "&lates;"
        }
    ],
    [
        0,
        "&bumpE;"
    ],
    [
        0,
        {
            v: "&PrecedesEqual;",
            n: 824,
            o: "&NotPrecedesEqual;"
        }
    ],
    [
        0,
        {
            v: "&sce;",
            n: 824,
            o: "&NotSucceedsEqual;"
        }
    ],
    [
        2,
        "&prE;"
    ],
    [
        0,
        "&scE;"
    ],
    [
        0,
        "&precneqq;"
    ],
    [
        0,
        "&scnE;"
    ],
    [
        0,
        "&prap;"
    ],
    [
        0,
        "&scap;"
    ],
    [
        0,
        "&precnapprox;"
    ],
    [
        0,
        "&scnap;"
    ],
    [
        0,
        "&Pr;"
    ],
    [
        0,
        "&Sc;"
    ],
    [
        0,
        "&subdot;"
    ],
    [
        0,
        "&supdot;"
    ],
    [
        0,
        "&subplus;"
    ],
    [
        0,
        "&supplus;"
    ],
    [
        0,
        "&submult;"
    ],
    [
        0,
        "&supmult;"
    ],
    [
        0,
        "&subedot;"
    ],
    [
        0,
        "&supedot;"
    ],
    [
        0,
        {
            v: "&subE;",
            n: 824,
            o: "&nsubE;"
        }
    ],
    [
        0,
        {
            v: "&supE;",
            n: 824,
            o: "&nsupE;"
        }
    ],
    [
        0,
        "&subsim;"
    ],
    [
        0,
        "&supsim;"
    ],
    [
        2,
        {
            v: "&subnE;",
            n: 65024,
            o: "&varsubsetneqq;"
        }
    ],
    [
        0,
        {
            v: "&supnE;",
            n: 65024,
            o: "&varsupsetneqq;"
        }
    ],
    [
        2,
        "&csub;"
    ],
    [
        0,
        "&csup;"
    ],
    [
        0,
        "&csube;"
    ],
    [
        0,
        "&csupe;"
    ],
    [
        0,
        "&subsup;"
    ],
    [
        0,
        "&supsub;"
    ],
    [
        0,
        "&subsub;"
    ],
    [
        0,
        "&supsup;"
    ],
    [
        0,
        "&suphsub;"
    ],
    [
        0,
        "&supdsub;"
    ],
    [
        0,
        "&forkv;"
    ],
    [
        0,
        "&topfork;"
    ],
    [
        0,
        "&mlcp;"
    ],
    [
        8,
        "&Dashv;"
    ],
    [
        1,
        "&Vdashl;"
    ],
    [
        0,
        "&Barv;"
    ],
    [
        0,
        "&vBar;"
    ],
    [
        0,
        "&vBarv;"
    ],
    [
        1,
        "&Vbar;"
    ],
    [
        0,
        "&Not;"
    ],
    [
        0,
        "&bNot;"
    ],
    [
        0,
        "&rnmid;"
    ],
    [
        0,
        "&cirmid;"
    ],
    [
        0,
        "&midcir;"
    ],
    [
        0,
        "&topcir;"
    ],
    [
        0,
        "&nhpar;"
    ],
    [
        0,
        "&parsim;"
    ],
    [
        9,
        {
            v: "&parsl;",
            n: 8421,
            o: "&nparsl;"
        }
    ],
    [
        44343,
        {
            n: new Map(/* #__PURE__ */ $e4c4abac05298d0b$var$restoreDiff([
                [
                    56476,
                    "&Ascr;"
                ],
                [
                    1,
                    "&Cscr;"
                ],
                [
                    0,
                    "&Dscr;"
                ],
                [
                    2,
                    "&Gscr;"
                ],
                [
                    2,
                    "&Jscr;"
                ],
                [
                    0,
                    "&Kscr;"
                ],
                [
                    2,
                    "&Nscr;"
                ],
                [
                    0,
                    "&Oscr;"
                ],
                [
                    0,
                    "&Pscr;"
                ],
                [
                    0,
                    "&Qscr;"
                ],
                [
                    1,
                    "&Sscr;"
                ],
                [
                    0,
                    "&Tscr;"
                ],
                [
                    0,
                    "&Uscr;"
                ],
                [
                    0,
                    "&Vscr;"
                ],
                [
                    0,
                    "&Wscr;"
                ],
                [
                    0,
                    "&Xscr;"
                ],
                [
                    0,
                    "&Yscr;"
                ],
                [
                    0,
                    "&Zscr;"
                ],
                [
                    0,
                    "&ascr;"
                ],
                [
                    0,
                    "&bscr;"
                ],
                [
                    0,
                    "&cscr;"
                ],
                [
                    0,
                    "&dscr;"
                ],
                [
                    1,
                    "&fscr;"
                ],
                [
                    1,
                    "&hscr;"
                ],
                [
                    0,
                    "&iscr;"
                ],
                [
                    0,
                    "&jscr;"
                ],
                [
                    0,
                    "&kscr;"
                ],
                [
                    0,
                    "&lscr;"
                ],
                [
                    0,
                    "&mscr;"
                ],
                [
                    0,
                    "&nscr;"
                ],
                [
                    1,
                    "&pscr;"
                ],
                [
                    0,
                    "&qscr;"
                ],
                [
                    0,
                    "&rscr;"
                ],
                [
                    0,
                    "&sscr;"
                ],
                [
                    0,
                    "&tscr;"
                ],
                [
                    0,
                    "&uscr;"
                ],
                [
                    0,
                    "&vscr;"
                ],
                [
                    0,
                    "&wscr;"
                ],
                [
                    0,
                    "&xscr;"
                ],
                [
                    0,
                    "&yscr;"
                ],
                [
                    0,
                    "&zscr;"
                ],
                [
                    52,
                    "&Afr;"
                ],
                [
                    0,
                    "&Bfr;"
                ],
                [
                    1,
                    "&Dfr;"
                ],
                [
                    0,
                    "&Efr;"
                ],
                [
                    0,
                    "&Ffr;"
                ],
                [
                    0,
                    "&Gfr;"
                ],
                [
                    2,
                    "&Jfr;"
                ],
                [
                    0,
                    "&Kfr;"
                ],
                [
                    0,
                    "&Lfr;"
                ],
                [
                    0,
                    "&Mfr;"
                ],
                [
                    0,
                    "&Nfr;"
                ],
                [
                    0,
                    "&Ofr;"
                ],
                [
                    0,
                    "&Pfr;"
                ],
                [
                    0,
                    "&Qfr;"
                ],
                [
                    1,
                    "&Sfr;"
                ],
                [
                    0,
                    "&Tfr;"
                ],
                [
                    0,
                    "&Ufr;"
                ],
                [
                    0,
                    "&Vfr;"
                ],
                [
                    0,
                    "&Wfr;"
                ],
                [
                    0,
                    "&Xfr;"
                ],
                [
                    0,
                    "&Yfr;"
                ],
                [
                    1,
                    "&afr;"
                ],
                [
                    0,
                    "&bfr;"
                ],
                [
                    0,
                    "&cfr;"
                ],
                [
                    0,
                    "&dfr;"
                ],
                [
                    0,
                    "&efr;"
                ],
                [
                    0,
                    "&ffr;"
                ],
                [
                    0,
                    "&gfr;"
                ],
                [
                    0,
                    "&hfr;"
                ],
                [
                    0,
                    "&ifr;"
                ],
                [
                    0,
                    "&jfr;"
                ],
                [
                    0,
                    "&kfr;"
                ],
                [
                    0,
                    "&lfr;"
                ],
                [
                    0,
                    "&mfr;"
                ],
                [
                    0,
                    "&nfr;"
                ],
                [
                    0,
                    "&ofr;"
                ],
                [
                    0,
                    "&pfr;"
                ],
                [
                    0,
                    "&qfr;"
                ],
                [
                    0,
                    "&rfr;"
                ],
                [
                    0,
                    "&sfr;"
                ],
                [
                    0,
                    "&tfr;"
                ],
                [
                    0,
                    "&ufr;"
                ],
                [
                    0,
                    "&vfr;"
                ],
                [
                    0,
                    "&wfr;"
                ],
                [
                    0,
                    "&xfr;"
                ],
                [
                    0,
                    "&yfr;"
                ],
                [
                    0,
                    "&zfr;"
                ],
                [
                    0,
                    "&Aopf;"
                ],
                [
                    0,
                    "&Bopf;"
                ],
                [
                    1,
                    "&Dopf;"
                ],
                [
                    0,
                    "&Eopf;"
                ],
                [
                    0,
                    "&Fopf;"
                ],
                [
                    0,
                    "&Gopf;"
                ],
                [
                    1,
                    "&Iopf;"
                ],
                [
                    0,
                    "&Jopf;"
                ],
                [
                    0,
                    "&Kopf;"
                ],
                [
                    0,
                    "&Lopf;"
                ],
                [
                    0,
                    "&Mopf;"
                ],
                [
                    1,
                    "&Oopf;"
                ],
                [
                    3,
                    "&Sopf;"
                ],
                [
                    0,
                    "&Topf;"
                ],
                [
                    0,
                    "&Uopf;"
                ],
                [
                    0,
                    "&Vopf;"
                ],
                [
                    0,
                    "&Wopf;"
                ],
                [
                    0,
                    "&Xopf;"
                ],
                [
                    0,
                    "&Yopf;"
                ],
                [
                    1,
                    "&aopf;"
                ],
                [
                    0,
                    "&bopf;"
                ],
                [
                    0,
                    "&copf;"
                ],
                [
                    0,
                    "&dopf;"
                ],
                [
                    0,
                    "&eopf;"
                ],
                [
                    0,
                    "&fopf;"
                ],
                [
                    0,
                    "&gopf;"
                ],
                [
                    0,
                    "&hopf;"
                ],
                [
                    0,
                    "&iopf;"
                ],
                [
                    0,
                    "&jopf;"
                ],
                [
                    0,
                    "&kopf;"
                ],
                [
                    0,
                    "&lopf;"
                ],
                [
                    0,
                    "&mopf;"
                ],
                [
                    0,
                    "&nopf;"
                ],
                [
                    0,
                    "&oopf;"
                ],
                [
                    0,
                    "&popf;"
                ],
                [
                    0,
                    "&qopf;"
                ],
                [
                    0,
                    "&ropf;"
                ],
                [
                    0,
                    "&sopf;"
                ],
                [
                    0,
                    "&topf;"
                ],
                [
                    0,
                    "&uopf;"
                ],
                [
                    0,
                    "&vopf;"
                ],
                [
                    0,
                    "&wopf;"
                ],
                [
                    0,
                    "&xopf;"
                ],
                [
                    0,
                    "&yopf;"
                ],
                [
                    0,
                    "&zopf;"
                ]
            ]))
        }
    ],
    [
        8906,
        "&fflig;"
    ],
    [
        0,
        "&filig;"
    ],
    [
        0,
        "&fllig;"
    ],
    [
        0,
        "&ffilig;"
    ],
    [
        0,
        "&ffllig;"
    ]
]));


var $7dedc3f1324a9323$export$5699810ce3244ab8 = /["&'<>$\x80-\uFFFF]/g;
var $7dedc3f1324a9323$var$xmlCodeMap = new Map([
    [
        34,
        "&quot;"
    ],
    [
        38,
        "&amp;"
    ],
    [
        39,
        "&apos;"
    ],
    [
        60,
        "&lt;"
    ],
    [
        62,
        "&gt;"
    ]
]);
var $7dedc3f1324a9323$export$e02688b8085d016b = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
String.prototype.codePointAt != null ? function(str, index) {
    return str.codePointAt(index);
} : function(c, index) {
    return (c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);
};
function $7dedc3f1324a9323$export$18855ec5be97da16(str) {
    var ret = "";
    var lastIdx = 0;
    var match;
    while((match = $7dedc3f1324a9323$export$5699810ce3244ab8.exec(str)) !== null){
        var i = match.index;
        var char = str.charCodeAt(i);
        var next = $7dedc3f1324a9323$var$xmlCodeMap.get(char);
        if (next !== undefined) {
            ret += str.substring(lastIdx, i) + next;
            lastIdx = i + 1;
        } else {
            ret += "".concat(str.substring(lastIdx, i), "&#x").concat($7dedc3f1324a9323$export$e02688b8085d016b(str, i).toString(16), ";");
            // Increase by 1 if we have a surrogate pair
            lastIdx = $7dedc3f1324a9323$export$5699810ce3244ab8.lastIndex += Number((char & 0xfc00) === 0xd800);
        }
    }
    return ret + str.substr(lastIdx);
}
var $7dedc3f1324a9323$export$4e7f196112fea3c5 = $7dedc3f1324a9323$export$18855ec5be97da16;
/**
 * Creates a function that escapes all characters matched by the given regular
 * expression using the given map of characters to escape to their entities.
 *
 * @param regex Regular expression to match characters to escape.
 * @param map Map of characters to escape to their entities.
 *
 * @returns Function that escapes all characters matched by the given regular
 * expression using the given map of characters to escape to their entities.
 */ function $7dedc3f1324a9323$var$getEscaper(regex, map) {
    return function escape(data) {
        var match;
        var lastIdx = 0;
        var result = "";
        while(match = regex.exec(data)){
            if (lastIdx !== match.index) result += data.substring(lastIdx, match.index);
            // We know that this character will be in the map.
            result += map.get(match[0].charCodeAt(0));
            // Every match will be of length 1
            lastIdx = match.index + 1;
        }
        return result + data.substring(lastIdx);
    };
}
var $7dedc3f1324a9323$export$9e081872deefdcb0 = $7dedc3f1324a9323$var$getEscaper(/[&<>'"]/g, $7dedc3f1324a9323$var$xmlCodeMap);
var $7dedc3f1324a9323$export$30330f3d5eb70e11 = $7dedc3f1324a9323$var$getEscaper(/["&\u00A0]/g, new Map([
    [
        34,
        "&quot;"
    ],
    [
        38,
        "&amp;"
    ],
    [
        160,
        "&nbsp;"
    ]
]));
var $7dedc3f1324a9323$export$96e6fc3a139b2555 = $7dedc3f1324a9323$var$getEscaper(/[&<>\u00A0]/g, new Map([
    [
        38,
        "&amp;"
    ],
    [
        60,
        "&lt;"
    ],
    [
        62,
        "&gt;"
    ],
    [
        160,
        "&nbsp;"
    ]
]));


var $0a18ca82dcbc4c99$var$htmlReplacer = /[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;
function $0a18ca82dcbc4c99$export$f9d6449b9af28dc1(data) {
    return $0a18ca82dcbc4c99$var$encodeHTMLTrieRe($0a18ca82dcbc4c99$var$htmlReplacer, data);
}
function $0a18ca82dcbc4c99$export$e6e86c76506f1190(data) {
    return $0a18ca82dcbc4c99$var$encodeHTMLTrieRe((0, $7dedc3f1324a9323$export$5699810ce3244ab8), data);
}
function $0a18ca82dcbc4c99$var$encodeHTMLTrieRe(regExp, str) {
    var ret = "";
    var lastIdx = 0;
    var match;
    while((match = regExp.exec(str)) !== null){
        var i = match.index;
        ret += str.substring(lastIdx, i);
        var char = str.charCodeAt(i);
        var next = (0, $e4c4abac05298d0b$export$2e2bcd8739ae039).get(char);
        if (typeof next === "object") {
            // We are in a branch. Try to match the next char.
            if (i + 1 < str.length) {
                var nextChar = str.charCodeAt(i + 1);
                var value = typeof next.n === "number" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);
                if (value !== undefined) {
                    ret += value;
                    lastIdx = regExp.lastIndex += 1;
                    continue;
                }
            }
            next = next.v;
        }
        // We might have a tree node without a value; skip and use a numeric entity.
        if (next !== undefined) {
            ret += next;
            lastIdx = i + 1;
        } else {
            var cp = (0, $7dedc3f1324a9323$export$e02688b8085d016b)(str, i);
            ret += "&#x".concat(cp.toString(16), ";");
            // Increase by 1 if we have a surrogate pair
            lastIdx = regExp.lastIndex += Number(cp !== char);
        }
    }
    return ret + str.substr(lastIdx);
}



var $ce9fd50e62d654d2$export$b8c86583d9718b50;
(function(EntityLevel) {
    /** Support only XML entities. */ EntityLevel[EntityLevel["XML"] = 0] = "XML";
    /** Support HTML entities, which are a superset of XML entities. */ EntityLevel[EntityLevel["HTML"] = 1] = "HTML";
})($ce9fd50e62d654d2$export$b8c86583d9718b50 || ($ce9fd50e62d654d2$export$b8c86583d9718b50 = {}));
var $ce9fd50e62d654d2$export$1851b20d614eb756;
(function(EncodingMode) {
    /**
     * The output is UTF-8 encoded. Only characters that need escaping within
     * XML will be escaped.
     */ EncodingMode[EncodingMode["UTF8"] = 0] = "UTF8";
    /**
     * The output consists only of ASCII characters. Characters that need
     * escaping within HTML, and characters that aren't ASCII characters will
     * be escaped.
     */ EncodingMode[EncodingMode["ASCII"] = 1] = "ASCII";
    /**
     * Encode all characters that have an equivalent entity, as well as all
     * characters that are not ASCII characters.
     */ EncodingMode[EncodingMode["Extensive"] = 2] = "Extensive";
    /**
     * Encode all characters that have to be escaped in HTML attributes,
     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
     */ EncodingMode[EncodingMode["Attribute"] = 3] = "Attribute";
    /**
     * Encode all characters that have to be escaped in HTML text,
     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
     */ EncodingMode[EncodingMode["Text"] = 4] = "Text";
})($ce9fd50e62d654d2$export$1851b20d614eb756 || ($ce9fd50e62d654d2$export$1851b20d614eb756 = {}));
function $ce9fd50e62d654d2$export$2f872c0f2117be69(data) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : $ce9fd50e62d654d2$export$b8c86583d9718b50.XML;
    var level = typeof options === "number" ? options : options.level;
    if (level === $ce9fd50e62d654d2$export$b8c86583d9718b50.HTML) {
        var mode = typeof options === "object" ? options.mode : undefined;
        return (0, $54deb1694831d8f1$export$f045cb747ce77a19)(data, mode);
    }
    return (0, $54deb1694831d8f1$export$88e3b9643a8bd06e)(data);
}
function $ce9fd50e62d654d2$export$c94669f4c7d36be4(data) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : $ce9fd50e62d654d2$export$b8c86583d9718b50.XML;
    var _a;
    var opts = typeof options === "number" ? {
        level: options
    } : options;
    (_a = opts.mode) !== null && _a !== void 0 ? _a : opts.mode = (0, $54deb1694831d8f1$export$8c8f129ce60f53c).Strict;
    return $ce9fd50e62d654d2$export$2f872c0f2117be69(data, opts);
}
function $ce9fd50e62d654d2$export$c564cdbbe6da493(data) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : $ce9fd50e62d654d2$export$b8c86583d9718b50.XML;
    var opts = typeof options === "number" ? {
        level: options
    } : options;
    // Mode `UTF8` just escapes XML entities
    if (opts.mode === $ce9fd50e62d654d2$export$1851b20d614eb756.UTF8) return (0, $7dedc3f1324a9323$export$9e081872deefdcb0)(data);
    if (opts.mode === $ce9fd50e62d654d2$export$1851b20d614eb756.Attribute) return (0, $7dedc3f1324a9323$export$30330f3d5eb70e11)(data);
    if (opts.mode === $ce9fd50e62d654d2$export$1851b20d614eb756.Text) return (0, $7dedc3f1324a9323$export$96e6fc3a139b2555)(data);
    if (opts.level === $ce9fd50e62d654d2$export$b8c86583d9718b50.HTML) {
        if (opts.mode === $ce9fd50e62d654d2$export$1851b20d614eb756.ASCII) return (0, $0a18ca82dcbc4c99$export$e6e86c76506f1190)(data);
        return (0, $0a18ca82dcbc4c99$export$f9d6449b9af28dc1)(data);
    }
    // ASCII and Extensive are equivalent
    return (0, $7dedc3f1324a9323$export$18855ec5be97da16)(data);
}


var $0672e6164156d072$export$82b917442d249e05 = new Map([
    "altGlyph",
    "altGlyphDef",
    "altGlyphItem",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "clipPath",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feDropShadow",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "foreignObject",
    "glyphRef",
    "linearGradient",
    "radialGradient",
    "textPath"
].map(function(val) {
    return [
        val.toLowerCase(),
        val
    ];
}));
var $0672e6164156d072$export$b4cfbfd90280b005 = new Map([
    "definitionURL",
    "attributeName",
    "attributeType",
    "baseFrequency",
    "baseProfile",
    "calcMode",
    "clipPathUnits",
    "diffuseConstant",
    "edgeMode",
    "filterUnits",
    "glyphRef",
    "gradientTransform",
    "gradientUnits",
    "kernelMatrix",
    "kernelUnitLength",
    "keyPoints",
    "keySplines",
    "keyTimes",
    "lengthAdjust",
    "limitingConeAngle",
    "markerHeight",
    "markerUnits",
    "markerWidth",
    "maskContentUnits",
    "maskUnits",
    "numOctaves",
    "pathLength",
    "patternContentUnits",
    "patternTransform",
    "patternUnits",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "preserveAlpha",
    "preserveAspectRatio",
    "primitiveUnits",
    "refX",
    "refY",
    "repeatCount",
    "repeatDur",
    "requiredExtensions",
    "requiredFeatures",
    "specularConstant",
    "specularExponent",
    "spreadMethod",
    "startOffset",
    "stdDeviation",
    "stitchTiles",
    "surfaceScale",
    "systemLanguage",
    "tableValues",
    "targetX",
    "targetY",
    "textLength",
    "viewBox",
    "viewTarget",
    "xChannelSelector",
    "yChannelSelector",
    "zoomAndPan"
].map(function(val) {
    return [
        val.toLowerCase(),
        val
    ];
}));


var $a2e8b60a47070a66$var$unencodedElements = new Set([
    "style",
    "script",
    "xmp",
    "iframe",
    "noembed",
    "noframes",
    "plaintext",
    "noscript"
]);
function $a2e8b60a47070a66$var$replaceQuotes(value) {
    return value.replace(/"/g, "&quot;");
}
/**
 * Format attributes
 */ function $a2e8b60a47070a66$var$formatAttributes(attributes, opts) {
    var _a;
    if (!attributes) return;
    var encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false ? $a2e8b60a47070a66$var$replaceQuotes : opts.xmlMode || opts.encodeEntities !== "utf8" ? (0, $7dedc3f1324a9323$export$18855ec5be97da16) : (0, $7dedc3f1324a9323$export$30330f3d5eb70e11);
    return Object.keys(attributes).map(function(key) {
        var _a, _b;
        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
        if (opts.xmlMode === "foreign") /* Fix up mixed-case attribute names */ key = (_b = (0, $0672e6164156d072$export$b4cfbfd90280b005).get(key)) !== null && _b !== void 0 ? _b : key;
        if (!opts.emptyAttrs && !opts.xmlMode && value === "") return key;
        return "".concat(key, '="').concat(encode(value), '"');
    }).join(" ");
}
/**
 * Self-enclosing tags
 */ var $a2e8b60a47070a66$var$singleTag = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
]);
function $a2e8b60a47070a66$export$b3890eb0ae9dca99(node) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var nodes = "length" in node ? node : [
        node
    ];
    var output = "";
    for(var i = 0; i < nodes.length; i++)output += $a2e8b60a47070a66$var$renderNode(nodes[i], options);
    return output;
}
var $a2e8b60a47070a66$export$2e2bcd8739ae039 = $a2e8b60a47070a66$export$b3890eb0ae9dca99;
function $a2e8b60a47070a66$var$renderNode(node, options) {
    switch(node.type){
        case $2df14b34593b1d09$export$be92b6f5f03c0fe9:
            return $a2e8b60a47070a66$export$b3890eb0ae9dca99(node.children, options);
        // @ts-expect-error We don't use `Doctype` yet
        case $2df14b34593b1d09$export$31b44af36ff2c60f:
        case $2df14b34593b1d09$export$befdefbdce210f91:
            return $a2e8b60a47070a66$var$renderDirective(node);
        case $2df14b34593b1d09$export$4d299b491347818a:
            return $a2e8b60a47070a66$var$renderComment(node);
        case $2df14b34593b1d09$export$1f8b8f7e5c763232:
            return $a2e8b60a47070a66$var$renderCdata(node);
        case $2df14b34593b1d09$export$2f8b47a141e57afc:
        case $2df14b34593b1d09$export$d9e45bc13d335801:
        case $2df14b34593b1d09$export$3288d34c523a1192:
            return $a2e8b60a47070a66$var$renderTag(node, options);
        case $2df14b34593b1d09$export$5f1af8db9871e1d6:
            return $a2e8b60a47070a66$var$renderText(node, options);
    }
}
var $a2e8b60a47070a66$var$foreignModeIntegrationPoints = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
]);
var $a2e8b60a47070a66$var$foreignElements = new Set([
    "svg",
    "math"
]);
function $a2e8b60a47070a66$var$renderTag(elem, opts) {
    var _a;
    // Handle SVG / MathML in HTML
    if (opts.xmlMode === "foreign") {
        /* Fix up mixed-case element names */ elem.name = (_a = (0, $0672e6164156d072$export$82b917442d249e05).get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
        /* Exit foreign mode at integration points */ if (elem.parent && $a2e8b60a47070a66$var$foreignModeIntegrationPoints.has(elem.parent.name)) opts = (0, $09f2b5c72ab52c9f$export$71511d61b312f219)((0, $1b4e013f19afac76$export$71511d61b312f219)({}, opts), {
            xmlMode: false
        });
    }
    if (!opts.xmlMode && $a2e8b60a47070a66$var$foreignElements.has(elem.name)) opts = (0, $09f2b5c72ab52c9f$export$71511d61b312f219)((0, $1b4e013f19afac76$export$71511d61b312f219)({}, opts), {
        xmlMode: "foreign"
    });
    var tag = "<".concat(elem.name);
    var attribs = $a2e8b60a47070a66$var$formatAttributes(elem.attribs, opts);
    if (attribs) tag += " ".concat(attribs);
    if (elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== false : opts.selfClosingTags && $a2e8b60a47070a66$var$singleTag.has(elem.name))) {
        if (!opts.xmlMode) tag += " ";
        tag += "/>";
    } else {
        tag += ">";
        if (elem.children.length > 0) tag += $a2e8b60a47070a66$export$b3890eb0ae9dca99(elem.children, opts);
        if (opts.xmlMode || !$a2e8b60a47070a66$var$singleTag.has(elem.name)) tag += "</".concat(elem.name, ">");
    }
    return tag;
}
function $a2e8b60a47070a66$var$renderDirective(elem) {
    return "<".concat(elem.data, ">");
}
function $a2e8b60a47070a66$var$renderText(elem, opts) {
    var _a;
    var data = elem.data || "";
    // If entities weren't decoded, no need to encode them back
    if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && $a2e8b60a47070a66$var$unencodedElements.has(elem.parent.name))) data = opts.xmlMode || opts.encodeEntities !== "utf8" ? (0, $7dedc3f1324a9323$export$18855ec5be97da16)(data) : (0, $7dedc3f1324a9323$export$96e6fc3a139b2555)(data);
    return data;
}
function $a2e8b60a47070a66$var$renderCdata(elem) {
    return "<![CDATA[".concat(elem.children[0].data, "]]>");
}
function $a2e8b60a47070a66$var$renderComment(elem) {
    return "<!--".concat(elem.data, "-->");
}



function $3056d1dd1b783ac9$export$39484b727cc2f324(node, options) {
    return (0, $a2e8b60a47070a66$export$2e2bcd8739ae039)(node, options);
}
function $3056d1dd1b783ac9$export$7ed15b4d2218408(node, options) {
    return (0, $4ced16ee3f3f7fb3$export$bd5ff50f0e53d41c)(node) ? node.children.map(function(node) {
        return $3056d1dd1b783ac9$export$39484b727cc2f324(node, options);
    }).join("") : "";
}
function $3056d1dd1b783ac9$export$c72d34660a162238(node) {
    if (Array.isArray(node)) return node.map($3056d1dd1b783ac9$export$c72d34660a162238).join("");
    if ((0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292)(node)) return node.name === "br" ? "\n" : $3056d1dd1b783ac9$export$c72d34660a162238(node.children);
    if ((0, $4ced16ee3f3f7fb3$export$c2d65aed98d39b56)(node)) return $3056d1dd1b783ac9$export$c72d34660a162238(node.children);
    if ((0, $4ced16ee3f3f7fb3$export$1879817ac5c922b7)(node)) return node.data;
    return "";
}
function $3056d1dd1b783ac9$export$e0e0794250e9118f(node) {
    if (Array.isArray(node)) return node.map($3056d1dd1b783ac9$export$e0e0794250e9118f).join("");
    if ((0, $4ced16ee3f3f7fb3$export$bd5ff50f0e53d41c)(node) && !(0, $4ced16ee3f3f7fb3$export$3ab01370f5e64ac8)(node)) return $3056d1dd1b783ac9$export$e0e0794250e9118f(node.children);
    if ((0, $4ced16ee3f3f7fb3$export$1879817ac5c922b7)(node)) return node.data;
    return "";
}
function $3056d1dd1b783ac9$export$5864bc2a45f1eb81(node) {
    if (Array.isArray(node)) return node.map($3056d1dd1b783ac9$export$5864bc2a45f1eb81).join("");
    if ((0, $4ced16ee3f3f7fb3$export$bd5ff50f0e53d41c)(node) && (node.type === (0, $2df14b34593b1d09$export$b992dc138d950e31).Tag || (0, $4ced16ee3f3f7fb3$export$c2d65aed98d39b56)(node))) return $3056d1dd1b783ac9$export$5864bc2a45f1eb81(node.children);
    if ((0, $4ced16ee3f3f7fb3$export$1879817ac5c922b7)(node)) return node.data;
    return "";
}



function $1c92ccb8c85d3a2f$export$f8cf48ee793b41be(elem) {
    return (0, $4ced16ee3f3f7fb3$export$bd5ff50f0e53d41c)(elem) ? elem.children : [];
}
function $1c92ccb8c85d3a2f$export$58081aedf094d85b(elem) {
    return elem.parent || null;
}
function $1c92ccb8c85d3a2f$export$f312c3733b79ac0d(elem) {
    var parent = $1c92ccb8c85d3a2f$export$58081aedf094d85b(elem);
    if (parent != null) return $1c92ccb8c85d3a2f$export$f8cf48ee793b41be(parent);
    var siblings = [
        elem
    ];
    var prev = elem.prev, next = elem.next;
    while(prev != null){
        siblings.unshift(prev);
        prev = prev.prev;
    }
    while(next != null){
        siblings.push(next);
        next = next.next;
    }
    return siblings;
}
function $1c92ccb8c85d3a2f$export$1e335898aa11b111(elem, name) {
    var _a;
    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
}
function $1c92ccb8c85d3a2f$export$aa37f90c17957f38(elem, name) {
    return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
}
function $1c92ccb8c85d3a2f$export$7d9f7e9c1c02b41e(elem) {
    return elem.name;
}
function $1c92ccb8c85d3a2f$export$9be3779649ef9cc7(elem) {
    var next = elem.next;
    while(next !== null && !(0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292)(next))next = next.next;
    return next;
}
function $1c92ccb8c85d3a2f$export$c8bafb6e59c0b8e(elem) {
    var prev = elem.prev;
    while(prev !== null && !(0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292)(prev))prev = prev.prev;
    return prev;
}


/**
 * Remove an element from the dom
 *
 * @category Manipulation
 * @param elem The element to be removed
 */ function $819fcccd71010646$export$f883456a56996078(elem) {
    if (elem.prev) elem.prev.next = elem.next;
    if (elem.next) elem.next.prev = elem.prev;
    if (elem.parent) {
        var childs = elem.parent.children;
        var childsIndex = childs.lastIndexOf(elem);
        if (childsIndex >= 0) childs.splice(childsIndex, 1);
    }
    elem.next = null;
    elem.prev = null;
    elem.parent = null;
}
function $819fcccd71010646$export$2dfe578f95754f6a(elem, replacement) {
    var prev = replacement.prev = elem.prev;
    if (prev) prev.next = replacement;
    var next = replacement.next = elem.next;
    if (next) next.prev = replacement;
    var parent = replacement.parent = elem.parent;
    if (parent) {
        var childs = parent.children;
        childs[childs.lastIndexOf(elem)] = replacement;
        elem.parent = null;
    }
}
function $819fcccd71010646$export$1b8e57c9ea42f1d2(parent, child) {
    $819fcccd71010646$export$f883456a56996078(child);
    child.next = null;
    child.parent = parent;
    if (parent.children.push(child) > 1) {
        var sibling = parent.children[parent.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
    } else child.prev = null;
}
function $819fcccd71010646$export$10d8903dec122b9d(elem, next) {
    $819fcccd71010646$export$f883456a56996078(next);
    var parent = elem.parent;
    var currNext = elem.next;
    next.next = currNext;
    next.prev = elem;
    elem.next = next;
    next.parent = parent;
    if (currNext) {
        currNext.prev = next;
        if (parent) {
            var childs = parent.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next);
        }
    } else if (parent) parent.children.push(next);
}
function $819fcccd71010646$export$47b51e6d100007bc(parent, child) {
    $819fcccd71010646$export$f883456a56996078(child);
    child.parent = parent;
    child.prev = null;
    if (parent.children.unshift(child) !== 1) {
        var sibling = parent.children[1];
        sibling.prev = child;
        child.next = sibling;
    } else child.next = null;
}
function $819fcccd71010646$export$68159836694e22c1(elem, prev) {
    $819fcccd71010646$export$f883456a56996078(prev);
    var parent = elem.parent;
    if (parent) {
        var childs = parent.children;
        childs.splice(childs.indexOf(elem), 0, prev);
    }
    if (elem.prev) elem.prev.next = prev;
    prev.parent = parent;
    prev.prev = elem.prev;
    prev.next = elem;
    elem.prev = prev;
}



function $0273912ff34ee3dc$export$3dea766d36a8935f(test, node) {
    var recurse = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true, limit = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Infinity;
    return $0273912ff34ee3dc$export$71aa6c912b956294(test, Array.isArray(node) ? node : [
        node
    ], recurse, limit);
}
function $0273912ff34ee3dc$export$71aa6c912b956294(test, nodes, recurse, limit) {
    var result = [];
    /** Stack of the arrays we are looking at. */ var nodeStack = [
        nodes
    ];
    /** Stack of the indices within the arrays. */ var indexStack = [
        0
    ];
    for(;;){
        // First, check if the current array has any more elements to look at.
        if (indexStack[0] >= nodeStack[0].length) {
            // If we have no more arrays to look at, we are done.
            if (indexStack.length === 1) return result;
            // Otherwise, remove the current array from the stack.
            nodeStack.shift();
            indexStack.shift();
            continue;
        }
        var elem = nodeStack[0][indexStack[0]++];
        if (test(elem)) {
            result.push(elem);
            if (--limit <= 0) return result;
        }
        if (recurse && (0, $4ced16ee3f3f7fb3$export$bd5ff50f0e53d41c)(elem) && elem.children.length > 0) {
            /*
             * Add the children to the stack. We are depth-first, so this is
             * the next array we look at.
             */ indexStack.unshift(0);
            nodeStack.unshift(elem.children);
        }
    }
}
function $0273912ff34ee3dc$export$ac03a862904ce329(test, nodes) {
    return nodes.find(test);
}
function $0273912ff34ee3dc$export$a541876d5d7daf90(test, nodes) {
    var recurse = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var elem = null;
    for(var i = 0; i < nodes.length && !elem; i++){
        var node = nodes[i];
        if (!(0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292)(node)) continue;
        else if (test(node)) elem = node;
        else if (recurse && node.children.length > 0) elem = $0273912ff34ee3dc$export$a541876d5d7daf90(test, node.children, true);
    }
    return elem;
}
function $0273912ff34ee3dc$export$9d99dce58ac4a31b(test, nodes) {
    return nodes.some(function(checked) {
        return (0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292)(checked) && (test(checked) || $0273912ff34ee3dc$export$9d99dce58ac4a31b(test, checked.children));
    });
}
function $0273912ff34ee3dc$export$18200ea6c8035394(test, nodes) {
    var result = [];
    var nodeStack = [
        nodes
    ];
    var indexStack = [
        0
    ];
    for(;;){
        if (indexStack[0] >= nodeStack[0].length) {
            if (nodeStack.length === 1) return result;
            // Otherwise, remove the current array from the stack.
            nodeStack.shift();
            indexStack.shift();
            continue;
        }
        var elem = nodeStack[0][indexStack[0]++];
        if (!(0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292)(elem)) continue;
        if (test(elem)) result.push(elem);
        if (elem.children.length > 0) {
            indexStack.unshift(0);
            nodeStack.unshift(elem.children);
        }
    }
}




/**
 * A map of functions to check nodes against.
 */ var $1231575dccc54e22$var$Checks = {
    tag_name: function(name) {
        if (typeof name === "function") return function(elem) {
            return (0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292)(elem) && name(elem.name);
        };
        else if (name === "*") return 0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292;
        return function(elem) {
            return (0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292)(elem) && elem.name === name;
        };
    },
    tag_type: function(type) {
        if (typeof type === "function") return function(elem) {
            return type(elem.type);
        };
        return function(elem) {
            return elem.type === type;
        };
    },
    tag_contains: function(data) {
        if (typeof data === "function") return function(elem) {
            return (0, $4ced16ee3f3f7fb3$export$1879817ac5c922b7)(elem) && data(elem.data);
        };
        return function(elem) {
            return (0, $4ced16ee3f3f7fb3$export$1879817ac5c922b7)(elem) && elem.data === data;
        };
    }
};
/**
 * Returns a function to check whether a node has an attribute with a particular
 * value.
 *
 * @param attrib Attribute to check.
 * @param value Attribute value to look for.
 * @returns A function to check whether the a node has an attribute with a
 *   particular value.
 */ function $1231575dccc54e22$var$getAttribCheck(attrib, value) {
    if (typeof value === "function") return function(elem) {
        return (0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292)(elem) && value(elem.attribs[attrib]);
    };
    return function(elem) {
        return (0, $4ced16ee3f3f7fb3$export$3bf645f08efe3292)(elem) && elem.attribs[attrib] === value;
    };
}
/**
 * Returns a function that returns `true` if either of the input functions
 * returns `true` for a node.
 *
 * @param a First function to combine.
 * @param b Second function to combine.
 * @returns A function taking a node and returning `true` if either of the input
 *   functions returns `true` for the node.
 */ function $1231575dccc54e22$var$combineFuncs(a, b) {
    return function(elem) {
        return a(elem) || b(elem);
    };
}
/**
 * Returns a function that executes all checks in `options` and returns `true`
 * if any of them match a node.
 *
 * @param options An object describing nodes to look for.
 * @returns A function that executes all checks in `options` and returns `true`
 *   if any of them match a node.
 */ function $1231575dccc54e22$var$compileTest(options) {
    var funcs = Object.keys(options).map(function(key) {
        var value = options[key];
        return Object.prototype.hasOwnProperty.call($1231575dccc54e22$var$Checks, key) ? $1231575dccc54e22$var$Checks[key](value) : $1231575dccc54e22$var$getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce($1231575dccc54e22$var$combineFuncs);
}
function $1231575dccc54e22$export$7b31db6b5a0b2f32(options, node) {
    var test = $1231575dccc54e22$var$compileTest(options);
    return test ? test(node) : true;
}
function $1231575dccc54e22$export$73eac51a39d6b0eb(options, nodes, recurse) {
    var limit = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Infinity;
    var test = $1231575dccc54e22$var$compileTest(options);
    return test ? (0, $0273912ff34ee3dc$export$3dea766d36a8935f)(test, nodes, recurse, limit) : [];
}
function $1231575dccc54e22$export$83595b84fc78b9b4(id, nodes) {
    var recurse = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    if (!Array.isArray(nodes)) nodes = [
        nodes
    ];
    return (0, $0273912ff34ee3dc$export$a541876d5d7daf90)($1231575dccc54e22$var$getAttribCheck("id", id), nodes, recurse);
}
function $1231575dccc54e22$export$af941c3c7c3b40f5(tagName, nodes) {
    var recurse = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true, limit = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Infinity;
    return (0, $0273912ff34ee3dc$export$3dea766d36a8935f)($1231575dccc54e22$var$Checks["tag_name"](tagName), nodes, recurse, limit);
}
function $1231575dccc54e22$export$f5d981e30be5545b(type, nodes) {
    var recurse = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true, limit = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Infinity;
    return (0, $0273912ff34ee3dc$export$3dea766d36a8935f)($1231575dccc54e22$var$Checks["tag_type"](type), nodes, recurse, limit);
}



function $14c9e35f98909e7a$export$171dc294232ebeef(nodes) {
    var idx = nodes.length;
    /*
     * Check if each node (or one of its ancestors) is already contained in the
     * array.
     */ while(--idx >= 0){
        var node = nodes[idx];
        /*
         * Remove the node if it is not unique.
         * We are going through the array from the end, so we only
         * have to check nodes that preceed the node under consideration in the array.
         */ if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
        }
        for(var ancestor = node.parent; ancestor; ancestor = ancestor.parent)if (nodes.includes(ancestor)) {
            nodes.splice(idx, 1);
            break;
        }
    }
    return nodes;
}
var $14c9e35f98909e7a$export$406a59d989e8005a;
(function(DocumentPosition) {
    DocumentPosition[DocumentPosition["DISCONNECTED"] = 1] = "DISCONNECTED";
    DocumentPosition[DocumentPosition["PRECEDING"] = 2] = "PRECEDING";
    DocumentPosition[DocumentPosition["FOLLOWING"] = 4] = "FOLLOWING";
    DocumentPosition[DocumentPosition["CONTAINS"] = 8] = "CONTAINS";
    DocumentPosition[DocumentPosition["CONTAINED_BY"] = 16] = "CONTAINED_BY";
})($14c9e35f98909e7a$export$406a59d989e8005a || ($14c9e35f98909e7a$export$406a59d989e8005a = {}));
function $14c9e35f98909e7a$export$17303b8fea718ecc(nodeA, nodeB) {
    var aParents = [];
    var bParents = [];
    if (nodeA === nodeB) return 0;
    var current = (0, $4ced16ee3f3f7fb3$export$bd5ff50f0e53d41c)(nodeA) ? nodeA : nodeA.parent;
    while(current){
        aParents.unshift(current);
        current = current.parent;
    }
    current = (0, $4ced16ee3f3f7fb3$export$bd5ff50f0e53d41c)(nodeB) ? nodeB : nodeB.parent;
    while(current){
        bParents.unshift(current);
        current = current.parent;
    }
    var maxIdx = Math.min(aParents.length, bParents.length);
    var idx = 0;
    while(idx < maxIdx && aParents[idx] === bParents[idx])idx++;
    if (idx === 0) return $14c9e35f98909e7a$export$406a59d989e8005a.DISCONNECTED;
    var sharedParent = aParents[idx - 1];
    var siblings = sharedParent.children;
    var aSibling = aParents[idx];
    var bSibling = bParents[idx];
    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
        if (sharedParent === nodeB) return $14c9e35f98909e7a$export$406a59d989e8005a.FOLLOWING | $14c9e35f98909e7a$export$406a59d989e8005a.CONTAINED_BY;
        return $14c9e35f98909e7a$export$406a59d989e8005a.FOLLOWING;
    }
    if (sharedParent === nodeA) return $14c9e35f98909e7a$export$406a59d989e8005a.PRECEDING | $14c9e35f98909e7a$export$406a59d989e8005a.CONTAINS;
    return $14c9e35f98909e7a$export$406a59d989e8005a.PRECEDING;
}
function $14c9e35f98909e7a$export$1c267319665a7e7e(nodes) {
    nodes = nodes.filter(function(node, i, arr) {
        return !arr.includes(node, i + 1);
    });
    nodes.sort(function(a, b) {
        var relative = $14c9e35f98909e7a$export$17303b8fea718ecc(a, b);
        if (relative & $14c9e35f98909e7a$export$406a59d989e8005a.PRECEDING) return -1;
        else if (relative & $14c9e35f98909e7a$export$406a59d989e8005a.FOLLOWING) return 1;
        return 0;
    });
    return nodes;
}




function $9da2723a2afe8beb$export$ad32138c9e09ad4(doc) {
    var feedRoot = $9da2723a2afe8beb$var$getOneElement($9da2723a2afe8beb$var$isValidFeed, doc);
    return !feedRoot ? null : feedRoot.name === "feed" ? $9da2723a2afe8beb$var$getAtomFeed(feedRoot) : $9da2723a2afe8beb$var$getRssFeed(feedRoot);
}
/**
 * Parse an Atom feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */ function $9da2723a2afe8beb$var$getAtomFeed(feedRoot) {
    var _a;
    var childs = feedRoot.children;
    var feed = {
        type: "atom",
        items: (0, $1231575dccc54e22$export$af941c3c7c3b40f5)("entry", childs).map(function(item) {
            var _a;
            var children = item.children;
            var entry = {
                media: $9da2723a2afe8beb$var$getMediaElements(children)
            };
            $9da2723a2afe8beb$var$addConditionally(entry, "id", "id", children);
            $9da2723a2afe8beb$var$addConditionally(entry, "title", "title", children);
            var href = (_a = $9da2723a2afe8beb$var$getOneElement("link", children)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
            if (href) entry.link = href;
            var description = $9da2723a2afe8beb$var$fetch("summary", children) || $9da2723a2afe8beb$var$fetch("content", children);
            if (description) entry.description = description;
            var pubDate = $9da2723a2afe8beb$var$fetch("updated", children);
            if (pubDate) entry.pubDate = new Date(pubDate);
            return entry;
        })
    };
    $9da2723a2afe8beb$var$addConditionally(feed, "id", "id", childs);
    $9da2723a2afe8beb$var$addConditionally(feed, "title", "title", childs);
    var href = (_a = $9da2723a2afe8beb$var$getOneElement("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
    if (href) feed.link = href;
    $9da2723a2afe8beb$var$addConditionally(feed, "description", "subtitle", childs);
    var updated = $9da2723a2afe8beb$var$fetch("updated", childs);
    if (updated) feed.updated = new Date(updated);
    $9da2723a2afe8beb$var$addConditionally(feed, "author", "email", childs, true);
    return feed;
}
/**
 * Parse a RSS feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */ function $9da2723a2afe8beb$var$getRssFeed(feedRoot) {
    var _a, _b;
    var childs = (_b = (_a = $9da2723a2afe8beb$var$getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
    var feed = {
        type: feedRoot.name.substr(0, 3),
        id: "",
        items: (0, $1231575dccc54e22$export$af941c3c7c3b40f5)("item", feedRoot.children).map(function(item) {
            var children = item.children;
            var entry = {
                media: $9da2723a2afe8beb$var$getMediaElements(children)
            };
            $9da2723a2afe8beb$var$addConditionally(entry, "id", "guid", children);
            $9da2723a2afe8beb$var$addConditionally(entry, "title", "title", children);
            $9da2723a2afe8beb$var$addConditionally(entry, "link", "link", children);
            $9da2723a2afe8beb$var$addConditionally(entry, "description", "description", children);
            var pubDate = $9da2723a2afe8beb$var$fetch("pubDate", children) || $9da2723a2afe8beb$var$fetch("dc:date", children);
            if (pubDate) entry.pubDate = new Date(pubDate);
            return entry;
        })
    };
    $9da2723a2afe8beb$var$addConditionally(feed, "title", "title", childs);
    $9da2723a2afe8beb$var$addConditionally(feed, "link", "link", childs);
    $9da2723a2afe8beb$var$addConditionally(feed, "description", "description", childs);
    var updated = $9da2723a2afe8beb$var$fetch("lastBuildDate", childs);
    if (updated) feed.updated = new Date(updated);
    $9da2723a2afe8beb$var$addConditionally(feed, "author", "managingEditor", childs, true);
    return feed;
}
var $9da2723a2afe8beb$var$MEDIA_KEYS_STRING = [
    "url",
    "type",
    "lang"
];
var $9da2723a2afe8beb$var$MEDIA_KEYS_INT = [
    "fileSize",
    "bitrate",
    "framerate",
    "samplingrate",
    "channels",
    "duration",
    "height",
    "width"
];
/**
 * Get all media elements of a feed item.
 *
 * @param where Nodes to search in.
 * @returns Media elements.
 */ function $9da2723a2afe8beb$var$getMediaElements(where) {
    return (0, $1231575dccc54e22$export$af941c3c7c3b40f5)("media:content", where).map(function(elem) {
        var attribs = elem.attribs;
        var media = {
            medium: attribs["medium"],
            isDefault: !!attribs["isDefault"]
        };
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = $9da2723a2afe8beb$var$MEDIA_KEYS_STRING[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var attrib = _step.value;
                if (attribs[attrib]) media[attrib] = attribs[attrib];
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
        try {
            for(var _iterator1 = $9da2723a2afe8beb$var$MEDIA_KEYS_INT[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                var attrib1 = _step1.value;
                if (attribs[attrib1]) media[attrib1] = parseInt(attribs[attrib1], 10);
            }
        } catch (err) {
            _didIteratorError1 = true;
            _iteratorError1 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                    _iterator1.return();
                }
            } finally{
                if (_didIteratorError1) {
                    throw _iteratorError1;
                }
            }
        }
        if (attribs["expression"]) media.expression = attribs["expression"];
        return media;
    });
}
/**
 * Get one element by tag name.
 *
 * @param tagName Tag name to look for
 * @param node Node to search in
 * @returns The element or null
 */ function $9da2723a2afe8beb$var$getOneElement(tagName, node) {
    return (0, $1231575dccc54e22$export$af941c3c7c3b40f5)(tagName, node, true, 1)[0];
}
/**
 * Get the text content of an element with a certain tag name.
 *
 * @param tagName Tag name to look for.
 * @param where Node to search in.
 * @param recurse Whether to recurse into child nodes.
 * @returns The text content of the element.
 */ function $9da2723a2afe8beb$var$fetch(tagName, where) {
    var recurse = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    return (0, $3056d1dd1b783ac9$export$e0e0794250e9118f)((0, $1231575dccc54e22$export$af941c3c7c3b40f5)(tagName, where, recurse, 1)).trim();
}
/**
 * Adds a property to an object if it has a value.
 *
 * @param obj Object to be extended
 * @param prop Property name
 * @param tagName Tag name that contains the conditionally added property
 * @param where Element to search for the property
 * @param recurse Whether to recurse into child nodes.
 */ function $9da2723a2afe8beb$var$addConditionally(obj, prop, tagName, where) {
    var recurse = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    var val = $9da2723a2afe8beb$var$fetch(tagName, where, recurse);
    if (val) obj[prop] = val;
}
/**
 * Checks if an element is a feed root node.
 *
 * @param value The name of the element to check.
 * @returns Whether an element is a feed root node.
 */ function $9da2723a2afe8beb$var$isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
}





function $f28683c3a487697a$export$b6a9369736b19f4d(data, options) {
    var handler = new (0, $237df43ade998822$export$ff8ccbac9225de62)(undefined, options);
    new (0, $dfff106617eab6a6$export$7acfa6ed01010e37)(handler, options).end(data);
    return handler.root;
}
function $f28683c3a487697a$export$d66b332881d9723f(data, options) {
    return $f28683c3a487697a$export$b6a9369736b19f4d(data, options).children;
}
function $f28683c3a487697a$export$2bbd0317573b00fc(callback, options, elementCallback) {
    var handler = new (0, $237df43ade998822$export$ff8ccbac9225de62)(callback, options, elementCallback);
    return new (0, $dfff106617eab6a6$export$7acfa6ed01010e37)(handler, options);
}
var $f28683c3a487697a$var$parseFeedDefaultOptions = {
    xmlMode: true
};
function $f28683c3a487697a$export$5267abf679cd576b(feed) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : $f28683c3a487697a$var$parseFeedDefaultOptions;
    return (0, $9da2723a2afe8beb$export$ad32138c9e09ad4)($f28683c3a487697a$export$d66b332881d9723f(feed, options));
}


var $123407e4f14baa13$exports = {};
"use strict";
$123407e4f14baa13$exports = function(string) {
    if (typeof string !== "string") throw new TypeError("Expected a string");
    // Escape characters with special meaning either inside or outside character sets.
    // Use a simple backslash escape when it’s always valid, and a \unnnn escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.
    return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
};


/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */ function $977164f5b092b77f$var$isObject(o) {
    return Object.prototype.toString.call(o) === "[object Object]";
}
function $977164f5b092b77f$export$53b83ca8eaab0383(o) {
    var ctor, prot;
    if ($977164f5b092b77f$var$isObject(o) === false) return false;
    // If has modified constructor
    ctor = o.constructor;
    if (ctor === undefined) return true;
    // If has modified prototype
    prot = ctor.prototype;
    if ($977164f5b092b77f$var$isObject(prot) === false) return false;
    // If constructor does not have an Object-specific method
    if (prot.hasOwnProperty("isPrototypeOf") === false) return false;
    // Most likely a plain Object
    return true;
}


var $d993ded166d3bfa4$require$isPlainObject = $977164f5b092b77f$export$53b83ca8eaab0383;
var $f9e6a54d5717f04d$exports = {};
"use strict";
var $f9e6a54d5717f04d$var$isMergeableObject = function isMergeableObject(value) {
    return $f9e6a54d5717f04d$var$isNonNullObject(value) && !$f9e6a54d5717f04d$var$isSpecial(value);
};
function $f9e6a54d5717f04d$var$isNonNullObject(value) {
    return !!value && typeof value === "object";
}
function $f9e6a54d5717f04d$var$isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === "[object RegExp]" || stringValue === "[object Date]" || $f9e6a54d5717f04d$var$isReactElement(value);
}
// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var $f9e6a54d5717f04d$var$canUseSymbol = typeof Symbol === "function" && Symbol.for;
var $f9e6a54d5717f04d$var$REACT_ELEMENT_TYPE = $f9e6a54d5717f04d$var$canUseSymbol ? Symbol.for("react.element") : 0xeac7;
function $f9e6a54d5717f04d$var$isReactElement(value) {
    return value.$$typeof === $f9e6a54d5717f04d$var$REACT_ELEMENT_TYPE;
}
function $f9e6a54d5717f04d$var$emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
}
function $f9e6a54d5717f04d$var$cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? $f9e6a54d5717f04d$var$deepmerge($f9e6a54d5717f04d$var$emptyTarget(value), value, options) : value;
}
function $f9e6a54d5717f04d$var$defaultArrayMerge(target, source, options) {
    return target.concat(source).map(function(element) {
        return $f9e6a54d5717f04d$var$cloneUnlessOtherwiseSpecified(element, options);
    });
}
function $f9e6a54d5717f04d$var$getMergeFunction(key, options) {
    if (!options.customMerge) return $f9e6a54d5717f04d$var$deepmerge;
    var customMerge = options.customMerge(key);
    return typeof customMerge === "function" ? customMerge : $f9e6a54d5717f04d$var$deepmerge;
}
function $f9e6a54d5717f04d$var$getEnumerableOwnPropertySymbols(target) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
    }) : [];
}
function $f9e6a54d5717f04d$var$getKeys(target) {
    return Object.keys(target).concat($f9e6a54d5717f04d$var$getEnumerableOwnPropertySymbols(target));
}
function $f9e6a54d5717f04d$var$propertyIsOnObject(object, property) {
    try {
        return property in object;
    } catch (_) {
        return false;
    }
}
// Protects from prototype poisoning and unexpected merging up the prototype chain.
function $f9e6a54d5717f04d$var$propertyIsUnsafe(target, key) {
    return $f9e6a54d5717f04d$var$propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
     && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
     && Object.propertyIsEnumerable.call(target, key) // and also unsafe if they're nonenumerable.
    );
}
function $f9e6a54d5717f04d$var$mergeObject(target, source, options) {
    var destination = {};
    if (options.isMergeableObject(target)) $f9e6a54d5717f04d$var$getKeys(target).forEach(function(key) {
        destination[key] = $f9e6a54d5717f04d$var$cloneUnlessOtherwiseSpecified(target[key], options);
    });
    $f9e6a54d5717f04d$var$getKeys(source).forEach(function(key) {
        if ($f9e6a54d5717f04d$var$propertyIsUnsafe(target, key)) return;
        if ($f9e6a54d5717f04d$var$propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) destination[key] = $f9e6a54d5717f04d$var$getMergeFunction(key, options)(target[key], source[key], options);
        else destination[key] = $f9e6a54d5717f04d$var$cloneUnlessOtherwiseSpecified(source[key], options);
    });
    return destination;
}
function $f9e6a54d5717f04d$var$deepmerge(target, source, options) {
    options = options || {};
    options.arrayMerge = options.arrayMerge || $f9e6a54d5717f04d$var$defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || $f9e6a54d5717f04d$var$isMergeableObject;
    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    // implementations can use it. The caller may not replace it.
    options.cloneUnlessOtherwiseSpecified = $f9e6a54d5717f04d$var$cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) return $f9e6a54d5717f04d$var$cloneUnlessOtherwiseSpecified(source, options);
    else if (sourceIsArray) return options.arrayMerge(target, source, options);
    else return $f9e6a54d5717f04d$var$mergeObject(target, source, options);
}
$f9e6a54d5717f04d$var$deepmerge.all = function deepmergeAll(array, options) {
    if (!Array.isArray(array)) throw new Error("first argument should be an array");
    return array.reduce(function(prev, next) {
        return $f9e6a54d5717f04d$var$deepmerge(prev, next, options);
    }, {});
};
var $f9e6a54d5717f04d$var$deepmerge_1 = $f9e6a54d5717f04d$var$deepmerge;
$f9e6a54d5717f04d$exports = $f9e6a54d5717f04d$var$deepmerge_1;


var $51f7ba580508b602$exports = {};
/**
 * Srcset Parser
 *
 * By Alex Bell |  MIT License
 *
 * JS Parser for the string value that appears in markup <img srcset="here">
 *
 * @returns Array [{url: _, d: _, w: _, h:_}, ...]
 *
 * Based super duper closely on the reference algorithm at:
 * https://html.spec.whatwg.org/multipage/embedded-content.html#parse-a-srcset-attribute
 *
 * Most comments are copied in directly from the spec
 * (except for comments in parens).
 */ (function(root, factory) {
    if (typeof define === "function" && define.amd) // AMD. Register as an anonymous module.
    define([], factory);
    else if (0, $51f7ba580508b602$exports) // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    $51f7ba580508b602$exports = factory();
    else // Browser globals (root is window)
    root.parseSrcset = factory();
})($51f7ba580508b602$exports, function() {
    // 1. Let input be the value passed to this algorithm.
    return function(input) {
        // UTILITY FUNCTIONS
        // Manual is faster than RegEx
        // http://bjorn.tipling.com/state-and-regular-expressions-in-javascript
        // http://jsperf.com/whitespace-character/5
        function isSpace(c) {
            return c === " " || // space
            c === "	" || // horizontal tab
            c === "\n" || // new line
            c === "\f" || // form feed
            c === "\r"; // carriage return
        }
        function collectCharacters(regEx) {
            var chars, match = regEx.exec(input.substring(pos));
            if (match) {
                chars = match[0];
                pos += chars.length;
                return chars;
            }
        }
        var inputLength = input.length, // (Don't use \s, to avoid matching non-breaking space)
        regexLeadingSpaces = /^[ \t\n\r\u000c]+/, regexLeadingCommasOrSpaces = /^[, \t\n\r\u000c]+/, regexLeadingNotSpaces = /^[^ \t\n\r\u000c]+/, regexTrailingCommas = /[,]+$/, regexNonNegativeInteger = /^\d+$/, // ( Positive or negative or unsigned integers or decimals, without or without exponents.
        // Must include at least one digit.
        // According to spec tests any decimal point must be followed by a digit.
        // No leading plus sign is allowed.)
        // https://html.spec.whatwg.org/multipage/infrastructure.html#valid-floating-point-number
        regexFloatingPoint = /^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/, url, descriptors, currentDescriptor, state, c, // 2. Let position be a pointer into input, initially pointing at the start
        //    of the string.
        pos = 0, // 3. Let candidates be an initially empty source set.
        candidates = [];
        // 4. Splitting loop: Collect a sequence of characters that are space
        //    characters or U+002C COMMA characters. If any U+002C COMMA characters
        //    were collected, that is a parse error.
        while(true){
            collectCharacters(regexLeadingCommasOrSpaces);
            // 5. If position is past the end of input, return candidates and abort these steps.
            if (pos >= inputLength) return candidates; // (we're done, this is the sole return path)
            // 6. Collect a sequence of characters that are not space characters,
            //    and let that be url.
            url = collectCharacters(regexLeadingNotSpaces);
            // 7. Let descriptors be a new empty list.
            descriptors = [];
            // 8. If url ends with a U+002C COMMA character (,), follow these substeps:
            //		(1). Remove all trailing U+002C COMMA characters from url. If this removed
            //         more than one character, that is a parse error.
            if (url.slice(-1) === ",") {
                url = url.replace(regexTrailingCommas, "");
                // (Jump ahead to step 9 to skip tokenization and just push the candidate).
                parseDescriptors();
            //	Otherwise, follow these substeps:
            } else tokenize();
             // (close else of step 8)
        // 16. Return to the step labeled splitting loop.
        } // (Close of big while loop.)
        /**
		 * Tokenizes descriptor properties prior to parsing
		 * Returns undefined.
		 */ function tokenize() {
            // 8.1. Descriptor tokeniser: Skip whitespace
            collectCharacters(regexLeadingSpaces);
            // 8.2. Let current descriptor be the empty string.
            currentDescriptor = "";
            // 8.3. Let state be in descriptor.
            state = "in descriptor";
            while(true){
                // 8.4. Let c be the character at position.
                c = input.charAt(pos);
                //  Do the following depending on the value of state.
                //  For the purpose of this step, "EOF" is a special character representing
                //  that position is past the end of input.
                // In descriptor
                if (state === "in descriptor") {
                    // Do the following, depending on the value of c:
                    // Space character
                    // If current descriptor is not empty, append current descriptor to
                    // descriptors and let current descriptor be the empty string.
                    // Set state to after descriptor.
                    if (isSpace(c)) {
                        if (currentDescriptor) {
                            descriptors.push(currentDescriptor);
                            currentDescriptor = "";
                            state = "after descriptor";
                        }
                    } else if (c === ",") {
                        pos += 1;
                        if (currentDescriptor) descriptors.push(currentDescriptor);
                        parseDescriptors();
                        return;
                    // U+0028 LEFT PARENTHESIS (()
                    // Append c to current descriptor. Set state to in parens.
                    } else if (c === "(") {
                        currentDescriptor = currentDescriptor + c;
                        state = "in parens";
                    // EOF
                    // If current descriptor is not empty, append current descriptor to
                    // descriptors. Jump to the step labeled descriptor parser.
                    } else if (c === "") {
                        if (currentDescriptor) descriptors.push(currentDescriptor);
                        parseDescriptors();
                        return;
                    // Anything else
                    // Append c to current descriptor.
                    } else currentDescriptor = currentDescriptor + c;
                // (end "in descriptor"
                // In parens
                } else if (state === "in parens") {
                    // U+0029 RIGHT PARENTHESIS ())
                    // Append c to current descriptor. Set state to in descriptor.
                    if (c === ")") {
                        currentDescriptor = currentDescriptor + c;
                        state = "in descriptor";
                    // EOF
                    // Append current descriptor to descriptors. Jump to the step labeled
                    // descriptor parser.
                    } else if (c === "") {
                        descriptors.push(currentDescriptor);
                        parseDescriptors();
                        return;
                    // Anything else
                    // Append c to current descriptor.
                    } else currentDescriptor = currentDescriptor + c;
                // After descriptor
                } else if (state === "after descriptor") {
                    // Do the following, depending on the value of c:
                    // Space character: Stay in this state.
                    if (isSpace(c)) ;
                    else if (c === "") {
                        parseDescriptors();
                        return;
                    // Anything else
                    // Set state to in descriptor. Set position to the previous character in input.
                    } else {
                        state = "in descriptor";
                        pos -= 1;
                    }
                }
                // Advance position to the next character in input.
                pos += 1;
            // Repeat this step.
            } // (close while true loop)
        }
        /**
		 * Adds descriptor properties to a candidate, pushes to the candidates array
		 * @return undefined
		 */ // Declared outside of the while loop so that it's only created once.
        function parseDescriptors() {
            // 9. Descriptor parser: Let error be no.
            var pError = false, // 10. Let width be absent.
            // 11. Let density be absent.
            // 12. Let future-compat-h be absent. (We're implementing it now as h)
            w, d, h, i, candidate = {}, desc, lastChar, value, intVal, floatVal;
            // 13. For each descriptor in descriptors, run the appropriate set of steps
            // from the following list:
            for(i = 0; i < descriptors.length; i++){
                desc = descriptors[i];
                lastChar = desc[desc.length - 1];
                value = desc.substring(0, desc.length - 1);
                intVal = parseInt(value, 10);
                floatVal = parseFloat(value);
                // If the descriptor consists of a valid non-negative integer followed by
                // a U+0077 LATIN SMALL LETTER W character
                if (regexNonNegativeInteger.test(value) && lastChar === "w") {
                    // If width and density are not both absent, then let error be yes.
                    if (w || d) pError = true;
                    // Apply the rules for parsing non-negative integers to the descriptor.
                    // If the result is zero, let error be yes.
                    // Otherwise, let width be the result.
                    if (intVal === 0) pError = true;
                    else w = intVal;
                // If the descriptor consists of a valid floating-point number followed by
                // a U+0078 LATIN SMALL LETTER X character
                } else if (regexFloatingPoint.test(value) && lastChar === "x") {
                    // If width, density and future-compat-h are not all absent, then let error
                    // be yes.
                    if (w || d || h) pError = true;
                    // Apply the rules for parsing floating-point number values to the descriptor.
                    // If the result is less than zero, let error be yes. Otherwise, let density
                    // be the result.
                    if (floatVal < 0) pError = true;
                    else d = floatVal;
                // If the descriptor consists of a valid non-negative integer followed by
                // a U+0068 LATIN SMALL LETTER H character
                } else if (regexNonNegativeInteger.test(value) && lastChar === "h") {
                    // If height and density are not both absent, then let error be yes.
                    if (h || d) pError = true;
                    // Apply the rules for parsing non-negative integers to the descriptor.
                    // If the result is zero, let error be yes. Otherwise, let future-compat-h
                    // be the result.
                    if (intVal === 0) pError = true;
                    else h = intVal;
                // Anything else, Let error be yes.
                } else pError = true;
            } // (close step 13 for loop)
            // 15. If error is still no, then append a new image source to candidates whose
            // URL is url, associated with a width width if not absent and a pixel
            // density density if not absent. Otherwise, there is a parse error.
            if (!pError) {
                candidate.url = url;
                if (w) candidate.w = w;
                if (d) candidate.d = d;
                if (h) candidate.h = h;
                candidates.push(candidate);
            } else if (console && console.log) console.log("Invalid srcset descriptor found in '" + input + "' at '" + desc + "'.");
        } // (close parseDescriptors fn)
    };
});


var $cca90c60f8638a71$exports = {};
function $adff3c4e0c1171cc$export$71511d61b312f219(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}


function $103ec1b33d0c31a4$export$71511d61b312f219(arr) {
    if (Array.isArray(arr)) return (0, $adff3c4e0c1171cc$export$71511d61b312f219)(arr);
}


function $fdb1565f2fa1c9a2$export$71511d61b312f219(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}


function $89e35634fd357221$export$71511d61b312f219() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}



function $51a6752bab5162a4$export$71511d61b312f219(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return (0, $adff3c4e0c1171cc$export$71511d61b312f219)(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $adff3c4e0c1171cc$export$71511d61b312f219)(o, minLen);
}


function $bff51d46f29b3217$export$71511d61b312f219(arr) {
    return (0, $103ec1b33d0c31a4$export$71511d61b312f219)(arr) || (0, $fdb1565f2fa1c9a2$export$71511d61b312f219)(arr) || (0, $51a6752bab5162a4$export$71511d61b312f219)(arr) || (0, $89e35634fd357221$export$71511d61b312f219)();
}


"use strict";
var $9918148dc58deaa7$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

var $hRvs7 = parcelRequire("hRvs7");
function $69f67aea877e591c$export$71511d61b312f219(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = (0, $hRvs7._)(object);
        if (object === null) break;
    }
    return object;
}


function $c467556ee846b44e$export$71511d61b312f219(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) $c467556ee846b44e$export$71511d61b312f219 = Reflect.get;
    else $c467556ee846b44e$export$71511d61b312f219 = function get(target, property, receiver) {
        var base = (0, $69f67aea877e591c$export$71511d61b312f219)(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) return desc.get.call(receiver || target);
        return desc.value;
    };
    return $c467556ee846b44e$export$71511d61b312f219(target, property, receiver || target);
}



var $hRvs7 = parcelRequire("hRvs7");

var $03TNp = parcelRequire("03TNp");


var $13zzr = parcelRequire("13zzr");
"use strict";
var $9612b3c428fe3fd1$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");


var $hRvs7 = parcelRequire("hRvs7");

var $03TNp = parcelRequire("03TNp");



var $13zzr = parcelRequire("13zzr");
"use strict";
var $4ffe0aecb4f3941f$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $03TNp = parcelRequire("03TNp");


var $13zzr = parcelRequire("13zzr");
"use strict";
var $b8451bfdea497ff3$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");


var $aDbZK = parcelRequire("aDbZK");
"use strict";
var $f2a489e4c330b6d5$exports = {};

var $lXs3c = parcelRequire("lXs3c");

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

var $03TNp = parcelRequire("03TNp");


var $13zzr = parcelRequire("13zzr");
"use strict";
var $15ed1b998f81fff5$exports = {};
var $15ed1b998f81fff5$var$x = String;
var $15ed1b998f81fff5$var$create = function create() {
    return {
        isColorSupported: false,
        reset: $15ed1b998f81fff5$var$x,
        bold: $15ed1b998f81fff5$var$x,
        dim: $15ed1b998f81fff5$var$x,
        italic: $15ed1b998f81fff5$var$x,
        underline: $15ed1b998f81fff5$var$x,
        inverse: $15ed1b998f81fff5$var$x,
        hidden: $15ed1b998f81fff5$var$x,
        strikethrough: $15ed1b998f81fff5$var$x,
        black: $15ed1b998f81fff5$var$x,
        red: $15ed1b998f81fff5$var$x,
        green: $15ed1b998f81fff5$var$x,
        yellow: $15ed1b998f81fff5$var$x,
        blue: $15ed1b998f81fff5$var$x,
        magenta: $15ed1b998f81fff5$var$x,
        cyan: $15ed1b998f81fff5$var$x,
        white: $15ed1b998f81fff5$var$x,
        gray: $15ed1b998f81fff5$var$x,
        bgBlack: $15ed1b998f81fff5$var$x,
        bgRed: $15ed1b998f81fff5$var$x,
        bgGreen: $15ed1b998f81fff5$var$x,
        bgYellow: $15ed1b998f81fff5$var$x,
        bgBlue: $15ed1b998f81fff5$var$x,
        bgMagenta: $15ed1b998f81fff5$var$x,
        bgCyan: $15ed1b998f81fff5$var$x,
        bgWhite: $15ed1b998f81fff5$var$x,
        blackBright: $15ed1b998f81fff5$var$x,
        redBright: $15ed1b998f81fff5$var$x,
        greenBright: $15ed1b998f81fff5$var$x,
        yellowBright: $15ed1b998f81fff5$var$x,
        blueBright: $15ed1b998f81fff5$var$x,
        magentaBright: $15ed1b998f81fff5$var$x,
        cyanBright: $15ed1b998f81fff5$var$x,
        whiteBright: $15ed1b998f81fff5$var$x,
        bgBlackBright: $15ed1b998f81fff5$var$x,
        bgRedBright: $15ed1b998f81fff5$var$x,
        bgGreenBright: $15ed1b998f81fff5$var$x,
        bgYellowBright: $15ed1b998f81fff5$var$x,
        bgBlueBright: $15ed1b998f81fff5$var$x,
        bgMagentaBright: $15ed1b998f81fff5$var$x,
        bgCyanBright: $15ed1b998f81fff5$var$x,
        bgWhiteBright: $15ed1b998f81fff5$var$x
    };
};
$15ed1b998f81fff5$exports = $15ed1b998f81fff5$var$create();
$15ed1b998f81fff5$exports.createColors = $15ed1b998f81fff5$var$create;



var $69mun = parcelRequire("69mun");
var $f2a489e4c330b6d5$var$CssSyntaxError = /*#__PURE__*/ function(Error1) {
    (0, $03TNp._)(CssSyntaxError, Error1);
    var _super = (0, $13zzr._)(CssSyntaxError);
    function CssSyntaxError(message, line, column, source, file, plugin) {
        (0, $hrxTm._)(this, CssSyntaxError);
        var _this;
        _this = _super.call(this, message);
        _this.name = "CssSyntaxError";
        _this.reason = message;
        if (file) _this.file = file;
        if (source) _this.source = source;
        if (plugin) _this.plugin = plugin;
        if (typeof line !== "undefined" && typeof column !== "undefined") {
            if (typeof line === "number") {
                _this.line = line;
                _this.column = column;
            } else {
                _this.line = line.line;
                _this.column = line.column;
                _this.endLine = column.line;
                _this.endColumn = column.column;
            }
        }
        _this.setMessage();
        if (Error.captureStackTrace) Error.captureStackTrace((0, $lXs3c._)(_this), CssSyntaxError);
        return _this;
    }
    (0, $ggnt0._)(CssSyntaxError, [
        {
            key: "setMessage",
            value: function setMessage() {
                this.message = this.plugin ? this.plugin + ": " : "";
                this.message += this.file ? this.file : "<css input>";
                if (typeof this.line !== "undefined") this.message += ":" + this.line + ":" + this.column;
                this.message += ": " + this.reason;
            }
        },
        {
            key: "showSourceCode",
            value: function showSourceCode(color) {
                var _this = this;
                if (!this.source) return "";
                var css = this.source;
                if (color == null) color = $15ed1b998f81fff5$exports.isColorSupported;
                var aside = function(text) {
                    return text;
                };
                var mark = function(text) {
                    return text;
                };
                var highlight = function(text) {
                    return text;
                };
                if (color) {
                    var _pico_createColors = $15ed1b998f81fff5$exports.createColors(true), bold = _pico_createColors.bold, gray = _pico_createColors.gray, red = _pico_createColors.red;
                    mark = function(text) {
                        return bold(red(text));
                    };
                    aside = function(text) {
                        return gray(text);
                    };
                    if ($69mun) highlight = function(text) {
                        return $69mun(text);
                    };
                }
                var lines = css.split(/\r?\n/);
                var start = Math.max(this.line - 3, 0);
                var end = Math.min(this.line + 2, lines.length);
                var maxWidth = String(end).length;
                return lines.slice(start, end).map(function(line, index) {
                    var number = start + 1 + index;
                    var gutter = " " + (" " + number).slice(-maxWidth) + " | ";
                    if (number === _this.line) {
                        if (line.length > 160) {
                            var padding = 20;
                            var subLineStart = Math.max(0, _this.column - padding);
                            var subLineEnd = Math.max(_this.column + padding, _this.endColumn + padding);
                            var subLine = line.slice(subLineStart, subLineEnd);
                            var spacing = aside(gutter.replace(/\d/g, " ")) + line.slice(0, Math.min(_this.column - 1, padding - 1)).replace(/[^\t]/g, " ");
                            return mark(">") + aside(gutter) + highlight(subLine) + "\n " + spacing + mark("^");
                        }
                        var spacing1 = aside(gutter.replace(/\d/g, " ")) + line.slice(0, _this.column - 1).replace(/[^\t]/g, " ");
                        return mark(">") + aside(gutter) + highlight(line) + "\n " + spacing1 + mark("^");
                    }
                    return " " + aside(gutter) + highlight(line);
                }).join("\n");
            }
        },
        {
            key: "toString",
            value: function toString() {
                var code = this.showSourceCode();
                if (code) code = "\n\n" + code + "\n";
                return this.name + ": " + this.message + code;
            }
        }
    ]);
    return CssSyntaxError;
}((0, $092617bd76dd928a$export$71511d61b312f219)(Error));
$f2a489e4c330b6d5$exports = $f2a489e4c330b6d5$var$CssSyntaxError;
$f2a489e4c330b6d5$var$CssSyntaxError.default = $f2a489e4c330b6d5$var$CssSyntaxError;


var $5454419e2a20d3b9$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");
"use strict";
var $5454419e2a20d3b9$var$DEFAULT_RAW = {
    after: "\n",
    beforeClose: "\n",
    beforeComment: "\n",
    beforeDecl: "\n",
    beforeOpen: " ",
    beforeRule: "\n",
    colon: ": ",
    commentLeft: " ",
    commentRight: " ",
    emptyBody: "",
    indent: "    ",
    semicolon: false
};
function $5454419e2a20d3b9$var$capitalize(str) {
    return str[0].toUpperCase() + str.slice(1);
}
var $5454419e2a20d3b9$var$Stringifier = /*#__PURE__*/ function() {
    function Stringifier(builder) {
        (0, $hrxTm._)(this, Stringifier);
        this.builder = builder;
    }
    (0, $ggnt0._)(Stringifier, [
        {
            key: "atrule",
            value: function atrule(node, semicolon) {
                var name = "@" + node.name;
                var params = node.params ? this.rawValue(node, "params") : "";
                if (typeof node.raws.afterName !== "undefined") name += node.raws.afterName;
                else if (params) name += " ";
                if (node.nodes) this.block(node, name + params);
                else {
                    var end = (node.raws.between || "") + (semicolon ? ";" : "");
                    this.builder(name + params + end, node);
                }
            }
        },
        {
            key: "beforeAfter",
            value: function beforeAfter(node, detect) {
                var value;
                if (node.type === "decl") value = this.raw(node, null, "beforeDecl");
                else if (node.type === "comment") value = this.raw(node, null, "beforeComment");
                else if (detect === "before") value = this.raw(node, null, "beforeRule");
                else value = this.raw(node, null, "beforeClose");
                var buf = node.parent;
                var depth = 0;
                while(buf && buf.type !== "root"){
                    depth += 1;
                    buf = buf.parent;
                }
                if (value.includes("\n")) {
                    var indent = this.raw(node, null, "indent");
                    if (indent.length) for(var step = 0; step < depth; step++)value += indent;
                }
                return value;
            }
        },
        {
            key: "block",
            value: function block(node, start) {
                var between = this.raw(node, "between", "beforeOpen");
                this.builder(start + between + "{", node, "start");
                var after;
                if (node.nodes && node.nodes.length) {
                    this.body(node);
                    after = this.raw(node, "after");
                } else after = this.raw(node, "after", "emptyBody");
                if (after) this.builder(after);
                this.builder("}", node, "end");
            }
        },
        {
            key: "body",
            value: function body(node) {
                var last = node.nodes.length - 1;
                while(last > 0){
                    if (node.nodes[last].type !== "comment") break;
                    last -= 1;
                }
                var semicolon = this.raw(node, "semicolon");
                for(var i = 0; i < node.nodes.length; i++){
                    var child = node.nodes[i];
                    var before = this.raw(child, "before");
                    if (before) this.builder(before);
                    this.stringify(child, last !== i || semicolon);
                }
            }
        },
        {
            key: "comment",
            value: function comment(node) {
                var left = this.raw(node, "left", "commentLeft");
                var right = this.raw(node, "right", "commentRight");
                this.builder("/*" + left + node.text + right + "*/", node);
            }
        },
        {
            key: "decl",
            value: function decl(node, semicolon) {
                var between = this.raw(node, "between", "colon");
                var string = node.prop + between + this.rawValue(node, "value");
                if (node.important) string += node.raws.important || " !important";
                if (semicolon) string += ";";
                this.builder(string, node);
            }
        },
        {
            key: "document",
            value: function document(node) {
                this.body(node);
            }
        },
        {
            key: "raw",
            value: function raw(node, own, detect) {
                var value;
                if (!detect) detect = own;
                // Already had
                if (own) {
                    value = node.raws[own];
                    if (typeof value !== "undefined") return value;
                }
                var parent = node.parent;
                if (detect === "before") {
                    // Hack for first rule in CSS
                    if (!parent || parent.type === "root" && parent.first === node) return "";
                    // `root` nodes in `document` should use only their own raws
                    if (parent && parent.type === "document") return "";
                }
                // Floating child without parent
                if (!parent) return $5454419e2a20d3b9$var$DEFAULT_RAW[detect];
                // Detect style by other nodes
                var root = node.root();
                if (!root.rawCache) root.rawCache = {};
                if (typeof root.rawCache[detect] !== "undefined") return root.rawCache[detect];
                if (detect === "before" || detect === "after") return this.beforeAfter(node, detect);
                else {
                    var method = "raw" + $5454419e2a20d3b9$var$capitalize(detect);
                    if (this[method]) value = this[method](root, node);
                    else root.walk(function(i) {
                        value = i.raws[own];
                        if (typeof value !== "undefined") return false;
                    });
                }
                if (typeof value === "undefined") value = $5454419e2a20d3b9$var$DEFAULT_RAW[detect];
                root.rawCache[detect] = value;
                return value;
            }
        },
        {
            key: "rawBeforeClose",
            value: function rawBeforeClose(root) {
                var value;
                root.walk(function(i) {
                    if (i.nodes && i.nodes.length > 0) {
                        if (typeof i.raws.after !== "undefined") {
                            value = i.raws.after;
                            if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
                            return false;
                        }
                    }
                });
                if (value) value = value.replace(/\S/g, "");
                return value;
            }
        },
        {
            key: "rawBeforeComment",
            value: function rawBeforeComment(root, node) {
                var value;
                root.walkComments(function(i) {
                    if (typeof i.raws.before !== "undefined") {
                        value = i.raws.before;
                        if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
                        return false;
                    }
                });
                if (typeof value === "undefined") value = this.raw(node, null, "beforeDecl");
                else if (value) value = value.replace(/\S/g, "");
                return value;
            }
        },
        {
            key: "rawBeforeDecl",
            value: function rawBeforeDecl(root, node) {
                var value;
                root.walkDecls(function(i) {
                    if (typeof i.raws.before !== "undefined") {
                        value = i.raws.before;
                        if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
                        return false;
                    }
                });
                if (typeof value === "undefined") value = this.raw(node, null, "beforeRule");
                else if (value) value = value.replace(/\S/g, "");
                return value;
            }
        },
        {
            key: "rawBeforeOpen",
            value: function rawBeforeOpen(root) {
                var value;
                root.walk(function(i) {
                    if (i.type !== "decl") {
                        value = i.raws.between;
                        if (typeof value !== "undefined") return false;
                    }
                });
                return value;
            }
        },
        {
            key: "rawBeforeRule",
            value: function rawBeforeRule(root) {
                var value;
                root.walk(function(i) {
                    if (i.nodes && (i.parent !== root || root.first !== i)) {
                        if (typeof i.raws.before !== "undefined") {
                            value = i.raws.before;
                            if (value.includes("\n")) value = value.replace(/[^\n]+$/, "");
                            return false;
                        }
                    }
                });
                if (value) value = value.replace(/\S/g, "");
                return value;
            }
        },
        {
            key: "rawColon",
            value: function rawColon(root) {
                var value;
                root.walkDecls(function(i) {
                    if (typeof i.raws.between !== "undefined") {
                        value = i.raws.between.replace(/[^\s:]/g, "");
                        return false;
                    }
                });
                return value;
            }
        },
        {
            key: "rawEmptyBody",
            value: function rawEmptyBody(root) {
                var value;
                root.walk(function(i) {
                    if (i.nodes && i.nodes.length === 0) {
                        value = i.raws.after;
                        if (typeof value !== "undefined") return false;
                    }
                });
                return value;
            }
        },
        {
            key: "rawIndent",
            value: function rawIndent(root) {
                if (root.raws.indent) return root.raws.indent;
                var value;
                root.walk(function(i) {
                    var p = i.parent;
                    if (p && p !== root && p.parent && p.parent === root) {
                        if (typeof i.raws.before !== "undefined") {
                            var parts = i.raws.before.split("\n");
                            value = parts[parts.length - 1];
                            value = value.replace(/\S/g, "");
                            return false;
                        }
                    }
                });
                return value;
            }
        },
        {
            key: "rawSemicolon",
            value: function rawSemicolon(root) {
                var value;
                root.walk(function(i) {
                    if (i.nodes && i.nodes.length && i.last.type === "decl") {
                        value = i.raws.semicolon;
                        if (typeof value !== "undefined") return false;
                    }
                });
                return value;
            }
        },
        {
            key: "rawValue",
            value: function rawValue(node, prop) {
                var value = node[prop];
                var raw = node.raws[prop];
                if (raw && raw.value === value) return raw.raw;
                return value;
            }
        },
        {
            key: "root",
            value: function root(node) {
                this.body(node);
                if (node.raws.after) this.builder(node.raws.after);
            }
        },
        {
            key: "rule",
            value: function rule(node) {
                this.block(node, this.rawValue(node, "selector"));
                if (node.raws.ownSemicolon) this.builder(node.raws.ownSemicolon, node, "end");
            }
        },
        {
            key: "stringify",
            value: function stringify(node, semicolon) {
                /* c8 ignore start */ if (!this[node.type]) throw new Error("Unknown AST node type " + node.type + ". " + "Maybe you need to change PostCSS stringifier.");
                /* c8 ignore stop */ this[node.type](node, semicolon);
            }
        }
    ]);
    return Stringifier;
}();
$5454419e2a20d3b9$exports = $5454419e2a20d3b9$var$Stringifier;
$5454419e2a20d3b9$var$Stringifier.default = $5454419e2a20d3b9$var$Stringifier;


var $1e5f7b585f537a11$exports = {};
"use strict";

function $1e5f7b585f537a11$var$stringify(node, builder) {
    var str = new $5454419e2a20d3b9$exports(builder);
    str.stringify(node);
}
$1e5f7b585f537a11$exports = $1e5f7b585f537a11$var$stringify;
$1e5f7b585f537a11$var$stringify.default = $1e5f7b585f537a11$var$stringify;


var $148a95f998492e74$export$ae5e7911ce0728f9;
var $148a95f998492e74$export$94fa0a6beb22f989;
"use strict";
$148a95f998492e74$export$ae5e7911ce0728f9 = Symbol("isClean");
$148a95f998492e74$export$94fa0a6beb22f989 = Symbol("my");


var $b8451bfdea497ff3$var$isClean = $148a95f998492e74$export$ae5e7911ce0728f9, $b8451bfdea497ff3$var$my = $148a95f998492e74$export$94fa0a6beb22f989;
function $b8451bfdea497ff3$var$cloneNode(obj, parent) {
    var cloned = new obj.constructor();
    for(var i in obj){
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        if (i === "proxyCache") continue;
        var value = obj[i];
        var type = typeof value === "undefined" ? "undefined" : (0, $aDbZK._)(value);
        if (i === "parent" && type === "object") {
            if (parent) cloned[i] = parent;
        } else if (i === "source") cloned[i] = value;
        else if (Array.isArray(value)) cloned[i] = value.map(function(j) {
            return $b8451bfdea497ff3$var$cloneNode(j, cloned);
        });
        else {
            if (type === "object" && value !== null) value = $b8451bfdea497ff3$var$cloneNode(value);
            cloned[i] = value;
        }
    }
    return cloned;
}
var $b8451bfdea497ff3$var$Node = /*#__PURE__*/ function() {
    function Node() {
        var defaults = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        (0, $hrxTm._)(this, Node);
        this.raws = {};
        this[$b8451bfdea497ff3$var$isClean] = false;
        this[$b8451bfdea497ff3$var$my] = true;
        for(var name in defaults)if (name === "nodes") {
            this.nodes = [];
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = defaults[name][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var node = _step.value;
                    if (typeof node.clone === "function") this.append(node.clone());
                    else this.append(node);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        } else this[name] = defaults[name];
    }
    (0, $ggnt0._)(Node, [
        {
            key: "addToError",
            value: function addToError(error) {
                error.postcssNode = this;
                if (error.stack && this.source && /\n\s{4}at /.test(error.stack)) {
                    var s = this.source;
                    error.stack = error.stack.replace(/\n\s{4}at /, "$&".concat(s.input.from, ":").concat(s.start.line, ":").concat(s.start.column, "$&"));
                }
                return error;
            }
        },
        {
            key: "after",
            value: function after(add) {
                this.parent.insertAfter(this, add);
                return this;
            }
        },
        {
            key: "assign",
            value: function assign() {
                var overrides = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                for(var name in overrides)this[name] = overrides[name];
                return this;
            }
        },
        {
            key: "before",
            value: function before(add) {
                this.parent.insertBefore(this, add);
                return this;
            }
        },
        {
            key: "cleanRaws",
            value: function cleanRaws(keepBetween) {
                delete this.raws.before;
                delete this.raws.after;
                if (!keepBetween) delete this.raws.between;
            }
        },
        {
            key: "clone",
            value: function clone() {
                var overrides = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                var cloned = $b8451bfdea497ff3$var$cloneNode(this);
                for(var name in overrides)cloned[name] = overrides[name];
                return cloned;
            }
        },
        {
            key: "cloneAfter",
            value: function cloneAfter() {
                var overrides = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                var cloned = this.clone(overrides);
                this.parent.insertAfter(this, cloned);
                return cloned;
            }
        },
        {
            key: "cloneBefore",
            value: function cloneBefore() {
                var overrides = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                var cloned = this.clone(overrides);
                this.parent.insertBefore(this, cloned);
                return cloned;
            }
        },
        {
            key: "error",
            value: function error(message) {
                var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                if (this.source) {
                    var _this_rangeBy = this.rangeBy(opts), end = _this_rangeBy.end, start = _this_rangeBy.start;
                    return this.source.input.error(message, {
                        column: start.column,
                        line: start.line
                    }, {
                        column: end.column,
                        line: end.line
                    }, opts);
                }
                return new $f2a489e4c330b6d5$exports(message);
            }
        },
        {
            key: "getProxyProcessor",
            value: function getProxyProcessor() {
                return {
                    get: function(node, prop) {
                        if (prop === "proxyOf") return node;
                        else if (prop === "root") return function() {
                            return node.root().toProxy();
                        };
                        else return node[prop];
                    },
                    set: function(node, prop, value) {
                        if (node[prop] === value) return true;
                        node[prop] = value;
                        if (prop === "prop" || prop === "value" || prop === "name" || prop === "params" || prop === "important" || /* c8 ignore next */ prop === "text") node.markDirty();
                        return true;
                    }
                };
            }
        },
        {
            /* c8 ignore next 3 */ key: "markClean",
            value: function markClean() {
                this[$b8451bfdea497ff3$var$isClean] = true;
            }
        },
        {
            key: "markDirty",
            value: function markDirty() {
                if (this[$b8451bfdea497ff3$var$isClean]) {
                    this[$b8451bfdea497ff3$var$isClean] = false;
                    var next = this;
                    while(next = next.parent)next[$b8451bfdea497ff3$var$isClean] = false;
                }
            }
        },
        {
            key: "next",
            value: function next() {
                if (!this.parent) return undefined;
                var index = this.parent.index(this);
                return this.parent.nodes[index + 1];
            }
        },
        {
            key: "positionBy",
            value: function positionBy(opts, stringRepresentation) {
                var pos = this.source.start;
                if (opts.index) pos = this.positionInside(opts.index, stringRepresentation);
                else if (opts.word) {
                    stringRepresentation = this.toString();
                    var index = stringRepresentation.indexOf(opts.word);
                    if (index !== -1) pos = this.positionInside(index, stringRepresentation);
                }
                return pos;
            }
        },
        {
            key: "positionInside",
            value: function positionInside(index, stringRepresentation) {
                var string = stringRepresentation || this.toString();
                var column = this.source.start.column;
                var line = this.source.start.line;
                for(var i = 0; i < index; i++)if (string[i] === "\n") {
                    column = 1;
                    line += 1;
                } else column += 1;
                return {
                    column: column,
                    line: line
                };
            }
        },
        {
            key: "prev",
            value: function prev() {
                if (!this.parent) return undefined;
                var index = this.parent.index(this);
                return this.parent.nodes[index - 1];
            }
        },
        {
            key: "rangeBy",
            value: function rangeBy(opts) {
                var start = {
                    column: this.source.start.column,
                    line: this.source.start.line
                };
                var end = this.source.end ? {
                    column: this.source.end.column + 1,
                    line: this.source.end.line
                } : {
                    column: start.column + 1,
                    line: start.line
                };
                if (opts.word) {
                    var stringRepresentation = this.toString();
                    var index = stringRepresentation.indexOf(opts.word);
                    if (index !== -1) {
                        start = this.positionInside(index, stringRepresentation);
                        end = this.positionInside(index + opts.word.length, stringRepresentation);
                    }
                } else {
                    if (opts.start) start = {
                        column: opts.start.column,
                        line: opts.start.line
                    };
                    else if (opts.index) start = this.positionInside(opts.index);
                    if (opts.end) end = {
                        column: opts.end.column,
                        line: opts.end.line
                    };
                    else if (typeof opts.endIndex === "number") end = this.positionInside(opts.endIndex);
                    else if (opts.index) end = this.positionInside(opts.index + 1);
                }
                if (end.line < start.line || end.line === start.line && end.column <= start.column) end = {
                    column: start.column + 1,
                    line: start.line
                };
                return {
                    end: end,
                    start: start
                };
            }
        },
        {
            key: "raw",
            value: function raw(prop, defaultType) {
                var str = new $5454419e2a20d3b9$exports();
                return str.raw(this, prop, defaultType);
            }
        },
        {
            key: "remove",
            value: function remove() {
                if (this.parent) this.parent.removeChild(this);
                this.parent = undefined;
                return this;
            }
        },
        {
            key: "replaceWith",
            value: function replaceWith() {
                for(var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++){
                    nodes[_key] = arguments[_key];
                }
                if (this.parent) {
                    var bookmark = this;
                    var foundSelf = false;
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var node = _step.value;
                            if (node === this) foundSelf = true;
                            else if (foundSelf) {
                                this.parent.insertAfter(bookmark, node);
                                bookmark = node;
                            } else this.parent.insertBefore(bookmark, node);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    if (!foundSelf) this.remove();
                }
                return this;
            }
        },
        {
            key: "root",
            value: function root() {
                var result = this;
                while(result.parent && result.parent.type !== "document")result = result.parent;
                return result;
            }
        },
        {
            key: "toJSON",
            value: function toJSON(_, inputs) {
                var fixed = {};
                var emitInputs = inputs == null;
                inputs = inputs || new Map();
                var inputsNextIndex = 0;
                for(var name in this){
                    if (!Object.prototype.hasOwnProperty.call(this, name)) continue;
                    if (name === "parent" || name === "proxyCache") continue;
                    var value = this[name];
                    if (Array.isArray(value)) fixed[name] = value.map(function(i) {
                        if (typeof i === "object" && i.toJSON) return i.toJSON(null, inputs);
                        else return i;
                    });
                    else if (typeof value === "object" && value.toJSON) fixed[name] = value.toJSON(null, inputs);
                    else if (name === "source") {
                        var inputId = inputs.get(value.input);
                        if (inputId == null) {
                            inputId = inputsNextIndex;
                            inputs.set(value.input, inputsNextIndex);
                            inputsNextIndex++;
                        }
                        fixed[name] = {
                            end: value.end,
                            inputId: inputId,
                            start: value.start
                        };
                    } else fixed[name] = value;
                }
                if (emitInputs) fixed.inputs = (0, $bff51d46f29b3217$export$71511d61b312f219)(inputs.keys()).map(function(input) {
                    return input.toJSON();
                });
                return fixed;
            }
        },
        {
            key: "toProxy",
            value: function toProxy() {
                if (!this.proxyCache) this.proxyCache = new Proxy(this, this.getProxyProcessor());
                return this.proxyCache;
            }
        },
        {
            key: "toString",
            value: function toString() {
                var stringifier = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : $1e5f7b585f537a11$exports;
                if (stringifier.stringify) stringifier = stringifier.stringify;
                var result = "";
                stringifier(this, function(i) {
                    result += i;
                });
                return result;
            }
        },
        {
            key: "warn",
            value: function warn(result, text, opts) {
                var data = {
                    node: this
                };
                for(var i in opts)data[i] = opts[i];
                return result.warn(text, data);
            }
        },
        {
            key: "proxyOf",
            get: function get() {
                return this;
            }
        }
    ]);
    return Node;
}();
$b8451bfdea497ff3$exports = $b8451bfdea497ff3$var$Node;
$b8451bfdea497ff3$var$Node.default = $b8451bfdea497ff3$var$Node;


var $4ffe0aecb4f3941f$var$Comment = /*#__PURE__*/ function(Node) {
    (0, $03TNp._)(Comment, Node);
    var _super = (0, $13zzr._)(Comment);
    function Comment(defaults) {
        (0, $hrxTm._)(this, Comment);
        var _this;
        _this = _super.call(this, defaults);
        _this.type = "comment";
        return _this;
    }
    return Comment;
}((0, $092617bd76dd928a$export$71511d61b312f219)($b8451bfdea497ff3$exports));
$4ffe0aecb4f3941f$exports = $4ffe0aecb4f3941f$var$Comment;
$4ffe0aecb4f3941f$var$Comment.default = $4ffe0aecb4f3941f$var$Comment;


var $3cdf0ec7053e5217$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

var $03TNp = parcelRequire("03TNp");




var $13zzr = parcelRequire("13zzr");
"use strict";

var $3cdf0ec7053e5217$var$Declaration = /*#__PURE__*/ function(Node) {
    (0, $03TNp._)(Declaration, Node);
    var _super = (0, $13zzr._)(Declaration);
    function Declaration(defaults) {
        (0, $hrxTm._)(this, Declaration);
        var _this;
        if (defaults && typeof defaults.value !== "undefined" && typeof defaults.value !== "string") defaults = (0, $09f2b5c72ab52c9f$export$71511d61b312f219)((0, $1b4e013f19afac76$export$71511d61b312f219)({}, defaults), {
            value: String(defaults.value)
        });
        _this = _super.call(this, defaults);
        _this.type = "decl";
        return _this;
    }
    (0, $ggnt0._)(Declaration, [
        {
            key: "variable",
            get: function get() {
                return this.prop.startsWith("--") || this.prop[0] === "$";
            }
        }
    ]);
    return Declaration;
}((0, $092617bd76dd928a$export$71511d61b312f219)($b8451bfdea497ff3$exports));
$3cdf0ec7053e5217$exports = $3cdf0ec7053e5217$var$Declaration;
$3cdf0ec7053e5217$var$Declaration.default = $3cdf0ec7053e5217$var$Declaration;




var $9612b3c428fe3fd1$var$isClean = $148a95f998492e74$export$ae5e7911ce0728f9, $9612b3c428fe3fd1$var$my = $148a95f998492e74$export$94fa0a6beb22f989;
var $9612b3c428fe3fd1$var$AtRule, $9612b3c428fe3fd1$var$parse, $9612b3c428fe3fd1$var$Root, $9612b3c428fe3fd1$var$Rule;
function $9612b3c428fe3fd1$var$cleanSource(nodes) {
    return nodes.map(function(i) {
        if (i.nodes) i.nodes = $9612b3c428fe3fd1$var$cleanSource(i.nodes);
        delete i.source;
        return i;
    });
}
function $9612b3c428fe3fd1$var$markTreeDirty(node) {
    node[$9612b3c428fe3fd1$var$isClean] = false;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    if (node.proxyOf.nodes) try {
        for(var _iterator = node.proxyOf.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var i = _step.value;
            $9612b3c428fe3fd1$var$markTreeDirty(i);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
var $9612b3c428fe3fd1$var$Container = /*#__PURE__*/ function(Node) {
    (0, $03TNp._)(Container, Node);
    var _super = (0, $13zzr._)(Container);
    function Container() {
        (0, $hrxTm._)(this, Container);
        return _super.apply(this, arguments);
    }
    (0, $ggnt0._)(Container, [
        {
            key: "append",
            value: function append() {
                for(var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++){
                    children[_key] = arguments[_key];
                }
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var child = _step.value;
                        var nodes = this.normalize(child, this.last);
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = nodes[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var node = _step1.value;
                                this.proxyOf.nodes.push(node);
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this.markDirty();
                return this;
            }
        },
        {
            key: "cleanRaws",
            value: function cleanRaws(keepBetween) {
                (0, $c467556ee846b44e$export$71511d61b312f219)((0, $hRvs7._)(Container.prototype), "cleanRaws", this).call(this, keepBetween);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                if (this.nodes) try {
                    for(var _iterator = this.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var node = _step.value;
                        node.cleanRaws(keepBetween);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "each",
            value: function each(callback) {
                if (!this.proxyOf.nodes) return undefined;
                var iterator = this.getIterator();
                var index, result;
                while(this.indexes[iterator] < this.proxyOf.nodes.length){
                    index = this.indexes[iterator];
                    result = callback(this.proxyOf.nodes[index], index);
                    if (result === false) break;
                    this.indexes[iterator] += 1;
                }
                delete this.indexes[iterator];
                return result;
            }
        },
        {
            key: "every",
            value: function every(condition) {
                return this.nodes.every(condition);
            }
        },
        {
            key: "getIterator",
            value: function getIterator() {
                if (!this.lastEach) this.lastEach = 0;
                if (!this.indexes) this.indexes = {};
                this.lastEach += 1;
                var iterator = this.lastEach;
                this.indexes[iterator] = 0;
                return iterator;
            }
        },
        {
            key: "getProxyProcessor",
            value: function getProxyProcessor() {
                return {
                    get: function(node, prop) {
                        if (prop === "proxyOf") return node;
                        else if (!node[prop]) return node[prop];
                        else if (prop === "each" || typeof prop === "string" && prop.startsWith("walk")) return function() {
                            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                args[_key] = arguments[_key];
                            }
                            var _node;
                            return (_node = node)[prop].apply(_node, (0, $bff51d46f29b3217$export$71511d61b312f219)(args.map(function(i) {
                                if (typeof i === "function") return function(child, index) {
                                    return i(child.toProxy(), index);
                                };
                                else return i;
                            })));
                        };
                        else if (prop === "every" || prop === "some") return function(cb) {
                            return node[prop](function(child) {
                                for(var _len = arguments.length, other = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                                    other[_key - 1] = arguments[_key];
                                }
                                return cb.apply(void 0, [
                                    child.toProxy()
                                ].concat((0, $bff51d46f29b3217$export$71511d61b312f219)(other)));
                            });
                        };
                        else if (prop === "root") return function() {
                            return node.root().toProxy();
                        };
                        else if (prop === "nodes") return node.nodes.map(function(i) {
                            return i.toProxy();
                        });
                        else if (prop === "first" || prop === "last") return node[prop].toProxy();
                        else return node[prop];
                    },
                    set: function(node, prop, value) {
                        if (node[prop] === value) return true;
                        node[prop] = value;
                        if (prop === "name" || prop === "params" || prop === "selector") node.markDirty();
                        return true;
                    }
                };
            }
        },
        {
            key: "index",
            value: function index(child) {
                if (typeof child === "number") return child;
                if (child.proxyOf) child = child.proxyOf;
                return this.proxyOf.nodes.indexOf(child);
            }
        },
        {
            key: "insertAfter",
            value: function insertAfter(exist, add) {
                var existIndex = this.index(exist);
                var nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();
                existIndex = this.index(exist);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var node = _step.value;
                        this.proxyOf.nodes.splice(existIndex + 1, 0, node);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var index;
                for(var id in this.indexes){
                    index = this.indexes[id];
                    if (existIndex < index) this.indexes[id] = index + nodes.length;
                }
                this.markDirty();
                return this;
            }
        },
        {
            key: "insertBefore",
            value: function insertBefore(exist, add) {
                var existIndex = this.index(exist);
                var type = existIndex === 0 ? "prepend" : false;
                var nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();
                existIndex = this.index(exist);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var node = _step.value;
                        this.proxyOf.nodes.splice(existIndex, 0, node);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                var index;
                for(var id in this.indexes){
                    index = this.indexes[id];
                    if (existIndex <= index) this.indexes[id] = index + nodes.length;
                }
                this.markDirty();
                return this;
            }
        },
        {
            key: "normalize",
            value: function normalize(nodes, sample) {
                var _this = this;
                if (typeof nodes === "string") nodes = $9612b3c428fe3fd1$var$cleanSource($9612b3c428fe3fd1$var$parse(nodes).nodes);
                else if (typeof nodes === "undefined") nodes = [];
                else if (Array.isArray(nodes)) {
                    nodes = nodes.slice(0);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var i = _step.value;
                            if (i.parent) i.parent.removeChild(i, "ignore");
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                } else if (nodes.type === "root" && this.type !== "document") {
                    nodes = nodes.nodes.slice(0);
                    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    try {
                        for(var _iterator1 = nodes[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                            var i1 = _step1.value;
                            if (i1.parent) i1.parent.removeChild(i1, "ignore");
                        }
                    } catch (err) {
                        _didIteratorError1 = true;
                        _iteratorError1 = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                _iterator1.return();
                            }
                        } finally{
                            if (_didIteratorError1) {
                                throw _iteratorError1;
                            }
                        }
                    }
                } else if (nodes.type) nodes = [
                    nodes
                ];
                else if (nodes.prop) {
                    if (typeof nodes.value === "undefined") throw new Error("Value field is missed in node creation");
                    else if (typeof nodes.value !== "string") nodes.value = String(nodes.value);
                    nodes = [
                        new $3cdf0ec7053e5217$exports(nodes)
                    ];
                } else if (nodes.selector || nodes.selectors) nodes = [
                    new $9612b3c428fe3fd1$var$Rule(nodes)
                ];
                else if (nodes.name) nodes = [
                    new $9612b3c428fe3fd1$var$AtRule(nodes)
                ];
                else if (nodes.text) nodes = [
                    new $4ffe0aecb4f3941f$exports(nodes)
                ];
                else throw new Error("Unknown node type in node creation");
                var processed = nodes.map(function(i) {
                    /* c8 ignore next */ if (!i[$9612b3c428fe3fd1$var$my]) Container.rebuild(i);
                    i = i.proxyOf;
                    if (i.parent) i.parent.removeChild(i);
                    if (i[$9612b3c428fe3fd1$var$isClean]) $9612b3c428fe3fd1$var$markTreeDirty(i);
                    if (typeof i.raws.before === "undefined") {
                        if (sample && typeof sample.raws.before !== "undefined") i.raws.before = sample.raws.before.replace(/\S/g, "");
                    }
                    i.parent = _this.proxyOf;
                    return i;
                });
                return processed;
            }
        },
        {
            key: "prepend",
            value: function prepend() {
                for(var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++){
                    children[_key] = arguments[_key];
                }
                children = children.reverse();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var child = _step.value;
                        var nodes = this.normalize(child, this.first, "prepend").reverse();
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        try {
                            for(var _iterator1 = nodes[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var node = _step1.value;
                                this.proxyOf.nodes.unshift(node);
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                        for(var id in this.indexes)this.indexes[id] = this.indexes[id] + nodes.length;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this.markDirty();
                return this;
            }
        },
        {
            key: "push",
            value: function push(child) {
                child.parent = this;
                this.proxyOf.nodes.push(child);
                return this;
            }
        },
        {
            key: "removeAll",
            value: function removeAll() {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.proxyOf.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var node = _step.value;
                        node.parent = undefined;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this.proxyOf.nodes = [];
                this.markDirty();
                return this;
            }
        },
        {
            key: "removeChild",
            value: function removeChild(child) {
                child = this.index(child);
                this.proxyOf.nodes[child].parent = undefined;
                this.proxyOf.nodes.splice(child, 1);
                var index;
                for(var id in this.indexes){
                    index = this.indexes[id];
                    if (index >= child) this.indexes[id] = index - 1;
                }
                this.markDirty();
                return this;
            }
        },
        {
            key: "replaceValues",
            value: function replaceValues(pattern, opts, callback) {
                if (!callback) {
                    callback = opts;
                    opts = {};
                }
                this.walkDecls(function(decl) {
                    if (opts.props && !opts.props.includes(decl.prop)) return;
                    if (opts.fast && !decl.value.includes(opts.fast)) return;
                    decl.value = decl.value.replace(pattern, callback);
                });
                this.markDirty();
                return this;
            }
        },
        {
            key: "some",
            value: function some(condition) {
                return this.nodes.some(condition);
            }
        },
        {
            key: "walk",
            value: function walk(callback) {
                return this.each(function(child, i) {
                    var result;
                    try {
                        result = callback(child, i);
                    } catch (e) {
                        throw child.addToError(e);
                    }
                    if (result !== false && child.walk) result = child.walk(callback);
                    return result;
                });
            }
        },
        {
            key: "walkAtRules",
            value: function walkAtRules(name, callback) {
                if (!callback) {
                    callback = name;
                    return this.walk(function(child, i) {
                        if (child.type === "atrule") return callback(child, i);
                    });
                }
                if (name instanceof RegExp) return this.walk(function(child, i) {
                    if (child.type === "atrule" && name.test(child.name)) return callback(child, i);
                });
                return this.walk(function(child, i) {
                    if (child.type === "atrule" && child.name === name) return callback(child, i);
                });
            }
        },
        {
            key: "walkComments",
            value: function walkComments(callback) {
                return this.walk(function(child, i) {
                    if (child.type === "comment") return callback(child, i);
                });
            }
        },
        {
            key: "walkDecls",
            value: function walkDecls(prop, callback) {
                if (!callback) {
                    callback = prop;
                    return this.walk(function(child, i) {
                        if (child.type === "decl") return callback(child, i);
                    });
                }
                if (prop instanceof RegExp) return this.walk(function(child, i) {
                    if (child.type === "decl" && prop.test(child.prop)) return callback(child, i);
                });
                return this.walk(function(child, i) {
                    if (child.type === "decl" && child.prop === prop) return callback(child, i);
                });
            }
        },
        {
            key: "walkRules",
            value: function walkRules(selector, callback) {
                if (!callback) {
                    callback = selector;
                    return this.walk(function(child, i) {
                        if (child.type === "rule") return callback(child, i);
                    });
                }
                if (selector instanceof RegExp) return this.walk(function(child, i) {
                    if (child.type === "rule" && selector.test(child.selector)) return callback(child, i);
                });
                return this.walk(function(child, i) {
                    if (child.type === "rule" && child.selector === selector) return callback(child, i);
                });
            }
        },
        {
            key: "first",
            get: function get() {
                if (!this.proxyOf.nodes) return undefined;
                return this.proxyOf.nodes[0];
            }
        },
        {
            key: "last",
            get: function get() {
                if (!this.proxyOf.nodes) return undefined;
                return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
            }
        }
    ]);
    return Container;
}((0, $092617bd76dd928a$export$71511d61b312f219)($b8451bfdea497ff3$exports));
$9612b3c428fe3fd1$var$Container.registerParse = function(dependant) {
    $9612b3c428fe3fd1$var$parse = dependant;
};
$9612b3c428fe3fd1$var$Container.registerRule = function(dependant) {
    $9612b3c428fe3fd1$var$Rule = dependant;
};
$9612b3c428fe3fd1$var$Container.registerAtRule = function(dependant) {
    $9612b3c428fe3fd1$var$AtRule = dependant;
};
$9612b3c428fe3fd1$var$Container.registerRoot = function(dependant) {
    $9612b3c428fe3fd1$var$Root = dependant;
};
$9612b3c428fe3fd1$exports = $9612b3c428fe3fd1$var$Container;
$9612b3c428fe3fd1$var$Container.default = $9612b3c428fe3fd1$var$Container;
/* c8 ignore start */ $9612b3c428fe3fd1$var$Container.rebuild = function(node) {
    if (node.type === "atrule") Object.setPrototypeOf(node, $9612b3c428fe3fd1$var$AtRule.prototype);
    else if (node.type === "rule") Object.setPrototypeOf(node, $9612b3c428fe3fd1$var$Rule.prototype);
    else if (node.type === "decl") Object.setPrototypeOf(node, $3cdf0ec7053e5217$exports.prototype);
    else if (node.type === "comment") Object.setPrototypeOf(node, $4ffe0aecb4f3941f$exports.prototype);
    else if (node.type === "root") Object.setPrototypeOf(node, $9612b3c428fe3fd1$var$Root.prototype);
    node[$9612b3c428fe3fd1$var$my] = true;
    if (node.nodes) node.nodes.forEach(function(child) {
        $9612b3c428fe3fd1$var$Container.rebuild(child);
    });
} /* c8 ignore stop */ ;


var $9918148dc58deaa7$var$AtRule = /*#__PURE__*/ function(Container) {
    (0, $03TNp._)(AtRule, Container);
    var _super = (0, $13zzr._)(AtRule);
    function AtRule(defaults) {
        (0, $hrxTm._)(this, AtRule);
        var _this;
        _this = _super.call(this, defaults);
        _this.type = "atrule";
        return _this;
    }
    (0, $ggnt0._)(AtRule, [
        {
            key: "append",
            value: function append() {
                for(var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++){
                    children[_key] = arguments[_key];
                }
                var _$_get;
                if (!this.proxyOf.nodes) this.nodes = [];
                return (_$_get = (0, $c467556ee846b44e$export$71511d61b312f219)((0, $hRvs7._)(AtRule.prototype), "append", this)).call.apply(_$_get, [
                    this
                ].concat((0, $bff51d46f29b3217$export$71511d61b312f219)(children)));
            }
        },
        {
            key: "prepend",
            value: function prepend() {
                for(var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++){
                    children[_key] = arguments[_key];
                }
                var _$_get;
                if (!this.proxyOf.nodes) this.nodes = [];
                return (_$_get = (0, $c467556ee846b44e$export$71511d61b312f219)((0, $hRvs7._)(AtRule.prototype), "prepend", this)).call.apply(_$_get, [
                    this
                ].concat((0, $bff51d46f29b3217$export$71511d61b312f219)(children)));
            }
        }
    ]);
    return AtRule;
}($9612b3c428fe3fd1$exports);
$9918148dc58deaa7$exports = $9918148dc58deaa7$var$AtRule;
$9918148dc58deaa7$var$AtRule.default = $9918148dc58deaa7$var$AtRule;
$9612b3c428fe3fd1$exports.registerAtRule($9918148dc58deaa7$var$AtRule);






var $52805d6bcc4a4a81$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

var $03TNp = parcelRequire("03TNp");


var $13zzr = parcelRequire("13zzr");
"use strict";

var $52805d6bcc4a4a81$var$LazyResult, $52805d6bcc4a4a81$var$Processor;
var $52805d6bcc4a4a81$var$Document = /*#__PURE__*/ function(Container) {
    (0, $03TNp._)(Document, Container);
    var _super = (0, $13zzr._)(Document);
    function Document(defaults) {
        (0, $hrxTm._)(this, Document);
        var _this;
        // type needs to be passed to super, otherwise child roots won't be normalized correctly
        _this = _super.call(this, (0, $1b4e013f19afac76$export$71511d61b312f219)({
            type: "document"
        }, defaults));
        if (!_this.nodes) _this.nodes = [];
        return _this;
    }
    (0, $ggnt0._)(Document, [
        {
            key: "toResult",
            value: function toResult() {
                var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                var lazy = new $52805d6bcc4a4a81$var$LazyResult(new $52805d6bcc4a4a81$var$Processor(), this, opts);
                return lazy.stringify();
            }
        }
    ]);
    return Document;
}($9612b3c428fe3fd1$exports);
$52805d6bcc4a4a81$var$Document.registerLazyResult = function(dependant) {
    $52805d6bcc4a4a81$var$LazyResult = dependant;
};
$52805d6bcc4a4a81$var$Document.registerProcessor = function(dependant) {
    $52805d6bcc4a4a81$var$Processor = dependant;
};
$52805d6bcc4a4a81$exports = $52805d6bcc4a4a81$var$Document;
$52805d6bcc4a4a81$var$Document.default = $52805d6bcc4a4a81$var$Document;


var $6da1ad5aee998559$exports = {};


function $816e4a0645cac5ac$export$71511d61b312f219(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}


function $e40ffa2c546aa1a6$export$71511d61b312f219(source, excluded) {
    if (source == null) return {};
    var target = (0, $816e4a0645cac5ac$export$71511d61b312f219)(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}


"use strict";



var $93fb52c13f252725$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

"use strict";
var $72c7826e3e81173e$var$urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
var $72c7826e3e81173e$export$62e99e5c9f473d7f = function(alphabet) {
    var defaultSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 21;
    return function() {
        var size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultSize;
        var id = "";
        var i = size;
        while(i--)id += alphabet[Math.random() * alphabet.length | 0];
        return id;
    };
};
var $72c7826e3e81173e$export$ac4959f4f1338dfc = function() {
    var size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 21;
    var id = "";
    var i = size;
    while(i--)id += $72c7826e3e81173e$var$urlAlphabet[Math.random() * 64 | 0];
    return id;
};


var $93fb52c13f252725$require$nanoid = $72c7826e3e81173e$export$ac4959f4f1338dfc;

var $69mun = parcelRequire("69mun");
var $93fb52c13f252725$var$isAbsolute = $69mun.isAbsolute, $93fb52c13f252725$var$resolve = $69mun.resolve;

var $69mun = parcelRequire("69mun");
var $93fb52c13f252725$var$SourceMapConsumer = $69mun.SourceMapConsumer, $93fb52c13f252725$var$SourceMapGenerator = $69mun.SourceMapGenerator;

var $69mun = parcelRequire("69mun");
var $93fb52c13f252725$var$fileURLToPath = $69mun.fileURLToPath, $93fb52c13f252725$var$pathToFileURL = $69mun.pathToFileURL;

var $db4d8a094343cc7c$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

var $d6N7B = parcelRequire("d6N7B");
var $db4d8a094343cc7c$require$Buffer = $d6N7B.Buffer;
"use strict";

var $69mun = parcelRequire("69mun");
var $db4d8a094343cc7c$var$existsSync = $69mun.existsSync, $db4d8a094343cc7c$var$readFileSync = $69mun.readFileSync;

var $69mun = parcelRequire("69mun");
var $db4d8a094343cc7c$var$dirname = $69mun.dirname, $db4d8a094343cc7c$var$join = $69mun.join;

var $69mun = parcelRequire("69mun");
var $db4d8a094343cc7c$var$SourceMapConsumer = $69mun.SourceMapConsumer, $db4d8a094343cc7c$var$SourceMapGenerator = $69mun.SourceMapGenerator;
function $db4d8a094343cc7c$var$fromBase64(str) {
    if ($db4d8a094343cc7c$require$Buffer) return $db4d8a094343cc7c$require$Buffer.from(str, "base64").toString();
    else /* c8 ignore next 2 */ return window.atob(str);
}
var $db4d8a094343cc7c$var$PreviousMap = /*#__PURE__*/ function() {
    "use strict";
    function PreviousMap(css, opts) {
        (0, $hrxTm._)(this, PreviousMap);
        if (opts.map === false) return;
        this.loadAnnotation(css);
        this.inline = this.startWith(this.annotation, "data:");
        var prev = opts.map ? opts.map.prev : undefined;
        var text = this.loadMap(opts.from, prev);
        if (!this.mapFile && opts.from) this.mapFile = opts.from;
        if (this.mapFile) this.root = $db4d8a094343cc7c$var$dirname(this.mapFile);
        if (text) this.text = text;
    }
    (0, $ggnt0._)(PreviousMap, [
        {
            key: "consumer",
            value: function consumer() {
                if (!this.consumerCache) this.consumerCache = new $db4d8a094343cc7c$var$SourceMapConsumer(this.text);
                return this.consumerCache;
            }
        },
        {
            key: "decodeInline",
            value: function decodeInline(text) {
                var baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
                var baseUri = /^data:application\/json;base64,/;
                var charsetUri = /^data:application\/json;charset=utf-?8,/;
                var uri = /^data:application\/json,/;
                var uriMatch = text.match(charsetUri) || text.match(uri);
                if (uriMatch) return decodeURIComponent(text.substr(uriMatch[0].length));
                var baseUriMatch = text.match(baseCharsetUri) || text.match(baseUri);
                if (baseUriMatch) return $db4d8a094343cc7c$var$fromBase64(text.substr(baseUriMatch[0].length));
                var encoding = text.match(/data:application\/json;([^,]+),/)[1];
                throw new Error("Unsupported source map encoding " + encoding);
            }
        },
        {
            key: "getAnnotationURL",
            value: function getAnnotationURL(sourceMapString) {
                return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, "").trim();
            }
        },
        {
            key: "isMap",
            value: function isMap(map) {
                if (typeof map !== "object") return false;
                return typeof map.mappings === "string" || typeof map._mappings === "string" || Array.isArray(map.sections);
            }
        },
        {
            key: "loadAnnotation",
            value: function loadAnnotation(css) {
                var comments = css.match(/\/\*\s*# sourceMappingURL=/g);
                if (!comments) return;
                // sourceMappingURLs from comments, strings, etc.
                var start = css.lastIndexOf(comments.pop());
                var end = css.indexOf("*/", start);
                if (start > -1 && end > -1) // Locate the last sourceMappingURL to avoid pickin
                this.annotation = this.getAnnotationURL(css.substring(start, end));
            }
        },
        {
            key: "loadFile",
            value: function loadFile(path) {
                this.root = $db4d8a094343cc7c$var$dirname(path);
                if ($db4d8a094343cc7c$var$existsSync(path)) {
                    this.mapFile = path;
                    return $db4d8a094343cc7c$var$readFileSync(path, "utf-8").toString().trim();
                }
            }
        },
        {
            key: "loadMap",
            value: function loadMap(file, prev) {
                if (prev === false) return false;
                if (prev) {
                    if (typeof prev === "string") return prev;
                    else if (typeof prev === "function") {
                        var prevPath = prev(file);
                        if (prevPath) {
                            var map = this.loadFile(prevPath);
                            if (!map) throw new Error("Unable to load previous source map: " + prevPath.toString());
                            return map;
                        }
                    } else if (prev instanceof $db4d8a094343cc7c$var$SourceMapConsumer) return $db4d8a094343cc7c$var$SourceMapGenerator.fromSourceMap(prev).toString();
                    else if (prev instanceof $db4d8a094343cc7c$var$SourceMapGenerator) return prev.toString();
                    else if (this.isMap(prev)) return JSON.stringify(prev);
                    else throw new Error("Unsupported previous source map format: " + prev.toString());
                } else if (this.inline) return this.decodeInline(this.annotation);
                else if (this.annotation) {
                    var map1 = this.annotation;
                    if (file) map1 = $db4d8a094343cc7c$var$join($db4d8a094343cc7c$var$dirname(file), map1);
                    return this.loadFile(map1);
                }
            }
        },
        {
            key: "startWith",
            value: function startWith(string, start) {
                if (!string) return false;
                return string.substr(0, start.length) === start;
            }
        },
        {
            key: "withContent",
            value: function withContent() {
                return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
            }
        }
    ]);
    return PreviousMap;
}();
$db4d8a094343cc7c$exports = $db4d8a094343cc7c$var$PreviousMap;
$db4d8a094343cc7c$var$PreviousMap.default = $db4d8a094343cc7c$var$PreviousMap;



var $69mun = parcelRequire("69mun");
var $93fb52c13f252725$var$fromOffsetCache = Symbol("fromOffsetCache");
var $93fb52c13f252725$var$sourceMapAvailable = Boolean($93fb52c13f252725$var$SourceMapConsumer && $93fb52c13f252725$var$SourceMapGenerator);
var $93fb52c13f252725$var$pathAvailable = Boolean($93fb52c13f252725$var$resolve && $93fb52c13f252725$var$isAbsolute);
var $93fb52c13f252725$var$Input = /*#__PURE__*/ function() {
    function Input(css) {
        var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        (0, $hrxTm._)(this, Input);
        if (css === null || typeof css === "undefined" || typeof css === "object" && !css.toString) throw new Error("PostCSS received ".concat(css, " instead of CSS string"));
        this.css = css.toString();
        if (this.css[0] === "\uFEFF" || this.css[0] === "\uFFFE") {
            this.hasBOM = true;
            this.css = this.css.slice(1);
        } else this.hasBOM = false;
        if (opts.from) {
            if (!$93fb52c13f252725$var$pathAvailable || /^\w+:\/\//.test(opts.from) || $93fb52c13f252725$var$isAbsolute(opts.from)) this.file = opts.from;
            else this.file = $93fb52c13f252725$var$resolve(opts.from);
        }
        if ($93fb52c13f252725$var$pathAvailable && $93fb52c13f252725$var$sourceMapAvailable) {
            var map = new $db4d8a094343cc7c$exports(this.css, opts);
            if (map.text) {
                this.map = map;
                var file = map.consumer().file;
                if (!this.file && file) this.file = this.mapResolve(file);
            }
        }
        if (!this.file) this.id = "<input css " + $93fb52c13f252725$require$nanoid(6) + ">";
        if (this.map) this.map.file = this.from;
    }
    (0, $ggnt0._)(Input, [
        {
            key: "error",
            value: function error(message, line, column) {
                var opts = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                var endColumn, endLine, result;
                if (line && typeof line === "object") {
                    var start = line;
                    var end = column;
                    if (typeof start.offset === "number") {
                        var pos = this.fromOffset(start.offset);
                        line = pos.line;
                        column = pos.col;
                    } else {
                        line = start.line;
                        column = start.column;
                    }
                    if (typeof end.offset === "number") {
                        var pos1 = this.fromOffset(end.offset);
                        endLine = pos1.line;
                        endColumn = pos1.col;
                    } else {
                        endLine = end.line;
                        endColumn = end.column;
                    }
                } else if (!column) {
                    var pos2 = this.fromOffset(line);
                    line = pos2.line;
                    column = pos2.col;
                }
                var origin = this.origin(line, column, endLine, endColumn);
                if (origin) result = new $f2a489e4c330b6d5$exports(message, origin.endLine === undefined ? origin.line : {
                    column: origin.column,
                    line: origin.line
                }, origin.endLine === undefined ? origin.column : {
                    column: origin.endColumn,
                    line: origin.endLine
                }, origin.source, origin.file, opts.plugin);
                else result = new $f2a489e4c330b6d5$exports(message, endLine === undefined ? line : {
                    column: column,
                    line: line
                }, endLine === undefined ? column : {
                    column: endColumn,
                    line: endLine
                }, this.css, this.file, opts.plugin);
                result.input = {
                    column: column,
                    endColumn: endColumn,
                    endLine: endLine,
                    line: line,
                    source: this.css
                };
                if (this.file) {
                    if ($93fb52c13f252725$var$pathToFileURL) result.input.url = $93fb52c13f252725$var$pathToFileURL(this.file).toString();
                    result.input.file = this.file;
                }
                return result;
            }
        },
        {
            key: "fromOffset",
            value: function fromOffset(offset) {
                var lastLine, lineToIndex;
                if (!this[$93fb52c13f252725$var$fromOffsetCache]) {
                    var lines = this.css.split("\n");
                    lineToIndex = new Array(lines.length);
                    var prevIndex = 0;
                    for(var i = 0, l = lines.length; i < l; i++){
                        lineToIndex[i] = prevIndex;
                        prevIndex += lines[i].length + 1;
                    }
                    this[$93fb52c13f252725$var$fromOffsetCache] = lineToIndex;
                } else lineToIndex = this[$93fb52c13f252725$var$fromOffsetCache];
                lastLine = lineToIndex[lineToIndex.length - 1];
                var min = 0;
                if (offset >= lastLine) min = lineToIndex.length - 1;
                else {
                    var max = lineToIndex.length - 2;
                    var mid;
                    while(min < max){
                        mid = min + (max - min >> 1);
                        if (offset < lineToIndex[mid]) max = mid - 1;
                        else if (offset >= lineToIndex[mid + 1]) min = mid + 1;
                        else {
                            min = mid;
                            break;
                        }
                    }
                }
                return {
                    col: offset - lineToIndex[min] + 1,
                    line: min + 1
                };
            }
        },
        {
            key: "mapResolve",
            value: function mapResolve(file) {
                if (/^\w+:\/\//.test(file)) return file;
                return $93fb52c13f252725$var$resolve(this.map.consumer().sourceRoot || this.map.root || ".", file);
            }
        },
        {
            key: "origin",
            value: function origin(line, column, endLine, endColumn) {
                if (!this.map) return false;
                var consumer = this.map.consumer();
                var from = consumer.originalPositionFor({
                    column: column,
                    line: line
                });
                if (!from.source) return false;
                var to;
                if (typeof endLine === "number") to = consumer.originalPositionFor({
                    column: endColumn,
                    line: endLine
                });
                var fromUrl;
                if ($93fb52c13f252725$var$isAbsolute(from.source)) fromUrl = $93fb52c13f252725$var$pathToFileURL(from.source);
                else fromUrl = new URL(from.source, this.map.consumer().sourceRoot || $93fb52c13f252725$var$pathToFileURL(this.map.mapFile));
                var result = {
                    column: from.column,
                    endColumn: to && to.column,
                    endLine: to && to.line,
                    line: from.line,
                    url: fromUrl.toString()
                };
                if (fromUrl.protocol === "file:") {
                    if ($93fb52c13f252725$var$fileURLToPath) result.file = $93fb52c13f252725$var$fileURLToPath(fromUrl);
                    else /* c8 ignore next 2 */ throw new Error("file: protocol is not available in this PostCSS build");
                }
                var source = consumer.sourceContentFor(from.source);
                if (source) result.source = source;
                return result;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var json = {};
                for(var _i = 0, _iter = [
                    "hasBOM",
                    "css",
                    "file",
                    "id"
                ]; _i < _iter.length; _i++){
                    var name = _iter[_i];
                    if (this[name] != null) json[name] = this[name];
                }
                if (this.map) {
                    json.map = (0, $1b4e013f19afac76$export$71511d61b312f219)({}, this.map);
                    if (json.map.consumerCache) json.map.consumerCache = undefined;
                }
                return json;
            }
        },
        {
            key: "from",
            get: function get() {
                return this.file || this.id;
            }
        }
    ]);
    return Input;
}();
$93fb52c13f252725$exports = $93fb52c13f252725$var$Input;
$93fb52c13f252725$var$Input.default = $93fb52c13f252725$var$Input;
if ($69mun && $69mun.registerInput) $69mun.registerInput($93fb52c13f252725$var$Input);



var $ae8fc24052980d85$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");


var $hRvs7 = parcelRequire("hRvs7");

var $03TNp = parcelRequire("03TNp");

var $13zzr = parcelRequire("13zzr");
"use strict";

var $ae8fc24052980d85$var$LazyResult, $ae8fc24052980d85$var$Processor;
var $ae8fc24052980d85$var$Root = /*#__PURE__*/ function(Container) {
    (0, $03TNp._)(Root, Container);
    var _super = (0, $13zzr._)(Root);
    function Root(defaults) {
        (0, $hrxTm._)(this, Root);
        var _this;
        _this = _super.call(this, defaults);
        _this.type = "root";
        if (!_this.nodes) _this.nodes = [];
        return _this;
    }
    (0, $ggnt0._)(Root, [
        {
            key: "normalize",
            value: function normalize(child, sample, type) {
                var nodes = (0, $c467556ee846b44e$export$71511d61b312f219)((0, $hRvs7._)(Root.prototype), "normalize", this).call(this, child);
                if (sample) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    if (type === "prepend") {
                        if (this.nodes.length > 1) sample.raws.before = this.nodes[1].raws.before;
                        else delete sample.raws.before;
                    } else if (this.first !== sample) try {
                        for(var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var node = _step.value;
                            node.raws.before = sample.raws.before;
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                return nodes;
            }
        },
        {
            key: "removeChild",
            value: function removeChild(child, ignore) {
                var index = this.index(child);
                if (!ignore && index === 0 && this.nodes.length > 1) this.nodes[1].raws.before = this.nodes[index].raws.before;
                return (0, $c467556ee846b44e$export$71511d61b312f219)((0, $hRvs7._)(Root.prototype), "removeChild", this).call(this, child);
            }
        },
        {
            key: "toResult",
            value: function toResult() {
                var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                var lazy = new $ae8fc24052980d85$var$LazyResult(new $ae8fc24052980d85$var$Processor(), this, opts);
                return lazy.stringify();
            }
        }
    ]);
    return Root;
}($9612b3c428fe3fd1$exports);
$ae8fc24052980d85$var$Root.registerLazyResult = function(dependant) {
    $ae8fc24052980d85$var$LazyResult = dependant;
};
$ae8fc24052980d85$var$Root.registerProcessor = function(dependant) {
    $ae8fc24052980d85$var$Processor = dependant;
};
$ae8fc24052980d85$exports = $ae8fc24052980d85$var$Root;
$ae8fc24052980d85$var$Root.default = $ae8fc24052980d85$var$Root;
$9612b3c428fe3fd1$exports.registerRoot($ae8fc24052980d85$var$Root);


var $e7056ab1d7beb449$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

var $03TNp = parcelRequire("03TNp");

var $13zzr = parcelRequire("13zzr");
"use strict";

var $7819385ed5955cd8$exports = {};
"use strict";
var $7819385ed5955cd8$var$list = {
    comma: function(string) {
        return $7819385ed5955cd8$var$list.split(string, [
            ","
        ], true);
    },
    space: function(string) {
        var spaces = [
            " ",
            "\n",
            "	"
        ];
        return $7819385ed5955cd8$var$list.split(string, spaces);
    },
    split: function(string, separators, last) {
        var array = [];
        var current = "";
        var split = false;
        var func = 0;
        var inQuote = false;
        var prevQuote = "";
        var escape = false;
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = string[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var letter = _step.value;
                if (escape) escape = false;
                else if (letter === "\\") escape = true;
                else if (inQuote) {
                    if (letter === prevQuote) inQuote = false;
                } else if (letter === '"' || letter === "'") {
                    inQuote = true;
                    prevQuote = letter;
                } else if (letter === "(") func += 1;
                else if (letter === ")") {
                    if (func > 0) func -= 1;
                } else if (func === 0) {
                    if (separators.includes(letter)) split = true;
                }
                if (split) {
                    if (current !== "") array.push(current.trim());
                    current = "";
                    split = false;
                } else current += letter;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        if (last || current !== "") array.push(current.trim());
        return array;
    }
};
$7819385ed5955cd8$exports = $7819385ed5955cd8$var$list;
$7819385ed5955cd8$var$list.default = $7819385ed5955cd8$var$list;


var $e7056ab1d7beb449$var$Rule = /*#__PURE__*/ function(Container) {
    (0, $03TNp._)(Rule, Container);
    var _super = (0, $13zzr._)(Rule);
    function Rule(defaults) {
        (0, $hrxTm._)(this, Rule);
        var _this;
        _this = _super.call(this, defaults);
        _this.type = "rule";
        if (!_this.nodes) _this.nodes = [];
        return _this;
    }
    (0, $ggnt0._)(Rule, [
        {
            key: "selectors",
            get: function get() {
                return $7819385ed5955cd8$exports.comma(this.selector);
            },
            set: function set(values) {
                var match = this.selector ? this.selector.match(/,\s*/) : null;
                var sep = match ? match[0] : "," + this.raw("between", "beforeOpen");
                this.selector = values.join(sep);
            }
        }
    ]);
    return Rule;
}($9612b3c428fe3fd1$exports);
$e7056ab1d7beb449$exports = $e7056ab1d7beb449$var$Rule;
$e7056ab1d7beb449$var$Rule.default = $e7056ab1d7beb449$var$Rule;
$9612b3c428fe3fd1$exports.registerRule($e7056ab1d7beb449$var$Rule);


function $6da1ad5aee998559$var$fromJSON(json, inputs) {
    if (Array.isArray(json)) return json.map(function(n) {
        return $6da1ad5aee998559$var$fromJSON(n);
    });
    var ownInputs = json.inputs, defaults = (0, $e40ffa2c546aa1a6$export$71511d61b312f219)(json, [
        "inputs"
    ]);
    if (ownInputs) {
        inputs = [];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = ownInputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var input = _step.value;
                var inputHydrated = (0, $09f2b5c72ab52c9f$export$71511d61b312f219)((0, $1b4e013f19afac76$export$71511d61b312f219)({}, input), {
                    __proto__: $93fb52c13f252725$exports.prototype
                });
                if (inputHydrated.map) inputHydrated.map = (0, $09f2b5c72ab52c9f$export$71511d61b312f219)((0, $1b4e013f19afac76$export$71511d61b312f219)({}, inputHydrated.map), {
                    __proto__: $db4d8a094343cc7c$exports.prototype
                });
                inputs.push(inputHydrated);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    if (defaults.nodes) defaults.nodes = json.nodes.map(function(n) {
        return $6da1ad5aee998559$var$fromJSON(n, inputs);
    });
    if (defaults.source) {
        var _defaults_source = defaults.source, inputId = _defaults_source.inputId, source = (0, $e40ffa2c546aa1a6$export$71511d61b312f219)(_defaults_source, [
            "inputId"
        ]);
        defaults.source = source;
        if (inputId != null) defaults.source.input = inputs[inputId];
    }
    if (defaults.type === "root") return new $ae8fc24052980d85$exports(defaults);
    else if (defaults.type === "decl") return new $3cdf0ec7053e5217$exports(defaults);
    else if (defaults.type === "rule") return new $e7056ab1d7beb449$exports(defaults);
    else if (defaults.type === "comment") return new $4ffe0aecb4f3941f$exports(defaults);
    else if (defaults.type === "atrule") return new $9918148dc58deaa7$exports(defaults);
    else throw new Error("Unknown node type: " + json.type);
}
$6da1ad5aee998559$exports = $6da1ad5aee998559$var$fromJSON;
$6da1ad5aee998559$var$fromJSON.default = $6da1ad5aee998559$var$fromJSON;



var $969345717cd6c866$exports = {};


var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");


function $77a89769c0981dfc$export$71511d61b312f219(arr) {
    if (Array.isArray(arr)) return arr;
}


function $654ff405d6bc2163$export$71511d61b312f219(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}


function $5e28bf0636117a29$export$71511d61b312f219() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}



function $c26877c109f33d6d$export$71511d61b312f219(arr, i) {
    return (0, $77a89769c0981dfc$export$71511d61b312f219)(arr) || (0, $654ff405d6bc2163$export$71511d61b312f219)(arr, i) || (0, $51a6752bab5162a4$export$71511d61b312f219)(arr, i) || (0, $5e28bf0636117a29$export$71511d61b312f219)();
}




"use strict";


var $61600793fa84c358$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

var $d6N7B = parcelRequire("d6N7B");
var $61600793fa84c358$require$Buffer = $d6N7B.Buffer;
"use strict";

var $69mun = parcelRequire("69mun");
var $61600793fa84c358$var$dirname = $69mun.dirname, $61600793fa84c358$var$relative = $69mun.relative, $61600793fa84c358$var$resolve = $69mun.resolve, $61600793fa84c358$var$sep = $69mun.sep;

var $69mun = parcelRequire("69mun");
var $61600793fa84c358$var$SourceMapConsumer = $69mun.SourceMapConsumer, $61600793fa84c358$var$SourceMapGenerator = $69mun.SourceMapGenerator;

var $69mun = parcelRequire("69mun");
var $61600793fa84c358$require$pathToFileURL = $69mun.pathToFileURL;

var $61600793fa84c358$var$sourceMapAvailable = Boolean($61600793fa84c358$var$SourceMapConsumer && $61600793fa84c358$var$SourceMapGenerator);
var $61600793fa84c358$var$pathAvailable = Boolean($61600793fa84c358$var$dirname && $61600793fa84c358$var$resolve && $61600793fa84c358$var$relative && $61600793fa84c358$var$sep);
var $61600793fa84c358$var$MapGenerator = /*#__PURE__*/ function() {
    "use strict";
    function MapGenerator(stringify, root, opts, cssString) {
        (0, $hrxTm._)(this, MapGenerator);
        this.stringify = stringify;
        this.mapOpts = opts.map || {};
        this.root = root;
        this.opts = opts;
        this.css = cssString;
        this.originalCSS = cssString;
        this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;
        this.memoizedFileURLs = new Map();
        this.memoizedPaths = new Map();
        this.memoizedURLs = new Map();
    }
    (0, $ggnt0._)(MapGenerator, [
        {
            key: "addAnnotation",
            value: function addAnnotation() {
                var content;
                if (this.isInline()) content = "data:application/json;base64," + this.toBase64(this.map.toString());
                else if (typeof this.mapOpts.annotation === "string") content = this.mapOpts.annotation;
                else if (typeof this.mapOpts.annotation === "function") content = this.mapOpts.annotation(this.opts.to, this.root);
                else content = this.outputFile() + ".map";
                var eol = "\n";
                if (this.css.includes("\r\n")) eol = "\r\n";
                this.css += eol + "/*# sourceMappingURL=" + content + " */";
            }
        },
        {
            key: "applyPrevMaps",
            value: function applyPrevMaps() {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.previous()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var prev = _step.value;
                        var from = this.toUrl(this.path(prev.file));
                        var root = prev.root || $61600793fa84c358$var$dirname(prev.file);
                        var map = void 0;
                        if (this.mapOpts.sourcesContent === false) {
                            map = new $61600793fa84c358$var$SourceMapConsumer(prev.text);
                            if (map.sourcesContent) map.sourcesContent = null;
                        } else map = prev.consumer();
                        this.map.applySourceMap(map, from, this.toUrl(this.path(root)));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "clearAnnotation",
            value: function clearAnnotation() {
                if (this.mapOpts.annotation === false) return;
                if (this.root) {
                    var node;
                    for(var i = this.root.nodes.length - 1; i >= 0; i--){
                        node = this.root.nodes[i];
                        if (node.type !== "comment") continue;
                        if (node.text.startsWith("# sourceMappingURL=")) this.root.removeChild(i);
                    }
                } else if (this.css) this.css = this.css.replace(/\n*\/\*#[\S\s]*?\*\/$/gm, "");
            }
        },
        {
            key: "generate",
            value: function generate() {
                this.clearAnnotation();
                if ($61600793fa84c358$var$pathAvailable && $61600793fa84c358$var$sourceMapAvailable && this.isMap()) return this.generateMap();
                else {
                    var result = "";
                    this.stringify(this.root, function(i) {
                        result += i;
                    });
                    return [
                        result
                    ];
                }
            }
        },
        {
            key: "generateMap",
            value: function generateMap() {
                if (this.root) this.generateString();
                else if (this.previous().length === 1) {
                    var prev = this.previous()[0].consumer();
                    prev.file = this.outputFile();
                    this.map = $61600793fa84c358$var$SourceMapGenerator.fromSourceMap(prev, {
                        ignoreInvalidMapping: true
                    });
                } else {
                    this.map = new $61600793fa84c358$var$SourceMapGenerator({
                        file: this.outputFile(),
                        ignoreInvalidMapping: true
                    });
                    this.map.addMapping({
                        generated: {
                            column: 0,
                            line: 1
                        },
                        original: {
                            column: 0,
                            line: 1
                        },
                        source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>"
                    });
                }
                if (this.isSourcesContent()) this.setSourcesContent();
                if (this.root && this.previous().length > 0) this.applyPrevMaps();
                if (this.isAnnotation()) this.addAnnotation();
                if (this.isInline()) return [
                    this.css
                ];
                else return [
                    this.css,
                    this.map
                ];
            }
        },
        {
            key: "generateString",
            value: function generateString() {
                var _this = this;
                this.css = "";
                this.map = new $61600793fa84c358$var$SourceMapGenerator({
                    file: this.outputFile(),
                    ignoreInvalidMapping: true
                });
                var line = 1;
                var column = 1;
                var noSource = "<no source>";
                var mapping = {
                    generated: {
                        column: 0,
                        line: 0
                    },
                    original: {
                        column: 0,
                        line: 0
                    },
                    source: ""
                };
                var last, lines;
                this.stringify(this.root, function(str, node, type) {
                    _this.css += str;
                    if (node && type !== "end") {
                        mapping.generated.line = line;
                        mapping.generated.column = column - 1;
                        if (node.source && node.source.start) {
                            mapping.source = _this.sourcePath(node);
                            mapping.original.line = node.source.start.line;
                            mapping.original.column = node.source.start.column - 1;
                            _this.map.addMapping(mapping);
                        } else {
                            mapping.source = noSource;
                            mapping.original.line = 1;
                            mapping.original.column = 0;
                            _this.map.addMapping(mapping);
                        }
                    }
                    lines = str.match(/\n/g);
                    if (lines) {
                        line += lines.length;
                        last = str.lastIndexOf("\n");
                        column = str.length - last;
                    } else column += str.length;
                    if (node && type !== "start") {
                        var p = node.parent || {
                            raws: {}
                        };
                        var childless = node.type === "decl" || node.type === "atrule" && !node.nodes;
                        if (!childless || node !== p.last || p.raws.semicolon) {
                            if (node.source && node.source.end) {
                                mapping.source = _this.sourcePath(node);
                                mapping.original.line = node.source.end.line;
                                mapping.original.column = node.source.end.column - 1;
                                mapping.generated.line = line;
                                mapping.generated.column = column - 2;
                                _this.map.addMapping(mapping);
                            } else {
                                mapping.source = noSource;
                                mapping.original.line = 1;
                                mapping.original.column = 0;
                                mapping.generated.line = line;
                                mapping.generated.column = column - 1;
                                _this.map.addMapping(mapping);
                            }
                        }
                    }
                });
            }
        },
        {
            key: "isAnnotation",
            value: function isAnnotation() {
                if (this.isInline()) return true;
                if (typeof this.mapOpts.annotation !== "undefined") return this.mapOpts.annotation;
                if (this.previous().length) return this.previous().some(function(i) {
                    return i.annotation;
                });
                return true;
            }
        },
        {
            key: "isInline",
            value: function isInline() {
                if (typeof this.mapOpts.inline !== "undefined") return this.mapOpts.inline;
                var annotation = this.mapOpts.annotation;
                if (typeof annotation !== "undefined" && annotation !== true) return false;
                if (this.previous().length) return this.previous().some(function(i) {
                    return i.inline;
                });
                return true;
            }
        },
        {
            key: "isMap",
            value: function isMap() {
                if (typeof this.opts.map !== "undefined") return !!this.opts.map;
                return this.previous().length > 0;
            }
        },
        {
            key: "isSourcesContent",
            value: function isSourcesContent() {
                if (typeof this.mapOpts.sourcesContent !== "undefined") return this.mapOpts.sourcesContent;
                if (this.previous().length) return this.previous().some(function(i) {
                    return i.withContent();
                });
                return true;
            }
        },
        {
            key: "outputFile",
            value: function outputFile() {
                if (this.opts.to) return this.path(this.opts.to);
                else if (this.opts.from) return this.path(this.opts.from);
                else return "to.css";
            }
        },
        {
            key: "path",
            value: function path(file) {
                if (this.mapOpts.absolute) return file;
                if (file.charCodeAt(0) === 60 /* `<` */ ) return file;
                if (/^\w+:\/\//.test(file)) return file;
                var cached = this.memoizedPaths.get(file);
                if (cached) return cached;
                var from = this.opts.to ? $61600793fa84c358$var$dirname(this.opts.to) : ".";
                if (typeof this.mapOpts.annotation === "string") from = $61600793fa84c358$var$dirname($61600793fa84c358$var$resolve(from, this.mapOpts.annotation));
                var path = $61600793fa84c358$var$relative(from, file);
                this.memoizedPaths.set(file, path);
                return path;
            }
        },
        {
            key: "previous",
            value: function previous() {
                var _this = this;
                if (!this.previousMaps) {
                    this.previousMaps = [];
                    if (this.root) this.root.walk(function(node) {
                        if (node.source && node.source.input.map) {
                            var map = node.source.input.map;
                            if (!_this.previousMaps.includes(map)) _this.previousMaps.push(map);
                        }
                    });
                    else {
                        var input = new $93fb52c13f252725$exports(this.originalCSS, this.opts);
                        if (input.map) this.previousMaps.push(input.map);
                    }
                }
                return this.previousMaps;
            }
        },
        {
            key: "setSourcesContent",
            value: function setSourcesContent() {
                var _this = this;
                var already = {};
                if (this.root) this.root.walk(function(node) {
                    if (node.source) {
                        var from = node.source.input.from;
                        if (from && !already[from]) {
                            already[from] = true;
                            var fromUrl = _this.usesFileUrls ? _this.toFileUrl(from) : _this.toUrl(_this.path(from));
                            _this.map.setSourceContent(fromUrl, node.source.input.css);
                        }
                    }
                });
                else if (this.css) {
                    var from = this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>";
                    this.map.setSourceContent(from, this.css);
                }
            }
        },
        {
            key: "sourcePath",
            value: function sourcePath(node) {
                if (this.mapOpts.from) return this.toUrl(this.mapOpts.from);
                else if (this.usesFileUrls) return this.toFileUrl(node.source.input.from);
                else return this.toUrl(this.path(node.source.input.from));
            }
        },
        {
            key: "toBase64",
            value: function toBase64(str) {
                if ($61600793fa84c358$require$Buffer) return $61600793fa84c358$require$Buffer.from(str).toString("base64");
                else return window.btoa(unescape(encodeURIComponent(str)));
            }
        },
        {
            key: "toFileUrl",
            value: function toFileUrl(path) {
                var cached = this.memoizedFileURLs.get(path);
                if (cached) return cached;
                if ($61600793fa84c358$require$pathToFileURL) {
                    var fileURL = $61600793fa84c358$require$pathToFileURL(path).toString();
                    this.memoizedFileURLs.set(path, fileURL);
                    return fileURL;
                } else throw new Error("`map.absolute` option is not available in this PostCSS build");
            }
        },
        {
            key: "toUrl",
            value: function toUrl(path) {
                var cached = this.memoizedURLs.get(path);
                if (cached) return cached;
                if ($61600793fa84c358$var$sep === "\\") path = path.replace(/\\/g, "/");
                var url = encodeURI(path).replace(/[#?]/g, encodeURIComponent);
                this.memoizedURLs.set(path, url);
                return url;
            }
        }
    ]);
    return MapGenerator;
}();
$61600793fa84c358$exports = $61600793fa84c358$var$MapGenerator;


var $516f2d017314116b$exports = {};
"use strict";


var $f02ef31b5cd4fa60$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

"use strict";





var $91d8a73a981420ac$exports = {};
"use strict";
var $91d8a73a981420ac$var$SINGLE_QUOTE = "'".charCodeAt(0);
var $91d8a73a981420ac$var$DOUBLE_QUOTE = '"'.charCodeAt(0);
var $91d8a73a981420ac$var$BACKSLASH = "\\".charCodeAt(0);
var $91d8a73a981420ac$var$SLASH = "/".charCodeAt(0);
var $91d8a73a981420ac$var$NEWLINE = "\n".charCodeAt(0);
var $91d8a73a981420ac$var$SPACE = " ".charCodeAt(0);
var $91d8a73a981420ac$var$FEED = "\f".charCodeAt(0);
var $91d8a73a981420ac$var$TAB = "	".charCodeAt(0);
var $91d8a73a981420ac$var$CR = "\r".charCodeAt(0);
var $91d8a73a981420ac$var$OPEN_SQUARE = "[".charCodeAt(0);
var $91d8a73a981420ac$var$CLOSE_SQUARE = "]".charCodeAt(0);
var $91d8a73a981420ac$var$OPEN_PARENTHESES = "(".charCodeAt(0);
var $91d8a73a981420ac$var$CLOSE_PARENTHESES = ")".charCodeAt(0);
var $91d8a73a981420ac$var$OPEN_CURLY = "{".charCodeAt(0);
var $91d8a73a981420ac$var$CLOSE_CURLY = "}".charCodeAt(0);
var $91d8a73a981420ac$var$SEMICOLON = ";".charCodeAt(0);
var $91d8a73a981420ac$var$ASTERISK = "*".charCodeAt(0);
var $91d8a73a981420ac$var$COLON = ":".charCodeAt(0);
var $91d8a73a981420ac$var$AT = "@".charCodeAt(0);
var $91d8a73a981420ac$var$RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
var $91d8a73a981420ac$var$RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
var $91d8a73a981420ac$var$RE_BAD_BRACKET = /.[\r\n"'(/\\]/;
var $91d8a73a981420ac$var$RE_HEX_ESCAPE = /[\da-f]/i;
$91d8a73a981420ac$exports = function tokenizer(input) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var css = input.css.valueOf();
    var ignore = options.ignoreErrors;
    var code, content, escape, next, quote;
    var currentToken, escaped, escapePos, n, prev;
    var length = css.length;
    var pos = 0;
    var buffer = [];
    var returned = [];
    function position() {
        return pos;
    }
    function unclosed(what) {
        throw input.error("Unclosed " + what, pos);
    }
    function endOfFile() {
        return returned.length === 0 && pos >= length;
    }
    function nextToken(opts) {
        if (returned.length) return returned.pop();
        if (pos >= length) return;
        var ignoreUnclosed = opts ? opts.ignoreUnclosed : false;
        code = css.charCodeAt(pos);
        switch(code){
            case $91d8a73a981420ac$var$NEWLINE:
            case $91d8a73a981420ac$var$SPACE:
            case $91d8a73a981420ac$var$TAB:
            case $91d8a73a981420ac$var$CR:
            case $91d8a73a981420ac$var$FEED:
                next = pos;
                do {
                    next += 1;
                    code = css.charCodeAt(next);
                }while (code === $91d8a73a981420ac$var$SPACE || code === $91d8a73a981420ac$var$NEWLINE || code === $91d8a73a981420ac$var$TAB || code === $91d8a73a981420ac$var$CR || code === $91d8a73a981420ac$var$FEED);
                currentToken = [
                    "space",
                    css.slice(pos, next)
                ];
                pos = next - 1;
                break;
            case $91d8a73a981420ac$var$OPEN_SQUARE:
            case $91d8a73a981420ac$var$CLOSE_SQUARE:
            case $91d8a73a981420ac$var$OPEN_CURLY:
            case $91d8a73a981420ac$var$CLOSE_CURLY:
            case $91d8a73a981420ac$var$COLON:
            case $91d8a73a981420ac$var$SEMICOLON:
            case $91d8a73a981420ac$var$CLOSE_PARENTHESES:
                {
                    var controlChar = String.fromCharCode(code);
                    currentToken = [
                        controlChar,
                        controlChar,
                        pos
                    ];
                    break;
                }
            case $91d8a73a981420ac$var$OPEN_PARENTHESES:
                prev = buffer.length ? buffer.pop()[1] : "";
                n = css.charCodeAt(pos + 1);
                if (prev === "url" && n !== $91d8a73a981420ac$var$SINGLE_QUOTE && n !== $91d8a73a981420ac$var$DOUBLE_QUOTE && n !== $91d8a73a981420ac$var$SPACE && n !== $91d8a73a981420ac$var$NEWLINE && n !== $91d8a73a981420ac$var$TAB && n !== $91d8a73a981420ac$var$FEED && n !== $91d8a73a981420ac$var$CR) {
                    next = pos;
                    do {
                        escaped = false;
                        next = css.indexOf(")", next + 1);
                        if (next === -1) {
                            if (ignore || ignoreUnclosed) {
                                next = pos;
                                break;
                            } else unclosed("bracket");
                        }
                        escapePos = next;
                        while(css.charCodeAt(escapePos - 1) === $91d8a73a981420ac$var$BACKSLASH){
                            escapePos -= 1;
                            escaped = !escaped;
                        }
                    }while (escaped);
                    currentToken = [
                        "brackets",
                        css.slice(pos, next + 1),
                        pos,
                        next
                    ];
                    pos = next;
                } else {
                    next = css.indexOf(")", pos + 1);
                    content = css.slice(pos, next + 1);
                    if (next === -1 || $91d8a73a981420ac$var$RE_BAD_BRACKET.test(content)) currentToken = [
                        "(",
                        "(",
                        pos
                    ];
                    else {
                        currentToken = [
                            "brackets",
                            content,
                            pos,
                            next
                        ];
                        pos = next;
                    }
                }
                break;
            case $91d8a73a981420ac$var$SINGLE_QUOTE:
            case $91d8a73a981420ac$var$DOUBLE_QUOTE:
                quote = code === $91d8a73a981420ac$var$SINGLE_QUOTE ? "'" : '"';
                next = pos;
                do {
                    escaped = false;
                    next = css.indexOf(quote, next + 1);
                    if (next === -1) {
                        if (ignore || ignoreUnclosed) {
                            next = pos + 1;
                            break;
                        } else unclosed("string");
                    }
                    escapePos = next;
                    while(css.charCodeAt(escapePos - 1) === $91d8a73a981420ac$var$BACKSLASH){
                        escapePos -= 1;
                        escaped = !escaped;
                    }
                }while (escaped);
                currentToken = [
                    "string",
                    css.slice(pos, next + 1),
                    pos,
                    next
                ];
                pos = next;
                break;
            case $91d8a73a981420ac$var$AT:
                $91d8a73a981420ac$var$RE_AT_END.lastIndex = pos + 1;
                $91d8a73a981420ac$var$RE_AT_END.test(css);
                if ($91d8a73a981420ac$var$RE_AT_END.lastIndex === 0) next = css.length - 1;
                else next = $91d8a73a981420ac$var$RE_AT_END.lastIndex - 2;
                currentToken = [
                    "at-word",
                    css.slice(pos, next + 1),
                    pos,
                    next
                ];
                pos = next;
                break;
            case $91d8a73a981420ac$var$BACKSLASH:
                next = pos;
                escape = true;
                while(css.charCodeAt(next + 1) === $91d8a73a981420ac$var$BACKSLASH){
                    next += 1;
                    escape = !escape;
                }
                code = css.charCodeAt(next + 1);
                if (escape && code !== $91d8a73a981420ac$var$SLASH && code !== $91d8a73a981420ac$var$SPACE && code !== $91d8a73a981420ac$var$NEWLINE && code !== $91d8a73a981420ac$var$TAB && code !== $91d8a73a981420ac$var$CR && code !== $91d8a73a981420ac$var$FEED) {
                    next += 1;
                    if ($91d8a73a981420ac$var$RE_HEX_ESCAPE.test(css.charAt(next))) {
                        while($91d8a73a981420ac$var$RE_HEX_ESCAPE.test(css.charAt(next + 1)))next += 1;
                        if (css.charCodeAt(next + 1) === $91d8a73a981420ac$var$SPACE) next += 1;
                    }
                }
                currentToken = [
                    "word",
                    css.slice(pos, next + 1),
                    pos,
                    next
                ];
                pos = next;
                break;
            default:
                if (code === $91d8a73a981420ac$var$SLASH && css.charCodeAt(pos + 1) === $91d8a73a981420ac$var$ASTERISK) {
                    next = css.indexOf("*/", pos + 2) + 1;
                    if (next === 0) {
                        if (ignore || ignoreUnclosed) next = css.length;
                        else unclosed("comment");
                    }
                    currentToken = [
                        "comment",
                        css.slice(pos, next + 1),
                        pos,
                        next
                    ];
                    pos = next;
                } else {
                    $91d8a73a981420ac$var$RE_WORD_END.lastIndex = pos + 1;
                    $91d8a73a981420ac$var$RE_WORD_END.test(css);
                    if ($91d8a73a981420ac$var$RE_WORD_END.lastIndex === 0) next = css.length - 1;
                    else next = $91d8a73a981420ac$var$RE_WORD_END.lastIndex - 2;
                    currentToken = [
                        "word",
                        css.slice(pos, next + 1),
                        pos,
                        next
                    ];
                    buffer.push(currentToken);
                    pos = next;
                }
                break;
        }
        pos++;
        return currentToken;
    }
    function back(token) {
        returned.push(token);
    }
    return {
        back: back,
        endOfFile: endOfFile,
        nextToken: nextToken,
        position: position
    };
};


var $f02ef31b5cd4fa60$var$SAFE_COMMENT_NEIGHBOR = {
    empty: true,
    space: true
};
function $f02ef31b5cd4fa60$var$findLastWithPosition(tokens) {
    for(var i = tokens.length - 1; i >= 0; i--){
        var token = tokens[i];
        var pos = token[3] || token[2];
        if (pos) return pos;
    }
}
var $f02ef31b5cd4fa60$var$Parser = /*#__PURE__*/ function() {
    function Parser(input) {
        (0, $hrxTm._)(this, Parser);
        this.input = input;
        this.root = new $ae8fc24052980d85$exports();
        this.current = this.root;
        this.spaces = "";
        this.semicolon = false;
        this.createTokenizer();
        this.root.source = {
            input: input,
            start: {
                column: 1,
                line: 1,
                offset: 0
            }
        };
    }
    (0, $ggnt0._)(Parser, [
        {
            key: "atrule",
            value: function atrule(token) {
                var node = new $9918148dc58deaa7$exports();
                node.name = token[1].slice(1);
                if (node.name === "") this.unnamedAtrule(node, token);
                this.init(node, token[2]);
                var type;
                var prev;
                var shift;
                var last = false;
                var open = false;
                var params = [];
                var brackets = [];
                while(!this.tokenizer.endOfFile()){
                    token = this.tokenizer.nextToken();
                    type = token[0];
                    if (type === "(" || type === "[") brackets.push(type === "(" ? ")" : "]");
                    else if (type === "{" && brackets.length > 0) brackets.push("}");
                    else if (type === brackets[brackets.length - 1]) brackets.pop();
                    if (brackets.length === 0) {
                        if (type === ";") {
                            node.source.end = this.getPosition(token[2]);
                            node.source.end.offset++;
                            this.semicolon = true;
                            break;
                        } else if (type === "{") {
                            open = true;
                            break;
                        } else if (type === "}") {
                            if (params.length > 0) {
                                shift = params.length - 1;
                                prev = params[shift];
                                while(prev && prev[0] === "space")prev = params[--shift];
                                if (prev) {
                                    node.source.end = this.getPosition(prev[3] || prev[2]);
                                    node.source.end.offset++;
                                }
                            }
                            this.end(token);
                            break;
                        } else params.push(token);
                    } else params.push(token);
                    if (this.tokenizer.endOfFile()) {
                        last = true;
                        break;
                    }
                }
                node.raws.between = this.spacesAndCommentsFromEnd(params);
                if (params.length) {
                    node.raws.afterName = this.spacesAndCommentsFromStart(params);
                    this.raw(node, "params", params);
                    if (last) {
                        token = params[params.length - 1];
                        node.source.end = this.getPosition(token[3] || token[2]);
                        node.source.end.offset++;
                        this.spaces = node.raws.between;
                        node.raws.between = "";
                    }
                } else {
                    node.raws.afterName = "";
                    node.params = "";
                }
                if (open) {
                    node.nodes = [];
                    this.current = node;
                }
            }
        },
        {
            key: "checkMissedSemicolon",
            value: function checkMissedSemicolon(tokens) {
                var colon = this.colon(tokens);
                if (colon === false) return;
                var founded = 0;
                var token;
                for(var j = colon - 1; j >= 0; j--){
                    token = tokens[j];
                    if (token[0] !== "space") {
                        founded += 1;
                        if (founded === 2) break;
                    }
                }
                // If the token is a word, e.g. `!important`, `red` or any other valid property's value.
                // Then we need to return the colon after that word token. [3] is the "end" colon of that word.
                // And because we need it after that one we do +1 to get the next one.
                throw this.input.error("Missed semicolon", token[0] === "word" ? token[3] + 1 : token[2]);
            }
        },
        {
            key: "colon",
            value: function colon(tokens) {
                var brackets = 0;
                var prev, token, type;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = tokens.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = (0, $c26877c109f33d6d$export$71511d61b312f219)(_step.value, 2), i = _step_value[0], element = _step_value[1];
                        token = element;
                        type = token[0];
                        if (type === "(") brackets += 1;
                        if (type === ")") brackets -= 1;
                        if (brackets === 0 && type === ":") {
                            if (!prev) this.doubleColon(token);
                            else if (prev[0] === "word" && prev[1] === "progid") continue;
                            else return i;
                        }
                        prev = token;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return false;
            }
        },
        {
            key: "comment",
            value: function comment(token) {
                var node = new $4ffe0aecb4f3941f$exports();
                this.init(node, token[2]);
                node.source.end = this.getPosition(token[3] || token[2]);
                node.source.end.offset++;
                var text = token[1].slice(2, -2);
                if (/^\s*$/.test(text)) {
                    node.text = "";
                    node.raws.left = text;
                    node.raws.right = "";
                } else {
                    var match = text.match(/^(\s*)([^]*\S)(\s*)$/);
                    node.text = match[2];
                    node.raws.left = match[1];
                    node.raws.right = match[3];
                }
            }
        },
        {
            key: "createTokenizer",
            value: function createTokenizer() {
                this.tokenizer = $91d8a73a981420ac$exports(this.input);
            }
        },
        {
            key: "decl",
            value: function decl(tokens, customProperty) {
                var node = new $3cdf0ec7053e5217$exports();
                this.init(node, tokens[0][2]);
                var last = tokens[tokens.length - 1];
                if (last[0] === ";") {
                    this.semicolon = true;
                    tokens.pop();
                }
                node.source.end = this.getPosition(last[3] || last[2] || $f02ef31b5cd4fa60$var$findLastWithPosition(tokens));
                node.source.end.offset++;
                while(tokens[0][0] !== "word"){
                    if (tokens.length === 1) this.unknownWord(tokens);
                    node.raws.before += tokens.shift()[1];
                }
                node.source.start = this.getPosition(tokens[0][2]);
                node.prop = "";
                while(tokens.length){
                    var type = tokens[0][0];
                    if (type === ":" || type === "space" || type === "comment") break;
                    node.prop += tokens.shift()[1];
                }
                node.raws.between = "";
                var token;
                while(tokens.length){
                    token = tokens.shift();
                    if (token[0] === ":") {
                        node.raws.between += token[1];
                        break;
                    } else {
                        if (token[0] === "word" && /\w/.test(token[1])) this.unknownWord([
                            token
                        ]);
                        node.raws.between += token[1];
                    }
                }
                if (node.prop[0] === "_" || node.prop[0] === "*") {
                    node.raws.before += node.prop[0];
                    node.prop = node.prop.slice(1);
                }
                var firstSpaces = [];
                var next;
                while(tokens.length){
                    next = tokens[0][0];
                    if (next !== "space" && next !== "comment") break;
                    firstSpaces.push(tokens.shift());
                }
                this.precheckMissedSemicolon(tokens);
                for(var i = tokens.length - 1; i >= 0; i--){
                    token = tokens[i];
                    if (token[1].toLowerCase() === "!important") {
                        node.important = true;
                        var string = this.stringFrom(tokens, i);
                        string = this.spacesFromEnd(tokens) + string;
                        if (string !== " !important") node.raws.important = string;
                        break;
                    } else if (token[1].toLowerCase() === "important") {
                        var cache = tokens.slice(0);
                        var str = "";
                        for(var j = i; j > 0; j--){
                            var type1 = cache[j][0];
                            if (str.trim().startsWith("!") && type1 !== "space") break;
                            str = cache.pop()[1] + str;
                        }
                        if (str.trim().startsWith("!")) {
                            node.important = true;
                            node.raws.important = str;
                            tokens = cache;
                        }
                    }
                    if (token[0] !== "space" && token[0] !== "comment") break;
                }
                var hasWord = tokens.some(function(i) {
                    return i[0] !== "space" && i[0] !== "comment";
                });
                if (hasWord) {
                    node.raws.between += firstSpaces.map(function(i) {
                        return i[1];
                    }).join("");
                    firstSpaces = [];
                }
                this.raw(node, "value", firstSpaces.concat(tokens), customProperty);
                if (node.value.includes(":") && !customProperty) this.checkMissedSemicolon(tokens);
            }
        },
        {
            key: "doubleColon",
            value: function doubleColon(token) {
                throw this.input.error("Double colon", {
                    offset: token[2]
                }, {
                    offset: token[2] + token[1].length
                });
            }
        },
        {
            key: "emptyRule",
            value: function emptyRule(token) {
                var node = new $e7056ab1d7beb449$exports();
                this.init(node, token[2]);
                node.selector = "";
                node.raws.between = "";
                this.current = node;
            }
        },
        {
            key: "end",
            value: function end(token) {
                if (this.current.nodes && this.current.nodes.length) this.current.raws.semicolon = this.semicolon;
                this.semicolon = false;
                this.current.raws.after = (this.current.raws.after || "") + this.spaces;
                this.spaces = "";
                if (this.current.parent) {
                    this.current.source.end = this.getPosition(token[2]);
                    this.current.source.end.offset++;
                    this.current = this.current.parent;
                } else this.unexpectedClose(token);
            }
        },
        {
            key: "endFile",
            value: function endFile() {
                if (this.current.parent) this.unclosedBlock();
                if (this.current.nodes && this.current.nodes.length) this.current.raws.semicolon = this.semicolon;
                this.current.raws.after = (this.current.raws.after || "") + this.spaces;
                this.root.source.end = this.getPosition(this.tokenizer.position());
            }
        },
        {
            key: "freeSemicolon",
            value: function freeSemicolon(token) {
                this.spaces += token[1];
                if (this.current.nodes) {
                    var prev = this.current.nodes[this.current.nodes.length - 1];
                    if (prev && prev.type === "rule" && !prev.raws.ownSemicolon) {
                        prev.raws.ownSemicolon = this.spaces;
                        this.spaces = "";
                    }
                }
            }
        },
        {
            // Helpers
            key: "getPosition",
            value: function getPosition(offset) {
                var pos = this.input.fromOffset(offset);
                return {
                    column: pos.col,
                    line: pos.line,
                    offset: offset
                };
            }
        },
        {
            key: "init",
            value: function init(node, offset) {
                this.current.push(node);
                node.source = {
                    input: this.input,
                    start: this.getPosition(offset)
                };
                node.raws.before = this.spaces;
                this.spaces = "";
                if (node.type !== "comment") this.semicolon = false;
            }
        },
        {
            key: "other",
            value: function other(start) {
                var end = false;
                var type = null;
                var colon = false;
                var bracket = null;
                var brackets = [];
                var customProperty = start[1].startsWith("--");
                var tokens = [];
                var token = start;
                while(token){
                    type = token[0];
                    tokens.push(token);
                    if (type === "(" || type === "[") {
                        if (!bracket) bracket = token;
                        brackets.push(type === "(" ? ")" : "]");
                    } else if (customProperty && colon && type === "{") {
                        if (!bracket) bracket = token;
                        brackets.push("}");
                    } else if (brackets.length === 0) {
                        if (type === ";") {
                            if (colon) {
                                this.decl(tokens, customProperty);
                                return;
                            } else break;
                        } else if (type === "{") {
                            this.rule(tokens);
                            return;
                        } else if (type === "}") {
                            this.tokenizer.back(tokens.pop());
                            end = true;
                            break;
                        } else if (type === ":") colon = true;
                    } else if (type === brackets[brackets.length - 1]) {
                        brackets.pop();
                        if (brackets.length === 0) bracket = null;
                    }
                    token = this.tokenizer.nextToken();
                }
                if (this.tokenizer.endOfFile()) end = true;
                if (brackets.length > 0) this.unclosedBracket(bracket);
                if (end && colon) {
                    if (!customProperty) while(tokens.length){
                        token = tokens[tokens.length - 1][0];
                        if (token !== "space" && token !== "comment") break;
                        this.tokenizer.back(tokens.pop());
                    }
                    this.decl(tokens, customProperty);
                } else this.unknownWord(tokens);
            }
        },
        {
            key: "parse",
            value: function parse() {
                var token;
                while(!this.tokenizer.endOfFile()){
                    token = this.tokenizer.nextToken();
                    switch(token[0]){
                        case "space":
                            this.spaces += token[1];
                            break;
                        case ";":
                            this.freeSemicolon(token);
                            break;
                        case "}":
                            this.end(token);
                            break;
                        case "comment":
                            this.comment(token);
                            break;
                        case "at-word":
                            this.atrule(token);
                            break;
                        case "{":
                            this.emptyRule(token);
                            break;
                        default:
                            this.other(token);
                            break;
                    }
                }
                this.endFile();
            }
        },
        {
            key: "precheckMissedSemicolon",
            value: function precheckMissedSemicolon() {
            // Hook for Safe Parser
            }
        },
        {
            key: "raw",
            value: function raw(node, prop, tokens, customProperty) {
                var token, type;
                var length = tokens.length;
                var value = "";
                var clean = true;
                var next, prev;
                for(var i = 0; i < length; i += 1){
                    token = tokens[i];
                    type = token[0];
                    if (type === "space" && i === length - 1 && !customProperty) clean = false;
                    else if (type === "comment") {
                        prev = tokens[i - 1] ? tokens[i - 1][0] : "empty";
                        next = tokens[i + 1] ? tokens[i + 1][0] : "empty";
                        if (!$f02ef31b5cd4fa60$var$SAFE_COMMENT_NEIGHBOR[prev] && !$f02ef31b5cd4fa60$var$SAFE_COMMENT_NEIGHBOR[next]) {
                            if (value.slice(-1) === ",") clean = false;
                            else value += token[1];
                        } else clean = false;
                    } else value += token[1];
                }
                if (!clean) {
                    var raw = tokens.reduce(function(all, i) {
                        return all + i[1];
                    }, "");
                    node.raws[prop] = {
                        raw: raw,
                        value: value
                    };
                }
                node[prop] = value;
            }
        },
        {
            key: "rule",
            value: function rule(tokens) {
                tokens.pop();
                var node = new $e7056ab1d7beb449$exports();
                this.init(node, tokens[0][2]);
                node.raws.between = this.spacesAndCommentsFromEnd(tokens);
                this.raw(node, "selector", tokens);
                this.current = node;
            }
        },
        {
            key: "spacesAndCommentsFromEnd",
            value: function spacesAndCommentsFromEnd(tokens) {
                var lastTokenType;
                var spaces = "";
                while(tokens.length){
                    lastTokenType = tokens[tokens.length - 1][0];
                    if (lastTokenType !== "space" && lastTokenType !== "comment") break;
                    spaces = tokens.pop()[1] + spaces;
                }
                return spaces;
            }
        },
        {
            // Errors
            key: "spacesAndCommentsFromStart",
            value: function spacesAndCommentsFromStart(tokens) {
                var next;
                var spaces = "";
                while(tokens.length){
                    next = tokens[0][0];
                    if (next !== "space" && next !== "comment") break;
                    spaces += tokens.shift()[1];
                }
                return spaces;
            }
        },
        {
            key: "spacesFromEnd",
            value: function spacesFromEnd(tokens) {
                var lastTokenType;
                var spaces = "";
                while(tokens.length){
                    lastTokenType = tokens[tokens.length - 1][0];
                    if (lastTokenType !== "space") break;
                    spaces = tokens.pop()[1] + spaces;
                }
                return spaces;
            }
        },
        {
            key: "stringFrom",
            value: function stringFrom(tokens, from) {
                var result = "";
                for(var i = from; i < tokens.length; i++)result += tokens[i][1];
                tokens.splice(from, tokens.length - from);
                return result;
            }
        },
        {
            key: "unclosedBlock",
            value: function unclosedBlock() {
                var pos = this.current.source.start;
                throw this.input.error("Unclosed block", pos.line, pos.column);
            }
        },
        {
            key: "unclosedBracket",
            value: function unclosedBracket(bracket) {
                throw this.input.error("Unclosed bracket", {
                    offset: bracket[2]
                }, {
                    offset: bracket[2] + 1
                });
            }
        },
        {
            key: "unexpectedClose",
            value: function unexpectedClose(token) {
                throw this.input.error("Unexpected }", {
                    offset: token[2]
                }, {
                    offset: token[2] + 1
                });
            }
        },
        {
            key: "unknownWord",
            value: function unknownWord(tokens) {
                throw this.input.error("Unknown word", {
                    offset: tokens[0][2]
                }, {
                    offset: tokens[0][2] + tokens[0][1].length
                });
            }
        },
        {
            key: "unnamedAtrule",
            value: function unnamedAtrule(node, token) {
                throw this.input.error("At-rule without name", {
                    offset: token[2]
                }, {
                    offset: token[2] + token[1].length
                });
            }
        }
    ]);
    return Parser;
}();
$f02ef31b5cd4fa60$exports = $f02ef31b5cd4fa60$var$Parser;


function $516f2d017314116b$var$parse(css, opts) {
    var input = new $93fb52c13f252725$exports(css, opts);
    var parser = new $f02ef31b5cd4fa60$exports(input);
    try {
        parser.parse();
    } catch (e) {
        throw e;
    }
    return parser.root;
}
$516f2d017314116b$exports = $516f2d017314116b$var$parse;
$516f2d017314116b$var$parse.default = $516f2d017314116b$var$parse;
$9612b3c428fe3fd1$exports.registerParse($516f2d017314116b$var$parse);


var $fdd3db038d071985$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");
"use strict";
var $504e5233035d4fdb$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");
"use strict";
var $504e5233035d4fdb$var$Warning = /*#__PURE__*/ function() {
    function Warning(text) {
        var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        (0, $hrxTm._)(this, Warning);
        this.type = "warning";
        this.text = text;
        if (opts.node && opts.node.source) {
            var range = opts.node.rangeBy(opts);
            this.line = range.start.line;
            this.column = range.start.column;
            this.endLine = range.end.line;
            this.endColumn = range.end.column;
        }
        for(var opt in opts)this[opt] = opts[opt];
    }
    (0, $ggnt0._)(Warning, [
        {
            key: "toString",
            value: function toString() {
                if (this.node) return this.node.error(this.text, {
                    index: this.index,
                    plugin: this.plugin,
                    word: this.word
                }).message;
                if (this.plugin) return this.plugin + ": " + this.text;
                return this.text;
            }
        }
    ]);
    return Warning;
}();
$504e5233035d4fdb$exports = $504e5233035d4fdb$var$Warning;
$504e5233035d4fdb$var$Warning.default = $504e5233035d4fdb$var$Warning;


var $fdd3db038d071985$var$Result = /*#__PURE__*/ function() {
    function Result(processor, root, opts) {
        (0, $hrxTm._)(this, Result);
        this.processor = processor;
        this.messages = [];
        this.root = root;
        this.opts = opts;
        this.css = undefined;
        this.map = undefined;
    }
    (0, $ggnt0._)(Result, [
        {
            key: "toString",
            value: function toString() {
                return this.css;
            }
        },
        {
            key: "warn",
            value: function warn(text) {
                var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                if (!opts.plugin) {
                    if (this.lastPlugin && this.lastPlugin.postcssPlugin) opts.plugin = this.lastPlugin.postcssPlugin;
                }
                var warning = new $504e5233035d4fdb$exports(text, opts);
                this.messages.push(warning);
                return warning;
            }
        },
        {
            key: "warnings",
            value: function warnings() {
                return this.messages.filter(function(i) {
                    return i.type === "warning";
                });
            }
        },
        {
            key: "content",
            get: function get() {
                return this.css;
            }
        }
    ]);
    return Result;
}();
$fdd3db038d071985$exports = $fdd3db038d071985$var$Result;
$fdd3db038d071985$var$Result.default = $fdd3db038d071985$var$Result;





var $969345717cd6c866$var$isClean = $148a95f998492e74$export$ae5e7911ce0728f9, $969345717cd6c866$var$my = $148a95f998492e74$export$94fa0a6beb22f989;
var $6792a6f5ce4422a2$exports = {};
/* eslint-disable no-console */ "use strict";
var $6792a6f5ce4422a2$var$printed = {};
$6792a6f5ce4422a2$exports = function warnOnce(message) {
    if ($6792a6f5ce4422a2$var$printed[message]) return;
    $6792a6f5ce4422a2$var$printed[message] = true;
    if (typeof console !== "undefined" && console.warn) console.warn(message);
};


var $969345717cd6c866$var$TYPE_TO_CLASS_NAME = {
    atrule: "AtRule",
    comment: "Comment",
    decl: "Declaration",
    document: "Document",
    root: "Root",
    rule: "Rule"
};
var $969345717cd6c866$var$PLUGIN_PROPS = {
    AtRule: true,
    AtRuleExit: true,
    Comment: true,
    CommentExit: true,
    Declaration: true,
    DeclarationExit: true,
    Document: true,
    DocumentExit: true,
    Once: true,
    OnceExit: true,
    postcssPlugin: true,
    prepare: true,
    Root: true,
    RootExit: true,
    Rule: true,
    RuleExit: true
};
var $969345717cd6c866$var$NOT_VISITORS = {
    Once: true,
    postcssPlugin: true,
    prepare: true
};
var $969345717cd6c866$var$CHILDREN = 0;
function $969345717cd6c866$var$isPromise(obj) {
    return typeof obj === "object" && typeof obj.then === "function";
}
function $969345717cd6c866$var$getEvents(node) {
    var key = false;
    var type = $969345717cd6c866$var$TYPE_TO_CLASS_NAME[node.type];
    if (node.type === "decl") key = node.prop.toLowerCase();
    else if (node.type === "atrule") key = node.name.toLowerCase();
    if (key && node.append) return [
        type,
        type + "-" + key,
        $969345717cd6c866$var$CHILDREN,
        type + "Exit",
        type + "Exit-" + key
    ];
    else if (key) return [
        type,
        type + "-" + key,
        type + "Exit",
        type + "Exit-" + key
    ];
    else if (node.append) return [
        type,
        $969345717cd6c866$var$CHILDREN,
        type + "Exit"
    ];
    else return [
        type,
        type + "Exit"
    ];
}
function $969345717cd6c866$var$toStack(node) {
    var events;
    if (node.type === "document") events = [
        "Document",
        $969345717cd6c866$var$CHILDREN,
        "DocumentExit"
    ];
    else if (node.type === "root") events = [
        "Root",
        $969345717cd6c866$var$CHILDREN,
        "RootExit"
    ];
    else events = $969345717cd6c866$var$getEvents(node);
    return {
        eventIndex: 0,
        events: events,
        iterator: 0,
        node: node,
        visitorIndex: 0,
        visitors: []
    };
}
function $969345717cd6c866$var$cleanMarks(node) {
    node[$969345717cd6c866$var$isClean] = false;
    if (node.nodes) node.nodes.forEach(function(i) {
        return $969345717cd6c866$var$cleanMarks(i);
    });
    return node;
}
var $969345717cd6c866$var$postcss = {};
var $969345717cd6c866$var$LazyResult = /*#__PURE__*/ function() {
    function LazyResult(processor, css, opts) {
        var _this = this;
        (0, $hrxTm._)(this, LazyResult);
        this.stringified = false;
        this.processed = false;
        var root;
        if (typeof css === "object" && css !== null && (css.type === "root" || css.type === "document")) root = $969345717cd6c866$var$cleanMarks(css);
        else if (css instanceof LazyResult || css instanceof $fdd3db038d071985$exports) {
            root = $969345717cd6c866$var$cleanMarks(css.root);
            if (css.map) {
                if (typeof opts.map === "undefined") opts.map = {};
                if (!opts.map.inline) opts.map.inline = false;
                opts.map.prev = css.map;
            }
        } else {
            var parser = $516f2d017314116b$exports;
            if (opts.syntax) parser = opts.syntax.parse;
            if (opts.parser) parser = opts.parser;
            if (parser.parse) parser = parser.parse;
            try {
                root = parser(css, opts);
            } catch (error) {
                this.processed = true;
                this.error = error;
            }
            if (root && !root[$969345717cd6c866$var$my]) /* c8 ignore next 2 */ $9612b3c428fe3fd1$exports.rebuild(root);
        }
        this.result = new $fdd3db038d071985$exports(processor, root, opts);
        this.helpers = (0, $09f2b5c72ab52c9f$export$71511d61b312f219)((0, $1b4e013f19afac76$export$71511d61b312f219)({}, $969345717cd6c866$var$postcss), {
            postcss: $969345717cd6c866$var$postcss,
            result: this.result
        });
        this.plugins = this.processor.plugins.map(function(plugin) {
            if (typeof plugin === "object" && plugin.prepare) return (0, $1b4e013f19afac76$export$71511d61b312f219)({}, plugin, plugin.prepare(_this.result));
            else return plugin;
        });
    }
    (0, $ggnt0._)(LazyResult, [
        {
            key: "async",
            value: function async() {
                if (this.error) return Promise.reject(this.error);
                if (this.processed) return Promise.resolve(this.result);
                if (!this.processing) this.processing = this.runAsync();
                return this.processing;
            }
        },
        {
            key: "catch",
            value: function _catch(onRejected) {
                return this.async().catch(onRejected);
            }
        },
        {
            key: "finally",
            value: function _finally(onFinally) {
                return this.async().then(onFinally, onFinally);
            }
        },
        {
            key: "getAsyncError",
            value: function getAsyncError() {
                throw new Error("Use process(css).then(cb) to work with async plugins");
            }
        },
        {
            key: "handleError",
            value: function handleError(error, node) {
                var plugin = this.result.lastPlugin;
                try {
                    if (node) node.addToError(error);
                    this.error = error;
                    if (error.name === "CssSyntaxError" && !error.plugin) {
                        error.plugin = plugin.postcssPlugin;
                        error.setMessage();
                    } else plugin.postcssVersion;
                } catch (err) {
                    /* c8 ignore next 3 */ // eslint-disable-next-line no-console
                    if (console && console.error) console.error(err);
                }
                return error;
            }
        },
        {
            key: "prepareVisitors",
            value: function prepareVisitors() {
                var _this = this;
                this.listeners = {};
                var add = function(plugin, type, cb) {
                    if (!_this.listeners[type]) _this.listeners[type] = [];
                    _this.listeners[type].push([
                        plugin,
                        cb
                    ]);
                };
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var plugin = _step.value;
                        if (typeof plugin === "object") for(var event in plugin){
                            if (!$969345717cd6c866$var$PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) throw new Error("Unknown event ".concat(event, " in ").concat(plugin.postcssPlugin, ". ") + "Try to update PostCSS (".concat(this.processor.version, " now)."));
                            if (!$969345717cd6c866$var$NOT_VISITORS[event]) {
                                if (typeof plugin[event] === "object") {
                                    for(var filter in plugin[event])if (filter === "*") add(plugin, event, plugin[event][filter]);
                                    else add(plugin, event + "-" + filter.toLowerCase(), plugin[event][filter]);
                                } else if (typeof plugin[event] === "function") add(plugin, event, plugin[event]);
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this.hasListener = Object.keys(this.listeners).length > 0;
            }
        },
        {
            key: "runAsync",
            value: function runAsync() {
                var _this = this;
                return (0, $ba0748fc6d85beab$export$71511d61b312f219)(function() {
                    var i, plugin, promise, error, root, stack, promise1, e, node, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, err;
                    return (0, $04f2fd83a0b0b7f9$export$67ebef60e6f28a6)(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                _this.plugin = 0;
                                i = 0;
                                _state.label = 1;
                            case 1:
                                if (!(i < _this.plugins.length)) return [
                                    3,
                                    6
                                ];
                                plugin = _this.plugins[i];
                                promise = _this.runOnRoot(plugin);
                                if (!$969345717cd6c866$var$isPromise(promise)) return [
                                    3,
                                    5
                                ];
                                _state.label = 2;
                            case 2:
                                _state.trys.push([
                                    2,
                                    4,
                                    ,
                                    5
                                ]);
                                return [
                                    4,
                                    promise
                                ];
                            case 3:
                                _state.sent();
                                return [
                                    3,
                                    5
                                ];
                            case 4:
                                error = _state.sent();
                                throw _this.handleError(error);
                            case 5:
                                i++;
                                return [
                                    3,
                                    1
                                ];
                            case 6:
                                _this.prepareVisitors();
                                if (!_this.hasListener) return [
                                    3,
                                    22
                                ];
                                root = _this.result.root;
                                _state.label = 7;
                            case 7:
                                if (!!root[$969345717cd6c866$var$isClean]) return [
                                    3,
                                    14
                                ];
                                root[$969345717cd6c866$var$isClean] = true;
                                stack = [
                                    $969345717cd6c866$var$toStack(root)
                                ];
                                _state.label = 8;
                            case 8:
                                if (!(stack.length > 0)) return [
                                    3,
                                    13
                                ];
                                promise1 = _this.visitTick(stack);
                                if (!$969345717cd6c866$var$isPromise(promise1)) return [
                                    3,
                                    12
                                ];
                                _state.label = 9;
                            case 9:
                                _state.trys.push([
                                    9,
                                    11,
                                    ,
                                    12
                                ]);
                                return [
                                    4,
                                    promise1
                                ];
                            case 10:
                                _state.sent();
                                return [
                                    3,
                                    12
                                ];
                            case 11:
                                e = _state.sent();
                                node = stack[stack.length - 1].node;
                                throw _this.handleError(e, node);
                            case 12:
                                return [
                                    3,
                                    8
                                ];
                            case 13:
                                return [
                                    3,
                                    7
                                ];
                            case 14:
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                if (!_this.listeners.OnceExit) return [
                                    3,
                                    22
                                ];
                                _state.label = 15;
                            case 15:
                                _state.trys.push([
                                    15,
                                    20,
                                    21,
                                    22
                                ]);
                                _loop = function() {
                                    var _step_value, plugin, visitor, roots, e;
                                    return (0, $04f2fd83a0b0b7f9$export$67ebef60e6f28a6)(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                _step_value = (0, $c26877c109f33d6d$export$71511d61b312f219)(_step.value, 2), plugin = _step_value[0], visitor = _step_value[1];
                                                _this.result.lastPlugin = plugin;
                                                _state.label = 1;
                                            case 1:
                                                _state.trys.push([
                                                    1,
                                                    6,
                                                    ,
                                                    7
                                                ]);
                                                if (!(root.type === "document")) return [
                                                    3,
                                                    3
                                                ];
                                                roots = root.nodes.map(function(subRoot) {
                                                    return visitor(subRoot, _this.helpers);
                                                });
                                                return [
                                                    4,
                                                    Promise.all(roots)
                                                ];
                                            case 2:
                                                _state.sent();
                                                return [
                                                    3,
                                                    5
                                                ];
                                            case 3:
                                                return [
                                                    4,
                                                    visitor(root, _this.helpers)
                                                ];
                                            case 4:
                                                _state.sent();
                                                _state.label = 5;
                                            case 5:
                                                return [
                                                    3,
                                                    7
                                                ];
                                            case 6:
                                                e = _state.sent();
                                                throw _this.handleError(e);
                                            case 7:
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                };
                                _iterator = _this.listeners.OnceExit[Symbol.iterator]();
                                _state.label = 16;
                            case 16:
                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                    3,
                                    19
                                ];
                                return [
                                    5,
                                    (0, $04f2fd83a0b0b7f9$export$19a8beecd37a4c45)(_loop())
                                ];
                            case 17:
                                _state.sent();
                                _state.label = 18;
                            case 18:
                                _iteratorNormalCompletion = true;
                                return [
                                    3,
                                    16
                                ];
                            case 19:
                                return [
                                    3,
                                    22
                                ];
                            case 20:
                                err = _state.sent();
                                _didIteratorError = true;
                                _iteratorError = err;
                                return [
                                    3,
                                    22
                                ];
                            case 21:
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 22:
                                _this.processed = true;
                                return [
                                    2,
                                    _this.stringify()
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "runOnRoot",
            value: function runOnRoot(plugin) {
                var _this = this;
                this.result.lastPlugin = plugin;
                try {
                    if (typeof plugin === "object" && plugin.Once) {
                        if (this.result.root.type === "document") {
                            var roots = this.result.root.nodes.map(function(root) {
                                return plugin.Once(root, _this.helpers);
                            });
                            if ($969345717cd6c866$var$isPromise(roots[0])) return Promise.all(roots);
                            return roots;
                        }
                        return plugin.Once(this.result.root, this.helpers);
                    } else if (typeof plugin === "function") return plugin(this.result.root, this.result);
                } catch (error) {
                    throw this.handleError(error);
                }
            }
        },
        {
            key: "stringify",
            value: function stringify1() {
                if (this.error) throw this.error;
                if (this.stringified) return this.result;
                this.stringified = true;
                this.sync();
                var opts = this.result.opts;
                var str = $1e5f7b585f537a11$exports;
                if (opts.syntax) str = opts.syntax.stringify;
                if (opts.stringifier) str = opts.stringifier;
                if (str.stringify) str = str.stringify;
                var map = new $61600793fa84c358$exports(str, this.result.root, this.result.opts);
                var data = map.generate();
                this.result.css = data[0];
                this.result.map = data[1];
                return this.result;
            }
        },
        {
            key: "sync",
            value: function sync() {
                if (this.error) throw this.error;
                if (this.processed) return this.result;
                this.processed = true;
                if (this.processing) throw this.getAsyncError();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var plugin = _step.value;
                        var promise = this.runOnRoot(plugin);
                        if ($969345717cd6c866$var$isPromise(promise)) throw this.getAsyncError();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this.prepareVisitors();
                if (this.hasListener) {
                    var root = this.result.root;
                    while(!root[$969345717cd6c866$var$isClean]){
                        root[$969345717cd6c866$var$isClean] = true;
                        this.walkSync(root);
                    }
                    if (this.listeners.OnceExit) {
                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                        if (root.type === "document") try {
                            for(var _iterator1 = root.nodes[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                var subRoot = _step1.value;
                                this.visitSync(this.listeners.OnceExit, subRoot);
                            }
                        } catch (err) {
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                        }
                        else this.visitSync(this.listeners.OnceExit, root);
                    }
                }
                return this.result;
            }
        },
        {
            key: "then",
            value: function then(onFulfilled, onRejected) {
                return this.async().then(onFulfilled, onRejected);
            }
        },
        {
            key: "toString",
            value: function toString() {
                return this.css;
            }
        },
        {
            key: "visitSync",
            value: function visitSync(visitors, node) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = visitors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = (0, $c26877c109f33d6d$export$71511d61b312f219)(_step.value, 2), plugin = _step_value[0], visitor = _step_value[1];
                        this.result.lastPlugin = plugin;
                        var promise = void 0;
                        try {
                            promise = visitor(node, this.helpers);
                        } catch (e) {
                            throw this.handleError(e, node.proxyOf);
                        }
                        if (node.type !== "root" && node.type !== "document" && !node.parent) return true;
                        if ($969345717cd6c866$var$isPromise(promise)) throw this.getAsyncError();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "visitTick",
            value: function visitTick(stack) {
                var visit = stack[stack.length - 1];
                var node = visit.node, visitors = visit.visitors;
                if (node.type !== "root" && node.type !== "document" && !node.parent) {
                    stack.pop();
                    return;
                }
                if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
                    var _visitors_visit_visitorIndex = (0, $c26877c109f33d6d$export$71511d61b312f219)(visitors[visit.visitorIndex], 2), plugin = _visitors_visit_visitorIndex[0], visitor = _visitors_visit_visitorIndex[1];
                    visit.visitorIndex += 1;
                    if (visit.visitorIndex === visitors.length) {
                        visit.visitors = [];
                        visit.visitorIndex = 0;
                    }
                    this.result.lastPlugin = plugin;
                    try {
                        return visitor(node.toProxy(), this.helpers);
                    } catch (e) {
                        throw this.handleError(e, node);
                    }
                }
                if (visit.iterator !== 0) {
                    var iterator = visit.iterator;
                    var child;
                    while(child = node.nodes[node.indexes[iterator]]){
                        node.indexes[iterator] += 1;
                        if (!child[$969345717cd6c866$var$isClean]) {
                            child[$969345717cd6c866$var$isClean] = true;
                            stack.push($969345717cd6c866$var$toStack(child));
                            return;
                        }
                    }
                    visit.iterator = 0;
                    delete node.indexes[iterator];
                }
                var events = visit.events;
                while(visit.eventIndex < events.length){
                    var event = events[visit.eventIndex];
                    visit.eventIndex += 1;
                    if (event === $969345717cd6c866$var$CHILDREN) {
                        if (node.nodes && node.nodes.length) {
                            node[$969345717cd6c866$var$isClean] = true;
                            visit.iterator = node.getIterator();
                        }
                        return;
                    } else if (this.listeners[event]) {
                        visit.visitors = this.listeners[event];
                        return;
                    }
                }
                stack.pop();
            }
        },
        {
            key: "walkSync",
            value: function walkSync(node) {
                var _this = this;
                node[$969345717cd6c866$var$isClean] = true;
                var events = $969345717cd6c866$var$getEvents(node);
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var event = _step.value;
                        if (event === $969345717cd6c866$var$CHILDREN) {
                            if (node.nodes) node.each(function(child) {
                                if (!child[$969345717cd6c866$var$isClean]) _this.walkSync(child);
                            });
                        } else {
                            var visitors = this.listeners[event];
                            if (visitors) {
                                if (this.visitSync(visitors, node.toProxy())) return;
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: "warnings",
            value: function warnings() {
                return this.sync().warnings();
            }
        },
        {
            key: "content",
            get: function get() {
                return this.stringify().content;
            }
        },
        {
            key: "css",
            get: function get() {
                return this.stringify().css;
            }
        },
        {
            key: "map",
            get: function get() {
                return this.stringify().map;
            }
        },
        {
            key: "messages",
            get: function get() {
                return this.sync().messages;
            }
        },
        {
            key: "opts",
            get: function get() {
                return this.result.opts;
            }
        },
        {
            key: "processor",
            get: function get() {
                return this.result.processor;
            }
        },
        {
            key: "root",
            get: function get() {
                return this.sync().root;
            }
        },
        {
            key: Symbol.toStringTag,
            get: function get() {
                return "LazyResult";
            }
        }
    ]);
    return LazyResult;
}();
$969345717cd6c866$var$LazyResult.registerPostcss = function(dependant) {
    $969345717cd6c866$var$postcss = dependant;
};
$969345717cd6c866$exports = $969345717cd6c866$var$LazyResult;
$969345717cd6c866$var$LazyResult.default = $969345717cd6c866$var$LazyResult;
$ae8fc24052980d85$exports.registerLazyResult($969345717cd6c866$var$LazyResult);
$52805d6bcc4a4a81$exports.registerLazyResult($969345717cd6c866$var$LazyResult);





var $9916aaaffaf49e48$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");
"use strict";


var $075382022b23b9b8$exports = {};

var $hrxTm = parcelRequire("hrxTm");

var $ggnt0 = parcelRequire("ggnt0");

"use strict";





var $075382022b23b9b8$var$NoWorkResult = /*#__PURE__*/ function() {
    function NoWorkResult(processor, css, opts) {
        (0, $hrxTm._)(this, NoWorkResult);
        css = css.toString();
        this.stringified = false;
        this._processor = processor;
        this._css = css;
        this._opts = opts;
        this._map = undefined;
        var root;
        var str = $1e5f7b585f537a11$exports;
        this.result = new $fdd3db038d071985$exports(this._processor, root, this._opts);
        this.result.css = css;
        var self = this;
        Object.defineProperty(this.result, "root", {
            get: function() {
                return self.root;
            }
        });
        var map = new $61600793fa84c358$exports(str, root, this._opts, css);
        if (map.isMap()) {
            var _map_generate = (0, $c26877c109f33d6d$export$71511d61b312f219)(map.generate(), 2), generatedCSS = _map_generate[0], generatedMap = _map_generate[1];
            if (generatedCSS) this.result.css = generatedCSS;
            if (generatedMap) this.result.map = generatedMap;
        } else {
            map.clearAnnotation();
            this.result.css = map.css;
        }
    }
    (0, $ggnt0._)(NoWorkResult, [
        {
            key: "async",
            value: function async() {
                if (this.error) return Promise.reject(this.error);
                return Promise.resolve(this.result);
            }
        },
        {
            key: "catch",
            value: function _catch(onRejected) {
                return this.async().catch(onRejected);
            }
        },
        {
            key: "finally",
            value: function _finally(onFinally) {
                return this.async().then(onFinally, onFinally);
            }
        },
        {
            key: "sync",
            value: function sync() {
                if (this.error) throw this.error;
                return this.result;
            }
        },
        {
            key: "then",
            value: function then(onFulfilled, onRejected) {
                return this.async().then(onFulfilled, onRejected);
            }
        },
        {
            key: "toString",
            value: function toString() {
                return this._css;
            }
        },
        {
            key: "warnings",
            value: function warnings() {
                return [];
            }
        },
        {
            key: "content",
            get: function get() {
                return this.result.css;
            }
        },
        {
            key: "css",
            get: function get() {
                return this.result.css;
            }
        },
        {
            key: "map",
            get: function get() {
                return this.result.map;
            }
        },
        {
            key: "messages",
            get: function get() {
                return [];
            }
        },
        {
            key: "opts",
            get: function get() {
                return this.result.opts;
            }
        },
        {
            key: "processor",
            get: function get() {
                return this.result.processor;
            }
        },
        {
            key: "root",
            get: function get() {
                if (this._root) return this._root;
                var root;
                var parser = $516f2d017314116b$exports;
                try {
                    root = parser(this._css, this._opts);
                } catch (error) {
                    this.error = error;
                }
                if (this.error) throw this.error;
                else {
                    this._root = root;
                    return root;
                }
            }
        },
        {
            key: Symbol.toStringTag,
            get: function get() {
                return "NoWorkResult";
            }
        }
    ]);
    return NoWorkResult;
}();
$075382022b23b9b8$exports = $075382022b23b9b8$var$NoWorkResult;
$075382022b23b9b8$var$NoWorkResult.default = $075382022b23b9b8$var$NoWorkResult;



var $9916aaaffaf49e48$var$Processor = /*#__PURE__*/ function() {
    function Processor() {
        var plugins = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        (0, $hrxTm._)(this, Processor);
        this.version = "8.4.45";
        this.plugins = this.normalize(plugins);
    }
    (0, $ggnt0._)(Processor, [
        {
            key: "normalize",
            value: function normalize(plugins) {
                var normalized = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var i = _step.value;
                        if (i.postcss === true) i = i();
                        else if (i.postcss) i = i.postcss;
                        if (typeof i === "object" && Array.isArray(i.plugins)) normalized = normalized.concat(i.plugins);
                        else if (typeof i === "object" && i.postcssPlugin) normalized.push(i);
                        else if (typeof i === "function") normalized.push(i);
                        else if (typeof i === "object" && (i.parse || i.stringify)) ;
                        else throw new Error(i + " is not a PostCSS plugin");
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return normalized;
            }
        },
        {
            key: "process",
            value: function process(css) {
                var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                if (!this.plugins.length && !opts.parser && !opts.stringifier && !opts.syntax) return new $075382022b23b9b8$exports(this, css, opts);
                else return new $969345717cd6c866$exports(this, css, opts);
            }
        },
        {
            key: "use",
            value: function use(plugin) {
                this.plugins = this.plugins.concat(this.normalize([
                    plugin
                ]));
                return this;
            }
        }
    ]);
    return Processor;
}();
$9916aaaffaf49e48$exports = $9916aaaffaf49e48$var$Processor;
$9916aaaffaf49e48$var$Processor.default = $9916aaaffaf49e48$var$Processor;
$ae8fc24052980d85$exports.registerProcessor($9916aaaffaf49e48$var$Processor);
$52805d6bcc4a4a81$exports.registerProcessor($9916aaaffaf49e48$var$Processor);







function $cca90c60f8638a71$var$postcss() {
    for(var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++){
        plugins[_key] = arguments[_key];
    }
    if (plugins.length === 1 && Array.isArray(plugins[0])) plugins = plugins[0];
    return new $9916aaaffaf49e48$exports(plugins);
}
$cca90c60f8638a71$var$postcss.plugin = function plugin(name, initializer) {
    var warningPrinted = false;
    function creator() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        // eslint-disable-next-line no-console
        if (console && console.warn && !warningPrinted) {
            warningPrinted = true;
            // eslint-disable-next-line no-console
            console.warn(name + ": postcss.plugin was deprecated. Migration guide:\n" + "https://evilmartians.com/chronicles/postcss-8-plugin-migration");
        }
        var transformer = initializer.apply(void 0, (0, $bff51d46f29b3217$export$71511d61b312f219)(args));
        transformer.postcssPlugin = name;
        transformer.postcssVersion = new $9916aaaffaf49e48$exports().version;
        return transformer;
    }
    var cache;
    Object.defineProperty(creator, "postcss", {
        get: function() {
            if (!cache) cache = creator();
            return cache;
        }
    });
    creator.process = function(css, processOpts, pluginOpts) {
        return $cca90c60f8638a71$var$postcss([
            creator(pluginOpts)
        ]).process(css, processOpts);
    };
    return creator;
};
$cca90c60f8638a71$var$postcss.stringify = $1e5f7b585f537a11$exports;
$cca90c60f8638a71$var$postcss.parse = $516f2d017314116b$exports;
$cca90c60f8638a71$var$postcss.fromJSON = $6da1ad5aee998559$exports;
$cca90c60f8638a71$var$postcss.list = $7819385ed5955cd8$exports;
$cca90c60f8638a71$var$postcss.comment = function(defaults) {
    return new $4ffe0aecb4f3941f$exports(defaults);
};
$cca90c60f8638a71$var$postcss.atRule = function(defaults) {
    return new $9918148dc58deaa7$exports(defaults);
};
$cca90c60f8638a71$var$postcss.decl = function(defaults) {
    return new $3cdf0ec7053e5217$exports(defaults);
};
$cca90c60f8638a71$var$postcss.rule = function(defaults) {
    return new $e7056ab1d7beb449$exports(defaults);
};
$cca90c60f8638a71$var$postcss.root = function(defaults) {
    return new $ae8fc24052980d85$exports(defaults);
};
$cca90c60f8638a71$var$postcss.document = function(defaults) {
    return new $52805d6bcc4a4a81$exports(defaults);
};
$cca90c60f8638a71$var$postcss.CssSyntaxError = $f2a489e4c330b6d5$exports;
$cca90c60f8638a71$var$postcss.Declaration = $3cdf0ec7053e5217$exports;
$cca90c60f8638a71$var$postcss.Container = $9612b3c428fe3fd1$exports;
$cca90c60f8638a71$var$postcss.Processor = $9916aaaffaf49e48$exports;
$cca90c60f8638a71$var$postcss.Document = $52805d6bcc4a4a81$exports;
$cca90c60f8638a71$var$postcss.Comment = $4ffe0aecb4f3941f$exports;
$cca90c60f8638a71$var$postcss.Warning = $504e5233035d4fdb$exports;
$cca90c60f8638a71$var$postcss.AtRule = $9918148dc58deaa7$exports;
$cca90c60f8638a71$var$postcss.Result = $fdd3db038d071985$exports;
$cca90c60f8638a71$var$postcss.Input = $93fb52c13f252725$exports;
$cca90c60f8638a71$var$postcss.Rule = $e7056ab1d7beb449$exports;
$cca90c60f8638a71$var$postcss.Root = $ae8fc24052980d85$exports;
$cca90c60f8638a71$var$postcss.Node = $b8451bfdea497ff3$exports;
$969345717cd6c866$exports.registerPostcss($cca90c60f8638a71$var$postcss);
$cca90c60f8638a71$exports = $cca90c60f8638a71$var$postcss;
$cca90c60f8638a71$var$postcss.default = $cca90c60f8638a71$var$postcss;


var $d993ded166d3bfa4$var$postcssParse = $cca90c60f8638a71$exports.parse;
// Tags that can conceivably represent stand-alone media.
var $d993ded166d3bfa4$var$mediaTags = [
    "img",
    "audio",
    "video",
    "picture",
    "svg",
    "object",
    "map",
    "iframe",
    "embed"
];
// Tags that are inherently vulnerable to being used in XSS attacks.
var $d993ded166d3bfa4$var$vulnerableTags = [
    "script",
    "style"
];
function $d993ded166d3bfa4$var$each(obj, cb) {
    if (obj) Object.keys(obj).forEach(function(key) {
        cb(obj[key], key);
    });
}
// Avoid false positives with .__proto__, .hasOwnProperty, etc.
function $d993ded166d3bfa4$var$has(obj, key) {
    return ({}).hasOwnProperty.call(obj, key);
}
// Returns those elements of `a` for which `cb(a)` returns truthy
function $d993ded166d3bfa4$var$filter(a, cb) {
    var n = [];
    $d993ded166d3bfa4$var$each(a, function(v) {
        if (cb(v)) n.push(v);
    });
    return n;
}
function $d993ded166d3bfa4$var$isEmptyObject(obj) {
    for(var key in obj){
        if ($d993ded166d3bfa4$var$has(obj, key)) return false;
    }
    return true;
}
function $d993ded166d3bfa4$var$stringifySrcset(parsedSrcset) {
    return parsedSrcset.map(function(part) {
        if (!part.url) throw new Error("URL missing");
        return part.url + (part.w ? " ".concat(part.w, "w") : "") + (part.h ? " ".concat(part.h, "h") : "") + (part.d ? " ".concat(part.d, "x") : "");
    }).join(", ");
}
$d993ded166d3bfa4$exports = $d993ded166d3bfa4$var$sanitizeHtml;
// A valid attribute name.
// We use a tolerant definition based on the set of strings defined by
// html.spec.whatwg.org/multipage/parsing.html#before-attribute-name-state
// and html.spec.whatwg.org/multipage/parsing.html#attribute-name-state .
// The characters accepted are ones which can be appended to the attribute
// name buffer without triggering a parse error:
//   * unexpected-equals-sign-before-attribute-name
//   * unexpected-null-character
//   * unexpected-character-in-attribute-name
// We exclude the empty string because it's impossible to get to the after
// attribute name state with an empty attribute name buffer.
var $d993ded166d3bfa4$var$VALID_HTML_ATTRIBUTE_NAME = /^[^\0\t\n\f\r /<=>]+$/;
// Ignore the _recursing flag; it's there for recursive
// invocation as a guard against this exploit:
// https://github.com/fb55/htmlparser2/issues/105
function $d993ded166d3bfa4$var$sanitizeHtml(html, options, _recursing) {
    if (html == null) return "";
    if (typeof html === "number") html = html.toString();
    var result = "";
    // Used for hot swapping the result variable with an empty string in order to "capture" the text written to it.
    var tempResult = "";
    function Frame(tag, attribs) {
        var that = this;
        this.tag = tag;
        this.attribs = attribs || {};
        this.tagPosition = result.length;
        this.text = ""; // Node inner text
        this.mediaChildren = [];
        this.updateParentNodeText = function() {
            if (stack.length) {
                var parentFrame = stack[stack.length - 1];
                parentFrame.text += that.text;
            }
        };
        this.updateParentNodeMediaChildren = function() {
            if (stack.length && $d993ded166d3bfa4$var$mediaTags.includes(this.tag)) {
                var parentFrame = stack[stack.length - 1];
                parentFrame.mediaChildren.push(this.tag);
            }
        };
    }
    options = Object.assign({}, $d993ded166d3bfa4$var$sanitizeHtml.defaults, options);
    options.parser = Object.assign({}, $d993ded166d3bfa4$var$htmlParserDefaults, options.parser);
    var tagAllowed = function tagAllowed(name) {
        return options.allowedTags === false || (options.allowedTags || []).indexOf(name) > -1;
    };
    // vulnerableTags
    $d993ded166d3bfa4$var$vulnerableTags.forEach(function(tag) {
        if (tagAllowed(tag) && !options.allowVulnerableTags) console.warn("\n\n\u26A0\uFE0F Your `allowedTags` option includes, `".concat(tag, "`, which is inherently\nvulnerable to XSS attacks. Please remove it from `allowedTags`.\nOr, to disable this warning, add the `allowVulnerableTags` option\nand ensure you are accounting for this risk.\n\n"));
    });
    // Tags that contain something other than HTML, or where discarding
    // the text when the tag is disallowed makes sense for other reasons.
    // If we are not allowing these tags, we should drop their content too.
    // For other tags you would drop the tag but keep its content.
    var nonTextTagsArray = options.nonTextTags || [
        "script",
        "style",
        "textarea",
        "option"
    ];
    var allowedAttributesMap;
    var allowedAttributesGlobMap;
    if (options.allowedAttributes) {
        allowedAttributesMap = {};
        allowedAttributesGlobMap = {};
        $d993ded166d3bfa4$var$each(options.allowedAttributes, function(attributes, tag) {
            allowedAttributesMap[tag] = [];
            var globRegex = [];
            attributes.forEach(function(obj) {
                if (typeof obj === "string" && obj.indexOf("*") >= 0) globRegex.push($123407e4f14baa13$exports(obj).replace(/\\\*/g, ".*"));
                else allowedAttributesMap[tag].push(obj);
            });
            if (globRegex.length) allowedAttributesGlobMap[tag] = new RegExp("^(" + globRegex.join("|") + ")$");
        });
    }
    var allowedClassesMap = {};
    var allowedClassesGlobMap = {};
    var allowedClassesRegexMap = {};
    $d993ded166d3bfa4$var$each(options.allowedClasses, function(classes, tag) {
        // Implicitly allows the class attribute
        if (allowedAttributesMap) {
            if (!$d993ded166d3bfa4$var$has(allowedAttributesMap, tag)) allowedAttributesMap[tag] = [];
            allowedAttributesMap[tag].push("class");
        }
        allowedClassesMap[tag] = classes;
        if (Array.isArray(classes)) {
            var globRegex = [];
            allowedClassesMap[tag] = [];
            allowedClassesRegexMap[tag] = [];
            classes.forEach(function(obj) {
                if (typeof obj === "string" && obj.indexOf("*") >= 0) globRegex.push($123407e4f14baa13$exports(obj).replace(/\\\*/g, ".*"));
                else if (obj instanceof RegExp) allowedClassesRegexMap[tag].push(obj);
                else allowedClassesMap[tag].push(obj);
            });
            if (globRegex.length) allowedClassesGlobMap[tag] = new RegExp("^(" + globRegex.join("|") + ")$");
        }
    });
    var transformTagsMap = {};
    var transformTagsAll;
    $d993ded166d3bfa4$var$each(options.transformTags, function(transform, tag) {
        var transFun;
        if (typeof transform === "function") transFun = transform;
        else if (typeof transform === "string") transFun = $d993ded166d3bfa4$var$sanitizeHtml.simpleTransform(transform);
        if (tag === "*") transformTagsAll = transFun;
        else transformTagsMap[tag] = transFun;
    });
    var depth;
    var stack;
    var skipMap;
    var transformMap;
    var skipText;
    var skipTextDepth;
    var addedText = false;
    initializeState();
    var parser = new $dfff106617eab6a6$export$7acfa6ed01010e37({
        onopentag: function onopentag(name, attribs) {
            // If `enforceHtmlBoundary` is `true` and this has found the opening
            // `html` tag, reset the state.
            if (options.enforceHtmlBoundary && name === "html") initializeState();
            if (skipText) {
                skipTextDepth++;
                return;
            }
            var frame = new Frame(name, attribs);
            stack.push(frame);
            var skip = false;
            var hasText = !!frame.text;
            var transformedTag;
            if ($d993ded166d3bfa4$var$has(transformTagsMap, name)) {
                transformedTag = transformTagsMap[name](name, attribs);
                frame.attribs = attribs = transformedTag.attribs;
                if (transformedTag.text !== undefined) frame.innerText = transformedTag.text;
                if (name !== transformedTag.tagName) {
                    frame.name = name = transformedTag.tagName;
                    transformMap[depth] = transformedTag.tagName;
                }
            }
            if (transformTagsAll) {
                transformedTag = transformTagsAll(name, attribs);
                frame.attribs = attribs = transformedTag.attribs;
                if (name !== transformedTag.tagName) {
                    frame.name = name = transformedTag.tagName;
                    transformMap[depth] = transformedTag.tagName;
                }
            }
            if (!tagAllowed(name) || options.disallowedTagsMode === "recursiveEscape" && !$d993ded166d3bfa4$var$isEmptyObject(skipMap) || options.nestingLimit != null && depth >= options.nestingLimit) {
                skip = true;
                skipMap[depth] = true;
                if (options.disallowedTagsMode === "discard" || options.disallowedTagsMode === "completelyDiscard") {
                    if (nonTextTagsArray.indexOf(name) !== -1) {
                        skipText = true;
                        skipTextDepth = 1;
                    }
                }
                skipMap[depth] = true;
            }
            depth++;
            if (skip) {
                if (options.disallowedTagsMode === "discard" || options.disallowedTagsMode === "completelyDiscard") // We want the contents but not this tag
                return;
                tempResult = result;
                result = "";
            }
            result += "<" + name;
            if (name === "script") {
                if (options.allowedScriptHostnames || options.allowedScriptDomains) frame.innerText = "";
            }
            if (!allowedAttributesMap || $d993ded166d3bfa4$var$has(allowedAttributesMap, name) || allowedAttributesMap["*"]) $d993ded166d3bfa4$var$each(attribs, function(value, a) {
                if (!$d993ded166d3bfa4$var$VALID_HTML_ATTRIBUTE_NAME.test(a)) {
                    // This prevents part of an attribute name in the output from being
                    // interpreted as the end of an attribute, or end of a tag.
                    delete frame.attribs[a];
                    return;
                }
                // If the value is empty, check if the attribute is in the allowedEmptyAttributes array.
                // If it is not in the allowedEmptyAttributes array, and it is a known non-boolean attribute, delete it
                // List taken from https://html.spec.whatwg.org/multipage/indices.html#attributes-3
                if (value === "" && !options.allowedEmptyAttributes.includes(a) && (options.nonBooleanAttributes.includes(a) || options.nonBooleanAttributes.includes("*"))) {
                    delete frame.attribs[a];
                    return;
                }
                // check allowedAttributesMap for the element and attribute and modify the value
                // as necessary if there are specific values defined.
                var passedAllowedAttributesMapCheck = false;
                if (!allowedAttributesMap || $d993ded166d3bfa4$var$has(allowedAttributesMap, name) && allowedAttributesMap[name].indexOf(a) !== -1 || allowedAttributesMap["*"] && allowedAttributesMap["*"].indexOf(a) !== -1 || $d993ded166d3bfa4$var$has(allowedAttributesGlobMap, name) && allowedAttributesGlobMap[name].test(a) || allowedAttributesGlobMap["*"] && allowedAttributesGlobMap["*"].test(a)) passedAllowedAttributesMapCheck = true;
                else if (allowedAttributesMap && allowedAttributesMap[name]) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = allowedAttributesMap[name][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var o = _step.value;
                            if ($d993ded166d3bfa4$require$isPlainObject(o) && o.name && o.name === a) {
                                passedAllowedAttributesMapCheck = true;
                                var newValue = "";
                                if (o.multiple === true) {
                                    // verify the values that are allowed
                                    var splitStrArray = value.split(" ");
                                    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                    try {
                                        for(var _iterator1 = splitStrArray[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                                            var s = _step1.value;
                                            if (o.values.indexOf(s) !== -1) {
                                                if (newValue === "") newValue = s;
                                                else newValue += " " + s;
                                            }
                                        }
                                    } catch (err) {
                                        _didIteratorError1 = true;
                                        _iteratorError1 = err;
                                    } finally{
                                        try {
                                            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                                _iterator1.return();
                                            }
                                        } finally{
                                            if (_didIteratorError1) {
                                                throw _iteratorError1;
                                            }
                                        }
                                    }
                                } else if (o.values.indexOf(value) >= 0) // verified an allowed value matches the entire attribute value
                                newValue = value;
                                value = newValue;
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
                if (passedAllowedAttributesMapCheck) {
                    if (options.allowedSchemesAppliedToAttributes.indexOf(a) !== -1) {
                        if (naughtyHref(name, value)) {
                            delete frame.attribs[a];
                            return;
                        }
                    }
                    if (name === "script" && a === "src") {
                        var allowed = true;
                        try {
                            var parsed = parseUrl(value);
                            if (options.allowedScriptHostnames || options.allowedScriptDomains) {
                                var allowedHostname = (options.allowedScriptHostnames || []).find(function(hostname) {
                                    return hostname === parsed.url.hostname;
                                });
                                var allowedDomain = (options.allowedScriptDomains || []).find(function(domain) {
                                    return parsed.url.hostname === domain || parsed.url.hostname.endsWith(".".concat(domain));
                                });
                                allowed = allowedHostname || allowedDomain;
                            }
                        } catch (e) {
                            allowed = false;
                        }
                        if (!allowed) {
                            delete frame.attribs[a];
                            return;
                        }
                    }
                    if (name === "iframe" && a === "src") {
                        var allowed1 = true;
                        try {
                            var parsed1 = parseUrl(value);
                            if (parsed1.isRelativeUrl) // default value of allowIframeRelativeUrls is true
                            // unless allowedIframeHostnames or allowedIframeDomains specified
                            allowed1 = $d993ded166d3bfa4$var$has(options, "allowIframeRelativeUrls") ? options.allowIframeRelativeUrls : !options.allowedIframeHostnames && !options.allowedIframeDomains;
                            else if (options.allowedIframeHostnames || options.allowedIframeDomains) {
                                var allowedHostname1 = (options.allowedIframeHostnames || []).find(function(hostname) {
                                    return hostname === parsed1.url.hostname;
                                });
                                var allowedDomain1 = (options.allowedIframeDomains || []).find(function(domain) {
                                    return parsed1.url.hostname === domain || parsed1.url.hostname.endsWith(".".concat(domain));
                                });
                                allowed1 = allowedHostname1 || allowedDomain1;
                            }
                        } catch (e) {
                            // Unparseable iframe src
                            allowed1 = false;
                        }
                        if (!allowed1) {
                            delete frame.attribs[a];
                            return;
                        }
                    }
                    if (a === "srcset") try {
                        var parsed2 = $51f7ba580508b602$exports(value);
                        parsed2.forEach(function(value) {
                            if (naughtyHref("srcset", value.url)) value.evil = true;
                        });
                        parsed2 = $d993ded166d3bfa4$var$filter(parsed2, function(v) {
                            return !v.evil;
                        });
                        if (!parsed2.length) {
                            delete frame.attribs[a];
                            return;
                        } else {
                            value = $d993ded166d3bfa4$var$stringifySrcset($d993ded166d3bfa4$var$filter(parsed2, function(v) {
                                return !v.evil;
                            }));
                            frame.attribs[a] = value;
                        }
                    } catch (e) {
                        // Unparseable srcset
                        delete frame.attribs[a];
                        return;
                    }
                    if (a === "class") {
                        var allowedSpecificClasses = allowedClassesMap[name];
                        var allowedWildcardClasses = allowedClassesMap["*"];
                        var allowedSpecificClassesGlob = allowedClassesGlobMap[name];
                        var allowedSpecificClassesRegex = allowedClassesRegexMap[name];
                        var allowedWildcardClassesGlob = allowedClassesGlobMap["*"];
                        var allowedClassesGlobs = [
                            allowedSpecificClassesGlob,
                            allowedWildcardClassesGlob
                        ].concat(allowedSpecificClassesRegex).filter(function(t) {
                            return t;
                        });
                        if (allowedSpecificClasses && allowedWildcardClasses) value = filterClasses(value, $f9e6a54d5717f04d$exports(allowedSpecificClasses, allowedWildcardClasses), allowedClassesGlobs);
                        else value = filterClasses(value, allowedSpecificClasses || allowedWildcardClasses, allowedClassesGlobs);
                        if (!value.length) {
                            delete frame.attribs[a];
                            return;
                        }
                    }
                    if (a === "style") {
                        if (options.parseStyleAttributes) try {
                            var abstractSyntaxTree = $d993ded166d3bfa4$var$postcssParse(name + " {" + value + "}", {
                                map: false
                            });
                            var filteredAST = filterCss(abstractSyntaxTree, options.allowedStyles);
                            value = stringifyStyleAttributes(filteredAST);
                            if (value.length === 0) {
                                delete frame.attribs[a];
                                return;
                            }
                        } catch (e) {
                            if (typeof window !== "undefined") console.warn('Failed to parse "' + name + " {" + value + "}" + "\", If you're running this in a browser, we recommend to disable style parsing: options.parseStyleAttributes: false, since this only works in a node environment due to a postcss dependency, More info: https://github.com/apostrophecms/sanitize-html/issues/547");
                            delete frame.attribs[a];
                            return;
                        }
                        else if (options.allowedStyles) throw new Error("allowedStyles option cannot be used together with parseStyleAttributes: false.");
                    }
                    result += " " + a;
                    if (value && value.length) result += '="' + escapeHtml(value, true) + '"';
                    else if (options.allowedEmptyAttributes.includes(a)) result += '=""';
                } else delete frame.attribs[a];
            });
            if (options.selfClosing.indexOf(name) !== -1) result += " />";
            else {
                result += ">";
                if (frame.innerText && !hasText && !options.textFilter) {
                    result += escapeHtml(frame.innerText);
                    addedText = true;
                }
            }
            if (skip) {
                result = tempResult + escapeHtml(result);
                tempResult = "";
            }
        },
        ontext: function ontext(text) {
            if (skipText) return;
            var lastFrame = stack[stack.length - 1];
            var tag;
            if (lastFrame) {
                tag = lastFrame.tag;
                // If inner text was set by transform function then let's use it
                text = lastFrame.innerText !== undefined ? lastFrame.innerText : text;
            }
            if (options.disallowedTagsMode === "completelyDiscard" && !tagAllowed(tag)) text = "";
            else if ((options.disallowedTagsMode === "discard" || options.disallowedTagsMode === "completelyDiscard") && (tag === "script" || tag === "style")) // htmlparser2 gives us these as-is. Escaping them ruins the content. Allowing
            // script tags is, by definition, game over for XSS protection, so if that's
            // your concern, don't allow them. The same is essentially true for style tags
            // which have their own collection of XSS vectors.
            result += text;
            else {
                var escaped = escapeHtml(text, false);
                if (options.textFilter && !addedText) result += options.textFilter(escaped, tag);
                else if (!addedText) result += escaped;
            }
            if (stack.length) {
                var frame = stack[stack.length - 1];
                frame.text += text;
            }
        },
        onclosetag: function onclosetag(name, isImplied) {
            if (skipText) {
                skipTextDepth--;
                if (!skipTextDepth) skipText = false;
                else return;
            }
            var frame = stack.pop();
            if (!frame) // Do not crash on bad markup
            return;
            if (frame.tag !== name) {
                // Another case of bad markup.
                // Push to stack, so that it will be used in future closing tags.
                stack.push(frame);
                return;
            }
            skipText = options.enforceHtmlBoundary ? name === "html" : false;
            depth--;
            var skip = skipMap[depth];
            if (skip) {
                delete skipMap[depth];
                if (options.disallowedTagsMode === "discard" || options.disallowedTagsMode === "completelyDiscard") {
                    frame.updateParentNodeText();
                    return;
                }
                tempResult = result;
                result = "";
            }
            if (transformMap[depth]) {
                name = transformMap[depth];
                delete transformMap[depth];
            }
            if (options.exclusiveFilter && options.exclusiveFilter(frame)) {
                result = result.substr(0, frame.tagPosition);
                return;
            }
            frame.updateParentNodeMediaChildren();
            frame.updateParentNodeText();
            if (// Already output />
            options.selfClosing.indexOf(name) !== -1 || // Escaped tag, closing tag is implied
            isImplied && !tagAllowed(name) && [
                "escape",
                "recursiveEscape"
            ].indexOf(options.disallowedTagsMode) >= 0) {
                if (skip) {
                    result = tempResult;
                    tempResult = "";
                }
                return;
            }
            result += "</" + name + ">";
            if (skip) {
                result = tempResult + escapeHtml(result);
                tempResult = "";
            }
            addedText = false;
        }
    }, options.parser);
    parser.write(html);
    parser.end();
    return result;
    function initializeState() {
        result = "";
        depth = 0;
        stack = [];
        skipMap = {};
        transformMap = {};
        skipText = false;
        skipTextDepth = 0;
    }
    function escapeHtml(s, quote) {
        if (typeof s !== "string") s = s + "";
        if (options.parser.decodeEntities) {
            s = s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            if (quote) s = s.replace(/"/g, "&quot;");
        }
        // TODO: this is inadequate because it will pass `&0;`. This approach
        // will not work, each & must be considered with regard to whether it
        // is followed by a 100% syntactically valid entity or not, and escaped
        // if it is not. If this bothers you, don't set parser.decodeEntities
        // to false. (The default is true.)
        s = s.replace(/&(?![a-zA-Z0-9#]{1,20};)/g, "&amp;") // Match ampersands not part of existing HTML entity
        .replace(/</g, "&lt;").replace(/>/g, "&gt;");
        if (quote) s = s.replace(/"/g, "&quot;");
        return s;
    }
    function naughtyHref(name, href) {
        // Browsers ignore character codes of 32 (space) and below in a surprising
        // number of situations. Start reading here:
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab
        // eslint-disable-next-line no-control-regex
        href = href.replace(/[\x00-\x20]+/g, "");
        // Clobber any comments in URLs, which the browser might
        // interpret inside an XML data island, allowing
        // a javascript: URL to be snuck through
        while(true){
            var firstIndex = href.indexOf("<!--");
            if (firstIndex === -1) break;
            var lastIndex = href.indexOf("-->", firstIndex + 4);
            if (lastIndex === -1) break;
            href = href.substring(0, firstIndex) + href.substring(lastIndex + 3);
        }
        // Case insensitive so we don't get faked out by JAVASCRIPT #1
        // Allow more characters after the first so we don't get faked
        // out by certain schemes browsers accept
        var matches = href.match(/^([a-zA-Z][a-zA-Z0-9.\-+]*):/);
        if (!matches) {
            // Protocol-relative URL starting with any combination of '/' and '\'
            if (href.match(/^[/\\]{2}/)) return !options.allowProtocolRelative;
            // No scheme
            return false;
        }
        var scheme = matches[1].toLowerCase();
        if ($d993ded166d3bfa4$var$has(options.allowedSchemesByTag, name)) return options.allowedSchemesByTag[name].indexOf(scheme) === -1;
        return !options.allowedSchemes || options.allowedSchemes.indexOf(scheme) === -1;
    }
    function parseUrl(value) {
        value = value.replace(/^(\w+:)?\s*[\\/]\s*[\\/]/, "$1//");
        if (value.startsWith("relative:")) // An attempt to exploit our workaround for base URLs being
        // mandatory for relative URL validation in the WHATWG
        // URL parser, reject it
        throw new Error("relative: exploit attempt");
        // naughtyHref is in charge of whether protocol relative URLs
        // are cool. Here we are concerned just with allowed hostnames and
        // whether to allow relative URLs.
        //
        // Build a placeholder "base URL" against which any reasonable
        // relative URL may be parsed successfully
        var base = "relative://relative-site";
        for(var i = 0; i < 100; i++)base += "/".concat(i);
        var parsed = new URL(value, base);
        var isRelativeUrl = parsed && parsed.hostname === "relative-site" && parsed.protocol === "relative:";
        return {
            isRelativeUrl: isRelativeUrl,
            url: parsed
        };
    }
    /**
   * Filters user input css properties by allowlisted regex attributes.
   * Modifies the abstractSyntaxTree object.
   *
   * @param {object} abstractSyntaxTree  - Object representation of CSS attributes.
   * @property {array[Declaration]} abstractSyntaxTree.nodes[0] - Each object cointains prop and value key, i.e { prop: 'color', value: 'red' }.
   * @param {object} allowedStyles       - Keys are properties (i.e color), value is list of permitted regex rules (i.e /green/i).
   * @return {object}                    - The modified tree.
   */ function filterCss(abstractSyntaxTree, allowedStyles) {
        if (!allowedStyles) return abstractSyntaxTree;
        var astRules = abstractSyntaxTree.nodes[0];
        var selectedRule;
        // Merge global and tag-specific styles into new AST.
        if (allowedStyles[astRules.selector] && allowedStyles["*"]) selectedRule = $f9e6a54d5717f04d$exports(allowedStyles[astRules.selector], allowedStyles["*"]);
        else selectedRule = allowedStyles[astRules.selector] || allowedStyles["*"];
        if (selectedRule) abstractSyntaxTree.nodes[0].nodes = astRules.nodes.reduce(filterDeclarations(selectedRule), []);
        return abstractSyntaxTree;
    }
    /**
   * Extracts the style attributes from an AbstractSyntaxTree and formats those
   * values in the inline style attribute format.
   *
   * @param  {AbstractSyntaxTree} filteredAST
   * @return {string}             - Example: "color:yellow;text-align:center !important;font-family:helvetica;"
   */ function stringifyStyleAttributes(filteredAST) {
        return filteredAST.nodes[0].nodes.reduce(function(extractedAttributes, attrObject) {
            extractedAttributes.push("".concat(attrObject.prop, ":").concat(attrObject.value).concat(attrObject.important ? " !important" : ""));
            return extractedAttributes;
        }, []).join(";");
    }
    /**
    * Filters the existing attributes for the given property. Discards any attributes
    * which don't match the allowlist.
    *
    * @param  {object} selectedRule             - Example: { color: red, font-family: helvetica }
    * @param  {array} allowedDeclarationsList   - List of declarations which pass the allowlist.
    * @param  {object} attributeObject          - Object representing the current css property.
    * @property {string} attributeObject.type   - Typically 'declaration'.
    * @property {string} attributeObject.prop   - The CSS property, i.e 'color'.
    * @property {string} attributeObject.value  - The corresponding value to the css property, i.e 'red'.
    * @return {function}                        - When used in Array.reduce, will return an array of Declaration objects
    */ function filterDeclarations(selectedRule) {
        return function(allowedDeclarationsList, attributeObject) {
            // If this property is allowlisted...
            if ($d993ded166d3bfa4$var$has(selectedRule, attributeObject.prop)) {
                var matchesRegex = selectedRule[attributeObject.prop].some(function(regularExpression) {
                    return regularExpression.test(attributeObject.value);
                });
                if (matchesRegex) allowedDeclarationsList.push(attributeObject);
            }
            return allowedDeclarationsList;
        };
    }
    function filterClasses(classes, allowed, allowedGlobs) {
        if (!allowed) // The class attribute is allowed without filtering on this tag
        return classes;
        classes = classes.split(/\s+/);
        return classes.filter(function(clss) {
            return allowed.indexOf(clss) !== -1 || allowedGlobs.some(function(glob) {
                return glob.test(clss);
            });
        }).join(" ");
    }
}
// Defaults are accessible to you so that you can use them as a starting point
// programmatically if you wish
var $d993ded166d3bfa4$var$htmlParserDefaults = {
    decodeEntities: true
};
$d993ded166d3bfa4$var$sanitizeHtml.defaults = {
    allowedTags: [
        // Sections derived from MDN element categories and limited to the more
        // benign categories.
        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element
        // Content sectioning
        "address",
        "article",
        "aside",
        "footer",
        "header",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "hgroup",
        "main",
        "nav",
        "section",
        // Text content
        "blockquote",
        "dd",
        "div",
        "dl",
        "dt",
        "figcaption",
        "figure",
        "hr",
        "li",
        "main",
        "ol",
        "p",
        "pre",
        "ul",
        // Inline text semantics
        "a",
        "abbr",
        "b",
        "bdi",
        "bdo",
        "br",
        "cite",
        "code",
        "data",
        "dfn",
        "em",
        "i",
        "kbd",
        "mark",
        "q",
        "rb",
        "rp",
        "rt",
        "rtc",
        "ruby",
        "s",
        "samp",
        "small",
        "span",
        "strong",
        "sub",
        "sup",
        "time",
        "u",
        "var",
        "wbr",
        // Table content
        "caption",
        "col",
        "colgroup",
        "table",
        "tbody",
        "td",
        "tfoot",
        "th",
        "thead",
        "tr"
    ],
    // Tags that cannot be boolean
    nonBooleanAttributes: [
        "abbr",
        "accept",
        "accept-charset",
        "accesskey",
        "action",
        "allow",
        "alt",
        "as",
        "autocapitalize",
        "autocomplete",
        "blocking",
        "charset",
        "cite",
        "class",
        "color",
        "cols",
        "colspan",
        "content",
        "contenteditable",
        "coords",
        "crossorigin",
        "data",
        "datetime",
        "decoding",
        "dir",
        "dirname",
        "download",
        "draggable",
        "enctype",
        "enterkeyhint",
        "fetchpriority",
        "for",
        "form",
        "formaction",
        "formenctype",
        "formmethod",
        "formtarget",
        "headers",
        "height",
        "hidden",
        "high",
        "href",
        "hreflang",
        "http-equiv",
        "id",
        "imagesizes",
        "imagesrcset",
        "inputmode",
        "integrity",
        "is",
        "itemid",
        "itemprop",
        "itemref",
        "itemtype",
        "kind",
        "label",
        "lang",
        "list",
        "loading",
        "low",
        "max",
        "maxlength",
        "media",
        "method",
        "min",
        "minlength",
        "name",
        "nonce",
        "optimum",
        "pattern",
        "ping",
        "placeholder",
        "popover",
        "popovertarget",
        "popovertargetaction",
        "poster",
        "preload",
        "referrerpolicy",
        "rel",
        "rows",
        "rowspan",
        "sandbox",
        "scope",
        "shape",
        "size",
        "sizes",
        "slot",
        "span",
        "spellcheck",
        "src",
        "srcdoc",
        "srclang",
        "srcset",
        "start",
        "step",
        "style",
        "tabindex",
        "target",
        "title",
        "translate",
        "type",
        "usemap",
        "value",
        "width",
        "wrap",
        // Event handlers
        "onauxclick",
        "onafterprint",
        "onbeforematch",
        "onbeforeprint",
        "onbeforeunload",
        "onbeforetoggle",
        "onblur",
        "oncancel",
        "oncanplay",
        "oncanplaythrough",
        "onchange",
        "onclick",
        "onclose",
        "oncontextlost",
        "oncontextmenu",
        "oncontextrestored",
        "oncopy",
        "oncuechange",
        "oncut",
        "ondblclick",
        "ondrag",
        "ondragend",
        "ondragenter",
        "ondragleave",
        "ondragover",
        "ondragstart",
        "ondrop",
        "ondurationchange",
        "onemptied",
        "onended",
        "onerror",
        "onfocus",
        "onformdata",
        "onhashchange",
        "oninput",
        "oninvalid",
        "onkeydown",
        "onkeypress",
        "onkeyup",
        "onlanguagechange",
        "onload",
        "onloadeddata",
        "onloadedmetadata",
        "onloadstart",
        "onmessage",
        "onmessageerror",
        "onmousedown",
        "onmouseenter",
        "onmouseleave",
        "onmousemove",
        "onmouseout",
        "onmouseover",
        "onmouseup",
        "onoffline",
        "ononline",
        "onpagehide",
        "onpageshow",
        "onpaste",
        "onpause",
        "onplay",
        "onplaying",
        "onpopstate",
        "onprogress",
        "onratechange",
        "onreset",
        "onresize",
        "onrejectionhandled",
        "onscroll",
        "onscrollend",
        "onsecuritypolicyviolation",
        "onseeked",
        "onseeking",
        "onselect",
        "onslotchange",
        "onstalled",
        "onstorage",
        "onsubmit",
        "onsuspend",
        "ontimeupdate",
        "ontoggle",
        "onunhandledrejection",
        "onunload",
        "onvolumechange",
        "onwaiting",
        "onwheel"
    ],
    disallowedTagsMode: "discard",
    allowedAttributes: {
        a: [
            "href",
            "name",
            "target"
        ],
        // We don't currently allow img itself by default, but
        // these attributes would make sense if we did.
        img: [
            "src",
            "srcset",
            "alt",
            "title",
            "width",
            "height",
            "loading"
        ]
    },
    allowedEmptyAttributes: [
        "alt"
    ],
    // Lots of these won't come up by default because we don't allow them
    selfClosing: [
        "img",
        "br",
        "hr",
        "area",
        "base",
        "basefont",
        "input",
        "link",
        "meta"
    ],
    // URL schemes we permit
    allowedSchemes: [
        "http",
        "https",
        "ftp",
        "mailto",
        "tel"
    ],
    allowedSchemesByTag: {},
    allowedSchemesAppliedToAttributes: [
        "href",
        "src",
        "cite"
    ],
    allowProtocolRelative: true,
    enforceHtmlBoundary: false,
    parseStyleAttributes: true
};
$d993ded166d3bfa4$var$sanitizeHtml.simpleTransform = function(newTagName, newAttribs, merge) {
    merge = merge === undefined ? true : merge;
    newAttribs = newAttribs || {};
    return function(tagName, attribs) {
        var attrib;
        if (merge) for(attrib in newAttribs)attribs[attrib] = newAttribs[attrib];
        else attribs = newAttribs;
        return {
            tagName: newTagName,
            attribs: attribs
        };
    };
};


var $32261bcc1b0b6409$exports = {};
"use strict";

$32261bcc1b0b6409$exports = (parcelRequire("bbppa"));


var $e758799baacea373$exports = {};
!function(t, e) {
    $e758799baacea373$exports = e();
}($e758799baacea373$exports, function() {
    "use strict";
    var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", c = "month", f = "quarter", h = "year", d = "date", l = "Invalid Date", $ = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = {
        name: "en",
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        ordinal: function ordinal(t) {
            var e = [
                "th",
                "st",
                "nd",
                "rd"
            ], n = t % 100;
            return "[" + t + (e[(n - 20) % 10] || e[n] || e[0]) + "]";
        }
    }, m = function m(t, e, n) {
        var r = String(t);
        return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
    }, v = {
        s: m,
        z: function z(t) {
            var e = -t.utcOffset(), n = Math.abs(e), r = Math.floor(n / 60), i = n % 60;
            return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
        },
        m: function t(e, n) {
            if (e.date() < n.date()) return -t(n, e);
            var r = 12 * (n.year() - e.year()) + (n.month() - e.month()), i = e.clone().add(r, c), s = n - i < 0, u = e.clone().add(r + (s ? -1 : 1), c);
            return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
        },
        a: function a(t) {
            return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
        },
        p: function p(t) {
            return ({
                M: c,
                y: h,
                w: o,
                d: a,
                D: d,
                h: u,
                m: s,
                s: i,
                ms: r,
                Q: f
            })[t] || String(t || "").toLowerCase().replace(/s$/, "");
        },
        u: function u(t) {
            return void 0 === t;
        }
    }, g = "en", D = {};
    D[g] = M;
    var p = "$isDayjsObject", S = function S(t) {
        return t instanceof _ || !(!t || !t[p]);
    }, w = function t(e, n, r) {
        var i;
        if (!e) return g;
        if ("string" == typeof e) {
            var s = e.toLowerCase();
            D[s] && (i = s), n && (D[s] = n, i = s);
            var u = e.split("-");
            if (!i && u.length > 1) return t(u[0]);
        } else {
            var a = e.name;
            D[a] = e, i = a;
        }
        return !r && i && (g = i), i || !r && g;
    }, O = function O(t, e) {
        if (S(t)) return t.clone();
        var n = "object" == typeof e ? e : {};
        return n.date = t, n.args = arguments, new _(n);
    }, b = v;
    b.l = w, b.i = S, b.w = function(t, e) {
        return O(t, {
            locale: e.$L,
            utc: e.$u,
            x: e.$x,
            $offset: e.$offset
        });
    };
    var _ = function() {
        function M(t) {
            this.$L = w(t.locale, null, !0), this.parse(t), this.$x = this.$x || t.x || {}, this[p] = !0;
        }
        var m = M.prototype;
        return m.parse = function(t) {
            this.$d = function(t) {
                var e = t.date, n = t.utc;
                if (null === e) return new Date(NaN);
                if (b.u(e)) return new Date;
                if (e instanceof Date) return new Date(e);
                if ("string" == typeof e && !/Z$/i.test(e)) {
                    var r = e.match($);
                    if (r) {
                        var i = r[2] - 1 || 0, s = (r[7] || "0").substring(0, 3);
                        return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
                    }
                }
                return new Date(e);
            }(t), this.init();
        }, m.init = function() {
            var t = this.$d;
            this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
        }, m.$utils = function() {
            return b;
        }, m.isValid = function() {
            return !(this.$d.toString() === l);
        }, m.isSame = function(t, e) {
            var n = O(t);
            return this.startOf(e) <= n && n <= this.endOf(e);
        }, m.isAfter = function(t, e) {
            return O(t) < this.startOf(e);
        }, m.isBefore = function(t, e) {
            return this.endOf(e) < O(t);
        }, m.$g = function(t, e, n) {
            return b.u(t) ? this[e] : this.set(n, t);
        }, m.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
        }, m.valueOf = function() {
            return this.$d.getTime();
        }, m.startOf = function(t, e) {
            var n = this, r = !!b.u(e) || e, f = b.p(t), l = function l(t, e) {
                var i = b.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
                return r ? i : i.endOf(a);
            }, $ = function $(t, e) {
                return b.w(n.toDate()[t].apply(n.toDate("s"), (r ? [
                    0,
                    0,
                    0,
                    0
                ] : [
                    23,
                    59,
                    59,
                    999
                ]).slice(e)), n);
            }, y = this.$W, _$M = this.$M, m = this.$D, v = "set" + (this.$u ? "UTC" : "");
            switch(f){
                case h:
                    return r ? l(1, 0) : l(31, 11);
                case c:
                    return r ? l(1, _$M) : l(0, _$M + 1);
                case o:
                    var g = this.$locale().weekStart || 0, D = (y < g ? y + 7 : y) - g;
                    return l(r ? m - D : m + (6 - D), _$M);
                case a:
                case d:
                    return $(v + "Hours", 0);
                case u:
                    return $(v + "Minutes", 1);
                case s:
                    return $(v + "Seconds", 2);
                case i:
                    return $(v + "Milliseconds", 3);
                default:
                    return this.clone();
            }
        }, m.endOf = function(t) {
            return this.startOf(t, !1);
        }, m.$set = function(t, e) {
            var n, o = b.p(t), f = "set" + (this.$u ? "UTC" : ""), l = (n = {}, n[a] = f + "Date", n[d] = f + "Date", n[c] = f + "Month", n[h] = f + "FullYear", n[u] = f + "Hours", n[s] = f + "Minutes", n[i] = f + "Seconds", n[r] = f + "Milliseconds", n)[o], $ = o === a ? this.$D + (e - this.$W) : e;
            if (o === c || o === h) {
                var y = this.clone().set(d, 1);
                y.$d[l]($), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
            } else l && this.$d[l]($);
            return this.init(), this;
        }, m.set = function(t, e) {
            return this.clone().$set(t, e);
        }, m.get = function(t) {
            return this[b.p(t)]();
        }, m.add = function(r, f) {
            var d, l = this;
            r = Number(r);
            var $ = b.p(f), y = function y(t) {
                var e = O(l);
                return b.w(e.date(e.date() + Math.round(t * r)), l);
            };
            if ($ === c) return this.set(c, this.$M + r);
            if ($ === h) return this.set(h, this.$y + r);
            if ($ === a) return y(1);
            if ($ === o) return y(7);
            var _$M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[$] || 1, m = this.$d.getTime() + r * _$M;
            return b.w(m, this);
        }, m.subtract = function(t, e) {
            return this.add(-1 * t, e);
        }, m.format = function(t) {
            var e = this, n = this.$locale();
            if (!this.isValid()) return n.invalidDate || l;
            var r = t || "YYYY-MM-DDTHH:mm:ssZ", i = b.z(this), s = this.$H, u = this.$m, a = this.$M, o = n.weekdays, c = n.months, f = n.meridiem, h = function h(t, n, i, s) {
                return t && (t[n] || t(e, r)) || i[n].slice(0, s);
            }, d = function d(t) {
                return b.s(s % 12 || 12, t, "0");
            }, $ = f || function(t, e, n) {
                var r = t < 12 ? "AM" : "PM";
                return n ? r.toLowerCase() : r;
            };
            return r.replace(y, function(t, r) {
                return r || function(t) {
                    switch(t){
                        case "YY":
                            return String(e.$y).slice(-2);
                        case "YYYY":
                            return b.s(e.$y, 4, "0");
                        case "M":
                            return a + 1;
                        case "MM":
                            return b.s(a + 1, 2, "0");
                        case "MMM":
                            return h(n.monthsShort, a, c, 3);
                        case "MMMM":
                            return h(c, a);
                        case "D":
                            return e.$D;
                        case "DD":
                            return b.s(e.$D, 2, "0");
                        case "d":
                            return String(e.$W);
                        case "dd":
                            return h(n.weekdaysMin, e.$W, o, 2);
                        case "ddd":
                            return h(n.weekdaysShort, e.$W, o, 3);
                        case "dddd":
                            return o[e.$W];
                        case "H":
                            return String(s);
                        case "HH":
                            return b.s(s, 2, "0");
                        case "h":
                            return d(1);
                        case "hh":
                            return d(2);
                        case "a":
                            return $(s, u, !0);
                        case "A":
                            return $(s, u, !1);
                        case "m":
                            return String(u);
                        case "mm":
                            return b.s(u, 2, "0");
                        case "s":
                            return String(e.$s);
                        case "ss":
                            return b.s(e.$s, 2, "0");
                        case "SSS":
                            return b.s(e.$ms, 3, "0");
                        case "Z":
                            return i;
                    }
                    return null;
                }(t) || i.replace(":", "");
            });
        }, m.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m.diff = function(r, d, l) {
            var $, y = this, _$M = b.p(d), m = O(r), v = (m.utcOffset() - this.utcOffset()) * e, g = this - m, D = function D() {
                return b.m(y, m);
            };
            switch(_$M){
                case h:
                    $ = D() / 12;
                    break;
                case c:
                    $ = D();
                    break;
                case f:
                    $ = D() / 3;
                    break;
                case o:
                    $ = (g - v) / 6048e5;
                    break;
                case a:
                    $ = (g - v) / 864e5;
                    break;
                case u:
                    $ = g / n;
                    break;
                case s:
                    $ = g / e;
                    break;
                case i:
                    $ = g / t;
                    break;
                default:
                    $ = g;
            }
            return l ? $ : b.a($);
        }, m.daysInMonth = function() {
            return this.endOf(c).$D;
        }, m.$locale = function() {
            return D[this.$L];
        }, m.locale = function(t, e) {
            if (!t) return this.$L;
            var n = this.clone(), r = w(t, e, !0);
            return r && (n.$L = r), n;
        }, m.clone = function() {
            return b.w(this.$d, this);
        }, m.toDate = function() {
            return new Date(this.valueOf());
        }, m.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
        }, m.toISOString = function() {
            return this.$d.toISOString();
        }, m.toString = function() {
            return this.$d.toUTCString();
        }, M;
    }(), k = _.prototype;
    return O.prototype = k, [
        [
            "$ms",
            r
        ],
        [
            "$s",
            i
        ],
        [
            "$m",
            s
        ],
        [
            "$H",
            u
        ],
        [
            "$W",
            a
        ],
        [
            "$M",
            c
        ],
        [
            "$y",
            h
        ],
        [
            "$D",
            d
        ]
    ].forEach(function(t) {
        k[t[1]] = function(e) {
            return this.$g(e, t[0], t[1]);
        };
    }), O.extend = function(t, e) {
        return t.$i || (t(e, _, O), t.$i = !0), O;
    }, O.locale = w, O.isDayjs = S, O.unix = function(t) {
        return O(1e3 * t);
    }, O.en = D[g], O.Ls = D, O.p = {}, O;
});


var $2e0823a60502405d$exports = {};
!function(t, s) {
    $2e0823a60502405d$exports = s();
}($2e0823a60502405d$exports, function() {
    "use strict";
    var t, s, n = 1e3, i = 6e4, e = 36e5, r = 864e5, o = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, u = 31536e6, d = 2628e6, a = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/, h = {
        years: u,
        months: d,
        days: r,
        hours: e,
        minutes: i,
        seconds: n,
        milliseconds: 1,
        weeks: 6048e5
    }, c = function c(t) {
        return t instanceof g;
    }, f = function f(t, s, n) {
        return new g(t, n, s.$l);
    }, m = function m(t) {
        return s.p(t) + "s";
    }, l = function l(t) {
        return t < 0;
    }, $ = function $(t) {
        return l(t) ? Math.ceil(t) : Math.floor(t);
    }, y = function y(t) {
        return Math.abs(t);
    }, v = function v(t, s) {
        return t ? l(t) ? {
            negative: !0,
            format: "" + y(t) + s
        } : {
            negative: !1,
            format: "" + t + s
        } : {
            negative: !1,
            format: ""
        };
    }, g = function() {
        function l(t, s, n) {
            var i = this;
            if (this.$d = {}, this.$l = n, void 0 === t && (this.$ms = 0, this.parseFromMilliseconds()), s) return f(t * h[m(s)], this);
            if ("number" == typeof t) return this.$ms = t, this.parseFromMilliseconds(), this;
            if ("object" == typeof t) return Object.keys(t).forEach(function(s) {
                i.$d[m(s)] = t[s];
            }), this.calMilliseconds(), this;
            if ("string" == typeof t) {
                var e = t.match(a);
                if (e) {
                    var r = e.slice(2).map(function(t) {
                        return null != t ? Number(t) : 0;
                    });
                    return this.$d.years = r[0], this.$d.months = r[1], this.$d.weeks = r[2], this.$d.days = r[3], this.$d.hours = r[4], this.$d.minutes = r[5], this.$d.seconds = r[6], this.calMilliseconds(), this;
                }
            }
            return this;
        }
        var y = l.prototype;
        return y.calMilliseconds = function() {
            var t = this;
            this.$ms = Object.keys(this.$d).reduce(function(s, n) {
                return s + (t.$d[n] || 0) * h[n];
            }, 0);
        }, y.parseFromMilliseconds = function() {
            var t = this.$ms;
            this.$d.years = $(t / u), t %= u, this.$d.months = $(t / d), t %= d, this.$d.days = $(t / r), t %= r, this.$d.hours = $(t / e), t %= e, this.$d.minutes = $(t / i), t %= i, this.$d.seconds = $(t / n), t %= n, this.$d.milliseconds = t;
        }, y.toISOString = function() {
            var t = v(this.$d.years, "Y"), s = v(this.$d.months, "M"), n = +this.$d.days || 0;
            this.$d.weeks && (n += 7 * this.$d.weeks);
            var i = v(n, "D"), e = v(this.$d.hours, "H"), r = v(this.$d.minutes, "M"), o = this.$d.seconds || 0;
            this.$d.milliseconds && (o += this.$d.milliseconds / 1e3, o = Math.round(1e3 * o) / 1e3);
            var u = v(o, "S"), d = t.negative || s.negative || i.negative || e.negative || r.negative || u.negative, a = e.format || r.format || u.format ? "T" : "", h = (d ? "-" : "") + "P" + t.format + s.format + i.format + a + e.format + r.format + u.format;
            return "P" === h || "-P" === h ? "P0D" : h;
        }, y.toJSON = function() {
            return this.toISOString();
        }, y.format = function(t) {
            var n = t || "YYYY-MM-DDTHH:mm:ss", i = {
                Y: this.$d.years,
                YY: s.s(this.$d.years, 2, "0"),
                YYYY: s.s(this.$d.years, 4, "0"),
                M: this.$d.months,
                MM: s.s(this.$d.months, 2, "0"),
                D: this.$d.days,
                DD: s.s(this.$d.days, 2, "0"),
                H: this.$d.hours,
                HH: s.s(this.$d.hours, 2, "0"),
                m: this.$d.minutes,
                mm: s.s(this.$d.minutes, 2, "0"),
                s: this.$d.seconds,
                ss: s.s(this.$d.seconds, 2, "0"),
                SSS: s.s(this.$d.milliseconds, 3, "0")
            };
            return n.replace(o, function(t, s) {
                return s || String(i[t]);
            });
        }, y.as = function(t) {
            return this.$ms / h[m(t)];
        }, y.get = function(t) {
            var s = this.$ms, n = m(t);
            return "milliseconds" === n ? s %= 1e3 : s = "weeks" === n ? $(s / h[n]) : this.$d[n], s || 0;
        }, y.add = function(t, s, n) {
            var i;
            return i = s ? t * h[m(s)] : c(t) ? t.$ms : f(t, this).$ms, f(this.$ms + i * (n ? -1 : 1), this);
        }, y.subtract = function(t, s) {
            return this.add(t, s, !0);
        }, y.locale = function(t) {
            var s = this.clone();
            return s.$l = t, s;
        }, y.clone = function() {
            return f(this.$ms, this);
        }, y.humanize = function(s) {
            return t().add(this.$ms, "ms").locale(this.$l).fromNow(!s);
        }, y.valueOf = function() {
            return this.asMilliseconds();
        }, y.milliseconds = function() {
            return this.get("milliseconds");
        }, y.asMilliseconds = function() {
            return this.as("milliseconds");
        }, y.seconds = function() {
            return this.get("seconds");
        }, y.asSeconds = function() {
            return this.as("seconds");
        }, y.minutes = function() {
            return this.get("minutes");
        }, y.asMinutes = function() {
            return this.as("minutes");
        }, y.hours = function() {
            return this.get("hours");
        }, y.asHours = function() {
            return this.as("hours");
        }, y.days = function() {
            return this.get("days");
        }, y.asDays = function() {
            return this.as("days");
        }, y.weeks = function() {
            return this.get("weeks");
        }, y.asWeeks = function() {
            return this.as("weeks");
        }, y.months = function() {
            return this.get("months");
        }, y.asMonths = function() {
            return this.as("months");
        }, y.years = function() {
            return this.get("years");
        }, y.asYears = function() {
            return this.as("years");
        }, l;
    }(), p = function p(t, s, n) {
        return t.add(s.years() * n, "y").add(s.months() * n, "M").add(s.days() * n, "d").add(s.hours() * n, "h").add(s.minutes() * n, "m").add(s.seconds() * n, "s").add(s.milliseconds() * n, "ms");
    };
    return function(n, i, e) {
        t = e, s = e().$utils(), e.duration = function(t, s) {
            var n = e.locale();
            return f(t, {
                $l: n
            }, s);
        }, e.isDuration = c;
        var r = i.prototype.add, o = i.prototype.subtract;
        i.prototype.add = function(t, s) {
            return c(t) ? p(this, t, 1) : r.bind(this)(t, s);
        }, i.prototype.subtract = function(t, s) {
            return c(t) ? p(this, t, -1) : o.bind(this)(t, s);
        };
    };
});


"use strict";
// Extend dayjs with the duration plugin
(0, (/*@__PURE__*/$parcel$interopDefault($e758799baacea373$exports))).extend((0, (/*@__PURE__*/$parcel$interopDefault($2e0823a60502405d$exports))));
var $17d11d58618cc814$var$parser = new (0, (/*@__PURE__*/$parcel$interopDefault($32261bcc1b0b6409$exports)))();
var $17d11d58618cc814$export$471f7ae5c4103ae1 = {
    visibility: true,
    action: "",
    deviceOnline: true,
    notKaiOS: window.innerWidth > 300 ? true : false,
    os: (0, $162001cafa2b40fd$export$ad64e00ff47c1b17)(),
    debug: false
};
var $17d11d58618cc814$var$proxy = "https://corsproxy.io/?";
var $17d11d58618cc814$export$a5a6e0b888b2c992 = {};
var $17d11d58618cc814$var$channels = [];
var $17d11d58618cc814$var$read_articles = [];
// Load the array from localForage (on app startup)
(0, (/*@__PURE__*/$parcel$interopDefault($9fbe31c6ff058869$exports))).getItem("read_articles").then(function(value) {
    if (value === null) {
        // Item does not exist, initialize it as an empty array
        $17d11d58618cc814$var$read_articles = [];
        return (0, (/*@__PURE__*/$parcel$interopDefault($9fbe31c6ff058869$exports))).setItem("read_articles", $17d11d58618cc814$var$read_articles).then(function() {
            console.log("Array initialized and stored in localForage:", $17d11d58618cc814$var$read_articles);
        });
    } else {
        // Item exists, store it in the global variable
        $17d11d58618cc814$var$read_articles = value;
        console.log("Array loaded from localForage:", $17d11d58618cc814$var$read_articles);
    }
}).catch(function(err) {
    console.error("Error accessing localForage:", err);
});
function $17d11d58618cc814$var$add_read_article(id) {
    // Add the article to the global array
    var ids = [];
    $17d11d58618cc814$var$articles.map(function(h, i) {
        ids.push(h.id);
    });
    //clean
    $17d11d58618cc814$var$read_articles = $17d11d58618cc814$var$read_articles.filter(function(article) {
        return ids.includes(id);
    });
    $17d11d58618cc814$var$read_articles.push(id);
    // Sync the updated array with localForage
    (0, (/*@__PURE__*/$parcel$interopDefault($9fbe31c6ff058869$exports))).setItem("read_articles", $17d11d58618cc814$var$read_articles).then(function() {}).catch(function(err) {
        console.error("Error updating localForage:", err);
    });
}
(0, (/*@__PURE__*/$parcel$interopDefault($9fbe31c6ff058869$exports))).getItem("settings").then(function(value) {
    // Do other things once the value has been saved.
    $17d11d58618cc814$export$a5a6e0b888b2c992 = value;
    $17d11d58618cc814$var$fetchOPML($17d11d58618cc814$var$proxy + encodeURIComponent($17d11d58618cc814$export$a5a6e0b888b2c992.opml_url));
}).catch(function(err) {
    // This code runs if there were any errors
    console.log(err);
    $17d11d58618cc814$export$a5a6e0b888b2c992 = {
        "opml_url": "https://raw.githubusercontent.com/strukturart/feedolin/master/example.opml",
        "opml_local": "https://raw.githubusercontent.com/strukturart/feedolin/master/example.opml"
    };
    $17d11d58618cc814$var$fetchOPML($17d11d58618cc814$var$proxy + encodeURIComponent($17d11d58618cc814$export$a5a6e0b888b2c992.opml_url));
});
var $17d11d58618cc814$var$xml_parser = new DOMParser();
var $17d11d58618cc814$var$feed_download_list = [];
var $17d11d58618cc814$var$current_article;
if ("b2g" in navigator || "navigator.mozApps" in navigator) $17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS = false;
if (!$17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS) {
    var $17d11d58618cc814$var$scripts = [
        "./assets/js/kaiads.v5.min.js",
        "http://127.0.0.1/api/v1/shared/core.js",
        "http://127.0.0.1/api/v1/shared/session.js",
        "http://127.0.0.1/api/v1/apps/service.js"
    ];
    $17d11d58618cc814$var$scripts.forEach(function(src) {
        var js = document.createElement("script");
        js.type = "text/javascript";
        js.src = src;
        document.head.appendChild(js);
    });
}
var $17d11d58618cc814$var$articles = [];
var $17d11d58618cc814$var$channel = new BroadcastChannel("sw-messages");
if ($17d11d58618cc814$export$471f7ae5c4103ae1.debug) window.onerror = function(msg, url, linenumber) {
    alert("Error message: " + msg + "\nURL: " + url + "\nLine Number: " + linenumber);
    return true;
};
//open KaiOS app
var $17d11d58618cc814$var$app_launcher = function() {
    var currentUrl = window.location.href;
    // Check if the URL includes 'id='
    if (!currentUrl.includes("id=")) return false;
    setTimeout(function() {
        try {
            var activity = new MozActivity({
                name: "flop",
                data: window.location.href
            });
            activity.onsuccess = function() {
                console.log("Activity successfuly handled");
            };
            activity.onerror = function() {
                console.log("The activity encouter en error: " + this.error);
                alert(this.error);
            };
        } catch (e) {}
        if ("b2g" in navigator) try {
            var activity1 = new WebActivity("flop", {
                name: "flop",
                type: "url",
                data: window.location.href
            });
            activity1.start().then(function(rv) {
                console.log("Results passed back from activity handler:");
                console.log(rv);
            }, function(err) {
                alert(err);
            });
        } catch (e) {}
    }, 4000);
};
function $17d11d58618cc814$var$stringToHash(str) {
    var hash = 0;
    for(var i = 0; i < str.length; i++){
        var char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char; // Bitwise shift
        hash |= 0; // Convert to 32-bit integer
    }
    return hash.toString(36); // Convert to base-36 for a shorter result
}
//clean input
var $17d11d58618cc814$var$clean = function(i) {
    return $d993ded166d3bfa4$exports(i, {
        allowedTags: [
            "b",
            "i",
            "em",
            "strong",
            "a",
            "img",
            "src"
        ],
        allowedAttributes: {
            "a": [
                "href"
            ],
            "img": [
                "src"
            ]
        }
    });
};
var $17d11d58618cc814$var$fetchOPML = function(url) {
    return fetch(url, {
        method: "GET",
        headers: {
            // the content type header value is usually auto-set
            // depending on the request body
            "Content-Type": "text/plain;charset=UTF-8"
        },
        body: undefined,
        referrer: "about:client",
        // or an url from the current origin
        referrerPolicy: "strict-origin-when-cross-origin",
        mode: "cors",
        credentials: "same-origin",
        cache: "no-cache",
        redirect: "follow"
    }).then(function(response) {
        if (!response.ok) throw new Error("HTTP error! Status: ".concat(response.status));
        // Read the response body
        return response.text();
    }).then(function(data) {
        // Store the OPML content in local storage
        localStorage.setItem("opml_content", data);
        // Always call load_feeds to process the content
        $17d11d58618cc814$var$load_feeds(); // Process the content (newly fetched data)
    }).catch(function(error) {
        console.error("Error fetching the OPML file:", error);
        // Always call load_feeds even if there's an error to ensure processing with available data
        $17d11d58618cc814$var$load_feeds(); // This will handle cases where fetching fails but local data is still available
    });
};
var $17d11d58618cc814$var$load_feeds = function() {
    var _ref = (0, $ba0748fc6d85beab$export$71511d61b312f219)(function() {
        var data, xmlDoc, content, index, outlines, existingUrls, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, err;
        return (0, $04f2fd83a0b0b7f9$export$67ebef60e6f28a6)(this, function(_state) {
            switch(_state.label){
                case 0:
                    // Retrieve the stored OPML content from local storage
                    data = localStorage.getItem("opml_content");
                    if (!data) return [
                        3,
                        9
                    ];
                    // Process the OPML data
                    xmlDoc = $17d11d58618cc814$var$xml_parser.parseFromString(data, "text/xml");
                    content = xmlDoc.querySelector("body");
                    if (!content) {
                        console.error("No 'body' element found in the OPML data.");
                        return [
                            2
                        ];
                    }
                    index = 0;
                    outlines = content.querySelectorAll("outline");
                    // Create a Set for faster URL lookups
                    existingUrls = new Set($17d11d58618cc814$var$feed_download_list.map(function(feed) {
                        return feed.url;
                    }));
                    outlines.forEach(function(outline) {
                        var nestedOutlines = outline.querySelectorAll("outline");
                        nestedOutlines.forEach(function(nested) {
                            var url = nested.getAttribute("xmlUrl");
                            if (!url) return; // Skip if no url attribute
                            // If URL is already in the feed_download_list, skip it
                            if (existingUrls.has(url)) source_url_cleaner.push(url); // Ensure source_url_cleaner is defined globally
                            else {
                                // Add new feed to the list
                                $17d11d58618cc814$var$feed_download_list.push({
                                    error: "",
                                    title: nested.getAttribute("title") || "Untitled",
                                    url: url,
                                    amount: 5,
                                    index: index++,
                                    channel: outline.getAttribute("text") || "Unknown",
                                    type: nested.getAttribute("type") || "rss"
                                });
                                existingUrls.add(url); // Add new URL to Set
                            }
                        });
                    });
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        6,
                        7,
                        8
                    ]);
                    _loop = function() {
                        var _$e, a, err;
                        return (0, $04f2fd83a0b0b7f9$export$67ebef60e6f28a6)(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    _$e = _step.value;
                                    if (_$e.type == "mastodon") {
                                        if ($17d11d58618cc814$var$channels.indexOf(_$e.channel) == -1) $17d11d58618cc814$var$channels.push(_$e.channel);
                                        fetch(_$e.url, {
                                            method: "GET"
                                        }).then(function(response) {
                                            return response.json();
                                        }).then(function(data) {
                                            data.forEach(function(k, i) {
                                                if (i > 5) return;
                                                var f = {};
                                                f.channel = _$e.channel;
                                                f.id = k.id;
                                                f.type = "mastodon";
                                                f.pubDate = k.created_at;
                                                f.isoDate = k.created_at;
                                                f.title = k.account.display_name;
                                                f.content = k.content;
                                                f.url = k.uri;
                                                if (k.media_attachments.length > 0) {
                                                    if (k.media_attachments[0].type == "image") {
                                                        media_url = k.media_attachments[0].preview_url;
                                                        f.content += "<br><img src='" + k.media_attachments[0].preview_url + "'>";
                                                    }
                                                    if (k.media_attachments[0].type == "video") {
                                                        var _$media_url = k.media_attachments[0].url;
                                                        var item_type = "video";
                                                        f.enclosure = {
                                                            type: item_type,
                                                            url: _$media_url
                                                        };
                                                    }
                                                    if (k.media_attachments[0].type == "audio") {
                                                        var _$media_url1 = k.media_attachments[0].url;
                                                        var item_type1 = "audio";
                                                        f.enclosure = {
                                                            type: item_type1,
                                                            url: _$media_url1
                                                        };
                                                    }
                                                }
                                                $17d11d58618cc814$var$articles.push(f);
                                                $17d11d58618cc814$var$articles.sort(function(a, b) {
                                                    return new Date(b.isoDate) - new Date(a.isoDate);
                                                });
                                            });
                                        }).catch(function() {});
                                    }
                                    _state.label = 1;
                                case 1:
                                    _state.trys.push([
                                        1,
                                        3,
                                        ,
                                        4
                                    ]);
                                    return [
                                        4,
                                        $17d11d58618cc814$var$parser.parseURL(_$e.url)
                                    ];
                                case 2:
                                    a = _state.sent();
                                    if (a.items) {
                                        if ($17d11d58618cc814$var$channels.indexOf(_$e.channel) == -1) $17d11d58618cc814$var$channels.push(_$e.channel);
                                        a.items.forEach(function(f, i) {
                                            if (i > 5) return;
                                            console.log(f);
                                            f.channel = _$e.channel;
                                            f.id = $17d11d58618cc814$var$stringToHash(f.title + f.pubDate);
                                            f.type = _$e.type;
                                            f.url = f.link;
                                            $17d11d58618cc814$var$articles.push(f);
                                            $17d11d58618cc814$var$articles.sort(function(a, b) {
                                                return new Date(b.isoDate) - new Date(a.isoDate);
                                            });
                                        });
                                    }
                                    return [
                                        3,
                                        4
                                    ];
                                case 3:
                                    err = _state.sent();
                                    return [
                                        3,
                                        4
                                    ];
                                case 4:
                                    return [
                                        2
                                    ];
                            }
                        });
                    };
                    _iterator = $17d11d58618cc814$var$feed_download_list[Symbol.iterator]();
                    _state.label = 2;
                case 2:
                    if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                        3,
                        5
                    ];
                    return [
                        5,
                        (0, $04f2fd83a0b0b7f9$export$19a8beecd37a4c45)(_loop())
                    ];
                case 3:
                    _state.sent();
                    _state.label = 4;
                case 4:
                    _iteratorNormalCompletion = true;
                    return [
                        3,
                        2
                    ];
                case 5:
                    return [
                        3,
                        8
                    ];
                case 6:
                    err = _state.sent();
                    _didIteratorError = true;
                    _iteratorError = err;
                    return [
                        3,
                        8
                    ];
                case 7:
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                    return [
                        7
                    ];
                case 8:
                    return [
                        3,
                        10
                    ];
                case 9:
                    console.error("No OPML content found in localStorage.");
                    _state.label = 10;
                case 10:
                    return [
                        2
                    ];
            }
        });
    });
    return function load_feeds() {
        return _ref.apply(this, arguments);
    };
}();
//callback qr-code scan
var $17d11d58618cc814$var$scan_callback = function scan_callback(n) {
//maybe add new view "try to connect with funny animation"
};
var $17d11d58618cc814$var$root = document.getElementById("app");
var $17d11d58618cc814$var$about = {
    view: function view() {
        return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
            class: "page",
            oncreate: function() {
                (0, $162001cafa2b40fd$export$7ce2ea7c45ae9a07)("", "", "");
                if ($17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS) (0, $162001cafa2b40fd$export$7ce2ea7c45ae9a07)("", "", "<img src='assets/image/back.svg'>");
                (0, $162001cafa2b40fd$export$247be4ede8e3a24a)("", "<img class='not-desktop' src='assets/image/select.svg'>", "");
            }
        }, [
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("button", {
                tabindex: 0,
                class: "item",
                oncreate: function(param) {
                    var dom = param.dom;
                    dom.focus();
                },
                onclick: function() {
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/about_page");
                }
            }, "About"),
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("button", {
                tabindex: 1,
                class: "item",
                onclick: function() {
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/settings_page");
                }
            }, "Settings"),
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("button", {
                tabindex: 2,
                class: "item",
                onclick: function() {
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/privacy_policy");
                }
            }, "Privacy Policy"),
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                id: "KaiOSads-Wrapper",
                class: "width-100",
                oncreate: function() {
                    if ($17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS == false) (0, $162001cafa2b40fd$export$4f9f22e5a1695548)();
                }
            })
        ]);
    }
};
var $17d11d58618cc814$var$options = {
    view: function view() {
        return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div");
    }
};
var $17d11d58618cc814$var$counter = 0;
var $17d11d58618cc814$var$channel_filter = "";
var $17d11d58618cc814$var$start = {
    view: function view() {
        return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
            class: "",
            id: "start",
            oncreate: function() {
                (0, $162001cafa2b40fd$export$247be4ede8e3a24a)("<img src='assets/icons/list.svg'>", "<img src='assets/icons/select.svg'>", "<img src='assets/icons/option.svg'>");
                if ($17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS) (0, $162001cafa2b40fd$export$7ce2ea7c45ae9a07)("", "", "");
                if ($17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS && $17d11d58618cc814$export$471f7ae5c4103ae1.player) (0, $162001cafa2b40fd$export$7ce2ea7c45ae9a07)("<img src='assets/icons/play.svg'>", "", "");
            }
        }, $17d11d58618cc814$var$articles.map(function(h, i) {
            var index = (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.param("index") ? (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.param("index") : 0;
            if ($17d11d58618cc814$var$channel_filter != "" && $17d11d58618cc814$var$channel_filter != undefined && $17d11d58618cc814$var$channel_filter != h.channel) return false;
            var type = "text";
            if (h.enclosure && h.enclosure.type && h.enclosure.type.startsWith("audio")) type = "audio";
            if (h.enclosure && h.enclosure.type && h.enclosure.type.startsWith("video")) type = "video";
            // Limit to the first 6 articles
            return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("article", {
                class: "item " + type,
                "data-id": h.id,
                "data-type": h.type,
                oncreate: function(vnode) {
                    if (i == index) vnode.dom.focus();
                    if ($17d11d58618cc814$var$read_articles.indexOf(h.id) > -1) vnode.dom.classList.add("read");
                    document.querySelectorAll("article.item").forEach(function(f, k) {
                        f.tabIndex = k;
                    });
                },
                onclick: function() {
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/article/?index=" + i);
                    $17d11d58618cc814$var$add_read_article(h.id);
                },
                onkeydown: function(e) {
                    if (e.key === "Enter") {
                        (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/article/?index=" + i);
                        $17d11d58618cc814$var$add_read_article(h.id);
                    }
                }
            }, [
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                    class: "type-indicator"
                }),
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("time", (0, (/*@__PURE__*/$parcel$interopDefault($e758799baacea373$exports)))(h.pubDate).format("DD MMM YYYY")),
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("h2", $17d11d58618cc814$var$clean(h.title))
            ]);
        }));
    }
};
var $17d11d58618cc814$var$article = {
    view: function view() {
        return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
            id: "article",
            oncreate: function() {
                if ($17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS) (0, $162001cafa2b40fd$export$7ce2ea7c45ae9a07)("", "", "<img src='assets/image/back.svg'>");
                (0, $162001cafa2b40fd$export$247be4ede8e3a24a)("<img src='assets/icons/link.svg'>", "", "");
            }
        }, $17d11d58618cc814$var$articles.map(function(h, i) {
            var index = (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.param("index");
            if (index != i) return;
            console.log(h);
            $17d11d58618cc814$var$current_article = h;
            // Check if the article has an audio enclosure
            var hasAudio = h.enclosure && h.enclosure.type && h.enclosure.type.startsWith("audio");
            var hasVideo = h.enclosure && h.enclosure.type && h.enclosure.type.startsWith("video");
            return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("article", {
                class: "item",
                tabindex: 0,
                oncreate: function(vnode) {
                    vnode.dom.focus();
                    if (hasAudio) {
                        h.type = "audio";
                        (0, $162001cafa2b40fd$export$247be4ede8e3a24a)("<img src='assets/icons/link.svg'>", "<img src='assets/icons/25B6.svg'>", "");
                    }
                    if (hasVideo) {
                        h.type = "video";
                        (0, $162001cafa2b40fd$export$247be4ede8e3a24a)("<img src='assets/icons/link.svg'>", "<img src='assets/icons/25B6.svg'>", "");
                    }
                },
                onkeydown: function(e) {
                    if (e.key === "Backspace") (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/start/?index=" + index);
                    e.key;
                }
            }, [
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("date", (0, (/*@__PURE__*/$parcel$interopDefault($e758799baacea373$exports)))(h.pubDate).format("DD MMM YYYY")),
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("h2", h.title),
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", [
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).trust($17d11d58618cc814$var$clean(h.content))
                ])
            ]);
        }));
    }
};
var $17d11d58618cc814$var$index = {
    view: function view() {
        return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
            class: "",
            id: "index",
            oncreate: function() {
                if ($17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS) (0, $162001cafa2b40fd$export$7ce2ea7c45ae9a07)("", "", "<img src='assets/image/back.svg'>");
            }
        }, $17d11d58618cc814$var$feed_download_list.map(function(h, i) {
            return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("article", {
                class: "item flex",
                tabindex: i,
                oncreate: function(vnode) {
                    if (i == 0) vnode.dom.focus();
                }
            }, [
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("h2", h.channel),
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("h2", h.title),
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", h.amount)
            ]);
        }));
    }
};
var $17d11d58618cc814$var$scan = {
    view: function view(vnode) {
        return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div");
    }
};
var $17d11d58618cc814$var$intro = {
    view: function view() {
        return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
            class: "width-100 height-100",
            id: "intro",
            onremove: function() {
                localStorage.setItem("version", $17d11d58618cc814$export$471f7ae5c4103ae1.version);
            },
            oninit: function oninit() {
                setTimeout(function() {
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/start/?index=0");
                }, 5000);
            }
        }, [
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("img", {
                src: "./assets/icons/intro.svg",
                oncreate: function() {
                    var get_manifest_callback = function(e) {
                        try {
                            $17d11d58618cc814$export$471f7ae5c4103ae1.version = e.manifest.version;
                            document.querySelector("#version").textContent = e.manifest.version;
                        } catch (e) {}
                        if ("b2g" in navigator || $17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS) fetch("/manifest.webmanifest").then(function(r) {
                            return r.json();
                        }).then(function(parsedResponse) {
                            $17d11d58618cc814$export$471f7ae5c4103ae1.version = parsedResponse.b2g_features.version;
                        });
                    };
                    (0, $162001cafa2b40fd$export$39e873de56f329d8)(get_manifest_callback);
                }
            }),
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                class: "flex width-100  justify-content-center ",
                id: "version-box"
            }, [
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("kbd", {
                    id: "version"
                }, localStorage.getItem("version") || 0)
            ])
        ]);
    }
};
// Format time using dayjs
var $17d11d58618cc814$var$formatTime = function(seconds) {
    return (0, (/*@__PURE__*/$parcel$interopDefault($e758799baacea373$exports))).duration(seconds, "seconds").format("mm:ss");
};
// VideoPlayerView definition
var $17d11d58618cc814$var$VideoPlayerView = {
    videoElement: null,
    videoDuration: 0,
    currentTime: 0,
    isPlaying: false,
    seekAmount: 5,
    oncreate: function(param) {
        var attrs = param.attrs;
        if ($17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS) (0, $162001cafa2b40fd$export$7ce2ea7c45ae9a07)("", "", "<img src='assets/image/back.svg'>");
        $17d11d58618cc814$export$471f7ae5c4103ae1.player = true;
        // Mount the video element to the DOM when the component is created
        $17d11d58618cc814$var$VideoPlayerView.videoElement = document.createElement("video");
        var videoContainer = document.getElementById("video-container");
        videoContainer.appendChild($17d11d58618cc814$var$VideoPlayerView.videoElement);
        // Load the video URL from the route parameter
        var videoUrl = attrs.url;
        if (videoUrl) {
            $17d11d58618cc814$var$VideoPlayerView.videoElement.src = videoUrl;
            $17d11d58618cc814$var$VideoPlayerView.videoElement.play();
            $17d11d58618cc814$var$VideoPlayerView.isPlaying = true;
        }
        // Set up an event listener to capture the duration and update progress
        $17d11d58618cc814$var$VideoPlayerView.videoElement.onloadedmetadata = function() {
            $17d11d58618cc814$var$VideoPlayerView.videoDuration = $17d11d58618cc814$var$VideoPlayerView.videoElement.duration;
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).redraw(); // Force a redraw to update the UI with the duration
        };
        // Update the current time and redraw progress bar as video plays
        $17d11d58618cc814$var$VideoPlayerView.videoElement.ontimeupdate = function() {
            $17d11d58618cc814$var$VideoPlayerView.currentTime = $17d11d58618cc814$var$VideoPlayerView.videoElement.currentTime;
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).redraw(); // Update UI with the current time and progress
        };
        // Activate local controls with keyboard events
        document.addEventListener("keydown", $17d11d58618cc814$var$VideoPlayerView.handleKeydown);
    },
    onremove: function() {
        // Remove the keydown listener when the view is removed
        document.removeEventListener("keydown", $17d11d58618cc814$var$VideoPlayerView.handleKeydown);
    },
    handleKeydown: function(e) {
        if (e.key === "Enter") $17d11d58618cc814$var$VideoPlayerView.togglePlayPause();
        else if (e.key === "ArrowLeft") $17d11d58618cc814$var$VideoPlayerView.seek("left");
        else if (e.key === "ArrowRight") $17d11d58618cc814$var$VideoPlayerView.seek("right");
    },
    togglePlayPause: function() {
        if ($17d11d58618cc814$var$VideoPlayerView.isPlaying) $17d11d58618cc814$var$VideoPlayerView.videoElement.pause();
        else $17d11d58618cc814$var$VideoPlayerView.videoElement.play();
        $17d11d58618cc814$var$VideoPlayerView.isPlaying = !$17d11d58618cc814$var$VideoPlayerView.isPlaying;
    },
    seek: function(direction) {
        var currentTime = $17d11d58618cc814$var$VideoPlayerView.videoElement.currentTime;
        if (direction === "left") $17d11d58618cc814$var$VideoPlayerView.videoElement.currentTime = Math.max(0, currentTime - $17d11d58618cc814$var$VideoPlayerView.seekAmount);
        else if (direction === "right") $17d11d58618cc814$var$VideoPlayerView.videoElement.currentTime = Math.min($17d11d58618cc814$var$VideoPlayerView.videoDuration, currentTime + $17d11d58618cc814$var$VideoPlayerView.seekAmount);
    },
    view: function(param) {
        var attrs = param.attrs;
        // Calculate progress as a percentage
        var progressPercent = $17d11d58618cc814$var$VideoPlayerView.videoDuration > 0 ? $17d11d58618cc814$var$VideoPlayerView.currentTime / $17d11d58618cc814$var$VideoPlayerView.videoDuration * 100 : 0;
        return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
            class: "video-player"
        }, [
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                id: "video-container",
                class: "video-container"
            }),
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                class: "controls"
            }, [
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("button", {
                    onclick: $17d11d58618cc814$var$VideoPlayerView.togglePlayPause
                }, $17d11d58618cc814$var$VideoPlayerView.isPlaying ? "Pause" : "Play"),
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("button", {
                    onclick: function() {
                        return $17d11d58618cc814$var$VideoPlayerView.seek("left");
                    }
                }, "Seek Backward"),
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("button", {
                    onclick: function() {
                        return $17d11d58618cc814$var$VideoPlayerView.seek("right");
                    }
                }, "Seek Forward")
            ]),
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                class: "video-info"
            }, [
                " ".concat($17d11d58618cc814$var$formatTime($17d11d58618cc814$var$VideoPlayerView.currentTime), " / ").concat($17d11d58618cc814$var$formatTime($17d11d58618cc814$var$VideoPlayerView.videoDuration))
            ]),
            // Progress bar container
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                class: "progress-bar-container"
            }, [
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                    class: "progress-bar",
                    style: {
                        width: "".concat(progressPercent, "%")
                    }
                })
            ])
        ]);
    }
};
// Define the audio element globally
var $17d11d58618cc814$var$globalAudioElement = document.createElement("audio");
$17d11d58618cc814$var$globalAudioElement.preload = "auto"; // Load audio automatically
var $17d11d58618cc814$var$AudioPlayerView = {
    audioDuration: 0,
    currentTime: 0,
    isPlaying: false,
    seekAmount: 5,
    oninit: function(param) {
        var attrs = param.attrs;
        // Load the audio URL if it changes
        if (attrs.url && $17d11d58618cc814$var$globalAudioElement.src !== attrs.url) {
            $17d11d58618cc814$var$globalAudioElement.src = attrs.url;
            $17d11d58618cc814$var$globalAudioElement.play().catch(function() {}); // Handle play promise rejection
            $17d11d58618cc814$var$AudioPlayerView.isPlaying = true;
        }
        // Set up event listeners
        $17d11d58618cc814$var$globalAudioElement.onloadedmetadata = function() {
            $17d11d58618cc814$var$AudioPlayerView.audioDuration = $17d11d58618cc814$var$globalAudioElement.duration;
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).redraw(); // Force a redraw to update the UI with the duration
        };
        $17d11d58618cc814$var$globalAudioElement.ontimeupdate = function() {
            $17d11d58618cc814$var$AudioPlayerView.currentTime = $17d11d58618cc814$var$globalAudioElement.currentTime;
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).redraw(); // Update UI with the current time and progress
        };
        // Restore play/pause state
        $17d11d58618cc814$var$AudioPlayerView.isPlaying = !$17d11d58618cc814$var$globalAudioElement.paused;
        // Activate local controls with keyboard events
        document.addEventListener("keydown", $17d11d58618cc814$var$AudioPlayerView.handleKeydown);
    },
    oncreate: function() {
        $17d11d58618cc814$export$471f7ae5c4103ae1.player = true;
        (0, $162001cafa2b40fd$export$7ce2ea7c45ae9a07)("", "", "");
        (0, $162001cafa2b40fd$export$247be4ede8e3a24a)("", "<img src='assets/image/play.svg'>", "");
    },
    onremove: function() {
        // Remove the keydown listener when the view is removed
        document.removeEventListener("keydown", $17d11d58618cc814$var$AudioPlayerView.handleKeydown);
    },
    handleKeydown: function(e) {
        if (e.key === "Enter") $17d11d58618cc814$var$AudioPlayerView.togglePlayPause();
        else if (e.key === "ArrowLeft") $17d11d58618cc814$var$AudioPlayerView.seek("left");
        else if (e.key === "ArrowRight") $17d11d58618cc814$var$AudioPlayerView.seek("right");
    },
    togglePlayPause: function() {
        if ($17d11d58618cc814$var$AudioPlayerView.isPlaying) $17d11d58618cc814$var$globalAudioElement.pause();
        else $17d11d58618cc814$var$globalAudioElement.play().catch(function() {}); // Handle play promise rejection
        $17d11d58618cc814$var$AudioPlayerView.isPlaying = !$17d11d58618cc814$var$AudioPlayerView.isPlaying;
    },
    seek: function(direction) {
        var currentTime = $17d11d58618cc814$var$globalAudioElement.currentTime;
        if (direction === "left") $17d11d58618cc814$var$globalAudioElement.currentTime = Math.max(0, currentTime - $17d11d58618cc814$var$AudioPlayerView.seekAmount);
        else if (direction === "right") $17d11d58618cc814$var$globalAudioElement.currentTime = Math.min($17d11d58618cc814$var$AudioPlayerView.audioDuration, currentTime + $17d11d58618cc814$var$AudioPlayerView.seekAmount);
    },
    view: function(param) {
        var attrs = param.attrs;
        // Calculate progress as a percentage
        var progressPercent = $17d11d58618cc814$var$AudioPlayerView.audioDuration > 0 ? $17d11d58618cc814$var$AudioPlayerView.currentTime / $17d11d58618cc814$var$AudioPlayerView.audioDuration * 100 : 0;
        return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
            class: "audio-player"
        }, [
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                id: "audio-container",
                class: "audio-container"
            }),
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                class: "audio-info"
            }, [
                "".concat($17d11d58618cc814$var$formatTime($17d11d58618cc814$var$AudioPlayerView.currentTime), " / ").concat($17d11d58618cc814$var$formatTime($17d11d58618cc814$var$AudioPlayerView.audioDuration))
            ]),
            // Progress bar container
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                class: "progress-bar-container"
            }, [
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                    class: "progress-bar",
                    style: {
                        width: "".concat(progressPercent, "%")
                    }
                })
            ])
        ]);
    }
};
var $17d11d58618cc814$var$settingsView = {
    view: function view() {
        return (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
            class: "flex justify-content-center page",
            id: "settings_page",
            oncreate: function() {
                (0, (/*@__PURE__*/$parcel$interopDefault($9fbe31c6ff058869$exports))).getItem("settings").then(function(value) {
                    // Do other things once the value has been saved.
                    $17d11d58618cc814$export$a5a6e0b888b2c992 = value;
                    (0, $162001cafa2b40fd$export$6593825dc0f3a767)("settings saved", 2000);
                }).catch(function(err) {
                    // This code runs if there were any errors
                    console.log(err);
                });
                (0, $162001cafa2b40fd$export$247be4ede8e3a24a)("", "", "");
                (0, $162001cafa2b40fd$export$7ce2ea7c45ae9a07)("", "<img src='assets/image/select.svg'>", "");
                if ($17d11d58618cc814$export$471f7ae5c4103ae1.notKaiOS) (0, $162001cafa2b40fd$export$7ce2ea7c45ae9a07)("", "", "<img src='assets/image/back.svg'>");
            }
        }, [
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                tabindex: 1,
                class: "item input-parent  flex justify-content-spacearound"
            }, [
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("label", {
                    for: "url-opml"
                }, "OPML"),
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("input", {
                    id: "url-opml",
                    placeholder: "",
                    value: $17d11d58618cc814$export$a5a6e0b888b2c992.opml_url,
                    type: "url"
                })
            ]),
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("h2", {
                class: "flex justify-content-spacearound"
            }, "Mstodon Account"),
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("div", {
                tabindex: 4,
                class: "item input-parent  flex justify-content-spacearound"
            }, [
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("label", {
                    for: "server_url"
                }, "URL"),
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("input", {
                    id: "server_url",
                    placeholder: "Server URL",
                    value: $17d11d58618cc814$export$a5a6e0b888b2c992.server_url
                })
            ]),
            (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports)))("button", {
                tabindex: 8,
                class: "item",
                "data-function": "save-settings",
                onclick: function onclick() {
                    $17d11d58618cc814$export$a5a6e0b888b2c992.opml_url = document.getElementById("url-opml").value;
                    (0, (/*@__PURE__*/$parcel$interopDefault($9fbe31c6ff058869$exports))).setItem("settings", $17d11d58618cc814$export$a5a6e0b888b2c992).then(function(value) {
                        // Do other things once the value has been saved.
                        (0, $162001cafa2b40fd$export$6593825dc0f3a767)("settings saved", 2000);
                    }).catch(function(err) {
                        // This code runs if there were any errors
                        console.log(err);
                    });
                }
            }, "save settings")
        ]);
    }
};
(0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route($17d11d58618cc814$var$root, "/intro", {
    "/settingsView": $17d11d58618cc814$var$settingsView,
    "/intro": $17d11d58618cc814$var$intro,
    "/start": $17d11d58618cc814$var$start,
    "/options": $17d11d58618cc814$var$options,
    "/scan": $17d11d58618cc814$var$scan,
    "/about": $17d11d58618cc814$var$about,
    "/article": $17d11d58618cc814$var$article,
    "/index": $17d11d58618cc814$var$index,
    "/AudioPlayerView": $17d11d58618cc814$var$AudioPlayerView,
    "/VideoPlayerView": $17d11d58618cc814$var$VideoPlayerView
});
function $17d11d58618cc814$var$scrollToCenter() {
    var activeElement = document.activeElement;
    if (!activeElement) return;
    var rect = activeElement.getBoundingClientRect();
    var elY = rect.top + rect.height / 2;
    var scrollContainer = activeElement.parentNode;
    // Find the first scrollable parent
    while(scrollContainer){
        if (scrollContainer.scrollHeight > scrollContainer.clientHeight || scrollContainer.scrollWidth > scrollContainer.clientWidth) {
            // Calculate the element's offset relative to the scrollable parent
            var containerRect = scrollContainer.getBoundingClientRect();
            elY = rect.top - containerRect.top + rect.height / 2;
            break;
        }
        scrollContainer = scrollContainer.parentNode;
    }
    if (scrollContainer) scrollContainer.scrollBy({
        left: 0,
        top: elY - scrollContainer.clientHeight / 2,
        behavior: "smooth"
    });
    else // If no scrollable parent is found, scroll the document body
    document.body.scrollBy({
        left: 0,
        top: elY - window.innerHeight / 2,
        behavior: "smooth"
    });
}
document.addEventListener("DOMContentLoaded", function(e) {
    /////////////////
    ///NAVIGATION
    /////////////////
    var nav = function nav(move) {
        if (document.activeElement.nodeName == "SELECT" || document.activeElement.type == "date" || document.activeElement.type == "time") return false;
        if (document.activeElement.classList.contains("scroll")) {
            var scrollableElement = document.querySelector(".scroll");
            if (move == 1) scrollableElement.scrollBy({
                left: 0,
                top: 10
            });
            else scrollableElement.scrollBy({
                left: 0,
                top: -10
            });
        }
        var currentIndex = document.activeElement.tabIndex;
        var next = currentIndex + move;
        var items = 0;
        items = document.getElementById("app").querySelectorAll(".item");
        if (document.activeElement.parentNode.classList.contains("input-parent")) {
            document.activeElement.parentNode.focus();
            return true;
        }
        var targetElement = 0;
        if (next <= items.length) {
            targetElement = items[next];
            targetElement.focus();
        }
        if (next >= items.length) {
            targetElement = items[0];
            targetElement.focus();
        }
        $17d11d58618cc814$var$scrollToCenter();
    };
    // Add click listeners to simulate key events
    document.querySelector("div.button-left").addEventListener("click", function(event) {
        simulateKeyPress("SoftLeft");
    });
    document.querySelector("div.button-right").addEventListener("click", function(event) {
        simulateKeyPress("SoftRight");
    });
    document.querySelector("div.button-center").addEventListener("click", function(event) {
        simulateKeyPress("Enter");
    });
    //top bar
    document.querySelector("#top-bar div div.button-right").addEventListener("click", function(event) {
        simulateKeyPress("Backspace");
    });
    document.querySelector("#top-bar div div.button-left").addEventListener("click", function(event) {
        simulateKeyPress("*");
    });
    // Function to simulate key press events
    function simulateKeyPress(k) {
        shortpress_action({
            key: k
        });
    }
    // Add an event listener for keydown events
    document.addEventListener("keydown", function(event) {
        handleKeyDown(event);
    });
    // Add an event listener for keydown events
    document.addEventListener("keyup", function(event) {
        handleKeyUp(event);
    });
    // ////////////////////////////
    // //KEYPAD HANDLER////////////
    // ////////////////////////////
    var longpress = false;
    var longpress_timespan = 2000;
    var timeout;
    function repeat_action(param) {
        param.key;
    }
    //////////////
    ////LONGPRESS
    /////////////
    function longpress_action(param) {
        var route = (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.get();
        switch(param.key){
            case "Backspace":
                window.close();
                break;
            case "Enter":
                break;
        }
    }
    // /////////////
    // //SHORTPRESS
    // ////////////
    function shortpress_action(param) {
        var r = (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.get();
        switch(param.key){
            case "ArrowRight":
                if (r.startsWith("/start")) {
                    $17d11d58618cc814$var$counter++;
                    if ($17d11d58618cc814$var$counter > $17d11d58618cc814$var$channels.length) $17d11d58618cc814$var$counter = 0;
                    console.log($17d11d58618cc814$var$channels[$17d11d58618cc814$var$counter]);
                    // Update or set the 'channel' parameter
                    $17d11d58618cc814$var$channel_filter = $17d11d58618cc814$var$channels[$17d11d58618cc814$var$counter];
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).redraw();
                    var currentParams = (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.param(); // Get the current parameters
                    currentParams.index = 0; // Modify the `index` parameter
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/start", currentParams); // Update the route with the new parameters
                }
                break;
            case "ArrowLeft":
                if (r.startsWith("/start")) {
                    $17d11d58618cc814$var$counter--;
                    if ($17d11d58618cc814$var$counter < 1) $17d11d58618cc814$var$counter = $17d11d58618cc814$var$channels.length;
                    console.log($17d11d58618cc814$var$channels[$17d11d58618cc814$var$counter]);
                    // Update or set the 'channel' parameter
                    $17d11d58618cc814$var$channel_filter = $17d11d58618cc814$var$channels[$17d11d58618cc814$var$counter];
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).redraw();
                    // Update the route with the new parameter, preserving the rest
                    var currentParams1 = (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.param(); // Get the current parameters
                    currentParams1.index = 0; // Modify the `index` parameter
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/start", currentParams1); // Update the route with the new parameters
                }
                break;
            case "ArrowUp":
                nav(-1);
                break;
            case "ArrowDown":
                nav(1);
                break;
            case "SoftRight":
            case "Alt":
                if (r.startsWith("/start")) (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/settingsView");
                break;
            case "SoftLeft":
            case "Control":
                if (r.startsWith("/start")) (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/index");
                if (r.startsWith("/article")) window.open($17d11d58618cc814$var$current_article.url);
                break;
            case "Enter":
                if (r.startsWith("/article")) {
                    if ($17d11d58618cc814$var$current_article.type == "audio") (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/AudioPlayerView?url=".concat(encodeURIComponent($17d11d58618cc814$var$current_article.enclosure.url)));
                    if ($17d11d58618cc814$var$current_article.type == "video") (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/videoPlayerView?url=".concat(encodeURIComponent($17d11d58618cc814$var$current_article.enclosure.url)));
                }
                break;
            case "*":
                (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/AudioPlayerView");
                break;
            case "Backspace":
                if (r.startsWith("/article")) history.back();
                if (r.startsWith("/index")) (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/start?index=0");
                if (r.startsWith("/settingsView")) {
                    if (document.activeElement.tagName == "INPUT") return false;
                    (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.set("/start?index=0");
                }
                if (r.startsWith("/Video")) history.back();
                if (r.startsWith("/Audio")) history.back(); // Navigate back in history
                break;
        }
    }
    // ///////////////////////////////
    // //shortpress / longpress logic
    // //////////////////////////////
    function handleKeyDown(evt) {
        var route = (0, (/*@__PURE__*/$parcel$interopDefault($fa8308bd2c5b6d7e$exports))).route.get();
        if (evt.key === "EndCall") {
            evt.preventDefault();
            if ($17d11d58618cc814$export$471f7ae5c4103ae1.action == "") {
                closeAllConnections();
                peer.destroy();
                window.close();
            }
        }
        if (!evt.repeat) {
            longpress = false;
            timeout = setTimeout(function() {
                longpress = true;
                longpress_action(evt);
            }, longpress_timespan);
        }
        if (evt.repeat) {
            if (evt.key == "Backspace") longpress = false;
            repeat_action(evt);
        }
    }
    function handleKeyUp(evt) {
        $17d11d58618cc814$export$471f7ae5c4103ae1.audio_recording;
        if ($17d11d58618cc814$export$471f7ae5c4103ae1.visibility === false) return false;
        clearTimeout(timeout);
        if (!longpress) shortpress_action(evt);
    }
    document.addEventListener("visibilitychange", function() {
        if (document.visibilityState === "visible") $17d11d58618cc814$export$471f7ae5c4103ae1.visibility = true;
        else $17d11d58618cc814$export$471f7ae5c4103ae1.visibility = false;
    });
});
window.addEventListener("online", function() {
    $17d11d58618cc814$export$471f7ae5c4103ae1.deviceOnline = true;
});
window.addEventListener("offline", function() {
    $17d11d58618cc814$export$471f7ae5c4103ae1.deviceOnline = false;
});
var $3f7e6d0ea15d15be$exports = {};

$3f7e6d0ea15d15be$exports = (parcelRequire("xqsiy")).getBundleURL("2D5Ur") + "sw.js";


//webActivity KaiOS 3
try {
    navigator.serviceWorker.register($3f7e6d0ea15d15be$exports).then(function(registration) {
        registration.waiting;
        registration.systemMessageManager.subscribe("activity").then(function(rv) {
            console.log(rv);
        }, function(error) {
            console.log(error);
        });
    });
} catch (e) {
    console.log(e);
}

})();
