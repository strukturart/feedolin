import localforage from "localforage";

const channel = new BroadcastChannel("sw-messages");

//KaiOS 3 open app
self.onsystemmessage = (evt) => {
  const serviceHandler = () => {
    if (evt.name === "activity") {
      handler = evt.data.webActivityRequestHandler();

      if (handler.source.name == "flop") {
        localforage
          .setItem("connect_to_id", handler.source.data)
          .then((e) => {});

        self.clients.openWindow("index.html");
      }
    }
  };
  evt.waitUntil(serviceHandler());
};
channel.postMessage("intervalTriggered");
/*
const CACHE_NAME = "parcel-cache-v1";
const dynamicCacheName = "parcel-dynamic-cache";

// Essential files that don't change (optional)
const urlsToCache = [
  "/", // Home page or any static files
  "/index.html",
];

// Install Service Worker and pre-cache essential files
self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(urlsToCache);
    })
  );
});

// Activate Service Worker and clean up old caches
self.addEventListener("activate", (event) => {
  const cacheWhitelist = [CACHE_NAME, dynamicCacheName];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (!cacheWhitelist.includes(cacheName)) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

// Dynamically cache files generated by Parcel (JS, CSS, assets)
self.addEventListener("fetch", (event) => {
  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      if (cachedResponse) {
        return cachedResponse; // Return cached file
      }

      return fetch(event.request).then((networkResponse) => {
        // Dynamically cache Parcel-generated files (JS, CSS, assets)
        const clonedResponse = networkResponse.clone();
        if (event.request.url.match(/\.(js|css)$/)) {
          caches.open(dynamicCacheName).then((cache) => {
            cache.put(event.request, clonedResponse); // Cache the file dynamically
          });
        }
        return networkResponse;
      });
    })
  );
});
*/
